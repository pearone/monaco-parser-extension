// Generated from HiveParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import HiveParserListener from './HiveParserListener.js';
import HiveParserVisitor from './HiveParserVisitor.js';

const serializedATN = [4,1,375,4078,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,1,0,1,0,1,0,
5,0,742,8,0,10,0,12,0,745,9,0,1,0,1,0,1,1,1,1,3,1,751,8,1,1,2,1,2,3,2,755,
8,2,1,3,1,3,5,3,759,8,3,10,3,12,3,762,9,3,1,3,1,3,1,3,3,3,767,8,3,1,4,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,778,8,4,1,4,3,4,781,8,4,3,4,783,8,4,1,
5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,801,8,
7,1,8,1,8,1,8,3,8,806,8,8,1,8,1,8,1,8,3,8,811,8,8,1,8,1,8,1,8,1,8,3,8,817,
8,8,1,9,1,9,3,9,821,8,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
3,10,834,8,10,1,11,1,11,3,11,838,8,11,1,11,1,11,3,11,842,8,11,1,11,1,11,
1,11,3,11,847,8,11,1,12,1,12,1,12,1,12,1,12,3,12,854,8,12,1,12,1,12,1,12,
1,12,3,12,860,8,12,1,12,1,12,3,12,864,8,12,3,12,866,8,12,1,12,1,12,3,12,
870,8,12,1,13,1,13,1,13,1,13,1,13,3,13,877,8,13,3,13,879,8,13,1,13,1,13,
1,13,1,13,3,13,885,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,894,8,15,
10,15,12,15,897,9,15,1,16,1,16,1,16,1,16,1,16,3,16,904,8,16,1,16,1,16,3,
16,908,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
950,8,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,3,25,977,8,25,
1,25,1,25,3,25,981,8,25,1,25,3,25,984,8,25,1,25,1,25,1,25,3,25,989,8,25,
1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,5,28,1001,8,28,10,28,12,
28,1004,9,28,1,29,1,29,1,29,1,30,1,30,1,30,3,30,1012,8,30,1,30,1,30,3,30,
1016,8,30,1,31,1,31,1,31,1,32,1,32,3,32,1023,8,32,1,32,3,32,1026,8,32,1,
32,1,32,3,32,1030,8,32,1,32,1,32,1,32,1,32,3,32,1036,8,32,1,32,3,32,1039,
8,32,1,32,3,32,1042,8,32,1,32,3,32,1045,8,32,1,32,1,32,1,32,1,32,3,32,1051,
8,32,1,32,3,32,1054,8,32,1,32,3,32,1057,8,32,1,32,3,32,1060,8,32,1,32,3,
32,1063,8,32,1,32,3,32,1066,8,32,1,32,3,32,1069,8,32,1,32,3,32,1072,8,32,
1,32,3,32,1075,8,32,1,32,1,32,3,32,1079,8,32,3,32,1081,8,32,1,33,1,33,1,
33,1,33,1,33,1,33,1,33,1,33,3,33,1091,8,33,1,34,1,34,1,34,3,34,1096,8,34,
1,34,1,34,3,34,1100,8,34,1,34,3,34,1103,8,34,1,35,1,35,1,35,1,35,1,35,1,
35,1,35,1,35,1,35,3,35,1114,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,1,35,3,35,1130,8,35,1,36,1,36,1,36,1,36,1,36,1,
36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1145,8,36,1,36,1,36,3,36,1149,
8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
37,1164,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,3,39,
1177,8,39,1,40,1,40,3,40,1181,8,40,1,41,1,41,1,41,3,41,1186,8,41,1,42,1,
42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,
1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1213,8,46,1,47,1,47,1,
47,3,47,1218,8,47,1,48,1,48,1,48,1,48,1,49,1,49,3,49,1226,8,49,1,49,1,49,
1,49,1,49,3,49,1232,8,49,1,49,1,49,3,49,1236,8,49,1,49,3,49,1239,8,49,1,
49,3,49,1242,8,49,1,50,1,50,1,50,1,50,3,50,1248,8,50,1,50,1,50,1,50,1,50,
1,50,3,50,1255,8,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,3,52,1265,8,
52,1,53,1,53,3,53,1269,8,53,1,53,4,53,1272,8,53,11,53,12,53,1273,1,54,1,
54,3,54,1278,8,54,1,55,1,55,5,55,1282,8,55,10,55,12,55,1285,9,55,1,56,1,
56,5,56,1289,8,56,10,56,12,56,1292,9,56,1,57,1,57,5,57,1296,8,57,10,57,12,
57,1299,9,57,1,58,1,58,1,58,1,59,1,59,3,59,1306,8,59,1,59,1,59,1,59,5,59,
1311,8,59,10,59,12,59,1314,9,59,1,59,3,59,1317,8,59,1,59,3,59,1320,8,59,
1,60,1,60,1,60,1,60,1,60,1,60,3,60,1328,8,60,1,60,3,60,1331,8,60,1,61,1,
61,1,61,1,61,1,61,1,61,3,61,1339,8,61,1,61,3,61,1342,8,61,1,62,1,62,3,62,
1346,8,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1356,8,64,1,64,1,
64,1,64,3,64,1361,8,64,1,65,1,65,1,65,1,65,3,65,1367,8,65,1,65,1,65,1,66,
1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,1380,8,67,1,68,1,68,1,68,1,
68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,5,70,1394,8,70,10,70,12,70,1397,
9,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,3,
73,1412,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,
1,76,1,76,3,76,1428,8,76,1,76,1,76,1,76,1,76,1,76,3,76,1435,8,76,1,77,1,
77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,3,79,1455,8,79,1,79,1,79,3,79,1459,8,79,1,79,1,79,1,79,3,79,1464,
8,79,1,79,1,79,1,79,3,79,1469,8,79,1,79,3,79,1472,8,79,1,79,3,79,1475,8,
79,1,79,1,79,3,79,1479,8,79,1,79,3,79,1482,8,79,1,79,3,79,1485,8,79,1,80,
1,80,1,80,5,80,1490,8,80,10,80,12,80,1493,9,80,1,81,1,81,1,81,1,81,1,81,
1,81,1,82,1,82,3,82,1503,8,82,1,83,1,83,1,83,1,84,1,84,1,84,3,84,1511,8,
84,1,84,1,84,1,84,1,84,3,84,1517,8,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,
1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1533,8,86,1,86,3,86,1536,8,86,1,
87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,3,88,1546,8,88,1,88,1,88,1,88,1,88,
1,88,1,88,3,88,1554,8,88,5,88,1556,8,88,10,88,12,88,1559,9,88,3,88,1561,
8,88,1,89,1,89,3,89,1565,8,89,1,90,1,90,3,90,1569,8,90,1,90,3,90,1572,8,
90,1,91,1,91,1,91,3,91,1577,8,91,1,91,1,91,1,91,3,91,1582,8,91,1,91,1,91,
1,91,1,91,3,91,1588,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,
92,1599,8,92,3,92,1601,8,92,1,92,1,92,3,92,1605,8,92,1,93,1,93,1,93,1,93,
3,93,1611,8,93,1,93,1,93,1,93,1,93,3,93,1617,8,93,1,93,1,93,1,93,3,93,1622,
8,93,1,93,1,93,1,93,1,93,3,93,1628,8,93,1,93,1,93,1,93,3,93,1633,8,93,1,
93,1,93,1,93,1,93,1,93,3,93,1640,8,93,1,93,1,93,1,93,3,93,1645,8,93,1,93,
1,93,1,93,1,93,1,93,1,93,3,93,1653,8,93,1,93,1,93,1,93,3,93,1658,8,93,1,
93,1,93,1,93,1,93,1,93,3,93,1665,8,93,1,93,1,93,1,93,1,93,3,93,1671,8,93,
1,93,1,93,1,93,1,93,1,93,1,93,3,93,1679,8,93,1,93,1,93,1,93,1,93,1,93,3,
93,1686,8,93,1,93,1,93,1,93,3,93,1691,8,93,1,93,1,93,1,93,1,93,1,93,1,93,
3,93,1699,8,93,1,93,1,93,1,93,1,93,1,93,3,93,1706,8,93,1,93,3,93,1709,8,
93,1,93,3,93,1712,8,93,3,93,1714,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
1,93,1,93,1,93,1,93,1,93,3,93,1728,8,93,3,93,1730,8,93,1,94,1,94,1,94,1,
94,3,94,1736,8,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,97,1,97,
1,97,1,97,3,97,1751,8,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,
100,1,100,1,100,1,101,1,101,1,101,3,101,1768,8,101,1,101,1,101,1,101,3,101,
1773,8,101,1,102,1,102,3,102,1777,8,102,1,102,1,102,3,102,1781,8,102,1,102,
1,102,1,102,1,103,1,103,3,103,1788,8,103,1,103,1,103,1,103,5,103,1793,8,
103,10,103,12,103,1796,9,103,1,103,1,103,1,103,3,103,1801,8,103,1,104,1,
104,3,104,1805,8,104,1,104,3,104,1808,8,104,1,104,1,104,1,104,5,104,1813,
8,104,10,104,12,104,1816,9,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,
1,105,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,
1,108,3,108,1838,8,108,1,109,1,109,1,109,3,109,1843,8,109,1,109,1,109,3,
109,1847,8,109,1,110,1,110,1,110,1,110,1,111,1,111,3,111,1855,8,111,1,112,
1,112,1,112,1,113,1,113,1,113,3,113,1863,8,113,1,113,1,113,3,113,1867,8,
113,1,113,1,113,1,113,1,113,3,113,1873,8,113,1,114,1,114,1,114,3,114,1878,
8,114,1,114,1,114,1,114,1,114,1,114,3,114,1885,8,114,1,114,3,114,1888,8,
114,1,114,1,114,1,114,1,114,3,114,1894,8,114,1,115,1,115,1,115,5,115,1899,
8,115,10,115,12,115,1902,9,115,1,116,1,116,1,116,1,116,1,116,3,116,1909,
8,116,1,117,1,117,1,118,1,118,1,118,5,118,1916,8,118,10,118,12,118,1919,
9,118,1,119,1,119,1,119,1,119,1,119,1,119,3,119,1927,8,119,1,120,1,120,1,
120,1,120,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,1,123,1,
123,1,123,1,124,1,124,3,124,1947,8,124,1,124,1,124,1,124,1,124,3,124,1953,
8,124,1,124,3,124,1956,8,124,3,124,1958,8,124,1,125,1,125,1,125,5,125,1963,
8,125,10,125,12,125,1966,9,125,1,126,1,126,1,126,1,127,1,127,1,128,1,128,
3,128,1975,8,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1983,8,128,1,
129,1,129,3,129,1987,8,129,1,129,1,129,3,129,1991,8,129,1,129,1,129,1,130,
1,130,1,130,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2004,8,131,1,131,1,
131,1,131,1,132,1,132,1,132,1,132,3,132,2013,8,132,1,132,1,132,1,133,1,133,
3,133,2019,8,133,1,133,1,133,3,133,2023,8,133,1,133,1,133,1,133,1,133,1,
133,3,133,2030,8,133,1,133,3,133,2033,8,133,1,133,3,133,2036,8,133,1,133,
3,133,2039,8,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,3,134,2048,8,
134,1,134,1,134,3,134,2052,8,134,1,134,3,134,2055,8,134,1,134,3,134,2058,
8,134,1,134,3,134,2061,8,134,1,134,3,134,2064,8,134,1,134,3,134,2067,8,134,
1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,
3,136,2081,8,136,1,136,1,136,1,137,1,137,1,137,1,137,3,137,2089,8,137,1,
137,1,137,1,138,1,138,3,138,2095,8,138,1,139,1,139,3,139,2099,8,139,1,140,
1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,141,5,141,2110,8,141,10,141,
12,141,2113,9,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
1,142,1,142,1,142,1,142,3,142,2128,8,142,1,142,1,142,1,142,1,142,1,143,1,
143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2144,8,143,1,144,
1,144,3,144,2148,8,144,1,145,1,145,1,145,1,146,1,146,1,146,1,147,1,147,1,
147,1,147,1,147,1,147,1,147,3,147,2163,8,147,1,148,1,148,1,148,1,148,3,148,
2169,8,148,1,148,3,148,2172,8,148,1,148,3,148,2175,8,148,1,148,3,148,2178,
8,148,1,148,3,148,2181,8,148,1,149,1,149,3,149,2185,8,149,1,150,1,150,1,
150,1,151,1,151,1,151,1,151,1,152,1,152,1,152,5,152,2197,8,152,10,152,12,
152,2200,9,152,1,152,1,152,1,152,5,152,2205,8,152,10,152,12,152,2208,9,152,
3,152,2210,8,152,1,153,1,153,1,153,1,153,1,154,1,154,1,155,1,155,1,155,1,
155,1,155,1,155,1,155,3,155,2225,8,155,1,156,1,156,1,156,1,156,1,156,1,156,
1,157,1,157,1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,159,
1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
1,160,1,160,3,160,2259,8,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,2267,
8,160,1,160,1,160,1,160,3,160,2272,8,160,1,161,1,161,1,161,1,162,1,162,1,
162,5,162,2280,8,162,10,162,12,162,2283,9,162,1,163,1,163,1,163,5,163,2288,
8,163,10,163,12,163,2291,9,163,1,164,1,164,1,164,5,164,2296,8,164,10,164,
12,164,2299,9,164,1,165,1,165,1,165,5,165,2304,8,165,10,165,12,165,2307,
9,165,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,3,167,2317,8,167,5,
167,2319,8,167,10,167,12,167,2322,9,167,1,168,1,168,1,168,5,168,2327,8,168,
10,168,12,168,2330,9,168,1,169,1,169,1,169,1,169,1,170,1,170,3,170,2338,
8,170,1,170,3,170,2341,8,170,1,171,1,171,1,172,1,172,1,173,1,173,1,173,3,
173,2350,8,173,1,174,1,174,3,174,2354,8,174,3,174,2356,8,174,1,175,1,175,
3,175,2360,8,175,1,175,1,175,3,175,2364,8,175,1,176,1,176,1,176,1,176,3,
176,2370,8,176,1,177,1,177,1,177,1,178,1,178,3,178,2377,8,178,1,178,1,178,
1,178,1,178,1,178,1,178,1,178,3,178,2386,8,178,1,179,1,179,1,179,1,179,1,
179,1,179,1,179,1,179,1,179,3,179,2397,8,179,1,180,1,180,3,180,2401,8,180,
1,181,1,181,1,181,5,181,2406,8,181,10,181,12,181,2409,9,181,1,182,1,182,
1,182,1,182,1,183,1,183,1,183,5,183,2418,8,183,10,183,12,183,2421,9,183,
1,184,1,184,1,185,1,185,3,185,2427,8,185,1,186,1,186,1,187,1,187,1,187,1,
187,3,187,2435,8,187,1,188,1,188,3,188,2439,8,188,1,188,3,188,2442,8,188,
1,189,1,189,1,189,5,189,2447,8,189,10,189,12,189,2450,9,189,1,190,1,190,
1,190,3,190,2455,8,190,1,191,1,191,3,191,2459,8,191,1,191,3,191,2462,8,191,
1,192,1,192,1,192,1,192,3,192,2468,8,192,1,193,1,193,3,193,2472,8,193,1,
194,1,194,3,194,2476,8,194,1,195,1,195,1,195,3,195,2481,8,195,1,195,1,195,
3,195,2485,8,195,1,196,1,196,3,196,2489,8,196,1,197,1,197,3,197,2493,8,197,
1,197,1,197,1,197,1,197,1,197,1,197,3,197,2501,8,197,1,198,1,198,3,198,2505,
8,198,1,198,1,198,3,198,2509,8,198,1,199,1,199,3,199,2513,8,199,1,200,1,
200,3,200,2517,8,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,2525,8,200,
1,201,1,201,3,201,2529,8,201,1,201,1,201,3,201,2533,8,201,1,202,1,202,1,
202,1,203,1,203,1,203,1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,205,3,
205,2549,8,205,1,206,1,206,1,207,1,207,1,207,5,207,2556,8,207,10,207,12,
207,2559,9,207,1,208,1,208,1,208,1,208,1,208,3,208,2566,8,208,1,209,1,209,
1,209,1,209,1,209,1,209,1,209,1,209,3,209,2576,8,209,1,209,1,209,1,209,1,
209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,
209,3,209,2594,8,209,1,209,3,209,2597,8,209,1,209,1,209,1,209,1,209,1,209,
1,209,1,209,1,209,3,209,2607,8,209,1,210,1,210,1,210,1,210,1,210,1,211,1,
211,1,211,1,211,1,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,213,1,
213,1,213,1,213,1,213,1,214,1,214,1,214,1,214,3,214,2635,8,214,1,214,1,214,
1,214,1,214,3,214,2641,8,214,1,214,1,214,1,214,1,214,3,214,2647,8,214,1,
214,1,214,1,214,1,214,3,214,2653,8,214,3,214,2655,8,214,1,215,3,215,2658,
8,215,1,215,1,215,1,216,1,216,3,216,2664,8,216,1,217,1,217,1,217,1,217,5,
217,2670,8,217,10,217,12,217,2673,9,217,1,218,1,218,1,218,1,218,1,218,1,
218,1,219,1,219,1,219,1,219,5,219,2685,8,219,10,219,12,219,2688,9,219,1,
220,1,220,4,220,2692,8,220,11,220,12,220,2693,1,221,1,221,1,221,3,221,2699,
8,221,1,221,3,221,2702,8,221,1,222,1,222,3,222,2706,8,222,1,222,3,222,2709,
8,222,1,222,3,222,2712,8,222,1,222,3,222,2715,8,222,1,222,3,222,2718,8,222,
1,222,1,222,1,222,1,222,3,222,2724,8,222,1,223,1,223,3,223,2728,8,223,1,
223,3,223,2731,8,223,1,223,3,223,2734,8,223,1,223,3,223,2737,8,223,1,223,
3,223,2740,8,223,1,223,3,223,2743,8,223,1,224,1,224,1,224,4,224,2748,8,224,
11,224,12,224,2749,1,225,3,225,2753,8,225,1,225,1,225,1,226,1,226,1,226,
3,226,2760,8,226,1,226,3,226,2763,8,226,1,226,3,226,2766,8,226,1,226,3,226,
2769,8,226,1,226,3,226,2772,8,226,1,226,3,226,2775,8,226,1,226,3,226,2778,
8,226,1,226,3,226,2781,8,226,1,226,3,226,2784,8,226,1,226,3,226,2787,8,226,
1,226,1,226,3,226,2791,8,226,1,226,3,226,2794,8,226,1,226,3,226,2797,8,226,
1,226,3,226,2800,8,226,1,226,3,226,2803,8,226,1,226,3,226,2806,8,226,1,226,
3,226,2809,8,226,1,226,3,226,2812,8,226,1,226,3,226,2815,8,226,1,226,3,226,
2818,8,226,3,226,2820,8,226,1,227,1,227,1,227,1,227,3,227,2826,8,227,1,227,
1,227,1,227,3,227,2831,8,227,1,227,1,227,1,227,1,227,1,227,3,227,2838,8,
227,3,227,2840,8,227,1,228,3,228,2843,8,228,1,228,1,228,1,228,3,228,2848,
8,228,1,228,3,228,2851,8,228,1,228,1,228,3,228,2855,8,228,1,229,1,229,1,
229,3,229,2860,8,229,1,229,1,229,1,229,1,229,1,229,3,229,2867,8,229,1,230,
1,230,1,230,1,230,3,230,2873,8,230,1,231,1,231,1,231,1,231,1,232,1,232,1,
232,1,232,5,232,2883,8,232,10,232,12,232,2886,9,232,1,233,1,233,1,233,1,
233,3,233,2892,8,233,1,234,1,234,1,234,1,234,3,234,2898,8,234,1,235,1,235,
1,235,1,235,1,235,5,235,2905,8,235,10,235,12,235,2908,9,235,3,235,2910,8,
235,1,236,1,236,3,236,2914,8,236,1,237,1,237,1,237,1,237,3,237,2920,8,237,
1,238,1,238,1,238,1,238,1,239,1,239,1,240,1,240,3,240,2930,8,240,1,241,1,
241,3,241,2934,8,241,1,242,1,242,1,242,1,242,1,243,1,243,1,243,4,243,2943,
8,243,11,243,12,243,2944,1,244,1,244,1,244,1,244,3,244,2951,8,244,1,244,
3,244,2954,8,244,1,244,1,244,1,244,1,244,1,244,1,244,1,245,1,245,5,245,2964,
8,245,10,245,12,245,2967,9,245,1,245,3,245,2970,8,245,1,246,1,246,1,246,
1,246,1,246,3,246,2977,8,246,1,246,1,246,1,246,1,246,1,246,1,247,1,247,1,
247,1,247,1,247,1,247,1,247,1,248,1,248,1,248,1,248,1,248,1,249,1,249,1,
249,3,249,2999,8,249,1,250,1,250,1,250,4,250,3004,8,250,11,250,12,250,3005,
1,251,1,251,3,251,3010,8,251,1,251,3,251,3013,8,251,1,251,1,251,1,251,3,
251,3018,8,251,1,251,3,251,3021,8,251,1,252,1,252,1,252,5,252,3026,8,252,
10,252,12,252,3029,9,252,1,253,1,253,1,253,1,253,3,253,3035,8,253,1,253,
3,253,3038,8,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,3046,8,253,1,
253,1,253,1,253,1,253,3,253,3052,8,253,3,253,3054,8,253,3,253,3056,8,253,
1,253,3,253,3059,8,253,1,253,3,253,3062,8,253,1,254,1,254,1,254,3,254,3067,
8,254,1,254,1,254,1,254,1,254,1,254,1,254,5,254,3075,8,254,10,254,12,254,
3078,9,254,1,254,1,254,3,254,3082,8,254,3,254,3084,8,254,1,255,1,255,1,255,
1,255,3,255,3090,8,255,1,255,3,255,3093,8,255,1,255,3,255,3096,8,255,1,255,
1,255,1,255,1,255,1,255,1,255,3,255,3104,8,255,1,255,1,255,1,255,1,255,3,
255,3110,8,255,3,255,3112,8,255,3,255,3114,8,255,1,255,3,255,3117,8,255,
1,255,3,255,3120,8,255,1,256,1,256,3,256,3124,8,256,1,257,1,257,1,257,5,
257,3129,8,257,10,257,12,257,3132,9,257,1,258,1,258,1,258,1,258,5,258,3138,
8,258,10,258,12,258,3141,9,258,1,259,1,259,1,259,1,259,1,260,1,260,1,260,
3,260,3150,8,260,1,260,3,260,3153,8,260,1,260,3,260,3156,8,260,1,260,3,260,
3159,8,260,1,261,1,261,3,261,3163,8,261,1,262,1,262,1,262,1,262,1,262,1,
262,1,262,1,262,3,262,3173,8,262,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
1,263,3,263,3183,8,263,1,264,1,264,1,264,1,264,1,264,1,264,3,264,3191,8,
264,1,265,1,265,1,265,1,265,1,265,1,265,3,265,3199,8,265,1,266,1,266,1,266,
1,266,1,266,3,266,3206,8,266,1,267,1,267,1,268,1,268,1,268,5,268,3213,8,
268,10,268,12,268,3216,9,268,1,269,1,269,1,269,5,269,3221,8,269,10,269,12,
269,3224,9,269,1,270,1,270,1,270,1,271,1,271,1,271,1,271,4,271,3233,8,271,
11,271,12,271,3234,1,271,3,271,3238,8,271,1,272,1,272,5,272,3242,8,272,10,
272,12,272,3245,9,272,1,272,1,272,5,272,3249,8,272,10,272,12,272,3252,9,
272,1,272,1,272,5,272,3256,8,272,10,272,12,272,3259,9,272,1,272,1,272,5,
272,3263,8,272,10,272,12,272,3266,9,272,1,272,1,272,1,272,1,272,3,272,3272,
8,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,3,273,3281,8,273,5,273,3283,
8,273,10,273,12,273,3286,9,273,1,274,1,274,1,274,1,274,3,274,3292,8,274,
1,274,5,274,3295,8,274,10,274,12,274,3298,9,274,1,275,3,275,3301,8,275,1,
275,1,275,1,275,1,276,1,276,1,276,1,276,1,277,1,277,1,278,1,278,1,278,1,
278,1,278,1,278,1,278,1,278,3,278,3320,8,278,1,278,1,278,1,278,3,278,3325,
8,278,1,278,1,278,1,278,3,278,3330,8,278,1,278,1,278,1,278,1,278,3,278,3336,
8,278,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,5,279,3347,8,
279,10,279,12,279,3350,9,279,3,279,3352,8,279,1,279,3,279,3355,8,279,1,279,
1,279,1,279,1,279,1,279,1,279,1,279,1,279,5,279,3365,8,279,10,279,12,279,
3368,9,279,3,279,3370,8,279,1,279,3,279,3373,8,279,1,279,1,279,1,279,1,279,
1,279,1,279,3,279,3381,8,279,1,279,1,279,1,279,1,279,1,279,5,279,3388,8,
279,10,279,12,279,3391,9,279,1,279,1,279,3,279,3395,8,279,3,279,3397,8,279,
1,280,1,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,5,281,3412,8,281,10,281,12,281,3415,9,281,3,281,3417,8,281,1,281,1,
281,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,3,282,3430,8,282,
1,283,1,283,3,283,3434,8,283,1,284,1,284,3,284,3438,8,284,1,284,3,284,3441,
8,284,1,284,3,284,3444,8,284,1,284,3,284,3447,8,284,1,285,1,285,3,285,3451,
8,285,1,285,3,285,3454,8,285,1,285,3,285,3457,8,285,1,286,1,286,1,286,1,
286,1,286,3,286,3464,8,286,1,287,1,287,1,287,3,287,3469,8,287,1,287,1,287,
1,288,1,288,1,288,1,288,3,288,3477,8,288,1,288,1,288,1,289,1,289,3,289,3483,
8,289,1,289,1,289,1,289,3,289,3488,8,289,1,289,1,289,3,289,3492,8,289,1,
290,1,290,1,290,3,290,3497,8,290,1,291,1,291,1,291,1,291,1,291,3,291,3504,
8,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,5,291,
3516,8,291,10,291,12,291,3519,9,291,3,291,3521,8,291,1,291,1,291,3,291,3525,
8,291,1,292,1,292,1,292,1,293,1,293,1,294,1,294,1,294,1,295,1,295,1,295,
5,295,3538,8,295,10,295,12,295,3541,9,295,1,296,1,296,1,297,1,297,1,297,
1,297,1,297,3,297,3550,8,297,1,297,1,297,1,297,1,297,1,297,5,297,3557,8,
297,10,297,12,297,3560,9,297,3,297,3562,8,297,1,297,1,297,1,298,1,298,1,
298,1,298,1,299,1,299,1,299,3,299,3573,8,299,1,300,1,300,1,300,1,301,1,301,
1,301,1,301,1,301,5,301,3583,8,301,10,301,12,301,3586,9,301,1,301,1,301,
1,302,1,302,1,302,1,302,1,302,3,302,3595,8,302,1,302,1,302,1,302,1,302,1,
302,1,302,5,302,3603,8,302,10,302,12,302,3606,9,302,1,302,1,302,3,302,3610,
8,302,1,303,1,303,3,303,3614,8,303,1,304,1,304,3,304,3618,8,304,1,304,1,
304,5,304,3622,8,304,10,304,12,304,3625,9,304,1,304,1,304,1,305,1,305,1,
306,1,306,1,306,1,307,1,307,1,308,1,308,1,308,1,308,1,309,1,309,3,309,3642,
8,309,1,310,1,310,4,310,3646,8,310,11,310,12,310,3647,1,311,1,311,3,311,
3652,8,311,1,312,1,312,1,312,1,312,5,312,3658,8,312,10,312,12,312,3661,9,
312,1,312,1,312,1,313,1,313,1,313,5,313,3668,8,313,10,313,12,313,3671,9,
313,1,314,1,314,1,314,1,314,1,314,5,314,3678,8,314,10,314,12,314,3681,9,
314,1,315,1,315,1,315,1,315,1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,
317,1,318,1,318,1,318,1,318,3,318,3699,8,318,1,319,1,319,1,319,1,319,3,319,
3705,8,319,1,319,1,319,1,319,5,319,3710,8,319,10,319,12,319,3713,9,319,3,
319,3715,8,319,3,319,3717,8,319,1,319,1,319,1,319,3,319,3722,8,319,1,320,
1,320,3,320,3726,8,320,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,322,1,
322,1,322,1,322,1,322,1,322,1,322,4,322,3742,8,322,11,322,12,322,3743,1,
322,1,322,3,322,3748,8,322,1,322,1,322,1,323,1,323,1,323,1,323,1,323,1,323,
4,323,3758,8,323,11,323,12,323,3759,1,323,1,323,3,323,3764,8,323,1,323,1,
323,1,324,1,324,1,324,1,324,1,324,3,324,3773,8,324,1,324,1,324,1,325,1,325,
1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,327,1,327,1,328,1,328,1,328,
1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,3800,8,328,1,
329,1,329,4,329,3804,8,329,11,329,12,329,3805,1,330,1,330,1,330,1,331,1,
331,1,331,3,331,3814,8,331,1,332,1,332,1,332,3,332,3819,8,332,1,333,1,333,
1,333,1,334,1,334,1,335,1,335,1,335,1,336,1,336,1,336,1,336,1,336,1,336,
1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,3844,8,336,1,
337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,3,
337,3858,8,337,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
1,338,3,338,3871,8,338,1,339,1,339,1,340,3,340,3876,8,340,1,340,1,340,1,
340,1,340,1,340,3,340,3883,8,340,1,341,1,341,1,342,1,342,1,343,1,343,1,344,
1,344,1,345,1,345,1,346,1,346,1,347,1,347,1,348,1,348,1,349,1,349,1,350,
1,350,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,5,351,3913,8,351,10,
351,12,351,3916,9,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,
351,1,351,1,351,1,351,3,351,3930,8,351,1,351,1,351,1,351,1,351,1,351,1,351,
1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,
1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,
3,351,3962,8,351,1,351,1,351,1,351,1,351,1,351,3,351,3969,8,351,1,351,1,
351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,
351,3,351,3985,8,351,1,351,1,351,1,351,1,351,1,351,3,351,3992,8,351,1,351,
1,351,5,351,3996,8,351,10,351,12,351,3999,9,351,1,352,1,352,3,352,4003,8,
352,1,353,1,353,1,353,1,353,1,354,1,354,1,355,1,355,1,356,1,356,3,356,4015,
8,356,1,357,1,357,1,357,1,357,1,357,5,357,4022,8,357,10,357,12,357,4025,
9,357,1,357,1,357,1,358,1,358,1,358,3,358,4032,8,358,1,359,1,359,1,359,1,
359,1,359,5,359,4039,8,359,10,359,12,359,4042,9,359,1,359,1,359,1,360,1,
360,1,360,1,360,1,361,1,361,1,362,1,362,1,363,1,363,1,363,3,363,4057,8,363,
1,364,1,364,3,364,4061,8,364,1,365,1,365,1,365,1,365,1,365,3,365,4068,8,
365,1,366,1,366,3,366,4072,8,366,1,367,1,367,1,368,1,368,1,368,0,1,702,369,
0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,
532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,
640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,
712,714,716,718,720,722,724,726,728,730,732,734,736,0,34,1,0,307,310,1,0,
225,226,2,0,181,181,184,184,1,0,134,135,2,0,13,13,72,72,1,0,144,145,2,0,
182,182,185,185,2,0,21,21,180,180,1,0,193,194,9,0,3,3,23,23,25,25,65,65,
67,67,73,73,173,173,190,190,223,224,3,0,73,73,134,134,331,331,2,0,141,142,
216,216,1,0,125,126,1,0,292,293,1,0,12,13,2,0,3,3,24,24,1,0,234,235,2,0,
107,107,132,132,1,0,228,229,3,0,265,265,267,270,272,274,2,0,265,265,267,
274,2,0,362,362,367,367,2,0,350,351,356,356,2,0,349,349,352,354,1,0,350,
351,2,0,8,8,136,137,1,0,342,348,1,0,5,6,2,0,3,3,9,9,1,0,1,2,2,0,342,342,
344,348,13,0,5,8,10,10,77,83,93,93,96,99,136,137,162,163,180,180,204,204,
206,206,300,300,342,357,359,359,52,0,12,15,26,26,36,36,38,47,51,53,56,57,
59,62,68,68,70,71,74,74,76,76,78,78,86,86,90,90,93,93,97,97,99,99,101,103,
105,105,108,127,129,129,134,135,138,138,141,143,145,148,150,154,156,161,
167,172,174,174,178,179,182,185,188,194,196,198,200,200,202,203,208,208,
211,213,215,223,225,227,230,230,243,243,245,245,247,248,251,259,261,261,
264,274,276,276,279,279,281,286,291,295,297,298,302,329,10,0,10,10,77,77,
79,83,85,85,87,87,96,96,98,98,206,206,237,238,242,242,4411,0,743,1,0,0,0,
2,750,1,0,0,0,4,754,1,0,0,0,6,756,1,0,0,0,8,782,1,0,0,0,10,784,1,0,0,0,12,
786,1,0,0,0,14,800,1,0,0,0,16,802,1,0,0,0,18,818,1,0,0,0,20,827,1,0,0,0,
22,835,1,0,0,0,24,848,1,0,0,0,26,871,1,0,0,0,28,886,1,0,0,0,30,890,1,0,0,
0,32,898,1,0,0,0,34,949,1,0,0,0,36,951,1,0,0,0,38,954,1,0,0,0,40,956,1,0,
0,0,42,960,1,0,0,0,44,963,1,0,0,0,46,966,1,0,0,0,48,970,1,0,0,0,50,973,1,
0,0,0,52,990,1,0,0,0,54,993,1,0,0,0,56,997,1,0,0,0,58,1005,1,0,0,0,60,1008,
1,0,0,0,62,1017,1,0,0,0,64,1020,1,0,0,0,66,1082,1,0,0,0,68,1092,1,0,0,0,
70,1129,1,0,0,0,72,1148,1,0,0,0,74,1163,1,0,0,0,76,1165,1,0,0,0,78,1176,
1,0,0,0,80,1180,1,0,0,0,82,1185,1,0,0,0,84,1187,1,0,0,0,86,1192,1,0,0,0,
88,1197,1,0,0,0,90,1202,1,0,0,0,92,1206,1,0,0,0,94,1214,1,0,0,0,96,1219,
1,0,0,0,98,1223,1,0,0,0,100,1243,1,0,0,0,102,1256,1,0,0,0,104,1264,1,0,0,
0,106,1266,1,0,0,0,108,1275,1,0,0,0,110,1279,1,0,0,0,112,1286,1,0,0,0,114,
1293,1,0,0,0,116,1300,1,0,0,0,118,1303,1,0,0,0,120,1330,1,0,0,0,122,1341,
1,0,0,0,124,1345,1,0,0,0,126,1347,1,0,0,0,128,1360,1,0,0,0,130,1362,1,0,
0,0,132,1370,1,0,0,0,134,1379,1,0,0,0,136,1381,1,0,0,0,138,1386,1,0,0,0,
140,1390,1,0,0,0,142,1398,1,0,0,0,144,1402,1,0,0,0,146,1411,1,0,0,0,148,
1413,1,0,0,0,150,1419,1,0,0,0,152,1423,1,0,0,0,154,1436,1,0,0,0,156,1438,
1,0,0,0,158,1442,1,0,0,0,160,1486,1,0,0,0,162,1494,1,0,0,0,164,1500,1,0,
0,0,166,1504,1,0,0,0,168,1507,1,0,0,0,170,1518,1,0,0,0,172,1535,1,0,0,0,
174,1537,1,0,0,0,176,1542,1,0,0,0,178,1562,1,0,0,0,180,1566,1,0,0,0,182,
1573,1,0,0,0,184,1589,1,0,0,0,186,1729,1,0,0,0,188,1731,1,0,0,0,190,1739,
1,0,0,0,192,1744,1,0,0,0,194,1746,1,0,0,0,196,1752,1,0,0,0,198,1756,1,0,
0,0,200,1760,1,0,0,0,202,1764,1,0,0,0,204,1774,1,0,0,0,206,1785,1,0,0,0,
208,1802,1,0,0,0,210,1820,1,0,0,0,212,1825,1,0,0,0,214,1828,1,0,0,0,216,
1832,1,0,0,0,218,1839,1,0,0,0,220,1848,1,0,0,0,222,1854,1,0,0,0,224,1856,
1,0,0,0,226,1872,1,0,0,0,228,1893,1,0,0,0,230,1895,1,0,0,0,232,1903,1,0,
0,0,234,1910,1,0,0,0,236,1912,1,0,0,0,238,1926,1,0,0,0,240,1928,1,0,0,0,
242,1932,1,0,0,0,244,1936,1,0,0,0,246,1940,1,0,0,0,248,1944,1,0,0,0,250,
1959,1,0,0,0,252,1967,1,0,0,0,254,1970,1,0,0,0,256,1972,1,0,0,0,258,1984,
1,0,0,0,260,1994,1,0,0,0,262,1997,1,0,0,0,264,2008,1,0,0,0,266,2016,1,0,
0,0,268,2043,1,0,0,0,270,2071,1,0,0,0,272,2077,1,0,0,0,274,2084,1,0,0,0,
276,2094,1,0,0,0,278,2098,1,0,0,0,280,2100,1,0,0,0,282,2103,1,0,0,0,284,
2116,1,0,0,0,286,2133,1,0,0,0,288,2147,1,0,0,0,290,2149,1,0,0,0,292,2152,
1,0,0,0,294,2155,1,0,0,0,296,2164,1,0,0,0,298,2184,1,0,0,0,300,2186,1,0,
0,0,302,2189,1,0,0,0,304,2209,1,0,0,0,306,2211,1,0,0,0,308,2215,1,0,0,0,
310,2217,1,0,0,0,312,2226,1,0,0,0,314,2232,1,0,0,0,316,2238,1,0,0,0,318,
2243,1,0,0,0,320,2271,1,0,0,0,322,2273,1,0,0,0,324,2276,1,0,0,0,326,2284,
1,0,0,0,328,2292,1,0,0,0,330,2300,1,0,0,0,332,2308,1,0,0,0,334,2310,1,0,
0,0,336,2323,1,0,0,0,338,2331,1,0,0,0,340,2340,1,0,0,0,342,2342,1,0,0,0,
344,2344,1,0,0,0,346,2349,1,0,0,0,348,2355,1,0,0,0,350,2359,1,0,0,0,352,
2365,1,0,0,0,354,2371,1,0,0,0,356,2376,1,0,0,0,358,2387,1,0,0,0,360,2400,
1,0,0,0,362,2402,1,0,0,0,364,2410,1,0,0,0,366,2414,1,0,0,0,368,2422,1,0,
0,0,370,2426,1,0,0,0,372,2428,1,0,0,0,374,2434,1,0,0,0,376,2436,1,0,0,0,
378,2443,1,0,0,0,380,2451,1,0,0,0,382,2456,1,0,0,0,384,2463,1,0,0,0,386,
2471,1,0,0,0,388,2475,1,0,0,0,390,2477,1,0,0,0,392,2488,1,0,0,0,394,2492,
1,0,0,0,396,2504,1,0,0,0,398,2512,1,0,0,0,400,2516,1,0,0,0,402,2528,1,0,
0,0,404,2534,1,0,0,0,406,2537,1,0,0,0,408,2540,1,0,0,0,410,2543,1,0,0,0,
412,2550,1,0,0,0,414,2552,1,0,0,0,416,2565,1,0,0,0,418,2606,1,0,0,0,420,
2608,1,0,0,0,422,2613,1,0,0,0,424,2618,1,0,0,0,426,2625,1,0,0,0,428,2654,
1,0,0,0,430,2657,1,0,0,0,432,2663,1,0,0,0,434,2665,1,0,0,0,436,2674,1,0,
0,0,438,2680,1,0,0,0,440,2689,1,0,0,0,442,2701,1,0,0,0,444,2723,1,0,0,0,
446,2725,1,0,0,0,448,2747,1,0,0,0,450,2752,1,0,0,0,452,2819,1,0,0,0,454,
2839,1,0,0,0,456,2854,1,0,0,0,458,2866,1,0,0,0,460,2868,1,0,0,0,462,2874,
1,0,0,0,464,2878,1,0,0,0,466,2887,1,0,0,0,468,2897,1,0,0,0,470,2899,1,0,
0,0,472,2913,1,0,0,0,474,2919,1,0,0,0,476,2921,1,0,0,0,478,2925,1,0,0,0,
480,2927,1,0,0,0,482,2931,1,0,0,0,484,2935,1,0,0,0,486,2939,1,0,0,0,488,
2946,1,0,0,0,490,2965,1,0,0,0,492,2971,1,0,0,0,494,2983,1,0,0,0,496,2990,
1,0,0,0,498,2998,1,0,0,0,500,3000,1,0,0,0,502,3020,1,0,0,0,504,3022,1,0,
0,0,506,3030,1,0,0,0,508,3083,1,0,0,0,510,3089,1,0,0,0,512,3123,1,0,0,0,
514,3125,1,0,0,0,516,3133,1,0,0,0,518,3142,1,0,0,0,520,3158,1,0,0,0,522,
3162,1,0,0,0,524,3172,1,0,0,0,526,3182,1,0,0,0,528,3190,1,0,0,0,530,3198,
1,0,0,0,532,3205,1,0,0,0,534,3207,1,0,0,0,536,3209,1,0,0,0,538,3217,1,0,
0,0,540,3225,1,0,0,0,542,3237,1,0,0,0,544,3271,1,0,0,0,546,3273,1,0,0,0,
548,3291,1,0,0,0,550,3300,1,0,0,0,552,3305,1,0,0,0,554,3309,1,0,0,0,556,
3335,1,0,0,0,558,3396,1,0,0,0,560,3398,1,0,0,0,562,3400,1,0,0,0,564,3429,
1,0,0,0,566,3433,1,0,0,0,568,3435,1,0,0,0,570,3448,1,0,0,0,572,3463,1,0,
0,0,574,3468,1,0,0,0,576,3472,1,0,0,0,578,3491,1,0,0,0,580,3496,1,0,0,0,
582,3498,1,0,0,0,584,3526,1,0,0,0,586,3529,1,0,0,0,588,3531,1,0,0,0,590,
3534,1,0,0,0,592,3542,1,0,0,0,594,3544,1,0,0,0,596,3565,1,0,0,0,598,3572,
1,0,0,0,600,3574,1,0,0,0,602,3577,1,0,0,0,604,3589,1,0,0,0,606,3613,1,0,
0,0,608,3615,1,0,0,0,610,3628,1,0,0,0,612,3630,1,0,0,0,614,3633,1,0,0,0,
616,3635,1,0,0,0,618,3639,1,0,0,0,620,3645,1,0,0,0,622,3651,1,0,0,0,624,
3653,1,0,0,0,626,3664,1,0,0,0,628,3672,1,0,0,0,630,3682,1,0,0,0,632,3686,
1,0,0,0,634,3690,1,0,0,0,636,3694,1,0,0,0,638,3700,1,0,0,0,640,3725,1,0,
0,0,642,3727,1,0,0,0,644,3734,1,0,0,0,646,3751,1,0,0,0,648,3767,1,0,0,0,
650,3776,1,0,0,0,652,3778,1,0,0,0,654,3785,1,0,0,0,656,3799,1,0,0,0,658,
3801,1,0,0,0,660,3807,1,0,0,0,662,3813,1,0,0,0,664,3818,1,0,0,0,666,3820,
1,0,0,0,668,3823,1,0,0,0,670,3825,1,0,0,0,672,3843,1,0,0,0,674,3857,1,0,
0,0,676,3870,1,0,0,0,678,3872,1,0,0,0,680,3875,1,0,0,0,682,3884,1,0,0,0,
684,3886,1,0,0,0,686,3888,1,0,0,0,688,3890,1,0,0,0,690,3892,1,0,0,0,692,
3894,1,0,0,0,694,3896,1,0,0,0,696,3898,1,0,0,0,698,3900,1,0,0,0,700,3902,
1,0,0,0,702,3929,1,0,0,0,704,4002,1,0,0,0,706,4004,1,0,0,0,708,4008,1,0,
0,0,710,4010,1,0,0,0,712,4012,1,0,0,0,714,4016,1,0,0,0,716,4028,1,0,0,0,
718,4033,1,0,0,0,720,4045,1,0,0,0,722,4049,1,0,0,0,724,4051,1,0,0,0,726,
4056,1,0,0,0,728,4060,1,0,0,0,730,4067,1,0,0,0,732,4071,1,0,0,0,734,4073,
1,0,0,0,736,4075,1,0,0,0,738,739,3,4,2,0,739,740,3,2,1,0,740,742,1,0,0,0,
741,738,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,
1,0,0,0,745,743,1,0,0,0,746,747,5,0,0,1,747,1,1,0,0,0,748,751,5,335,0,0,
749,751,1,0,0,0,750,748,1,0,0,0,750,749,1,0,0,0,751,3,1,0,0,0,752,755,3,
6,3,0,753,755,3,14,7,0,754,752,1,0,0,0,754,753,1,0,0,0,755,5,1,0,0,0,756,
766,5,143,0,0,757,759,3,8,4,0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,
0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,760,1,0,0,0,763,767,3,14,7,0,764,
765,5,259,0,0,765,767,3,430,215,0,766,760,1,0,0,0,766,764,1,0,0,0,767,7,
1,0,0,0,768,783,5,144,0,0,769,783,5,145,0,0,770,783,5,146,0,0,771,783,5,
147,0,0,772,783,5,260,0,0,773,783,5,202,0,0,774,783,5,261,0,0,775,777,5,
306,0,0,776,778,3,10,5,0,777,776,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,
779,781,3,12,6,0,780,779,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,768,
1,0,0,0,782,769,1,0,0,0,782,770,1,0,0,0,782,771,1,0,0,0,782,772,1,0,0,0,
782,773,1,0,0,0,782,774,1,0,0,0,782,775,1,0,0,0,783,9,1,0,0,0,784,785,5,
280,0,0,785,11,1,0,0,0,786,787,7,0,0,0,787,13,1,0,0,0,788,801,3,430,215,
0,789,801,3,16,8,0,790,801,3,20,10,0,791,801,3,22,11,0,792,801,3,24,12,0,
793,801,3,26,13,0,794,801,3,32,16,0,795,801,3,34,17,0,796,801,3,460,230,
0,797,801,3,466,233,0,798,801,3,468,234,0,799,801,3,488,244,0,800,788,1,
0,0,0,800,789,1,0,0,0,800,790,1,0,0,0,800,791,1,0,0,0,800,792,1,0,0,0,800,
793,1,0,0,0,800,794,1,0,0,0,800,795,1,0,0,0,800,796,1,0,0,0,800,797,1,0,
0,0,800,798,1,0,0,0,800,799,1,0,0,0,801,15,1,0,0,0,802,803,5,56,0,0,803,
805,5,61,0,0,804,806,5,48,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,
0,0,0,807,808,5,62,0,0,808,810,5,362,0,0,809,811,5,26,0,0,810,809,1,0,0,
0,810,811,1,0,0,0,811,812,1,0,0,0,812,813,5,104,0,0,813,814,5,37,0,0,814,
816,3,712,356,0,815,817,3,174,87,0,816,815,1,0,0,0,816,817,1,0,0,0,817,17,
1,0,0,0,818,820,5,231,0,0,819,821,5,60,0,0,820,819,1,0,0,0,820,821,1,0,0,
0,821,822,1,0,0,0,822,823,5,59,0,0,823,824,5,336,0,0,824,825,5,362,0,0,825,
826,5,337,0,0,826,19,1,0,0,0,827,828,5,57,0,0,828,829,5,37,0,0,829,830,3,
712,356,0,830,831,5,75,0,0,831,833,5,362,0,0,832,834,3,18,9,0,833,832,1,
0,0,0,833,834,1,0,0,0,834,21,1,0,0,0,835,841,5,58,0,0,836,838,5,66,0,0,837,
836,1,0,0,0,837,838,1,0,0,0,838,839,1,0,0,0,839,840,5,37,0,0,840,842,3,712,
356,0,841,837,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,5,21,0,0,844,
846,5,362,0,0,845,847,3,322,161,0,846,845,1,0,0,0,846,847,1,0,0,0,847,23,
1,0,0,0,848,849,5,303,0,0,849,850,5,304,0,0,850,853,3,728,364,0,851,852,
5,332,0,0,852,854,3,728,364,0,853,851,1,0,0,0,853,854,1,0,0,0,854,865,1,
0,0,0,855,856,5,21,0,0,856,859,5,367,0,0,857,858,5,75,0,0,858,860,5,367,
0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,863,1,0,0,0,861,862,5,153,0,0,862,
864,5,367,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,855,1,
0,0,0,865,866,1,0,0,0,866,869,1,0,0,0,867,868,5,149,0,0,868,870,3,28,14,
0,869,867,1,0,0,0,869,870,1,0,0,0,870,25,1,0,0,0,871,872,5,303,0,0,872,878,
5,56,0,0,873,876,3,728,364,0,874,875,5,332,0,0,875,877,3,728,364,0,876,874,
1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,873,1,0,0,0,878,879,1,0,0,0,
879,880,1,0,0,0,880,881,5,21,0,0,881,884,5,362,0,0,882,883,5,149,0,0,883,
885,3,28,14,0,884,882,1,0,0,0,884,885,1,0,0,0,885,27,1,0,0,0,886,887,5,336,
0,0,887,888,3,30,15,0,888,889,5,337,0,0,889,29,1,0,0,0,890,895,3,306,153,
0,891,892,5,334,0,0,892,894,3,306,153,0,893,891,1,0,0,0,894,897,1,0,0,0,
895,893,1,0,0,0,895,896,1,0,0,0,896,31,1,0,0,0,897,895,1,0,0,0,898,899,5,
303,0,0,899,900,5,305,0,0,900,903,3,728,364,0,901,902,5,332,0,0,902,904,
3,728,364,0,903,901,1,0,0,0,903,904,1,0,0,0,904,907,1,0,0,0,905,906,5,149,
0,0,906,908,3,28,14,0,907,905,1,0,0,0,907,908,1,0,0,0,908,33,1,0,0,0,909,
950,3,50,25,0,910,950,3,58,29,0,911,950,3,60,30,0,912,950,3,64,32,0,913,
950,3,68,34,0,914,950,3,66,33,0,915,950,3,70,35,0,916,950,3,182,91,0,917,
950,3,186,93,0,918,950,3,248,124,0,919,950,3,266,133,0,920,950,3,268,134,
0,921,950,3,272,136,0,922,950,3,274,137,0,923,950,3,256,128,0,924,950,3,
262,131,0,925,950,3,258,129,0,926,950,3,260,130,0,927,950,3,264,132,0,928,
950,3,184,92,0,929,950,3,188,94,0,930,950,3,194,97,0,931,950,3,190,95,0,
932,950,3,196,98,0,933,950,3,198,99,0,934,950,3,200,100,0,935,950,3,202,
101,0,936,950,3,204,102,0,937,950,3,218,109,0,938,950,3,210,105,0,939,950,
3,220,110,0,940,950,3,212,106,0,941,950,3,206,103,0,942,950,3,208,104,0,
943,950,3,216,108,0,944,950,3,214,107,0,945,950,3,486,243,0,946,950,3,500,
250,0,947,950,3,158,79,0,948,950,3,162,81,0,949,909,1,0,0,0,949,910,1,0,
0,0,949,911,1,0,0,0,949,912,1,0,0,0,949,913,1,0,0,0,949,914,1,0,0,0,949,
915,1,0,0,0,949,916,1,0,0,0,949,917,1,0,0,0,949,918,1,0,0,0,949,919,1,0,
0,0,949,920,1,0,0,0,949,921,1,0,0,0,949,922,1,0,0,0,949,923,1,0,0,0,949,
924,1,0,0,0,949,925,1,0,0,0,949,926,1,0,0,0,949,927,1,0,0,0,949,928,1,0,
0,0,949,929,1,0,0,0,949,930,1,0,0,0,949,931,1,0,0,0,949,932,1,0,0,0,949,
933,1,0,0,0,949,934,1,0,0,0,949,935,1,0,0,0,949,936,1,0,0,0,949,937,1,0,
0,0,949,938,1,0,0,0,949,939,1,0,0,0,949,940,1,0,0,0,949,941,1,0,0,0,949,
942,1,0,0,0,949,943,1,0,0,0,949,944,1,0,0,0,949,945,1,0,0,0,949,946,1,0,
0,0,949,947,1,0,0,0,949,948,1,0,0,0,950,35,1,0,0,0,951,952,5,10,0,0,952,
953,5,11,0,0,953,37,1,0,0,0,954,955,7,1,0,0,955,39,1,0,0,0,956,957,5,10,
0,0,957,958,5,7,0,0,958,959,5,11,0,0,959,41,1,0,0,0,960,961,5,125,0,0,961,
962,5,259,0,0,962,43,1,0,0,0,963,964,5,126,0,0,964,965,5,259,0,0,965,45,
1,0,0,0,966,967,5,119,0,0,967,968,5,22,0,0,968,969,5,230,0,0,969,47,1,0,
0,0,970,971,5,6,0,0,971,972,5,135,0,0,972,49,1,0,0,0,973,974,5,65,0,0,974,
976,7,2,0,0,975,977,3,40,20,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,1,
0,0,0,978,980,3,728,364,0,979,981,3,62,31,0,980,979,1,0,0,0,980,981,1,0,
0,0,981,983,1,0,0,0,982,984,3,52,26,0,983,982,1,0,0,0,983,984,1,0,0,0,984,
988,1,0,0,0,985,986,5,149,0,0,986,987,5,152,0,0,987,989,3,54,27,0,988,985,
1,0,0,0,988,989,1,0,0,0,989,51,1,0,0,0,990,991,5,127,0,0,991,992,5,362,0,
0,992,53,1,0,0,0,993,994,5,336,0,0,994,995,3,56,28,0,995,996,5,337,0,0,996,
55,1,0,0,0,997,1002,3,306,153,0,998,999,5,334,0,0,999,1001,3,306,153,0,1000,
998,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,57,
1,0,0,0,1004,1002,1,0,0,0,1005,1006,5,220,0,0,1006,1007,3,728,364,0,1007,
59,1,0,0,0,1008,1009,5,73,0,0,1009,1011,7,2,0,0,1010,1012,3,36,18,0,1011,
1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1015,3,728,364,0,1014,
1016,3,38,19,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,61,1,0,0,0,1017,
1018,5,76,0,0,1018,1019,5,362,0,0,1019,63,1,0,0,0,1020,1022,5,65,0,0,1021,
1023,5,138,0,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,1025,1,0,0,0,1024,
1026,5,66,0,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,
1029,5,37,0,0,1028,1030,3,40,20,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,
1031,1,0,0,0,1031,1080,3,572,286,0,1032,1033,5,8,0,0,1033,1035,3,572,286,
0,1034,1036,3,298,149,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,
0,0,0,1037,1039,3,320,160,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1041,
1,0,0,0,1040,1042,3,322,161,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1044,
1,0,0,0,1043,1045,3,300,150,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,1081,
1,0,0,0,1046,1047,5,336,0,0,1047,1048,3,326,163,0,1048,1049,5,337,0,0,1049,
1051,1,0,0,0,1050,1046,1,0,0,0,1050,1051,1,0,0,0,1051,1053,1,0,0,0,1052,
1054,3,280,140,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1056,1,0,0,0,1055,
1057,3,282,141,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,
1060,3,284,142,0,1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,1061,
1063,3,286,143,0,1062,1061,1,0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,
1066,3,298,149,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,
1069,3,320,160,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,1070,
1072,3,322,161,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,1074,1,0,0,0,1073,
1075,3,300,150,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1078,1,0,0,0,1076,
1077,5,22,0,0,1077,1079,3,450,225,0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,
1079,1081,1,0,0,0,1080,1032,1,0,0,0,1080,1050,1,0,0,0,1081,65,1,0,0,0,1082,
1083,5,244,0,0,1083,1084,5,37,0,0,1084,1090,3,164,82,0,1085,1086,5,39,0,
0,1086,1087,5,336,0,0,1087,1088,3,330,165,0,1088,1089,5,337,0,0,1089,1091,
1,0,0,0,1090,1085,1,0,0,0,1090,1091,1,0,0,0,1091,67,1,0,0,0,1092,1093,5,
73,0,0,1093,1095,5,37,0,0,1094,1096,3,36,18,0,1095,1094,1,0,0,0,1095,1096,
1,0,0,0,1096,1097,1,0,0,0,1097,1099,3,572,286,0,1098,1100,5,200,0,0,1099,
1098,1,0,0,0,1099,1100,1,0,0,0,1100,1102,1,0,0,0,1101,1103,3,18,9,0,1102,
1101,1,0,0,0,1102,1103,1,0,0,0,1103,69,1,0,0,0,1104,1105,5,67,0,0,1105,1106,
5,37,0,0,1106,1107,3,572,286,0,1107,1108,3,72,36,0,1108,1130,1,0,0,0,1109,
1110,5,67,0,0,1110,1111,5,178,0,0,1111,1113,3,572,286,0,1112,1114,5,22,0,
0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1116,3,78,39,
0,1116,1130,1,0,0,0,1117,1118,5,67,0,0,1118,1119,5,183,0,0,1119,1120,5,178,
0,0,1120,1121,3,572,286,0,1121,1122,3,80,40,0,1122,1130,1,0,0,0,1123,1124,
5,67,0,0,1124,1125,7,2,0,0,1125,1130,3,82,41,0,1126,1127,5,67,0,0,1127,1128,
5,40,0,0,1128,1130,3,130,65,0,1129,1104,1,0,0,0,1129,1109,1,0,0,0,1129,1117,
1,0,0,0,1129,1123,1,0,0,0,1129,1126,1,0,0,0,1130,71,1,0,0,0,1131,1149,3,
90,45,0,1132,1149,3,118,59,0,1133,1149,3,106,53,0,1134,1149,3,110,55,0,1135,
1149,3,112,56,0,1136,1149,3,114,57,0,1137,1149,3,120,60,0,1138,1149,3,146,
73,0,1139,1149,3,148,74,0,1140,1149,3,76,38,0,1141,1149,3,96,48,0,1142,1149,
3,94,47,0,1143,1145,3,714,357,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,
1146,1,0,0,0,1146,1149,3,74,37,0,1147,1149,3,170,85,0,1148,1131,1,0,0,0,
1148,1132,1,0,0,0,1148,1133,1,0,0,0,1148,1134,1,0,0,0,1148,1135,1,0,0,0,
1148,1136,1,0,0,0,1148,1137,1,0,0,0,1148,1138,1,0,0,0,1148,1139,1,0,0,0,
1148,1140,1,0,0,0,1148,1141,1,0,0,0,1148,1142,1,0,0,0,1148,1144,1,0,0,0,
1148,1147,1,0,0,0,1149,73,1,0,0,0,1150,1164,3,132,66,0,1151,1164,3,144,72,
0,1152,1164,3,154,77,0,1153,1164,3,128,64,0,1154,1164,3,150,75,0,1155,1164,
3,156,78,0,1156,1164,3,136,68,0,1157,1164,3,134,67,0,1158,1164,3,168,84,
0,1159,1164,3,100,50,0,1160,1164,3,102,51,0,1161,1164,3,98,49,0,1162,1164,
3,92,46,0,1163,1150,1,0,0,0,1163,1151,1,0,0,0,1163,1152,1,0,0,0,1163,1153,
1,0,0,0,1163,1154,1,0,0,0,1163,1155,1,0,0,0,1163,1156,1,0,0,0,1163,1157,
1,0,0,0,1163,1158,1,0,0,0,1163,1159,1,0,0,0,1163,1160,1,0,0,0,1163,1161,
1,0,0,0,1163,1162,1,0,0,0,1164,75,1,0,0,0,1165,1166,5,35,0,0,1166,1167,5,
69,0,0,1167,1168,5,336,0,0,1168,1169,3,384,192,0,1169,1170,5,337,0,0,1170,
77,1,0,0,0,1171,1177,3,122,61,0,1172,1177,3,90,45,0,1173,1177,3,106,53,0,
1174,1177,3,118,59,0,1175,1177,3,450,225,0,1176,1171,1,0,0,0,1176,1172,1,
0,0,0,1176,1173,1,0,0,0,1176,1174,1,0,0,0,1176,1175,1,0,0,0,1177,79,1,0,
0,0,1178,1181,3,124,62,0,1179,1181,3,126,63,0,1180,1178,1,0,0,0,1180,1179,
1,0,0,0,1181,81,1,0,0,0,1182,1186,3,84,42,0,1183,1186,3,86,43,0,1184,1186,
3,88,44,0,1185,1182,1,0,0,0,1185,1183,1,0,0,0,1185,1184,1,0,0,0,1186,83,
1,0,0,0,1187,1188,3,728,364,0,1188,1189,5,155,0,0,1189,1190,5,152,0,0,1190,
1191,3,54,27,0,1191,85,1,0,0,0,1192,1193,3,728,364,0,1193,1194,5,155,0,0,
1194,1195,5,254,0,0,1195,1196,3,238,119,0,1196,87,1,0,0,0,1197,1198,3,728,
364,0,1198,1199,5,155,0,0,1199,1200,5,127,0,0,1200,1201,5,362,0,0,1201,89,
1,0,0,0,1202,1203,5,74,0,0,1203,1204,5,75,0,0,1204,1205,3,572,286,0,1205,
91,1,0,0,0,1206,1207,7,3,0,0,1207,1208,5,39,0,0,1208,1209,5,336,0,0,1209,
1210,3,324,162,0,1210,1212,5,337,0,0,1211,1213,3,38,19,0,1212,1211,1,0,0,
0,1212,1213,1,0,0,0,1213,93,1,0,0,0,1214,1217,5,134,0,0,1215,1218,3,358,
179,0,1216,1218,3,352,176,0,1217,1215,1,0,0,0,1217,1216,1,0,0,0,1218,95,
1,0,0,0,1219,1220,5,73,0,0,1220,1221,5,290,0,0,1221,1222,3,728,364,0,1222,
97,1,0,0,0,1223,1225,5,68,0,0,1224,1226,5,69,0,0,1225,1224,1,0,0,0,1225,
1226,1,0,0,0,1226,1227,1,0,0,0,1227,1228,3,728,364,0,1228,1229,3,728,364,
0,1229,1231,3,412,206,0,1230,1232,3,398,199,0,1231,1230,1,0,0,0,1231,1232,
1,0,0,0,1232,1235,1,0,0,0,1233,1234,5,76,0,0,1234,1236,5,362,0,0,1235,1233,
1,0,0,0,1235,1236,1,0,0,0,1236,1238,1,0,0,0,1237,1239,3,104,52,0,1238,1237,
1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,1242,3,38,19,0,1241,1240,
1,0,0,0,1241,1242,1,0,0,0,1242,99,1,0,0,0,1243,1244,5,224,0,0,1244,1245,
5,219,0,0,1245,1247,5,231,0,0,1246,1248,5,69,0,0,1247,1246,1,0,0,0,1247,
1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,3,728,364,0,1250,1251,5,155,0,0,
1251,1254,3,302,151,0,1252,1253,5,76,0,0,1253,1255,5,362,0,0,1254,1252,1,
0,0,0,1254,1255,1,0,0,0,1255,101,1,0,0,0,1256,1257,5,224,0,0,1257,1258,5,
219,0,0,1258,1259,5,155,0,0,1259,1260,3,302,151,0,1260,103,1,0,0,0,1261,
1265,5,70,0,0,1262,1263,5,71,0,0,1263,1265,3,728,364,0,1264,1261,1,0,0,0,
1264,1262,1,0,0,0,1265,105,1,0,0,0,1266,1268,5,134,0,0,1267,1269,3,40,20,
0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1271,1,0,0,0,1270,1272,3,108,
54,0,1271,1270,1,0,0,0,1272,1273,1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,
0,0,1274,107,1,0,0,0,1275,1277,3,714,357,0,1276,1278,3,116,58,0,1277,1276,
1,0,0,0,1277,1278,1,0,0,0,1278,109,1,0,0,0,1279,1283,5,215,0,0,1280,1282,
3,714,357,0,1281,1280,1,0,0,0,1282,1285,1,0,0,0,1283,1281,1,0,0,0,1283,1284,
1,0,0,0,1284,111,1,0,0,0,1285,1283,1,0,0,0,1286,1290,5,216,0,0,1287,1289,
3,714,357,0,1288,1287,1,0,0,0,1289,1292,1,0,0,0,1290,1288,1,0,0,0,1290,1291,
1,0,0,0,1291,113,1,0,0,0,1292,1290,1,0,0,0,1293,1297,5,217,0,0,1294,1296,
3,714,357,0,1295,1294,1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,0,1297,1298,
1,0,0,0,1298,115,1,0,0,0,1299,1297,1,0,0,0,1300,1301,5,127,0,0,1301,1302,
5,362,0,0,1302,117,1,0,0,0,1303,1305,5,73,0,0,1304,1306,3,36,18,0,1305,1304,
1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,1312,3,718,359,0,1308,1309,
5,334,0,0,1309,1311,3,718,359,0,1310,1308,1,0,0,0,1311,1314,1,0,0,0,1312,
1310,1,0,0,0,1312,1313,1,0,0,0,1313,1316,1,0,0,0,1314,1312,1,0,0,0,1315,
1317,5,200,0,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,
1320,3,18,9,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,119,1,0,0,0,1321,
1322,5,155,0,0,1322,1323,5,157,0,0,1323,1331,3,302,151,0,1324,1325,5,156,
0,0,1325,1327,5,157,0,0,1326,1328,3,36,18,0,1327,1326,1,0,0,0,1327,1328,
1,0,0,0,1328,1329,1,0,0,0,1329,1331,3,302,151,0,1330,1321,1,0,0,0,1330,1324,
1,0,0,0,1331,121,1,0,0,0,1332,1333,5,155,0,0,1333,1334,5,157,0,0,1334,1342,
3,302,151,0,1335,1336,5,156,0,0,1336,1338,5,157,0,0,1337,1339,3,36,18,0,
1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,1340,1,0,0,0,1340,1342,3,302,151,
0,1341,1332,1,0,0,0,1341,1335,1,0,0,0,1342,123,1,0,0,0,1343,1346,3,42,21,
0,1344,1346,3,44,22,0,1345,1343,1,0,0,0,1345,1344,1,0,0,0,1346,125,1,0,0,
0,1347,1348,5,42,0,0,1348,127,1,0,0,0,1349,1350,5,155,0,0,1350,1351,5,148,
0,0,1351,1355,5,362,0,0,1352,1353,5,149,0,0,1353,1354,5,151,0,0,1354,1356,
3,302,151,0,1355,1352,1,0,0,0,1355,1356,1,0,0,0,1356,1361,1,0,0,0,1357,1358,
5,155,0,0,1358,1359,5,151,0,0,1359,1361,3,302,151,0,1360,1349,1,0,0,0,1360,
1357,1,0,0,0,1361,129,1,0,0,0,1362,1363,3,728,364,0,1363,1364,5,34,0,0,1364,
1366,3,572,286,0,1365,1367,3,714,357,0,1366,1365,1,0,0,0,1366,1367,1,0,0,
0,1367,1368,1,0,0,0,1368,1369,5,42,0,0,1369,131,1,0,0,0,1370,1371,5,155,
0,0,1371,1372,5,120,0,0,1372,1373,3,172,86,0,1373,133,1,0,0,0,1374,1375,
5,7,0,0,1375,1380,5,102,0,0,1376,1377,5,7,0,0,1377,1380,5,103,0,0,1378,1380,
3,284,142,0,1379,1374,1,0,0,0,1379,1376,1,0,0,0,1379,1378,1,0,0,0,1380,135,
1,0,0,0,1381,1382,5,155,0,0,1382,1383,5,227,0,0,1383,1384,5,127,0,0,1384,
1385,3,138,69,0,1385,137,1,0,0,0,1386,1387,5,336,0,0,1387,1388,3,140,70,
0,1388,1389,5,337,0,0,1389,139,1,0,0,0,1390,1395,3,142,71,0,1391,1392,5,
334,0,0,1392,1394,3,142,71,0,1393,1391,1,0,0,0,1394,1397,1,0,0,0,1395,1393,
1,0,0,0,1395,1396,1,0,0,0,1396,141,1,0,0,0,1397,1395,1,0,0,0,1398,1399,3,
370,185,0,1399,1400,5,342,0,0,1400,1401,5,362,0,0,1401,143,1,0,0,0,1402,
1403,5,155,0,0,1403,1404,5,127,0,0,1404,1405,5,362,0,0,1405,145,1,0,0,0,
1406,1412,3,286,143,0,1407,1408,5,7,0,0,1408,1412,5,227,0,0,1409,1410,5,
7,0,0,1410,1412,3,46,23,0,1411,1406,1,0,0,0,1411,1407,1,0,0,0,1411,1409,
1,0,0,0,1412,147,1,0,0,0,1413,1414,5,250,0,0,1414,1415,3,714,357,0,1415,
1416,5,149,0,0,1416,1417,5,37,0,0,1417,1418,3,572,286,0,1418,149,1,0,0,0,
1419,1420,5,74,0,0,1420,1421,5,75,0,0,1421,1422,3,714,357,0,1422,151,1,0,
0,0,1423,1424,5,224,0,0,1424,1425,5,219,0,0,1425,1427,5,231,0,0,1426,1428,
5,69,0,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1430,
3,728,364,0,1430,1431,5,155,0,0,1431,1434,3,302,151,0,1432,1433,5,76,0,0,
1433,1435,5,362,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,153,1,0,0,0,
1436,1437,5,222,0,0,1437,155,1,0,0,0,1438,1439,5,104,0,0,1439,1440,5,367,
0,0,1440,1441,5,105,0,0,1441,157,1,0,0,0,1442,1443,5,65,0,0,1443,1444,5,
40,0,0,1444,1445,3,728,364,0,1445,1446,5,34,0,0,1446,1447,5,37,0,0,1447,
1448,3,572,286,0,1448,1449,3,338,169,0,1449,1450,5,22,0,0,1450,1454,5,362,
0,0,1451,1452,5,149,0,0,1452,1453,5,150,0,0,1453,1455,5,42,0,0,1454,1451,
1,0,0,0,1454,1455,1,0,0,0,1455,1458,1,0,0,0,1456,1457,5,158,0,0,1457,1459,
3,302,151,0,1458,1456,1,0,0,0,1458,1459,1,0,0,0,1459,1463,1,0,0,0,1460,1461,
5,180,0,0,1461,1462,5,37,0,0,1462,1464,3,572,286,0,1463,1460,1,0,0,0,1463,
1464,1,0,0,0,1464,1468,1,0,0,0,1465,1466,5,101,0,0,1466,1467,5,18,0,0,1467,
1469,3,338,169,0,1468,1465,1,0,0,0,1468,1469,1,0,0,0,1469,1474,1,0,0,0,1470,
1472,3,298,149,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,
1475,3,320,160,0,1474,1471,1,0,0,0,1474,1475,1,0,0,0,1475,1478,1,0,0,0,1476,
1477,5,127,0,0,1477,1479,3,160,80,0,1478,1476,1,0,0,0,1478,1479,1,0,0,0,
1479,1481,1,0,0,0,1480,1482,3,300,150,0,1481,1480,1,0,0,0,1481,1482,1,0,
0,0,1482,1484,1,0,0,0,1483,1485,3,280,140,0,1484,1483,1,0,0,0,1484,1485,
1,0,0,0,1485,159,1,0,0,0,1486,1491,3,728,364,0,1487,1488,5,332,0,0,1488,
1490,3,728,364,0,1489,1487,1,0,0,0,1490,1493,1,0,0,0,1491,1489,1,0,0,0,1491,
1492,1,0,0,0,1492,161,1,0,0,0,1493,1491,1,0,0,0,1494,1495,5,73,0,0,1495,
1496,5,40,0,0,1496,1497,3,728,364,0,1497,1498,5,34,0,0,1498,1499,3,572,286,
0,1499,163,1,0,0,0,1500,1502,3,572,286,0,1501,1503,3,714,357,0,1502,1501,
1,0,0,0,1502,1503,1,0,0,0,1503,165,1,0,0,0,1504,1505,5,5,0,0,1505,1506,5,
311,0,0,1506,167,1,0,0,0,1507,1508,5,256,0,0,1508,1510,5,362,0,0,1509,1511,
3,166,83,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1516,1,0,0,0,1512,1513,
5,149,0,0,1513,1514,5,26,0,0,1514,1515,5,157,0,0,1515,1517,3,302,151,0,1516,
1512,1,0,0,0,1516,1517,1,0,0,0,1517,169,1,0,0,0,1518,1519,5,155,0,0,1519,
1520,5,254,0,0,1520,1521,3,238,119,0,1521,171,1,0,0,0,1522,1523,5,121,0,
0,1523,1524,5,362,0,0,1524,1525,5,122,0,0,1525,1526,5,362,0,0,1526,1527,
5,148,0,0,1527,1532,5,362,0,0,1528,1529,5,123,0,0,1529,1530,5,362,0,0,1530,
1531,5,124,0,0,1531,1533,5,362,0,0,1532,1528,1,0,0,0,1532,1533,1,0,0,0,1533,
1536,1,0,0,0,1534,1536,3,728,364,0,1535,1522,1,0,0,0,1535,1534,1,0,0,0,1536,
173,1,0,0,0,1537,1538,5,121,0,0,1538,1539,5,362,0,0,1539,1540,5,148,0,0,
1540,1541,5,362,0,0,1541,175,1,0,0,0,1542,1545,3,728,364,0,1543,1544,5,332,
0,0,1544,1546,3,728,364,0,1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,1560,
1,0,0,0,1547,1557,3,728,364,0,1548,1553,5,332,0,0,1549,1554,5,160,0,0,1550,
1554,5,116,0,0,1551,1554,5,159,0,0,1552,1554,3,728,364,0,1553,1549,1,0,0,
0,1553,1550,1,0,0,0,1553,1551,1,0,0,0,1553,1552,1,0,0,0,1554,1556,1,0,0,
0,1555,1548,1,0,0,0,1556,1559,1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,
0,1558,1561,1,0,0,0,1559,1557,1,0,0,0,1560,1547,1,0,0,0,1560,1561,1,0,0,
0,1561,177,1,0,0,0,1562,1564,3,176,88,0,1563,1565,3,714,357,0,1564,1563,
1,0,0,0,1564,1565,1,0,0,0,1565,179,1,0,0,0,1566,1568,3,572,286,0,1567,1569,
3,714,357,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1571,1,0,0,0,1570,1572,
3,334,167,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,181,1,0,0,0,1573,1587,
7,4,0,0,1574,1576,7,2,0,0,1575,1577,5,144,0,0,1576,1575,1,0,0,0,1576,1577,
1,0,0,0,1577,1578,1,0,0,0,1578,1588,3,728,364,0,1579,1581,5,139,0,0,1580,
1582,5,144,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,
1588,3,726,363,0,1584,1585,7,5,0,0,1585,1588,3,180,90,0,1586,1588,3,180,
90,0,1587,1574,1,0,0,0,1587,1579,1,0,0,0,1587,1584,1,0,0,0,1587,1586,1,0,
0,0,1588,183,1,0,0,0,1589,1590,5,202,0,0,1590,1591,5,37,0,0,1591,1604,3,
712,356,0,1592,1593,5,218,0,0,1593,1600,5,219,0,0,1594,1601,5,245,0,0,1595,
1596,5,231,0,0,1596,1598,5,39,0,0,1597,1599,3,330,165,0,1598,1597,1,0,0,
0,1598,1599,1,0,0,0,1599,1601,1,0,0,0,1600,1594,1,0,0,0,1600,1595,1,0,0,
0,1600,1601,1,0,0,0,1601,1605,1,0,0,0,1602,1603,5,286,0,0,1603,1605,5,60,
0,0,1604,1592,1,0,0,0,1604,1602,1,0,0,0,1605,185,1,0,0,0,1606,1607,5,44,
0,0,1607,1610,7,6,0,0,1608,1609,5,8,0,0,1609,1611,3,278,139,0,1610,1608,
1,0,0,0,1610,1611,1,0,0,0,1611,1730,1,0,0,0,1612,1613,5,44,0,0,1613,1616,
5,38,0,0,1614,1615,7,7,0,0,1615,1617,3,728,364,0,1616,1614,1,0,0,0,1616,
1617,1,0,0,0,1617,1621,1,0,0,0,1618,1619,5,8,0,0,1619,1622,3,278,139,0,1620,
1622,3,278,139,0,1621,1618,1,0,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,
1730,1,0,0,0,1623,1624,5,44,0,0,1624,1627,5,179,0,0,1625,1626,7,7,0,0,1626,
1628,3,728,364,0,1627,1625,1,0,0,0,1627,1628,1,0,0,0,1628,1632,1,0,0,0,1629,
1630,5,8,0,0,1630,1633,3,278,139,0,1631,1633,3,278,139,0,1632,1629,1,0,0,
0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1730,1,0,0,0,1634,1635,5,44,0,
0,1635,1636,5,183,0,0,1636,1639,5,179,0,0,1637,1638,7,7,0,0,1638,1640,3,
728,364,0,1639,1637,1,0,0,0,1639,1640,1,0,0,0,1640,1644,1,0,0,0,1641,1642,
5,8,0,0,1642,1645,3,278,139,0,1643,1645,3,278,139,0,1644,1641,1,0,0,0,1644,
1643,1,0,0,0,1644,1645,1,0,0,0,1645,1730,1,0,0,0,1646,1647,5,44,0,0,1647,
1648,5,39,0,0,1648,1649,7,7,0,0,1649,1652,3,572,286,0,1650,1651,7,7,0,0,
1651,1653,3,728,364,0,1652,1650,1,0,0,0,1652,1653,1,0,0,0,1653,1657,1,0,
0,0,1654,1655,5,8,0,0,1655,1658,3,278,139,0,1656,1658,3,278,139,0,1657,1654,
1,0,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1730,1,0,0,0,1659,1660,
5,44,0,0,1660,1664,5,43,0,0,1661,1662,5,8,0,0,1662,1665,3,276,138,0,1663,
1665,3,276,138,0,1664,1661,1,0,0,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,
1730,1,0,0,0,1666,1667,5,44,0,0,1667,1668,5,36,0,0,1668,1670,3,572,286,0,
1669,1671,3,714,357,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,1730,1,0,
0,0,1672,1673,5,44,0,0,1673,1678,5,65,0,0,1674,1675,7,2,0,0,1675,1679,3,
728,364,0,1676,1677,5,37,0,0,1677,1679,3,572,286,0,1678,1674,1,0,0,0,1678,
1676,1,0,0,0,1679,1730,1,0,0,0,1680,1681,5,44,0,0,1681,1682,5,37,0,0,1682,
1685,5,144,0,0,1683,1684,7,7,0,0,1684,1686,3,728,364,0,1685,1683,1,0,0,0,
1685,1686,1,0,0,0,1686,1687,1,0,0,0,1687,1688,5,8,0,0,1688,1690,3,278,139,
0,1689,1691,3,714,357,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1730,1,
0,0,0,1692,1693,5,44,0,0,1693,1694,5,157,0,0,1694,1698,3,572,286,0,1695,
1696,5,336,0,0,1696,1697,5,362,0,0,1697,1699,5,337,0,0,1698,1695,1,0,0,0,
1698,1699,1,0,0,0,1699,1730,1,0,0,0,1700,1701,5,44,0,0,1701,1713,5,191,0,
0,1702,1703,7,2,0,0,1703,1705,3,728,364,0,1704,1706,5,144,0,0,1705,1704,
1,0,0,0,1705,1706,1,0,0,0,1706,1714,1,0,0,0,1707,1709,3,178,89,0,1708,1707,
1,0,0,0,1708,1709,1,0,0,0,1709,1711,1,0,0,0,1710,1712,5,144,0,0,1711,1710,
1,0,0,0,1711,1712,1,0,0,0,1712,1714,1,0,0,0,1713,1702,1,0,0,0,1713,1708,
1,0,0,0,1714,1730,1,0,0,0,1715,1716,5,44,0,0,1716,1730,5,257,0,0,1717,1718,
5,44,0,0,1718,1730,5,258,0,0,1719,1720,5,44,0,0,1720,1721,5,262,0,0,1721,
1730,5,362,0,0,1722,1723,5,44,0,0,1723,1727,5,312,0,0,1724,1725,5,313,0,
0,1725,1728,3,728,364,0,1726,1728,5,315,0,0,1727,1724,1,0,0,0,1727,1726,
1,0,0,0,1728,1730,1,0,0,0,1729,1606,1,0,0,0,1729,1612,1,0,0,0,1729,1623,
1,0,0,0,1729,1634,1,0,0,0,1729,1646,1,0,0,0,1729,1659,1,0,0,0,1729,1666,
1,0,0,0,1729,1672,1,0,0,0,1729,1680,1,0,0,0,1729,1692,1,0,0,0,1729,1700,
1,0,0,0,1729,1715,1,0,0,0,1729,1717,1,0,0,0,1729,1719,1,0,0,0,1729,1722,
1,0,0,0,1730,187,1,0,0,0,1731,1732,5,190,0,0,1732,1733,5,37,0,0,1733,1735,
3,572,286,0,1734,1736,3,714,357,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,
1737,1,0,0,0,1737,1738,3,192,96,0,1738,189,1,0,0,0,1739,1740,5,190,0,0,1740,
1741,7,2,0,0,1741,1742,3,728,364,0,1742,1743,3,192,96,0,1743,191,1,0,0,0,
1744,1745,7,8,0,0,1745,193,1,0,0,0,1746,1747,5,192,0,0,1747,1748,5,37,0,
0,1748,1750,3,572,286,0,1749,1751,3,714,357,0,1750,1749,1,0,0,0,1750,1751,
1,0,0,0,1751,195,1,0,0,0,1752,1753,5,192,0,0,1753,1754,7,2,0,0,1754,1755,
3,728,364,0,1755,197,1,0,0,0,1756,1757,5,65,0,0,1757,1758,5,247,0,0,1758,
1759,3,728,364,0,1759,199,1,0,0,0,1760,1761,5,73,0,0,1761,1762,5,247,0,0,
1762,1763,3,728,364,0,1763,201,1,0,0,0,1764,1765,5,186,0,0,1765,1767,3,230,
115,0,1766,1768,3,224,112,0,1767,1766,1,0,0,0,1767,1768,1,0,0,0,1768,1769,
1,0,0,0,1769,1770,5,75,0,0,1770,1772,3,236,118,0,1771,1773,3,240,120,0,1772,
1771,1,0,0,0,1772,1773,1,0,0,0,1773,203,1,0,0,0,1774,1776,5,187,0,0,1775,
1777,3,242,121,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,1778,1,0,0,0,1778,
1780,3,230,115,0,1779,1781,3,224,112,0,1780,1779,1,0,0,0,1780,1781,1,0,0,
0,1781,1782,1,0,0,0,1782,1783,5,21,0,0,1783,1784,3,236,118,0,1784,205,1,
0,0,0,1785,1787,5,186,0,0,1786,1788,5,247,0,0,1787,1786,1,0,0,0,1787,1788,
1,0,0,0,1788,1789,1,0,0,0,1789,1794,3,728,364,0,1790,1791,5,334,0,0,1791,
1793,3,728,364,0,1792,1790,1,0,0,0,1793,1796,1,0,0,0,1794,1792,1,0,0,0,1794,
1795,1,0,0,0,1795,1797,1,0,0,0,1796,1794,1,0,0,0,1797,1798,5,75,0,0,1798,
1800,3,236,118,0,1799,1801,3,246,123,0,1800,1799,1,0,0,0,1800,1801,1,0,0,
0,1801,207,1,0,0,0,1802,1804,5,187,0,0,1803,1805,3,244,122,0,1804,1803,1,
0,0,0,1804,1805,1,0,0,0,1805,1807,1,0,0,0,1806,1808,5,247,0,0,1807,1806,
1,0,0,0,1807,1808,1,0,0,0,1808,1809,1,0,0,0,1809,1814,3,728,364,0,1810,1811,
5,334,0,0,1811,1813,3,728,364,0,1812,1810,1,0,0,0,1813,1816,1,0,0,0,1814,
1812,1,0,0,0,1814,1815,1,0,0,0,1815,1817,1,0,0,0,1816,1814,1,0,0,0,1817,
1818,5,21,0,0,1818,1819,3,236,118,0,1819,209,1,0,0,0,1820,1821,5,44,0,0,
1821,1822,5,247,0,0,1822,1823,5,186,0,0,1823,1824,3,238,119,0,1824,211,1,
0,0,0,1825,1826,5,44,0,0,1826,1827,5,248,0,0,1827,213,1,0,0,0,1828,1829,
5,44,0,0,1829,1830,5,236,0,0,1830,1831,5,248,0,0,1831,215,1,0,0,0,1832,1833,
5,155,0,0,1833,1837,5,247,0,0,1834,1838,5,3,0,0,1835,1838,5,4,0,0,1836,1838,
3,728,364,0,1837,1834,1,0,0,0,1837,1835,1,0,0,0,1837,1836,1,0,0,0,1838,217,
1,0,0,0,1839,1840,5,44,0,0,1840,1842,5,186,0,0,1841,1843,3,238,119,0,1842,
1841,1,0,0,0,1842,1843,1,0,0,0,1843,1846,1,0,0,0,1844,1845,5,34,0,0,1845,
1847,3,222,111,0,1846,1844,1,0,0,0,1846,1847,1,0,0,0,1847,219,1,0,0,0,1848,
1849,5,44,0,0,1849,1850,5,255,0,0,1850,1851,3,728,364,0,1851,221,1,0,0,0,
1852,1855,5,3,0,0,1853,1855,3,228,114,0,1854,1852,1,0,0,0,1854,1853,1,0,
0,0,1855,223,1,0,0,0,1856,1857,5,34,0,0,1857,1858,3,226,113,0,1858,225,1,
0,0,0,1859,1860,7,2,0,0,1860,1873,3,728,364,0,1861,1863,5,37,0,0,1862,1861,
1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,1866,3,572,286,0,1865,1867,
3,714,357,0,1866,1865,1,0,0,0,1866,1867,1,0,0,0,1867,1873,1,0,0,0,1868,1869,
5,251,0,0,1869,1873,5,362,0,0,1870,1871,5,252,0,0,1871,1873,3,728,364,0,
1872,1859,1,0,0,0,1872,1862,1,0,0,0,1872,1868,1,0,0,0,1872,1870,1,0,0,0,
1873,227,1,0,0,0,1874,1875,7,2,0,0,1875,1894,3,728,364,0,1876,1878,5,37,
0,0,1877,1876,1,0,0,0,1877,1878,1,0,0,0,1878,1879,1,0,0,0,1879,1884,3,572,
286,0,1880,1881,5,336,0,0,1881,1882,3,330,165,0,1882,1883,5,337,0,0,1883,
1885,1,0,0,0,1884,1880,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,
1888,3,714,357,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1894,1,0,0,0,1889,
1890,5,251,0,0,1890,1894,5,362,0,0,1891,1892,5,252,0,0,1892,1894,3,728,364,
0,1893,1874,1,0,0,0,1893,1877,1,0,0,0,1893,1889,1,0,0,0,1893,1891,1,0,0,
0,1894,229,1,0,0,0,1895,1900,3,232,116,0,1896,1897,5,334,0,0,1897,1899,3,
232,116,0,1898,1896,1,0,0,0,1899,1902,1,0,0,0,1900,1898,1,0,0,0,1900,1901,
1,0,0,0,1901,231,1,0,0,0,1902,1900,1,0,0,0,1903,1908,3,234,117,0,1904,1905,
5,336,0,0,1905,1906,3,330,165,0,1906,1907,5,337,0,0,1907,1909,1,0,0,0,1908,
1904,1,0,0,0,1908,1909,1,0,0,0,1909,233,1,0,0,0,1910,1911,7,9,0,0,1911,235,
1,0,0,0,1912,1917,3,238,119,0,1913,1914,5,334,0,0,1914,1916,3,238,119,0,
1915,1913,1,0,0,0,1916,1919,1,0,0,0,1917,1915,1,0,0,0,1917,1918,1,0,0,0,
1918,237,1,0,0,0,1919,1917,1,0,0,0,1920,1921,5,246,0,0,1921,1927,3,732,366,
0,1922,1923,5,17,0,0,1923,1927,3,732,366,0,1924,1925,5,247,0,0,1925,1927,
3,728,364,0,1926,1920,1,0,0,0,1926,1922,1,0,0,0,1926,1924,1,0,0,0,1927,239,
1,0,0,0,1928,1929,5,149,0,0,1929,1930,5,186,0,0,1930,1931,5,221,0,0,1931,
241,1,0,0,0,1932,1933,5,186,0,0,1933,1934,5,221,0,0,1934,1935,5,231,0,0,
1935,243,1,0,0,0,1936,1937,5,253,0,0,1937,1938,5,221,0,0,1938,1939,5,231,
0,0,1939,245,1,0,0,0,1940,1941,5,149,0,0,1941,1942,5,253,0,0,1942,1943,5,
221,0,0,1943,247,1,0,0,0,1944,1946,5,45,0,0,1945,1947,5,46,0,0,1946,1945,
1,0,0,0,1946,1947,1,0,0,0,1947,1957,1,0,0,0,1948,1949,5,37,0,0,1949,1952,
3,572,286,0,1950,1951,7,10,0,0,1951,1953,5,36,0,0,1952,1950,1,0,0,0,1952,
1953,1,0,0,0,1953,1958,1,0,0,0,1954,1956,3,714,357,0,1955,1954,1,0,0,0,1955,
1956,1,0,0,0,1956,1958,1,0,0,0,1957,1948,1,0,0,0,1957,1955,1,0,0,0,1958,
249,1,0,0,0,1959,1964,3,252,126,0,1960,1961,5,334,0,0,1961,1963,3,252,126,
0,1962,1960,1,0,0,0,1963,1966,1,0,0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,
0,1965,251,1,0,0,0,1966,1964,1,0,0,0,1967,1968,3,254,127,0,1968,1969,5,362,
0,0,1969,253,1,0,0,0,1970,1971,7,11,0,0,1971,255,1,0,0,0,1972,1974,5,65,
0,0,1973,1975,5,138,0,0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1976,1,
0,0,0,1976,1977,5,139,0,0,1977,1978,3,730,365,0,1978,1979,5,22,0,0,1979,
1982,5,362,0,0,1980,1981,5,50,0,0,1981,1983,3,250,125,0,1982,1980,1,0,0,
0,1982,1983,1,0,0,0,1983,257,1,0,0,0,1984,1986,5,73,0,0,1985,1987,5,138,
0,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1990,5,139,
0,0,1989,1991,3,36,18,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,
0,0,0,1992,1993,3,730,365,0,1993,259,1,0,0,0,1994,1995,5,264,0,0,1995,1996,
5,139,0,0,1996,261,1,0,0,0,1997,1998,5,65,0,0,1998,1999,5,138,0,0,1999,2000,
5,140,0,0,2000,2001,5,368,0,0,2001,2003,5,336,0,0,2002,2004,3,324,162,0,
2003,2002,1,0,0,0,2003,2004,1,0,0,0,2004,2005,1,0,0,0,2005,2006,5,337,0,
0,2006,2007,3,702,351,0,2007,263,1,0,0,0,2008,2009,5,73,0,0,2009,2010,5,
138,0,0,2010,2012,5,140,0,0,2011,2013,3,36,18,0,2012,2011,1,0,0,0,2012,2013,
1,0,0,0,2013,2014,1,0,0,0,2014,2015,5,368,0,0,2015,265,1,0,0,0,2016,2018,
5,65,0,0,2017,2019,3,48,24,0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2020,
1,0,0,0,2020,2022,5,178,0,0,2021,2023,3,40,20,0,2022,2021,1,0,0,0,2022,2023,
1,0,0,0,2023,2024,1,0,0,0,2024,2029,3,572,286,0,2025,2026,5,336,0,0,2026,
2027,3,378,189,0,2027,2028,5,337,0,0,2028,2030,1,0,0,0,2029,2025,1,0,0,0,
2029,2030,1,0,0,0,2030,2032,1,0,0,0,2031,2033,3,280,140,0,2032,2031,1,0,
0,0,2032,2033,1,0,0,0,2033,2035,1,0,0,0,2034,2036,3,270,135,0,2035,2034,
1,0,0,0,2035,2036,1,0,0,0,2036,2038,1,0,0,0,2037,2039,3,300,150,0,2038,2037,
1,0,0,0,2038,2039,1,0,0,0,2039,2040,1,0,0,0,2040,2041,5,22,0,0,2041,2042,
3,450,225,0,2042,267,1,0,0,0,2043,2044,5,65,0,0,2044,2045,5,183,0,0,2045,
2047,5,178,0,0,2046,2048,3,40,20,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,
2049,1,0,0,0,2049,2051,3,572,286,0,2050,2052,3,44,22,0,2051,2050,1,0,0,0,
2051,2052,1,0,0,0,2052,2054,1,0,0,0,2053,2055,3,280,140,0,2054,2053,1,0,
0,0,2054,2055,1,0,0,0,2055,2057,1,0,0,0,2056,2058,3,298,149,0,2057,2056,
1,0,0,0,2057,2058,1,0,0,0,2058,2060,1,0,0,0,2059,2061,3,320,160,0,2060,2059,
1,0,0,0,2060,2061,1,0,0,0,2061,2063,1,0,0,0,2062,2064,3,322,161,0,2063,2062,
1,0,0,0,2063,2064,1,0,0,0,2064,2066,1,0,0,0,2065,2067,3,300,150,0,2066,2065,
1,0,0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2069,5,22,0,0,2069,2070,
3,450,225,0,2070,269,1,0,0,0,2071,2072,5,101,0,0,2072,2073,5,34,0,0,2073,
2074,5,336,0,0,2074,2075,3,330,165,0,2075,2076,5,337,0,0,2076,271,1,0,0,
0,2077,2078,5,73,0,0,2078,2080,5,178,0,0,2079,2081,3,36,18,0,2080,2079,1,
0,0,0,2080,2081,1,0,0,0,2081,2082,1,0,0,0,2082,2083,3,574,287,0,2083,273,
1,0,0,0,2084,2085,5,73,0,0,2085,2086,5,183,0,0,2086,2088,5,178,0,0,2087,
2089,3,36,18,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,
2091,3,574,287,0,2091,275,1,0,0,0,2092,2095,3,730,365,0,2093,2095,5,362,
0,0,2094,2092,1,0,0,0,2094,2093,1,0,0,0,2095,277,1,0,0,0,2096,2099,3,728,
364,0,2097,2099,5,362,0,0,2098,2096,1,0,0,0,2098,2097,1,0,0,0,2099,279,1,
0,0,0,2100,2101,5,76,0,0,2101,2102,5,362,0,0,2102,281,1,0,0,0,2103,2104,
5,101,0,0,2104,2105,5,18,0,0,2105,2106,5,336,0,0,2106,2111,3,390,195,0,2107,
2108,5,334,0,0,2108,2110,3,390,195,0,2109,2107,1,0,0,0,2110,2113,1,0,0,0,
2111,2109,1,0,0,0,2111,2112,1,0,0,0,2112,2114,1,0,0,0,2113,2111,1,0,0,0,
2114,2115,5,337,0,0,2115,283,1,0,0,0,2116,2117,5,102,0,0,2117,2118,5,18,
0,0,2118,2119,5,336,0,0,2119,2120,3,330,165,0,2120,2127,5,337,0,0,2121,2122,
5,103,0,0,2122,2123,5,18,0,0,2123,2124,5,336,0,0,2124,2125,3,336,168,0,2125,
2126,5,337,0,0,2126,2128,1,0,0,0,2127,2121,1,0,0,0,2127,2128,1,0,0,0,2128,
2129,1,0,0,0,2129,2130,5,104,0,0,2130,2131,5,367,0,0,2131,2132,5,105,0,0,
2132,285,1,0,0,0,2133,2134,5,227,0,0,2134,2135,5,18,0,0,2135,2136,5,336,
0,0,2136,2137,3,330,165,0,2137,2138,5,337,0,0,2138,2139,5,34,0,0,2139,2140,
5,336,0,0,2140,2141,3,360,180,0,2141,2143,5,337,0,0,2142,2144,3,46,23,0,
2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,287,1,0,0,0,2145,2148,3,294,147,
0,2146,2148,3,296,148,0,2147,2145,1,0,0,0,2147,2146,1,0,0,0,2148,289,1,0,
0,0,2149,2150,5,211,0,0,2150,2151,5,362,0,0,2151,291,1,0,0,0,2152,2153,5,
212,0,0,2153,2154,5,362,0,0,2154,293,1,0,0,0,2155,2156,5,106,0,0,2156,2157,
5,108,0,0,2157,2158,5,148,0,0,2158,2162,5,362,0,0,2159,2160,5,149,0,0,2160,
2161,5,151,0,0,2161,2163,3,302,151,0,2162,2159,1,0,0,0,2162,2163,1,0,0,0,
2163,295,1,0,0,0,2164,2165,5,106,0,0,2165,2166,5,108,0,0,2166,2168,5,109,
0,0,2167,2169,3,310,155,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,2171,
1,0,0,0,2170,2172,3,312,156,0,2171,2170,1,0,0,0,2171,2172,1,0,0,0,2172,2174,
1,0,0,0,2173,2175,3,314,157,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2177,
1,0,0,0,2176,2178,3,316,158,0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,2180,
1,0,0,0,2179,2181,3,318,159,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,297,
1,0,0,0,2182,2185,3,296,148,0,2183,2185,3,294,147,0,2184,2182,1,0,0,0,2184,
2183,1,0,0,0,2185,299,1,0,0,0,2186,2187,5,157,0,0,2187,2188,3,302,151,0,
2188,301,1,0,0,0,2189,2190,5,336,0,0,2190,2191,3,304,152,0,2191,2192,5,337,
0,0,2192,303,1,0,0,0,2193,2198,3,306,153,0,2194,2195,5,334,0,0,2195,2197,
3,306,153,0,2196,2194,1,0,0,0,2197,2200,1,0,0,0,2198,2196,1,0,0,0,2198,2199,
1,0,0,0,2199,2210,1,0,0,0,2200,2198,1,0,0,0,2201,2206,3,308,154,0,2202,2203,
5,334,0,0,2203,2205,3,308,154,0,2204,2202,1,0,0,0,2205,2208,1,0,0,0,2206,
2204,1,0,0,0,2206,2207,1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2209,
2193,1,0,0,0,2209,2201,1,0,0,0,2210,305,1,0,0,0,2211,2212,5,362,0,0,2212,
2213,5,342,0,0,2213,2214,5,362,0,0,2214,307,1,0,0,0,2215,2216,5,362,0,0,
2216,309,1,0,0,0,2217,2218,5,110,0,0,2218,2219,5,111,0,0,2219,2220,5,18,
0,0,2220,2224,5,362,0,0,2221,2222,5,112,0,0,2222,2223,5,18,0,0,2223,2225,
5,362,0,0,2224,2221,1,0,0,0,2224,2225,1,0,0,0,2225,311,1,0,0,0,2226,2227,
5,113,0,0,2227,2228,5,114,0,0,2228,2229,5,111,0,0,2229,2230,5,18,0,0,2230,
2231,5,362,0,0,2231,313,1,0,0,0,2232,2233,5,98,0,0,2233,2234,5,115,0,0,2234,
2235,5,111,0,0,2235,2236,5,18,0,0,2236,2237,5,362,0,0,2237,315,1,0,0,0,2238,
2239,5,118,0,0,2239,2240,5,111,0,0,2240,2241,5,18,0,0,2241,2242,5,362,0,
0,2242,317,1,0,0,0,2243,2244,5,64,0,0,2244,2245,5,161,0,0,2245,2246,5,22,
0,0,2246,2247,5,362,0,0,2247,319,1,0,0,0,2248,2249,5,119,0,0,2249,2250,5,
22,0,0,2250,2251,5,121,0,0,2251,2252,5,362,0,0,2252,2253,5,122,0,0,2253,
2258,5,362,0,0,2254,2255,5,123,0,0,2255,2256,5,362,0,0,2256,2257,5,124,0,
0,2257,2259,5,362,0,0,2258,2254,1,0,0,0,2258,2259,1,0,0,0,2259,2272,1,0,
0,0,2260,2261,5,119,0,0,2261,2262,5,18,0,0,2262,2266,5,362,0,0,2263,2264,
5,149,0,0,2264,2265,5,151,0,0,2265,2267,3,302,151,0,2266,2263,1,0,0,0,2266,
2267,1,0,0,0,2267,2272,1,0,0,0,2268,2269,5,119,0,0,2269,2270,5,22,0,0,2270,
2272,3,728,364,0,2271,2248,1,0,0,0,2271,2260,1,0,0,0,2271,2268,1,0,0,0,2272,
321,1,0,0,0,2273,2274,5,127,0,0,2274,2275,5,362,0,0,2275,323,1,0,0,0,2276,
2281,3,384,192,0,2277,2278,5,334,0,0,2278,2280,3,384,192,0,2279,2277,1,0,
0,0,2280,2283,1,0,0,0,2281,2279,1,0,0,0,2281,2282,1,0,0,0,2282,325,1,0,0,
0,2283,2281,1,0,0,0,2284,2289,3,386,193,0,2285,2286,5,334,0,0,2286,2288,
3,386,193,0,2287,2285,1,0,0,0,2288,2291,1,0,0,0,2289,2287,1,0,0,0,2289,2290,
1,0,0,0,2290,327,1,0,0,0,2291,2289,1,0,0,0,2292,2297,3,410,205,0,2293,2294,
5,334,0,0,2294,2296,3,410,205,0,2295,2293,1,0,0,0,2296,2299,1,0,0,0,2297,
2295,1,0,0,0,2297,2298,1,0,0,0,2298,329,1,0,0,0,2299,2297,1,0,0,0,2300,2305,
3,332,166,0,2301,2302,5,334,0,0,2302,2304,3,332,166,0,2303,2301,1,0,0,0,
2304,2307,1,0,0,0,2305,2303,1,0,0,0,2305,2306,1,0,0,0,2306,331,1,0,0,0,2307,
2305,1,0,0,0,2308,2309,3,728,364,0,2309,333,1,0,0,0,2310,2320,3,728,364,
0,2311,2316,5,332,0,0,2312,2317,5,160,0,0,2313,2317,5,116,0,0,2314,2317,
5,159,0,0,2315,2317,3,728,364,0,2316,2312,1,0,0,0,2316,2313,1,0,0,0,2316,
2314,1,0,0,0,2316,2315,1,0,0,0,2317,2319,1,0,0,0,2318,2311,1,0,0,0,2319,
2322,1,0,0,0,2320,2318,1,0,0,0,2320,2321,1,0,0,0,2321,335,1,0,0,0,2322,2320,
1,0,0,0,2323,2328,3,376,188,0,2324,2325,5,334,0,0,2325,2327,3,376,188,0,
2326,2324,1,0,0,0,2327,2330,1,0,0,0,2328,2326,1,0,0,0,2328,2329,1,0,0,0,
2329,337,1,0,0,0,2330,2328,1,0,0,0,2331,2332,5,336,0,0,2332,2333,3,330,165,
0,2333,2334,5,337,0,0,2334,339,1,0,0,0,2335,2337,3,342,171,0,2336,2338,3,
344,172,0,2337,2336,1,0,0,0,2337,2338,1,0,0,0,2338,2341,1,0,0,0,2339,2341,
3,346,173,0,2340,2335,1,0,0,0,2340,2339,1,0,0,0,2341,341,1,0,0,0,2342,2343,
7,12,0,0,2343,343,1,0,0,0,2344,2345,7,13,0,0,2345,345,1,0,0,0,2346,2350,
5,291,0,0,2347,2348,5,7,0,0,2348,2350,5,291,0,0,2349,2346,1,0,0,0,2349,2347,
1,0,0,0,2350,347,1,0,0,0,2351,2356,5,294,0,0,2352,2354,5,295,0,0,2353,2352,
1,0,0,0,2353,2354,1,0,0,0,2354,2356,1,0,0,0,2355,2351,1,0,0,0,2355,2353,
1,0,0,0,2356,349,1,0,0,0,2357,2358,5,290,0,0,2358,2360,3,728,364,0,2359,
2357,1,0,0,0,2359,2360,1,0,0,0,2360,2361,1,0,0,0,2361,2363,3,354,177,0,2362,
2364,3,406,203,0,2363,2362,1,0,0,0,2363,2364,1,0,0,0,2364,351,1,0,0,0,2365,
2366,5,290,0,0,2366,2367,3,728,364,0,2367,2369,3,354,177,0,2368,2370,3,408,
204,0,2369,2368,1,0,0,0,2369,2370,1,0,0,0,2370,353,1,0,0,0,2371,2372,3,404,
202,0,2372,2373,3,338,169,0,2373,355,1,0,0,0,2374,2375,5,290,0,0,2375,2377,
3,728,364,0,2376,2374,1,0,0,0,2376,2377,1,0,0,0,2377,2378,1,0,0,0,2378,2379,
5,288,0,0,2379,2380,5,297,0,0,2380,2381,3,338,169,0,2381,2382,5,289,0,0,
2382,2383,3,572,286,0,2383,2385,3,338,169,0,2384,2386,3,406,203,0,2385,2384,
1,0,0,0,2385,2386,1,0,0,0,2386,357,1,0,0,0,2387,2388,5,290,0,0,2388,2389,
3,728,364,0,2389,2390,5,288,0,0,2390,2391,5,297,0,0,2391,2392,3,338,169,
0,2392,2393,5,289,0,0,2393,2394,3,572,286,0,2394,2396,3,338,169,0,2395,2397,
3,408,204,0,2396,2395,1,0,0,0,2396,2397,1,0,0,0,2397,359,1,0,0,0,2398,2401,
3,366,183,0,2399,2401,3,362,181,0,2400,2398,1,0,0,0,2400,2399,1,0,0,0,2401,
361,1,0,0,0,2402,2407,3,364,182,0,2403,2404,5,334,0,0,2404,2406,3,364,182,
0,2405,2403,1,0,0,0,2406,2409,1,0,0,0,2407,2405,1,0,0,0,2407,2408,1,0,0,
0,2408,363,1,0,0,0,2409,2407,1,0,0,0,2410,2411,5,336,0,0,2411,2412,3,366,
183,0,2412,2413,5,337,0,0,2413,365,1,0,0,0,2414,2419,3,368,184,0,2415,2416,
5,334,0,0,2416,2418,3,368,184,0,2417,2415,1,0,0,0,2418,2421,1,0,0,0,2419,
2417,1,0,0,0,2419,2420,1,0,0,0,2420,367,1,0,0,0,2421,2419,1,0,0,0,2422,2423,
3,656,328,0,2423,369,1,0,0,0,2424,2427,3,368,184,0,2425,2427,3,364,182,0,
2426,2424,1,0,0,0,2426,2425,1,0,0,0,2427,371,1,0,0,0,2428,2429,7,14,0,0,
2429,373,1,0,0,0,2430,2431,5,14,0,0,2431,2435,5,70,0,0,2432,2433,5,14,0,
0,2433,2435,5,15,0,0,2434,2430,1,0,0,0,2434,2432,1,0,0,0,2435,375,1,0,0,
0,2436,2438,3,728,364,0,2437,2439,3,372,186,0,2438,2437,1,0,0,0,2438,2439,
1,0,0,0,2439,2441,1,0,0,0,2440,2442,3,374,187,0,2441,2440,1,0,0,0,2441,2442,
1,0,0,0,2442,377,1,0,0,0,2443,2448,3,380,190,0,2444,2445,5,334,0,0,2445,
2447,3,380,190,0,2446,2444,1,0,0,0,2447,2450,1,0,0,0,2448,2446,1,0,0,0,2448,
2449,1,0,0,0,2449,379,1,0,0,0,2450,2448,1,0,0,0,2451,2454,3,728,364,0,2452,
2453,5,76,0,0,2453,2455,5,362,0,0,2454,2452,1,0,0,0,2454,2455,1,0,0,0,2455,
381,1,0,0,0,2456,2458,3,702,351,0,2457,2459,3,372,186,0,2458,2457,1,0,0,
0,2458,2459,1,0,0,0,2459,2461,1,0,0,0,2460,2462,3,374,187,0,2461,2460,1,
0,0,0,2461,2462,1,0,0,0,2462,383,1,0,0,0,2463,2464,3,728,364,0,2464,2467,
3,412,206,0,2465,2466,5,76,0,0,2466,2468,5,362,0,0,2467,2465,1,0,0,0,2467,
2468,1,0,0,0,2468,385,1,0,0,0,2469,2472,3,388,194,0,2470,2472,3,390,195,
0,2471,2469,1,0,0,0,2471,2470,1,0,0,0,2472,387,1,0,0,0,2473,2476,3,356,178,
0,2474,2476,3,350,175,0,2475,2473,1,0,0,0,2475,2474,1,0,0,0,2476,389,1,0,
0,0,2477,2478,3,728,364,0,2478,2480,3,412,206,0,2479,2481,3,392,196,0,2480,
2479,1,0,0,0,2480,2481,1,0,0,0,2481,2484,1,0,0,0,2482,2483,5,76,0,0,2483,
2485,5,362,0,0,2484,2482,1,0,0,0,2484,2485,1,0,0,0,2485,391,1,0,0,0,2486,
2489,3,394,197,0,2487,2489,3,396,198,0,2488,2486,1,0,0,0,2488,2487,1,0,0,
0,2489,393,1,0,0,0,2490,2491,5,290,0,0,2491,2493,3,728,364,0,2492,2490,1,
0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,2495,5,289,0,0,2495,2496,
3,572,286,0,2496,2497,5,336,0,0,2497,2498,3,332,166,0,2498,2500,5,337,0,
0,2499,2501,3,406,203,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,395,1,0,
0,0,2502,2503,5,290,0,0,2503,2505,3,728,364,0,2504,2502,1,0,0,0,2504,2505,
1,0,0,0,2505,2506,1,0,0,0,2506,2508,3,404,202,0,2507,2509,3,406,203,0,2508,
2507,1,0,0,0,2508,2509,1,0,0,0,2509,397,1,0,0,0,2510,2513,3,400,200,0,2511,
2513,3,402,201,0,2512,2510,1,0,0,0,2512,2511,1,0,0,0,2513,399,1,0,0,0,2514,
2515,5,290,0,0,2515,2517,3,728,364,0,2516,2514,1,0,0,0,2516,2517,1,0,0,0,
2517,2518,1,0,0,0,2518,2519,5,289,0,0,2519,2520,3,572,286,0,2520,2521,5,
336,0,0,2521,2522,3,332,166,0,2522,2524,5,337,0,0,2523,2525,3,408,204,0,
2524,2523,1,0,0,0,2524,2525,1,0,0,0,2525,401,1,0,0,0,2526,2527,5,290,0,0,
2527,2529,3,728,364,0,2528,2526,1,0,0,0,2528,2529,1,0,0,0,2529,2530,1,0,
0,0,2530,2532,3,404,202,0,2531,2533,3,408,204,0,2532,2531,1,0,0,0,2532,2533,
1,0,0,0,2533,403,1,0,0,0,2534,2535,5,287,0,0,2535,2536,5,297,0,0,2536,405,
1,0,0,0,2537,2538,3,340,170,0,2538,2539,3,348,174,0,2539,407,1,0,0,0,2540,
2541,3,340,170,0,2541,2542,3,348,174,0,2542,409,1,0,0,0,2543,2544,3,728,
364,0,2544,2545,5,333,0,0,2545,2548,3,412,206,0,2546,2547,5,76,0,0,2547,
2549,5,362,0,0,2548,2546,1,0,0,0,2548,2549,1,0,0,0,2549,411,1,0,0,0,2550,
2551,3,416,208,0,2551,413,1,0,0,0,2552,2557,3,412,206,0,2553,2554,5,334,
0,0,2554,2556,3,412,206,0,2555,2553,1,0,0,0,2556,2559,1,0,0,0,2557,2555,
1,0,0,0,2557,2558,1,0,0,0,2558,415,1,0,0,0,2559,2557,1,0,0,0,2560,2566,3,
418,209,0,2561,2566,3,420,210,0,2562,2566,3,422,211,0,2563,2566,3,424,212,
0,2564,2566,3,426,213,0,2565,2560,1,0,0,0,2565,2561,1,0,0,0,2565,2562,1,
0,0,0,2565,2563,1,0,0,0,2565,2564,1,0,0,0,2566,417,1,0,0,0,2567,2607,5,78,
0,0,2568,2607,5,79,0,0,2569,2607,5,80,0,0,2570,2607,5,81,0,0,2571,2607,5,
77,0,0,2572,2607,5,82,0,0,2573,2575,5,83,0,0,2574,2576,5,84,0,0,2575,2574,
1,0,0,0,2575,2576,1,0,0,0,2576,2607,1,0,0,0,2577,2607,5,85,0,0,2578,2607,
5,86,0,0,2579,2607,5,87,0,0,2580,2607,5,88,0,0,2581,2582,5,87,0,0,2582,2583,
5,149,0,0,2583,2584,5,48,0,0,2584,2585,5,89,0,0,2585,2607,5,90,0,0,2586,
2607,5,93,0,0,2587,2607,5,206,0,0,2588,2596,5,92,0,0,2589,2590,5,336,0,0,
2590,2593,5,367,0,0,2591,2592,5,334,0,0,2592,2594,5,367,0,0,2593,2591,1,
0,0,0,2593,2594,1,0,0,0,2594,2595,1,0,0,0,2595,2597,5,337,0,0,2596,2589,
1,0,0,0,2596,2597,1,0,0,0,2597,2607,1,0,0,0,2598,2599,5,95,0,0,2599,2600,
5,336,0,0,2600,2601,5,367,0,0,2601,2607,5,337,0,0,2602,2603,5,94,0,0,2603,
2604,5,336,0,0,2604,2605,5,367,0,0,2605,2607,5,337,0,0,2606,2567,1,0,0,0,
2606,2568,1,0,0,0,2606,2569,1,0,0,0,2606,2570,1,0,0,0,2606,2571,1,0,0,0,
2606,2572,1,0,0,0,2606,2573,1,0,0,0,2606,2577,1,0,0,0,2606,2578,1,0,0,0,
2606,2579,1,0,0,0,2606,2580,1,0,0,0,2606,2581,1,0,0,0,2606,2586,1,0,0,0,
2606,2587,1,0,0,0,2606,2588,1,0,0,0,2606,2598,1,0,0,0,2606,2602,1,0,0,0,
2607,419,1,0,0,0,2608,2609,5,96,0,0,2609,2610,5,346,0,0,2610,2611,3,416,
208,0,2611,2612,5,348,0,0,2612,421,1,0,0,0,2613,2614,5,97,0,0,2614,2615,
5,346,0,0,2615,2616,3,328,164,0,2616,2617,5,348,0,0,2617,423,1,0,0,0,2618,
2619,5,98,0,0,2619,2620,5,346,0,0,2620,2621,3,418,209,0,2621,2622,5,334,
0,0,2622,2623,3,416,208,0,2623,2624,5,348,0,0,2624,425,1,0,0,0,2625,2626,
5,99,0,0,2626,2627,5,346,0,0,2627,2628,3,414,207,0,2628,2629,5,348,0,0,2629,
427,1,0,0,0,2630,2631,5,54,0,0,2631,2655,5,3,0,0,2632,2634,5,54,0,0,2633,
2635,5,24,0,0,2634,2633,1,0,0,0,2634,2635,1,0,0,0,2635,2655,1,0,0,0,2636,
2637,5,177,0,0,2637,2655,5,3,0,0,2638,2640,5,177,0,0,2639,2641,5,24,0,0,
2640,2639,1,0,0,0,2640,2641,1,0,0,0,2641,2655,1,0,0,0,2642,2643,5,55,0,0,
2643,2655,5,3,0,0,2644,2646,5,55,0,0,2645,2647,5,24,0,0,2646,2645,1,0,0,
0,2646,2647,1,0,0,0,2647,2655,1,0,0,0,2648,2649,5,175,0,0,2649,2655,5,3,
0,0,2650,2652,5,175,0,0,2651,2653,5,24,0,0,2652,2651,1,0,0,0,2652,2653,1,
0,0,0,2653,2655,1,0,0,0,2654,2630,1,0,0,0,2654,2632,1,0,0,0,2654,2636,1,
0,0,0,2654,2638,1,0,0,0,2654,2642,1,0,0,0,2654,2644,1,0,0,0,2654,2648,1,
0,0,0,2654,2650,1,0,0,0,2655,429,1,0,0,0,2656,2658,3,434,217,0,2657,2656,
1,0,0,0,2657,2658,1,0,0,0,2658,2659,1,0,0,0,2659,2660,3,432,216,0,2660,431,
1,0,0,0,2661,2664,3,438,219,0,2662,2664,3,442,221,0,2663,2661,1,0,0,0,2663,
2662,1,0,0,0,2664,433,1,0,0,0,2665,2666,5,149,0,0,2666,2671,3,436,218,0,
2667,2668,5,334,0,0,2668,2670,3,436,218,0,2669,2667,1,0,0,0,2670,2673,1,
0,0,0,2671,2669,1,0,0,0,2671,2672,1,0,0,0,2672,435,1,0,0,0,2673,2671,1,0,
0,0,2674,2675,3,728,364,0,2675,2676,5,22,0,0,2676,2677,5,336,0,0,2677,2678,
3,430,215,0,2678,2679,5,337,0,0,2679,437,1,0,0,0,2680,2686,3,440,220,0,2681,
2682,3,428,214,0,2682,2683,3,440,220,0,2683,2685,1,0,0,0,2684,2681,1,0,0,
0,2685,2688,1,0,0,0,2686,2684,1,0,0,0,2686,2687,1,0,0,0,2687,439,1,0,0,0,
2688,2686,1,0,0,0,2689,2691,3,540,270,0,2690,2692,3,452,226,0,2691,2690,
1,0,0,0,2692,2693,1,0,0,0,2693,2691,1,0,0,0,2693,2694,1,0,0,0,2694,441,1,
0,0,0,2695,2698,3,454,227,0,2696,2699,3,446,223,0,2697,2699,3,588,294,0,
2698,2696,1,0,0,0,2698,2697,1,0,0,0,2699,2702,1,0,0,0,2700,2702,3,446,223,
0,2701,2695,1,0,0,0,2701,2700,1,0,0,0,2702,443,1,0,0,0,2703,2705,3,502,251,
0,2704,2706,3,540,270,0,2705,2704,1,0,0,0,2705,2706,1,0,0,0,2706,2708,1,
0,0,0,2707,2709,3,584,292,0,2708,2707,1,0,0,0,2708,2709,1,0,0,0,2709,2711,
1,0,0,0,2710,2712,3,596,298,0,2711,2710,1,0,0,0,2711,2712,1,0,0,0,2712,2714,
1,0,0,0,2713,2715,3,612,306,0,2714,2713,1,0,0,0,2714,2715,1,0,0,0,2715,2717,
1,0,0,0,2716,2718,3,516,258,0,2717,2716,1,0,0,0,2717,2718,1,0,0,0,2718,2724,
1,0,0,0,2719,2720,5,336,0,0,2720,2721,3,446,223,0,2721,2722,5,337,0,0,2722,
2724,1,0,0,0,2723,2703,1,0,0,0,2723,2719,1,0,0,0,2724,445,1,0,0,0,2725,2727,
3,444,222,0,2726,2728,3,448,224,0,2727,2726,1,0,0,0,2727,2728,1,0,0,0,2728,
2730,1,0,0,0,2729,2731,3,628,314,0,2730,2729,1,0,0,0,2730,2731,1,0,0,0,2731,
2733,1,0,0,0,2732,2734,3,630,315,0,2733,2732,1,0,0,0,2733,2734,1,0,0,0,2734,
2736,1,0,0,0,2735,2737,3,634,317,0,2736,2735,1,0,0,0,2736,2737,1,0,0,0,2737,
2739,1,0,0,0,2738,2740,3,636,318,0,2739,2738,1,0,0,0,2739,2740,1,0,0,0,2740,
2742,1,0,0,0,2741,2743,3,458,229,0,2742,2741,1,0,0,0,2742,2743,1,0,0,0,2743,
447,1,0,0,0,2744,2745,3,428,214,0,2745,2746,3,444,222,0,2746,2748,1,0,0,
0,2747,2744,1,0,0,0,2748,2749,1,0,0,0,2749,2747,1,0,0,0,2749,2750,1,0,0,
0,2750,449,1,0,0,0,2751,2753,3,434,217,0,2752,2751,1,0,0,0,2752,2753,1,0,
0,0,2753,2754,1,0,0,0,2754,2755,3,446,223,0,2755,451,1,0,0,0,2756,2757,3,
454,227,0,2757,2759,3,502,251,0,2758,2760,3,558,279,0,2759,2758,1,0,0,0,
2759,2760,1,0,0,0,2760,2762,1,0,0,0,2761,2763,3,584,292,0,2762,2761,1,0,
0,0,2762,2763,1,0,0,0,2763,2765,1,0,0,0,2764,2766,3,596,298,0,2765,2764,
1,0,0,0,2765,2766,1,0,0,0,2766,2768,1,0,0,0,2767,2769,3,612,306,0,2768,2767,
1,0,0,0,2768,2769,1,0,0,0,2769,2771,1,0,0,0,2770,2772,3,516,258,0,2771,2770,
1,0,0,0,2771,2772,1,0,0,0,2772,2774,1,0,0,0,2773,2775,3,628,314,0,2774,2773,
1,0,0,0,2774,2775,1,0,0,0,2775,2777,1,0,0,0,2776,2778,3,630,315,0,2777,2776,
1,0,0,0,2777,2778,1,0,0,0,2778,2780,1,0,0,0,2779,2781,3,634,317,0,2780,2779,
1,0,0,0,2780,2781,1,0,0,0,2781,2783,1,0,0,0,2782,2784,3,636,318,0,2783,2782,
1,0,0,0,2783,2784,1,0,0,0,2784,2786,1,0,0,0,2785,2787,3,458,229,0,2786,2785,
1,0,0,0,2786,2787,1,0,0,0,2787,2820,1,0,0,0,2788,2790,3,502,251,0,2789,2791,
3,558,279,0,2790,2789,1,0,0,0,2790,2791,1,0,0,0,2791,2793,1,0,0,0,2792,2794,
3,584,292,0,2793,2792,1,0,0,0,2793,2794,1,0,0,0,2794,2796,1,0,0,0,2795,2797,
3,596,298,0,2796,2795,1,0,0,0,2796,2797,1,0,0,0,2797,2799,1,0,0,0,2798,2800,
3,612,306,0,2799,2798,1,0,0,0,2799,2800,1,0,0,0,2800,2802,1,0,0,0,2801,2803,
3,516,258,0,2802,2801,1,0,0,0,2802,2803,1,0,0,0,2803,2805,1,0,0,0,2804,2806,
3,628,314,0,2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,2808,1,0,0,0,2807,2809,
3,630,315,0,2808,2807,1,0,0,0,2808,2809,1,0,0,0,2809,2811,1,0,0,0,2810,2812,
3,634,317,0,2811,2810,1,0,0,0,2811,2812,1,0,0,0,2812,2814,1,0,0,0,2813,2815,
3,636,318,0,2814,2813,1,0,0,0,2814,2815,1,0,0,0,2815,2817,1,0,0,0,2816,2818,
3,458,229,0,2817,2816,1,0,0,0,2817,2818,1,0,0,0,2818,2820,1,0,0,0,2819,2756,
1,0,0,0,2819,2788,1,0,0,0,2820,453,1,0,0,0,2821,2822,5,25,0,0,2822,2823,
5,26,0,0,2823,2825,3,456,228,0,2824,2826,3,40,20,0,2825,2824,1,0,0,0,2825,
2826,1,0,0,0,2826,2840,1,0,0,0,2827,2828,5,25,0,0,2828,2830,5,104,0,0,2829,
2831,5,37,0,0,2830,2829,1,0,0,0,2830,2831,1,0,0,0,2831,2832,1,0,0,0,2832,
2837,3,712,356,0,2833,2834,5,336,0,0,2834,2835,3,330,165,0,2835,2836,5,337,
0,0,2836,2838,1,0,0,0,2837,2833,1,0,0,0,2837,2838,1,0,0,0,2838,2840,1,0,
0,0,2839,2821,1,0,0,0,2839,2827,1,0,0,0,2840,455,1,0,0,0,2841,2843,5,48,
0,0,2842,2841,1,0,0,0,2842,2843,1,0,0,0,2843,2844,1,0,0,0,2844,2845,5,47,
0,0,2845,2847,5,362,0,0,2846,2848,3,298,149,0,2847,2846,1,0,0,0,2847,2848,
1,0,0,0,2848,2850,1,0,0,0,2849,2851,3,320,160,0,2850,2849,1,0,0,0,2850,2851,
1,0,0,0,2851,2855,1,0,0,0,2852,2853,5,37,0,0,2853,2855,3,712,356,0,2854,
2842,1,0,0,0,2854,2852,1,0,0,0,2855,457,1,0,0,0,2856,2859,5,153,0,0,2857,
2858,5,367,0,0,2858,2860,5,334,0,0,2859,2857,1,0,0,0,2859,2860,1,0,0,0,2860,
2861,1,0,0,0,2861,2867,5,367,0,0,2862,2863,5,153,0,0,2863,2864,5,367,0,0,
2864,2865,5,154,0,0,2865,2867,5,367,0,0,2866,2856,1,0,0,0,2866,2862,1,0,
0,0,2867,459,1,0,0,0,2868,2869,5,173,0,0,2869,2870,5,21,0,0,2870,2872,3,
572,286,0,2871,2873,3,584,292,0,2872,2871,1,0,0,0,2872,2873,1,0,0,0,2873,
461,1,0,0,0,2874,2875,3,534,267,0,2875,2876,5,342,0,0,2876,2877,3,702,351,
0,2877,463,1,0,0,0,2878,2879,5,155,0,0,2879,2884,3,462,231,0,2880,2881,5,
334,0,0,2881,2883,3,462,231,0,2882,2880,1,0,0,0,2883,2886,1,0,0,0,2884,2882,
1,0,0,0,2884,2885,1,0,0,0,2885,465,1,0,0,0,2886,2884,1,0,0,0,2887,2888,5,
224,0,0,2888,2889,3,572,286,0,2889,2891,3,464,232,0,2890,2892,3,584,292,
0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,467,1,0,0,0,2893,2898,3,470,235,
0,2894,2898,3,480,240,0,2895,2898,3,482,241,0,2896,2898,3,484,242,0,2897,
2893,1,0,0,0,2897,2894,1,0,0,0,2897,2895,1,0,0,0,2897,2896,1,0,0,0,2898,
469,1,0,0,0,2899,2900,5,275,0,0,2900,2909,5,276,0,0,2901,2906,3,472,236,
0,2902,2903,5,334,0,0,2903,2905,3,472,236,0,2904,2902,1,0,0,0,2905,2908,
1,0,0,0,2906,2904,1,0,0,0,2906,2907,1,0,0,0,2907,2910,1,0,0,0,2908,2906,
1,0,0,0,2909,2901,1,0,0,0,2909,2910,1,0,0,0,2910,471,1,0,0,0,2911,2914,3,
476,238,0,2912,2914,3,474,237,0,2913,2911,1,0,0,0,2913,2912,1,0,0,0,2914,
473,1,0,0,0,2915,2916,5,198,0,0,2916,2920,5,280,0,0,2917,2918,5,198,0,0,
2918,2920,5,281,0,0,2919,2915,1,0,0,0,2919,2917,1,0,0,0,2920,475,1,0,0,0,
2921,2922,5,282,0,0,2922,2923,5,283,0,0,2923,2924,3,478,239,0,2924,477,1,
0,0,0,2925,2926,5,284,0,0,2926,479,1,0,0,0,2927,2929,5,277,0,0,2928,2930,
5,279,0,0,2929,2928,1,0,0,0,2929,2930,1,0,0,0,2930,481,1,0,0,0,2931,2933,
5,278,0,0,2932,2934,5,279,0,0,2933,2932,1,0,0,0,2933,2934,1,0,0,0,2934,483,
1,0,0,0,2935,2936,5,155,0,0,2936,2937,5,285,0,0,2937,2938,3,710,355,0,2938,
485,1,0,0,0,2939,2940,5,298,0,0,2940,2942,5,258,0,0,2941,2943,5,367,0,0,
2942,2941,1,0,0,0,2943,2944,1,0,0,0,2944,2942,1,0,0,0,2944,2945,1,0,0,0,
2945,487,1,0,0,0,2946,2947,5,301,0,0,2947,2948,5,104,0,0,2948,2953,3,572,
286,0,2949,2951,5,22,0,0,2950,2949,1,0,0,0,2950,2951,1,0,0,0,2951,2952,1,
0,0,0,2952,2954,3,728,364,0,2953,2950,1,0,0,0,2953,2954,1,0,0,0,2954,2955,
1,0,0,0,2955,2956,5,50,0,0,2956,2957,3,548,274,0,2957,2958,5,34,0,0,2958,
2959,3,702,351,0,2959,2960,3,490,245,0,2960,489,1,0,0,0,2961,2964,3,494,
247,0,2962,2964,3,496,248,0,2963,2961,1,0,0,0,2963,2962,1,0,0,0,2964,2967,
1,0,0,0,2965,2963,1,0,0,0,2965,2966,1,0,0,0,2966,2969,1,0,0,0,2967,2965,
1,0,0,0,2968,2970,3,492,246,0,2969,2968,1,0,0,0,2969,2970,1,0,0,0,2970,491,
1,0,0,0,2971,2972,5,163,0,0,2972,2973,5,7,0,0,2973,2976,5,302,0,0,2974,2975,
5,5,0,0,2975,2977,3,702,351,0,2976,2974,1,0,0,0,2976,2977,1,0,0,0,2977,2978,
1,0,0,0,2978,2979,5,164,0,0,2979,2980,5,25,0,0,2980,2981,5,263,0,0,2981,
2982,3,592,296,0,2982,493,1,0,0,0,2983,2984,5,163,0,0,2984,2985,5,302,0,
0,2985,2986,5,5,0,0,2986,2987,3,702,351,0,2987,2988,5,164,0,0,2988,2989,
3,498,249,0,2989,495,1,0,0,0,2990,2991,5,163,0,0,2991,2992,5,302,0,0,2992,
2993,5,164,0,0,2993,2994,3,498,249,0,2994,497,1,0,0,0,2995,2996,5,224,0,
0,2996,2999,3,464,232,0,2997,2999,5,173,0,0,2998,2995,1,0,0,0,2998,2997,
1,0,0,0,2999,499,1,0,0,0,3000,3001,5,117,0,0,3001,3003,5,266,0,0,3002,3004,
5,362,0,0,3003,3002,1,0,0,0,3004,3005,1,0,0,0,3005,3003,1,0,0,0,3005,3006,
1,0,0,0,3006,501,1,0,0,0,3007,3009,5,23,0,0,3008,3010,5,373,0,0,3009,3008,
1,0,0,0,3009,3010,1,0,0,0,3010,3017,1,0,0,0,3011,3013,7,15,0,0,3012,3011,
1,0,0,0,3012,3013,1,0,0,0,3013,3014,1,0,0,0,3014,3018,3,504,252,0,3015,3016,
5,49,0,0,3016,3018,3,506,253,0,3017,3012,1,0,0,0,3017,3015,1,0,0,0,3018,
3021,1,0,0,0,3019,3021,3,510,255,0,3020,3007,1,0,0,0,3020,3019,1,0,0,0,3021,
503,1,0,0,0,3022,3027,3,508,254,0,3023,3024,5,334,0,0,3024,3026,3,508,254,
0,3025,3023,1,0,0,0,3026,3029,1,0,0,0,3027,3025,1,0,0,0,3027,3028,1,0,0,
0,3028,505,1,0,0,0,3029,3027,1,0,0,0,3030,3031,5,336,0,0,3031,3032,3,514,
257,0,3032,3034,5,337,0,0,3033,3035,3,288,144,0,3034,3033,1,0,0,0,3034,3035,
1,0,0,0,3035,3037,1,0,0,0,3036,3038,3,292,146,0,3037,3036,1,0,0,0,3037,3038,
1,0,0,0,3038,3039,1,0,0,0,3039,3040,5,50,0,0,3040,3055,5,362,0,0,3041,3053,
5,22,0,0,3042,3045,5,336,0,0,3043,3046,3,538,269,0,3044,3046,3,324,162,0,
3045,3043,1,0,0,0,3045,3044,1,0,0,0,3046,3047,1,0,0,0,3047,3048,5,337,0,
0,3048,3054,1,0,0,0,3049,3052,3,538,269,0,3050,3052,3,324,162,0,3051,3049,
1,0,0,0,3051,3050,1,0,0,0,3052,3054,1,0,0,0,3053,3042,1,0,0,0,3053,3051,
1,0,0,0,3054,3056,1,0,0,0,3055,3041,1,0,0,0,3055,3056,1,0,0,0,3056,3058,
1,0,0,0,3057,3059,3,288,144,0,3058,3057,1,0,0,0,3058,3059,1,0,0,0,3059,3061,
1,0,0,0,3060,3062,3,290,145,0,3061,3060,1,0,0,0,3061,3062,1,0,0,0,3062,507,
1,0,0,0,3063,3084,3,532,266,0,3064,3081,3,702,351,0,3065,3067,5,22,0,0,3066,
3065,1,0,0,0,3066,3067,1,0,0,0,3067,3068,1,0,0,0,3068,3082,3,728,364,0,3069,
3070,5,22,0,0,3070,3071,5,336,0,0,3071,3076,3,728,364,0,3072,3073,5,334,
0,0,3073,3075,3,728,364,0,3074,3072,1,0,0,0,3075,3078,1,0,0,0,3076,3074,
1,0,0,0,3076,3077,1,0,0,0,3077,3079,1,0,0,0,3078,3076,1,0,0,0,3079,3080,
5,337,0,0,3080,3082,1,0,0,0,3081,3066,1,0,0,0,3081,3069,1,0,0,0,3081,3082,
1,0,0,0,3082,3084,1,0,0,0,3083,3063,1,0,0,0,3083,3064,1,0,0,0,3084,509,1,
0,0,0,3085,3086,5,98,0,0,3086,3090,3,514,257,0,3087,3088,5,100,0,0,3088,
3090,3,514,257,0,3089,3085,1,0,0,0,3089,3087,1,0,0,0,3090,3092,1,0,0,0,3091,
3093,3,288,144,0,3092,3091,1,0,0,0,3092,3093,1,0,0,0,3093,3095,1,0,0,0,3094,
3096,3,292,146,0,3095,3094,1,0,0,0,3095,3096,1,0,0,0,3096,3097,1,0,0,0,3097,
3098,5,50,0,0,3098,3113,5,362,0,0,3099,3111,5,22,0,0,3100,3103,5,336,0,0,
3101,3104,3,538,269,0,3102,3104,3,324,162,0,3103,3101,1,0,0,0,3103,3102,
1,0,0,0,3104,3105,1,0,0,0,3105,3106,5,337,0,0,3106,3112,1,0,0,0,3107,3110,
3,538,269,0,3108,3110,3,324,162,0,3109,3107,1,0,0,0,3109,3108,1,0,0,0,3110,
3112,1,0,0,0,3111,3100,1,0,0,0,3111,3109,1,0,0,0,3112,3114,1,0,0,0,3113,
3099,1,0,0,0,3113,3114,1,0,0,0,3114,3116,1,0,0,0,3115,3117,3,288,144,0,3116,
3115,1,0,0,0,3116,3117,1,0,0,0,3117,3119,1,0,0,0,3118,3120,3,290,145,0,3119,
3118,1,0,0,0,3119,3120,1,0,0,0,3120,511,1,0,0,0,3121,3124,3,532,266,0,3122,
3124,3,702,351,0,3123,3121,1,0,0,0,3123,3122,1,0,0,0,3124,513,1,0,0,0,3125,
3130,3,512,256,0,3126,3127,5,334,0,0,3127,3129,3,512,256,0,3128,3126,1,0,
0,0,3129,3132,1,0,0,0,3130,3128,1,0,0,0,3130,3131,1,0,0,0,3131,515,1,0,0,
0,3132,3130,1,0,0,0,3133,3134,5,232,0,0,3134,3139,3,518,259,0,3135,3136,
5,334,0,0,3136,3138,3,518,259,0,3137,3135,1,0,0,0,3138,3141,1,0,0,0,3139,
3137,1,0,0,0,3139,3140,1,0,0,0,3140,517,1,0,0,0,3141,3139,1,0,0,0,3142,3143,
3,728,364,0,3143,3144,5,22,0,0,3144,3145,3,520,260,0,3145,519,1,0,0,0,3146,
3159,3,728,364,0,3147,3149,5,336,0,0,3148,3150,3,728,364,0,3149,3148,1,0,
0,0,3149,3150,1,0,0,0,3150,3152,1,0,0,0,3151,3153,3,578,289,0,3152,3151,
1,0,0,0,3152,3153,1,0,0,0,3153,3155,1,0,0,0,3154,3156,3,522,261,0,3155,3154,
1,0,0,0,3155,3156,1,0,0,0,3156,3157,1,0,0,0,3157,3159,5,337,0,0,3158,3146,
1,0,0,0,3158,3147,1,0,0,0,3159,521,1,0,0,0,3160,3163,3,524,262,0,3161,3163,
3,526,263,0,3162,3160,1,0,0,0,3162,3161,1,0,0,0,3163,523,1,0,0,0,3164,3165,
5,107,0,0,3165,3173,3,528,264,0,3166,3167,5,107,0,0,3167,3168,5,204,0,0,
3168,3169,3,530,265,0,3169,3170,5,5,0,0,3170,3171,3,530,265,0,3171,3173,
1,0,0,0,3172,3164,1,0,0,0,3172,3166,1,0,0,0,3173,525,1,0,0,0,3174,3175,5,
201,0,0,3175,3183,3,528,264,0,3176,3177,5,201,0,0,3177,3178,5,204,0,0,3178,
3179,3,530,265,0,3179,3180,5,5,0,0,3180,3181,3,530,265,0,3181,3183,1,0,0,
0,3182,3174,1,0,0,0,3182,3176,1,0,0,0,3183,527,1,0,0,0,3184,3185,5,233,0,
0,3185,3191,5,234,0,0,3186,3187,5,236,0,0,3187,3191,5,106,0,0,3188,3189,
5,367,0,0,3189,3191,5,234,0,0,3190,3184,1,0,0,0,3190,3186,1,0,0,0,3190,3188,
1,0,0,0,3191,529,1,0,0,0,3192,3193,5,233,0,0,3193,3199,7,16,0,0,3194,3195,
5,236,0,0,3195,3199,5,106,0,0,3196,3197,5,367,0,0,3197,3199,7,16,0,0,3198,
3192,1,0,0,0,3198,3194,1,0,0,0,3198,3196,1,0,0,0,3199,531,1,0,0,0,3200,3206,
5,352,0,0,3201,3202,3,572,286,0,3202,3203,5,332,0,0,3203,3204,5,352,0,0,
3204,3206,1,0,0,0,3205,3200,1,0,0,0,3205,3201,1,0,0,0,3206,533,1,0,0,0,3207,
3208,3,728,364,0,3208,535,1,0,0,0,3209,3214,3,702,351,0,3210,3211,5,334,
0,0,3211,3213,3,702,351,0,3212,3210,1,0,0,0,3213,3216,1,0,0,0,3214,3212,
1,0,0,0,3214,3215,1,0,0,0,3215,537,1,0,0,0,3216,3214,1,0,0,0,3217,3222,3,
728,364,0,3218,3219,5,334,0,0,3219,3221,3,728,364,0,3220,3218,1,0,0,0,3221,
3224,1,0,0,0,3222,3220,1,0,0,0,3222,3223,1,0,0,0,3223,539,1,0,0,0,3224,3222,
1,0,0,0,3225,3226,5,21,0,0,3226,3227,3,542,271,0,3227,541,1,0,0,0,3228,3229,
3,554,277,0,3229,3232,3,550,275,0,3230,3231,5,334,0,0,3231,3233,3,550,275,
0,3232,3230,1,0,0,0,3233,3234,1,0,0,0,3234,3232,1,0,0,0,3234,3235,1,0,0,
0,3235,3238,1,0,0,0,3236,3238,3,546,273,0,3237,3228,1,0,0,0,3237,3236,1,
0,0,0,3238,543,1,0,0,0,3239,3243,3,568,284,0,3240,3242,3,558,279,0,3241,
3240,1,0,0,0,3242,3245,1,0,0,0,3243,3241,1,0,0,0,3243,3244,1,0,0,0,3244,
3272,1,0,0,0,3245,3243,1,0,0,0,3246,3250,3,594,297,0,3247,3249,3,558,279,
0,3248,3247,1,0,0,0,3249,3252,1,0,0,0,3250,3248,1,0,0,0,3250,3251,1,0,0,
0,3251,3272,1,0,0,0,3252,3250,1,0,0,0,3253,3257,3,576,288,0,3254,3256,3,
558,279,0,3255,3254,1,0,0,0,3256,3259,1,0,0,0,3257,3255,1,0,0,0,3257,3258,
1,0,0,0,3258,3272,1,0,0,0,3259,3257,1,0,0,0,3260,3264,3,582,291,0,3261,3263,
3,558,279,0,3262,3261,1,0,0,0,3263,3266,1,0,0,0,3264,3262,1,0,0,0,3264,3265,
1,0,0,0,3265,3272,1,0,0,0,3266,3264,1,0,0,0,3267,3268,5,336,0,0,3268,3269,
3,546,273,0,3269,3270,5,337,0,0,3270,3272,1,0,0,0,3271,3239,1,0,0,0,3271,
3246,1,0,0,0,3271,3253,1,0,0,0,3271,3260,1,0,0,0,3271,3267,1,0,0,0,3272,
545,1,0,0,0,3273,3284,3,544,272,0,3274,3275,3,556,278,0,3275,3280,3,548,
274,0,3276,3277,5,34,0,0,3277,3281,3,702,351,0,3278,3279,5,50,0,0,3279,3281,
3,338,169,0,3280,3276,1,0,0,0,3280,3278,1,0,0,0,3280,3281,1,0,0,0,3281,3283,
1,0,0,0,3282,3274,1,0,0,0,3283,3286,1,0,0,0,3284,3282,1,0,0,0,3284,3285,
1,0,0,0,3285,547,1,0,0,0,3286,3284,1,0,0,0,3287,3292,3,568,284,0,3288,3292,
3,594,297,0,3289,3292,3,576,288,0,3290,3292,3,582,291,0,3291,3287,1,0,0,
0,3291,3288,1,0,0,0,3291,3289,1,0,0,0,3291,3290,1,0,0,0,3292,3296,1,0,0,
0,3293,3295,3,558,279,0,3294,3293,1,0,0,0,3295,3298,1,0,0,0,3296,3294,1,
0,0,0,3296,3297,1,0,0,0,3297,549,1,0,0,0,3298,3296,1,0,0,0,3299,3301,5,29,
0,0,3300,3299,1,0,0,0,3300,3301,1,0,0,0,3301,3302,1,0,0,0,3302,3303,3,570,
285,0,3303,3304,3,552,276,0,3304,551,1,0,0,0,3305,3306,5,336,0,0,3306,3307,
3,536,268,0,3307,3308,5,337,0,0,3308,553,1,0,0,0,3309,3310,5,28,0,0,3310,
555,1,0,0,0,3311,3336,5,30,0,0,3312,3313,5,249,0,0,3313,3336,5,30,0,0,3314,
3336,5,334,0,0,3315,3316,5,207,0,0,3316,3336,5,30,0,0,3317,3319,5,31,0,0,
3318,3320,5,27,0,0,3319,3318,1,0,0,0,3319,3320,1,0,0,0,3320,3321,1,0,0,0,
3321,3336,5,30,0,0,3322,3324,5,32,0,0,3323,3325,5,27,0,0,3324,3323,1,0,0,
0,3324,3325,1,0,0,0,3325,3326,1,0,0,0,3326,3336,5,30,0,0,3327,3329,5,33,
0,0,3328,3330,5,27,0,0,3329,3328,1,0,0,0,3329,3330,1,0,0,0,3330,3331,1,0,
0,0,3331,3336,5,30,0,0,3332,3333,5,31,0,0,3333,3334,5,213,0,0,3334,3336,
5,30,0,0,3335,3311,1,0,0,0,3335,3312,1,0,0,0,3335,3314,1,0,0,0,3335,3315,
1,0,0,0,3335,3317,1,0,0,0,3335,3322,1,0,0,0,3335,3327,1,0,0,0,3335,3332,
1,0,0,0,3336,557,1,0,0,0,3337,3338,5,214,0,0,3338,3339,5,178,0,0,3339,3340,
5,27,0,0,3340,3341,3,638,319,0,3341,3351,3,560,280,0,3342,3343,5,22,0,0,
3343,3348,3,728,364,0,3344,3345,5,334,0,0,3345,3347,3,728,364,0,3346,3344,
1,0,0,0,3347,3350,1,0,0,0,3348,3346,1,0,0,0,3348,3349,1,0,0,0,3349,3352,
1,0,0,0,3350,3348,1,0,0,0,3351,3342,1,0,0,0,3351,3352,1,0,0,0,3352,3397,
1,0,0,0,3353,3355,5,334,0,0,3354,3353,1,0,0,0,3354,3355,1,0,0,0,3355,3356,
1,0,0,0,3356,3357,5,214,0,0,3357,3358,5,178,0,0,3358,3359,3,638,319,0,3359,
3369,3,560,280,0,3360,3361,5,22,0,0,3361,3366,3,728,364,0,3362,3363,5,334,
0,0,3363,3365,3,728,364,0,3364,3362,1,0,0,0,3365,3368,1,0,0,0,3366,3364,
1,0,0,0,3366,3367,1,0,0,0,3367,3370,1,0,0,0,3368,3366,1,0,0,0,3369,3360,
1,0,0,0,3369,3370,1,0,0,0,3370,3397,1,0,0,0,3371,3373,5,334,0,0,3372,3371,
1,0,0,0,3372,3373,1,0,0,0,3373,3374,1,0,0,0,3374,3375,5,214,0,0,3375,3376,
5,37,0,0,3376,3377,5,336,0,0,3377,3378,3,588,294,0,3378,3380,5,337,0,0,3379,
3381,5,22,0,0,3380,3379,1,0,0,0,3380,3381,1,0,0,0,3381,3382,1,0,0,0,3382,
3394,3,560,280,0,3383,3384,5,336,0,0,3384,3389,3,728,364,0,3385,3386,5,334,
0,0,3386,3388,3,728,364,0,3387,3385,1,0,0,0,3388,3391,1,0,0,0,3389,3387,
1,0,0,0,3389,3390,1,0,0,0,3390,3392,1,0,0,0,3391,3389,1,0,0,0,3392,3393,
5,337,0,0,3393,3395,1,0,0,0,3394,3383,1,0,0,0,3394,3395,1,0,0,0,3395,3397,
1,0,0,0,3396,3337,1,0,0,0,3396,3354,1,0,0,0,3396,3372,1,0,0,0,3397,559,1,
0,0,0,3398,3399,3,728,364,0,3399,561,1,0,0,0,3400,3401,5,128,0,0,3401,3402,
5,336,0,0,3402,3403,5,129,0,0,3403,3404,5,367,0,0,3404,3405,5,130,0,0,3405,
3406,5,131,0,0,3406,3416,5,367,0,0,3407,3408,5,34,0,0,3408,3413,3,702,351,
0,3409,3410,5,334,0,0,3410,3412,3,702,351,0,3411,3409,1,0,0,0,3412,3415,
1,0,0,0,3413,3411,1,0,0,0,3413,3414,1,0,0,0,3414,3417,1,0,0,0,3415,3413,
1,0,0,0,3416,3407,1,0,0,0,3416,3417,1,0,0,0,3417,3418,1,0,0,0,3418,3419,
5,337,0,0,3419,563,1,0,0,0,3420,3421,5,128,0,0,3421,3422,5,336,0,0,3422,
3423,5,367,0,0,3423,3424,7,17,0,0,3424,3430,5,337,0,0,3425,3426,5,128,0,
0,3426,3427,5,336,0,0,3427,3428,5,366,0,0,3428,3430,5,337,0,0,3429,3420,
1,0,0,0,3429,3425,1,0,0,0,3430,565,1,0,0,0,3431,3434,3,562,281,0,3432,3434,
3,564,282,0,3433,3431,1,0,0,0,3433,3432,1,0,0,0,3434,567,1,0,0,0,3435,3437,
3,572,286,0,3436,3438,3,302,151,0,3437,3436,1,0,0,0,3437,3438,1,0,0,0,3438,
3440,1,0,0,0,3439,3441,3,566,283,0,3440,3439,1,0,0,0,3440,3441,1,0,0,0,3441,
3446,1,0,0,0,3442,3444,5,22,0,0,3443,3442,1,0,0,0,3443,3444,1,0,0,0,3444,
3445,1,0,0,0,3445,3447,3,728,364,0,3446,3443,1,0,0,0,3446,3447,1,0,0,0,3447,
569,1,0,0,0,3448,3450,3,572,286,0,3449,3451,3,566,283,0,3450,3449,1,0,0,
0,3450,3451,1,0,0,0,3451,3456,1,0,0,0,3452,3454,5,22,0,0,3453,3452,1,0,0,
0,3453,3454,1,0,0,0,3454,3455,1,0,0,0,3455,3457,3,728,364,0,3456,3453,1,
0,0,0,3456,3457,1,0,0,0,3457,571,1,0,0,0,3458,3459,3,728,364,0,3459,3460,
5,332,0,0,3460,3461,3,728,364,0,3461,3464,1,0,0,0,3462,3464,3,728,364,0,
3463,3458,1,0,0,0,3463,3462,1,0,0,0,3464,573,1,0,0,0,3465,3466,3,728,364,
0,3466,3467,5,332,0,0,3467,3469,1,0,0,0,3468,3465,1,0,0,0,3468,3469,1,0,
0,0,3469,3470,1,0,0,0,3470,3471,3,728,364,0,3471,575,1,0,0,0,3472,3473,5,
336,0,0,3473,3474,3,430,215,0,3474,3476,5,337,0,0,3475,3477,5,22,0,0,3476,
3475,1,0,0,0,3476,3477,1,0,0,0,3477,3478,1,0,0,0,3478,3479,3,728,364,0,3479,
577,1,0,0,0,3480,3482,3,632,316,0,3481,3483,3,628,314,0,3482,3481,1,0,0,
0,3482,3483,1,0,0,0,3483,3492,1,0,0,0,3484,3492,3,628,314,0,3485,3487,3,
634,317,0,3486,3488,3,636,318,0,3487,3486,1,0,0,0,3487,3488,1,0,0,0,3488,
3492,1,0,0,0,3489,3492,3,636,318,0,3490,3492,3,630,315,0,3491,3480,1,0,0,
0,3491,3484,1,0,0,0,3491,3485,1,0,0,0,3491,3489,1,0,0,0,3491,3490,1,0,0,
0,3492,579,1,0,0,0,3493,3497,3,576,288,0,3494,3497,3,568,284,0,3495,3497,
3,582,291,0,3496,3493,1,0,0,0,3496,3494,1,0,0,0,3496,3495,1,0,0,0,3497,581,
1,0,0,0,3498,3499,3,728,364,0,3499,3500,5,336,0,0,3500,3501,5,34,0,0,3501,
3503,3,580,290,0,3502,3504,3,578,289,0,3503,3502,1,0,0,0,3503,3504,1,0,0,
0,3504,3520,1,0,0,0,3505,3506,5,368,0,0,3506,3507,5,336,0,0,3507,3508,3,
702,351,0,3508,3517,5,337,0,0,3509,3510,5,334,0,0,3510,3511,5,368,0,0,3511,
3512,5,336,0,0,3512,3513,3,702,351,0,3513,3514,5,337,0,0,3514,3516,1,0,0,
0,3515,3509,1,0,0,0,3516,3519,1,0,0,0,3517,3515,1,0,0,0,3517,3518,1,0,0,
0,3518,3521,1,0,0,0,3519,3517,1,0,0,0,3520,3505,1,0,0,0,3520,3521,1,0,0,
0,3521,3522,1,0,0,0,3522,3524,5,337,0,0,3523,3525,3,728,364,0,3524,3523,
1,0,0,0,3524,3525,1,0,0,0,3525,583,1,0,0,0,3526,3527,5,20,0,0,3527,3528,
3,586,293,0,3528,585,1,0,0,0,3529,3530,3,702,351,0,3530,587,1,0,0,0,3531,
3532,5,263,0,0,3532,3533,3,590,295,0,3533,589,1,0,0,0,3534,3539,3,592,296,
0,3535,3536,5,334,0,0,3536,3538,3,592,296,0,3537,3535,1,0,0,0,3538,3541,
1,0,0,0,3539,3537,1,0,0,0,3539,3540,1,0,0,0,3540,591,1,0,0,0,3541,3539,1,
0,0,0,3542,3543,3,616,308,0,3543,593,1,0,0,0,3544,3545,5,37,0,0,3545,3546,
5,336,0,0,3546,3547,3,588,294,0,3547,3549,5,337,0,0,3548,3550,5,22,0,0,3549,
3548,1,0,0,0,3549,3550,1,0,0,0,3550,3551,1,0,0,0,3551,3561,3,560,280,0,3552,
3553,5,336,0,0,3553,3558,3,728,364,0,3554,3555,5,334,0,0,3555,3557,3,728,
364,0,3556,3554,1,0,0,0,3557,3560,1,0,0,0,3558,3556,1,0,0,0,3558,3559,1,
0,0,0,3559,3562,1,0,0,0,3560,3558,1,0,0,0,3561,3552,1,0,0,0,3561,3562,1,
0,0,0,3562,3563,1,0,0,0,3563,3564,5,337,0,0,3564,595,1,0,0,0,3565,3566,5,
17,0,0,3566,3567,5,18,0,0,3567,3568,3,598,299,0,3568,597,1,0,0,0,3569,3573,
3,602,301,0,3570,3573,3,604,302,0,3571,3573,3,600,300,0,3572,3569,1,0,0,
0,3572,3570,1,0,0,0,3572,3571,1,0,0,0,3573,599,1,0,0,0,3574,3575,5,336,0,
0,3575,3576,5,337,0,0,3576,601,1,0,0,0,3577,3578,7,18,0,0,3578,3579,5,336,
0,0,3579,3584,3,702,351,0,3580,3581,5,334,0,0,3581,3583,3,702,351,0,3582,
3580,1,0,0,0,3583,3586,1,0,0,0,3584,3582,1,0,0,0,3584,3585,1,0,0,0,3585,
3587,1,0,0,0,3586,3584,1,0,0,0,3587,3588,5,337,0,0,3588,603,1,0,0,0,3589,
3594,3,618,309,0,3590,3591,5,149,0,0,3591,3595,5,228,0,0,3592,3593,5,149,
0,0,3593,3595,5,229,0,0,3594,3590,1,0,0,0,3594,3592,1,0,0,0,3594,3595,1,
0,0,0,3595,3609,1,0,0,0,3596,3597,5,242,0,0,3597,3598,5,243,0,0,3598,3599,
5,336,0,0,3599,3604,3,606,303,0,3600,3601,5,334,0,0,3601,3603,3,606,303,
0,3602,3600,1,0,0,0,3603,3606,1,0,0,0,3604,3602,1,0,0,0,3604,3605,1,0,0,
0,3605,3607,1,0,0,0,3606,3604,1,0,0,0,3607,3608,5,337,0,0,3608,3610,1,0,
0,0,3609,3596,1,0,0,0,3609,3610,1,0,0,0,3610,605,1,0,0,0,3611,3614,3,608,
304,0,3612,3614,3,610,305,0,3613,3611,1,0,0,0,3613,3612,1,0,0,0,3614,607,
1,0,0,0,3615,3617,5,336,0,0,3616,3618,3,702,351,0,3617,3616,1,0,0,0,3617,
3618,1,0,0,0,3618,3623,1,0,0,0,3619,3620,5,334,0,0,3620,3622,3,702,351,0,
3621,3619,1,0,0,0,3622,3625,1,0,0,0,3623,3621,1,0,0,0,3623,3624,1,0,0,0,
3624,3626,1,0,0,0,3625,3623,1,0,0,0,3626,3627,5,337,0,0,3627,609,1,0,0,0,
3628,3629,3,702,351,0,3629,611,1,0,0,0,3630,3631,5,19,0,0,3631,3632,3,614,
307,0,3632,613,1,0,0,0,3633,3634,3,702,351,0,3634,615,1,0,0,0,3635,3636,
5,336,0,0,3636,3637,3,618,309,0,3637,3638,5,337,0,0,3638,617,1,0,0,0,3639,
3641,3,702,351,0,3640,3642,3,620,310,0,3641,3640,1,0,0,0,3641,3642,1,0,0,
0,3642,619,1,0,0,0,3643,3644,5,334,0,0,3644,3646,3,702,351,0,3645,3643,1,
0,0,0,3646,3647,1,0,0,0,3647,3645,1,0,0,0,3647,3648,1,0,0,0,3648,621,1,0,
0,0,3649,3652,3,616,308,0,3650,3652,3,618,309,0,3651,3649,1,0,0,0,3651,3650,
1,0,0,0,3652,623,1,0,0,0,3653,3654,5,336,0,0,3654,3659,3,382,191,0,3655,
3656,5,334,0,0,3656,3658,3,382,191,0,3657,3655,1,0,0,0,3658,3661,1,0,0,0,
3659,3657,1,0,0,0,3659,3660,1,0,0,0,3660,3662,1,0,0,0,3661,3659,1,0,0,0,
3662,3663,5,337,0,0,3663,625,1,0,0,0,3664,3669,3,382,191,0,3665,3666,5,334,
0,0,3666,3668,3,382,191,0,3667,3665,1,0,0,0,3668,3671,1,0,0,0,3669,3667,
1,0,0,0,3669,3670,1,0,0,0,3670,627,1,0,0,0,3671,3669,1,0,0,0,3672,3673,5,
16,0,0,3673,3674,5,18,0,0,3674,3679,3,382,191,0,3675,3676,5,334,0,0,3676,
3678,3,382,191,0,3677,3675,1,0,0,0,3678,3681,1,0,0,0,3679,3677,1,0,0,0,3679,
3680,1,0,0,0,3680,629,1,0,0,0,3681,3679,1,0,0,0,3682,3683,5,51,0,0,3683,
3684,5,18,0,0,3684,3685,3,622,311,0,3685,631,1,0,0,0,3686,3687,5,35,0,0,
3687,3688,5,18,0,0,3688,3689,3,622,311,0,3689,633,1,0,0,0,3690,3691,5,52,
0,0,3691,3692,5,18,0,0,3692,3693,3,622,311,0,3693,635,1,0,0,0,3694,3695,
5,53,0,0,3695,3698,5,18,0,0,3696,3699,3,624,312,0,3697,3699,3,626,313,0,
3698,3696,1,0,0,0,3698,3697,1,0,0,0,3699,637,1,0,0,0,3700,3701,3,640,320,
0,3701,3716,5,336,0,0,3702,3717,5,352,0,0,3703,3705,7,15,0,0,3704,3703,1,
0,0,0,3704,3705,1,0,0,0,3705,3714,1,0,0,0,3706,3711,3,512,256,0,3707,3708,
5,334,0,0,3708,3710,3,512,256,0,3709,3707,1,0,0,0,3710,3713,1,0,0,0,3711,
3709,1,0,0,0,3711,3712,1,0,0,0,3712,3715,1,0,0,0,3713,3711,1,0,0,0,3714,
3706,1,0,0,0,3714,3715,1,0,0,0,3715,3717,1,0,0,0,3716,3702,1,0,0,0,3716,
3704,1,0,0,0,3717,3718,1,0,0,0,3718,3721,5,337,0,0,3719,3720,5,241,0,0,3720,
3722,3,520,260,0,3721,3719,1,0,0,0,3721,3722,1,0,0,0,3722,639,1,0,0,0,3723,
3726,3,730,365,0,3724,3726,3,736,368,0,3725,3723,1,0,0,0,3725,3724,1,0,0,
0,3726,641,1,0,0,0,3727,3728,5,133,0,0,3728,3729,5,336,0,0,3729,3730,3,702,
351,0,3730,3731,5,22,0,0,3731,3732,3,418,209,0,3732,3733,5,337,0,0,3733,
643,1,0,0,0,3734,3735,5,162,0,0,3735,3741,3,702,351,0,3736,3737,5,163,0,
0,3737,3738,3,702,351,0,3738,3739,5,164,0,0,3739,3740,3,702,351,0,3740,3742,
1,0,0,0,3741,3736,1,0,0,0,3742,3743,1,0,0,0,3743,3741,1,0,0,0,3743,3744,
1,0,0,0,3744,3747,1,0,0,0,3745,3746,5,165,0,0,3746,3748,3,702,351,0,3747,
3745,1,0,0,0,3747,3748,1,0,0,0,3748,3749,1,0,0,0,3749,3750,5,166,0,0,3750,
645,1,0,0,0,3751,3757,5,162,0,0,3752,3753,5,163,0,0,3753,3754,3,702,351,
0,3754,3755,5,164,0,0,3755,3756,3,702,351,0,3756,3758,1,0,0,0,3757,3752,
1,0,0,0,3758,3759,1,0,0,0,3759,3757,1,0,0,0,3759,3760,1,0,0,0,3760,3763,
1,0,0,0,3761,3762,5,165,0,0,3762,3764,3,702,351,0,3763,3761,1,0,0,0,3763,
3764,1,0,0,0,3764,3765,1,0,0,0,3765,3766,5,166,0,0,3766,647,1,0,0,0,3767,
3768,5,300,0,0,3768,3769,5,336,0,0,3769,3772,3,702,351,0,3770,3771,5,75,
0,0,3771,3773,3,650,325,0,3772,3770,1,0,0,0,3772,3773,1,0,0,0,3773,3774,
1,0,0,0,3774,3775,5,337,0,0,3775,649,1,0,0,0,3776,3777,7,19,0,0,3777,651,
1,0,0,0,3778,3779,5,299,0,0,3779,3780,5,336,0,0,3780,3781,3,654,327,0,3781,
3782,5,21,0,0,3782,3783,3,702,351,0,3783,3784,5,337,0,0,3784,653,1,0,0,0,
3785,3786,7,20,0,0,3786,655,1,0,0,0,3787,3800,3,670,335,0,3788,3800,5,367,
0,0,3789,3800,3,662,331,0,3790,3800,3,664,332,0,3791,3800,3,666,333,0,3792,
3800,5,362,0,0,3793,3800,3,658,329,0,3794,3800,5,364,0,0,3795,3800,5,365,
0,0,3796,3800,3,660,330,0,3797,3800,3,708,354,0,3798,3800,5,64,0,0,3799,
3787,1,0,0,0,3799,3788,1,0,0,0,3799,3789,1,0,0,0,3799,3790,1,0,0,0,3799,
3791,1,0,0,0,3799,3792,1,0,0,0,3799,3793,1,0,0,0,3799,3794,1,0,0,0,3799,
3795,1,0,0,0,3799,3796,1,0,0,0,3799,3797,1,0,0,0,3799,3798,1,0,0,0,3800,
657,1,0,0,0,3801,3803,5,362,0,0,3802,3804,5,362,0,0,3803,3802,1,0,0,0,3804,
3805,1,0,0,0,3805,3803,1,0,0,0,3805,3806,1,0,0,0,3806,659,1,0,0,0,3807,3808,
5,370,0,0,3808,3809,5,363,0,0,3809,661,1,0,0,0,3810,3811,5,85,0,0,3811,3814,
5,362,0,0,3812,3814,5,237,0,0,3813,3810,1,0,0,0,3813,3812,1,0,0,0,3814,663,
1,0,0,0,3815,3816,5,87,0,0,3816,3819,5,362,0,0,3817,3819,5,238,0,0,3818,
3815,1,0,0,0,3818,3817,1,0,0,0,3819,665,1,0,0,0,3820,3821,5,88,0,0,3821,
3822,5,362,0,0,3822,667,1,0,0,0,3823,3824,7,21,0,0,3824,669,1,0,0,0,3825,
3826,3,668,334,0,3826,3827,3,674,337,0,3827,671,1,0,0,0,3828,3829,5,336,
0,0,3829,3830,3,668,334,0,3830,3831,5,337,0,0,3831,3832,3,674,337,0,3832,
3844,1,0,0,0,3833,3834,5,91,0,0,3834,3835,3,668,334,0,3835,3836,3,674,337,
0,3836,3844,1,0,0,0,3837,3838,5,91,0,0,3838,3839,5,336,0,0,3839,3840,3,702,
351,0,3840,3841,5,337,0,0,3841,3842,3,674,337,0,3842,3844,1,0,0,0,3843,3828,
1,0,0,0,3843,3833,1,0,0,0,3843,3837,1,0,0,0,3844,673,1,0,0,0,3845,3846,5,
265,0,0,3846,3847,5,75,0,0,3847,3858,5,268,0,0,3848,3849,5,270,0,0,3849,
3850,5,75,0,0,3850,3858,5,274,0,0,3851,3858,5,265,0,0,3852,3858,5,268,0,
0,3853,3858,5,270,0,0,3854,3858,5,272,0,0,3855,3858,5,273,0,0,3856,3858,
5,274,0,0,3857,3845,1,0,0,0,3857,3848,1,0,0,0,3857,3851,1,0,0,0,3857,3852,
1,0,0,0,3857,3853,1,0,0,0,3857,3854,1,0,0,0,3857,3855,1,0,0,0,3857,3856,
1,0,0,0,3858,675,1,0,0,0,3859,3871,3,656,328,0,3860,3871,3,672,336,0,3861,
3871,3,642,321,0,3862,3871,3,652,326,0,3863,3871,3,648,324,0,3864,3871,3,
644,322,0,3865,3871,3,646,323,0,3866,3871,3,706,353,0,3867,3871,3,638,319,
0,3868,3871,3,534,267,0,3869,3871,3,616,308,0,3870,3859,1,0,0,0,3870,3860,
1,0,0,0,3870,3861,1,0,0,0,3870,3862,1,0,0,0,3870,3863,1,0,0,0,3870,3864,
1,0,0,0,3870,3865,1,0,0,0,3870,3866,1,0,0,0,3870,3867,1,0,0,0,3870,3868,
1,0,0,0,3870,3869,1,0,0,0,3871,677,1,0,0,0,3872,3873,7,22,0,0,3873,679,1,
0,0,0,3874,3876,5,7,0,0,3875,3874,1,0,0,0,3875,3876,1,0,0,0,3876,3882,1,
0,0,0,3877,3883,5,64,0,0,3878,3883,5,1,0,0,3879,3883,5,2,0,0,3880,3881,5,
24,0,0,3881,3883,5,21,0,0,3882,3877,1,0,0,0,3882,3878,1,0,0,0,3882,3879,
1,0,0,0,3882,3880,1,0,0,0,3883,681,1,0,0,0,3884,3885,5,359,0,0,3885,683,
1,0,0,0,3886,3887,7,23,0,0,3887,685,1,0,0,0,3888,3889,7,24,0,0,3889,687,
1,0,0,0,3890,3891,5,358,0,0,3891,689,1,0,0,0,3892,3893,5,355,0,0,3893,691,
1,0,0,0,3894,3895,5,357,0,0,3895,693,1,0,0,0,3896,3897,7,25,0,0,3897,695,
1,0,0,0,3898,3899,7,26,0,0,3899,697,1,0,0,0,3900,3901,5,7,0,0,3901,699,1,
0,0,0,3902,3903,7,27,0,0,3903,701,1,0,0,0,3904,3905,6,351,-1,0,3905,3914,
3,676,338,0,3906,3907,5,338,0,0,3907,3908,3,702,351,0,3908,3909,5,339,0,
0,3909,3913,1,0,0,0,3910,3911,5,332,0,0,3911,3913,3,728,364,0,3912,3906,
1,0,0,0,3912,3910,1,0,0,0,3913,3916,1,0,0,0,3914,3912,1,0,0,0,3914,3915,
1,0,0,0,3915,3930,1,0,0,0,3916,3914,1,0,0,0,3917,3918,3,678,339,0,3918,3919,
3,702,351,17,3919,3930,1,0,0,0,3920,3921,5,11,0,0,3921,3930,3,706,353,0,
3922,3923,3,698,349,0,3923,3924,3,702,351,3,3924,3930,1,0,0,0,3925,3926,
5,336,0,0,3926,3927,3,702,351,0,3927,3928,5,337,0,0,3928,3930,1,0,0,0,3929,
3904,1,0,0,0,3929,3917,1,0,0,0,3929,3920,1,0,0,0,3929,3922,1,0,0,0,3929,
3925,1,0,0,0,3930,3997,1,0,0,0,3931,3932,10,15,0,0,3932,3933,3,682,341,0,
3933,3934,3,702,351,16,3934,3996,1,0,0,0,3935,3936,10,14,0,0,3936,3937,3,
684,342,0,3937,3938,3,702,351,15,3938,3996,1,0,0,0,3939,3940,10,13,0,0,3940,
3941,3,686,343,0,3941,3942,3,702,351,14,3942,3996,1,0,0,0,3943,3944,10,12,
0,0,3944,3945,3,688,344,0,3945,3946,3,702,351,13,3946,3996,1,0,0,0,3947,
3948,10,11,0,0,3948,3949,3,690,345,0,3949,3950,3,702,351,12,3950,3996,1,
0,0,0,3951,3952,10,10,0,0,3952,3953,3,692,346,0,3953,3954,3,702,351,11,3954,
3996,1,0,0,0,3955,3956,10,9,0,0,3956,3957,3,696,348,0,3957,3958,3,702,351,
10,3958,3996,1,0,0,0,3959,3961,10,8,0,0,3960,3962,5,7,0,0,3961,3960,1,0,
0,0,3961,3962,1,0,0,0,3962,3963,1,0,0,0,3963,3964,3,694,347,0,3964,3965,
3,702,351,9,3965,3996,1,0,0,0,3966,3968,10,5,0,0,3967,3969,5,7,0,0,3968,
3967,1,0,0,0,3968,3969,1,0,0,0,3969,3970,1,0,0,0,3970,3971,5,204,0,0,3971,
3972,3,702,351,0,3972,3973,5,5,0,0,3973,3974,3,702,351,6,3974,3996,1,0,0,
0,3975,3976,10,2,0,0,3976,3977,3,700,350,0,3977,3978,3,702,351,3,3978,3996,
1,0,0,0,3979,3980,10,16,0,0,3980,3981,5,63,0,0,3981,3996,3,680,340,0,3982,
3984,10,7,0,0,3983,3985,5,7,0,0,3984,3983,1,0,0,0,3984,3985,1,0,0,0,3985,
3986,1,0,0,0,3986,3987,5,8,0,0,3987,3988,7,28,0,0,3988,3996,3,616,308,0,
3989,3991,10,6,0,0,3990,3992,5,7,0,0,3991,3990,1,0,0,0,3991,3992,1,0,0,0,
3992,3993,1,0,0,0,3993,3994,5,180,0,0,3994,3996,3,704,352,0,3995,3931,1,
0,0,0,3995,3935,1,0,0,0,3995,3939,1,0,0,0,3995,3943,1,0,0,0,3995,3947,1,
0,0,0,3995,3951,1,0,0,0,3995,3955,1,0,0,0,3995,3959,1,0,0,0,3995,3966,1,
0,0,0,3995,3975,1,0,0,0,3995,3979,1,0,0,0,3995,3982,1,0,0,0,3995,3989,1,
0,0,0,3996,3999,1,0,0,0,3997,3995,1,0,0,0,3997,3998,1,0,0,0,3998,703,1,0,
0,0,3999,3997,1,0,0,0,4000,4003,3,706,353,0,4001,4003,3,616,308,0,4002,4000,
1,0,0,0,4002,4001,1,0,0,0,4003,705,1,0,0,0,4004,4005,5,336,0,0,4005,4006,
3,446,223,0,4006,4007,5,337,0,0,4007,707,1,0,0,0,4008,4009,7,29,0,0,4009,
709,1,0,0,0,4010,4011,7,29,0,0,4011,711,1,0,0,0,4012,4014,3,572,286,0,4013,
4015,3,714,357,0,4014,4013,1,0,0,0,4014,4015,1,0,0,0,4015,713,1,0,0,0,4016,
4017,5,35,0,0,4017,4018,5,336,0,0,4018,4023,3,716,358,0,4019,4020,5,334,
0,0,4020,4022,3,716,358,0,4021,4019,1,0,0,0,4022,4025,1,0,0,0,4023,4021,
1,0,0,0,4023,4024,1,0,0,0,4024,4026,1,0,0,0,4025,4023,1,0,0,0,4026,4027,
5,337,0,0,4027,715,1,0,0,0,4028,4031,3,728,364,0,4029,4030,5,342,0,0,4030,
4032,3,656,328,0,4031,4029,1,0,0,0,4031,4032,1,0,0,0,4032,717,1,0,0,0,4033,
4034,5,35,0,0,4034,4035,5,336,0,0,4035,4040,3,720,360,0,4036,4037,5,334,
0,0,4037,4039,3,720,360,0,4038,4036,1,0,0,0,4039,4042,1,0,0,0,4040,4038,
1,0,0,0,4040,4041,1,0,0,0,4041,4043,1,0,0,0,4042,4040,1,0,0,0,4043,4044,
5,337,0,0,4044,719,1,0,0,0,4045,4046,3,728,364,0,4046,4047,3,722,361,0,4047,
4048,3,656,328,0,4048,721,1,0,0,0,4049,4050,7,30,0,0,4050,723,1,0,0,0,4051,
4052,7,31,0,0,4052,725,1,0,0,0,4053,4057,3,724,362,0,4054,4057,5,362,0,0,
4055,4057,3,730,365,0,4056,4053,1,0,0,0,4056,4054,1,0,0,0,4056,4055,1,0,
0,0,4057,727,1,0,0,0,4058,4061,5,368,0,0,4059,4061,3,734,367,0,4060,4058,
1,0,0,0,4060,4059,1,0,0,0,4061,729,1,0,0,0,4062,4063,3,728,364,0,4063,4064,
5,332,0,0,4064,4065,3,728,364,0,4065,4068,1,0,0,0,4066,4068,3,728,364,0,
4067,4062,1,0,0,0,4067,4066,1,0,0,0,4068,731,1,0,0,0,4069,4072,3,728,364,
0,4070,4072,5,369,0,0,4071,4069,1,0,0,0,4071,4070,1,0,0,0,4072,733,1,0,0,
0,4073,4074,7,32,0,0,4074,735,1,0,0,0,4075,4076,7,33,0,0,4076,737,1,0,0,
0,494,743,750,754,760,766,777,780,782,800,805,810,816,820,833,837,841,846,
853,859,863,865,869,876,878,884,895,903,907,949,976,980,983,988,1002,1011,
1015,1022,1025,1029,1035,1038,1041,1044,1050,1053,1056,1059,1062,1065,1068,
1071,1074,1078,1080,1090,1095,1099,1102,1113,1129,1144,1148,1163,1176,1180,
1185,1212,1217,1225,1231,1235,1238,1241,1247,1254,1264,1268,1273,1277,1283,
1290,1297,1305,1312,1316,1319,1327,1330,1338,1341,1345,1355,1360,1366,1379,
1395,1411,1427,1434,1454,1458,1463,1468,1471,1474,1478,1481,1484,1491,1502,
1510,1516,1532,1535,1545,1553,1557,1560,1564,1568,1571,1576,1581,1587,1598,
1600,1604,1610,1616,1621,1627,1632,1639,1644,1652,1657,1664,1670,1678,1685,
1690,1698,1705,1708,1711,1713,1727,1729,1735,1750,1767,1772,1776,1780,1787,
1794,1800,1804,1807,1814,1837,1842,1846,1854,1862,1866,1872,1877,1884,1887,
1893,1900,1908,1917,1926,1946,1952,1955,1957,1964,1974,1982,1986,1990,2003,
2012,2018,2022,2029,2032,2035,2038,2047,2051,2054,2057,2060,2063,2066,2080,
2088,2094,2098,2111,2127,2143,2147,2162,2168,2171,2174,2177,2180,2184,2198,
2206,2209,2224,2258,2266,2271,2281,2289,2297,2305,2316,2320,2328,2337,2340,
2349,2353,2355,2359,2363,2369,2376,2385,2396,2400,2407,2419,2426,2434,2438,
2441,2448,2454,2458,2461,2467,2471,2475,2480,2484,2488,2492,2500,2504,2508,
2512,2516,2524,2528,2532,2548,2557,2565,2575,2593,2596,2606,2634,2640,2646,
2652,2654,2657,2663,2671,2686,2693,2698,2701,2705,2708,2711,2714,2717,2723,
2727,2730,2733,2736,2739,2742,2749,2752,2759,2762,2765,2768,2771,2774,2777,
2780,2783,2786,2790,2793,2796,2799,2802,2805,2808,2811,2814,2817,2819,2825,
2830,2837,2839,2842,2847,2850,2854,2859,2866,2872,2884,2891,2897,2906,2909,
2913,2919,2929,2933,2944,2950,2953,2963,2965,2969,2976,2998,3005,3009,3012,
3017,3020,3027,3034,3037,3045,3051,3053,3055,3058,3061,3066,3076,3081,3083,
3089,3092,3095,3103,3109,3111,3113,3116,3119,3123,3130,3139,3149,3152,3155,
3158,3162,3172,3182,3190,3198,3205,3214,3222,3234,3237,3243,3250,3257,3264,
3271,3280,3284,3291,3296,3300,3319,3324,3329,3335,3348,3351,3354,3366,3369,
3372,3380,3389,3394,3396,3413,3416,3429,3433,3437,3440,3443,3446,3450,3453,
3456,3463,3468,3476,3482,3487,3491,3496,3503,3517,3520,3524,3539,3549,3558,
3561,3572,3584,3594,3604,3609,3613,3617,3623,3641,3647,3651,3659,3669,3679,
3698,3704,3711,3714,3716,3721,3725,3743,3747,3759,3763,3772,3799,3805,3813,
3818,3843,3857,3870,3875,3882,3912,3914,3929,3961,3968,3984,3991,3995,3997,
4002,4014,4023,4031,4040,4056,4060,4067,4071];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class HiveParser extends antlr4.Parser {

    static grammarFileName = "HiveParser.g4";
    static literalNames = [ null, "'TRUE'", "'FALSE'", "'ALL'", "'NONE'", 
                            "'AND'", "'OR'", null, "'LIKE'", "'ANY'", "'IF'", 
                            "'EXISTS'", "'ASC'", "'DESC'", "'NULLS'", "'LAST'", 
                            "'ORDER'", "'GROUP'", "'BY'", "'HAVING'", "'WHERE'", 
                            "'FROM'", "'AS'", "'SELECT'", "'DISTINCT'", 
                            "'INSERT'", "'OVERWRITE'", "'OUTER'", "'UNIQUEJOIN'", 
                            "'PRESERVE'", "'JOIN'", "'LEFT'", "'RIGHT'", 
                            "'FULL'", "'ON'", "'PARTITION'", "'PARTITIONS'", 
                            "'TABLE'", "'TABLES'", "'COLUMNS'", "'INDEX'", 
                            "'INDEXES'", "'REBUILD'", "'FUNCTIONS'", "'SHOW'", 
                            "'MSCK'", "'REPAIR'", "'DIRECTORY'", "'LOCAL'", 
                            "'TRANSFORM'", "'USING'", "'CLUSTER'", "'DISTRIBUTE'", 
                            "'SORT'", "'UNION'", "'EXCEPT'", "'LOAD'", "'EXPORT'", 
                            "'IMPORT'", "'REPLICATION'", "'METADATA'", "'DATA'", 
                            "'INPATH'", "'IS'", "'NULL'", "'CREATE'", "'EXTERNAL'", 
                            "'ALTER'", "'CHANGE'", "'COLUMN'", "'FIRST'", 
                            "'AFTER'", "'DESCRIBE'", "'DROP'", "'RENAME'", 
                            "'TO'", "'COMMENT'", "'BOOLEAN'", "'TINYINT'", 
                            "'SMALLINT'", null, "'BIGINT'", "'FLOAT'", "'DOUBLE'", 
                            "'PRECISION'", "'DATE'", "'DATETIME'", "'TIMESTAMP'", 
                            "'TIMESTAMPLOCALTZ'", "'TIME'", "'ZONE'", "'INTERVAL'", 
                            null, "'STRING'", "'CHAR'", "'VARCHAR'", "'ARRAY'", 
                            "'STRUCT'", "'MAP'", "'UNIONTYPE'", "'REDUCE'", 
                            "'PARTITIONED'", "'CLUSTERED'", "'SORTED'", 
                            "'INTO'", "'BUCKETS'", "'ROW'", "'ROWS'", "'FORMAT'", 
                            "'DELIMITED'", "'FIELDS'", "'TERMINATED'", "'ESCAPED'", 
                            "'COLLECTION'", "'ITEMS'", "'KEYS'", "'$KEY$'", 
                            "'KILL'", "'LINES'", "'STORED'", "'FILEFORMAT'", 
                            "'INPUTFORMAT'", "'OUTPUTFORMAT'", "'INPUTDRIVER'", 
                            "'OUTPUTDRIVER'", "'ENABLE'", "'DISABLE'", "'LOCATION'", 
                            "'TABLESAMPLE'", "'BUCKET'", "'OUT'", "'OF'", 
                            "'PERCENT'", "'CAST'", "'ADD'", "'REPLACE'", 
                            "'RLIKE'", "'REGEXP'", "'TEMPORARY'", "'FUNCTION'", 
                            "'MACRO'", "'FILE'", "'JAR'", "'EXPLAIN'", "'EXTENDED'", 
                            "'FORMATTED'", "'DEPENDENCY'", "'LOGICAL'", 
                            "'SERDE'", "'WITH'", "'DEFERRED'", "'SERDEPROPERTIES'", 
                            "'DBPROPERTIES'", "'LIMIT'", "'OFFSET'", "'SET'", 
                            "'UNSET'", "'TBLPROPERTIES'", "'IDXPROPERTIES'", 
                            "'$VALUE$'", "'$ELEM$'", "'DEFINED'", "'CASE'", 
                            "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'MAPJOIN'", 
                            "'STREAMTABLE'", "'CLUSTERSTATUS'", "'UTC'", 
                            "'UTC_TMESTAMP'", "'LONG'", "'DELETE'", "'PLUS'", 
                            "'MINUS'", "'FETCH'", "'INTERSECT'", "'VIEW'", 
                            "'VIEWS'", "'IN'", "'DATABASE'", "'DATABASES'", 
                            "'MATERIALIZED'", "'SCHEMA'", "'SCHEMAS'", "'GRANT'", 
                            "'REVOKE'", "'SSL'", "'UNDO'", "'LOCK'", "'LOCKS'", 
                            "'UNLOCK'", "'SHARED'", "'EXCLUSIVE'", "'PROCEDURE'", 
                            "'UNSIGNED'", "'WHILE'", "'READ'", "'READS'", 
                            "'PURGE'", "'RANGE'", "'ANALYZE'", "'BEFORE'", 
                            "'BETWEEN'", "'BOTH'", "'BINARY'", "'CROSS'", 
                            "'CONTINUE'", "'CURSOR'", "'TRIGGER'", "'RECORDREADER'", 
                            "'RECORDWRITER'", "'SEMI'", "'LATERAL'", "'TOUCH'", 
                            "'ARCHIVE'", "'UNARCHIVE'", "'COMPUTE'", "'STATISTICS'", 
                            "'USE'", "'OPTION'", "'CONCATENATE'", "'SHOW_DATABASE'", 
                            "'UPDATE'", "'RESTRICT'", "'CASCADE'", "'SKEWED'", 
                            "'ROLLUP'", "'CUBE'", "'DIRECTORIES'", "'FOR'", 
                            "'WINDOW'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", 
                            "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", 
                            "'LESS'", "'MORE'", "'OVER'", "'GROUPING'", 
                            "'SETS'", "'TRUNCATE'", "'NOSCAN'", "'USER'", 
                            "'ROLE'", "'ROLES'", "'INNER'", "'EXCHANGE'", 
                            "'URI'", "'SERVER'", "'ADMIN'", "'OWNER'", "'PRINCIPALS'", 
                            "'COMPACT'", "'COMPACTIONS'", "'TRANSACTIONS'", 
                            "'REWRITE'", "'AUTHORIZATION'", "'REOPTIMIZATION'", 
                            "'CONF'", "'VALUES'", "'RELOAD'", null, "'QUERY'", 
                            "'QUARTER'", null, null, null, "'DAYOFWEEK'", 
                            null, null, null, "'START'", "'TRANSACTION'", 
                            "'COMMIT'", "'ROLLBACK'", "'WORK'", "'ONLY'", 
                            "'WRITE'", "'ISOLATION'", "'LEVEL'", "'SNAPSHOT'", 
                            "'AUTOCOMMIT'", "'CACHE'", "'PRIMARY'", "'FOREIGN'", 
                            "'REFERENCES'", "'CONSTRAINT'", "'ENFORCED'", 
                            "'VALIDATE'", "'NOVALIDATE'", "'RELY'", "'NORELY'", 
                            "'UNIQUE'", "'KEY'", "'ABORT'", "'EXTRACT'", 
                            "'FLOOR'", "'MERGE'", "'MATCHED'", "'REPL'", 
                            "'DUMP'", "'STATUS'", "'VECTORIZATION'", "'SUMMARY'", 
                            "'OPERATOR'", "'EXPRESSION'", "'DETAIL'", "'WAIT'", 
                            "'RESOURCE'", "'PLAN'", "'QUERY_PARALLELISM'", 
                            "'PLANS'", "'ACTIVATE'", "'DEFAULT'", "'CHECK'", 
                            "'POOL'", "'MOVE'", "'DO'", "'ALLOC_FRACTION'", 
                            "'SCHEDULING_POLICY'", "'PATH'", "'MAPPING'", 
                            "'WORKLOAD'", "'MANAGEMENT'", "'ACTIVE'", "'UNMANAGED'", 
                            "'APPLICATION'", "'SYNC'", "'.'", "':'", "','", 
                            "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                            null, "'<=>'", null, "'<='", "'<'", "'>='", 
                            "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", 
                            "'&'", "'~'", "'|'", "'||'", "'^'", "'?'", "'$'" ];
    static symbolicNames = [ null, "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_NONE", 
                             "KW_AND", "KW_OR", "KW_NOT", "KW_LIKE", "KW_ANY", 
                             "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", 
                             "KW_NULLS", "KW_LAST", "KW_ORDER", "KW_GROUP", 
                             "KW_BY", "KW_HAVING", "KW_WHERE", "KW_FROM", 
                             "KW_AS", "KW_SELECT", "KW_DISTINCT", "KW_INSERT", 
                             "KW_OVERWRITE", "KW_OUTER", "KW_UNIQUEJOIN", 
                             "KW_PRESERVE", "KW_JOIN", "KW_LEFT", "KW_RIGHT", 
                             "KW_FULL", "KW_ON", "KW_PARTITION", "KW_PARTITIONS", 
                             "KW_TABLE", "KW_TABLES", "KW_COLUMNS", "KW_INDEX", 
                             "KW_INDEXES", "KW_REBUILD", "KW_FUNCTIONS", 
                             "KW_SHOW", "KW_MSCK", "KW_REPAIR", "KW_DIRECTORY", 
                             "KW_LOCAL", "KW_TRANSFORM", "KW_USING", "KW_CLUSTER", 
                             "KW_DISTRIBUTE", "KW_SORT", "KW_UNION", "KW_EXCEPT", 
                             "KW_LOAD", "KW_EXPORT", "KW_IMPORT", "KW_REPLICATION", 
                             "KW_METADATA", "KW_DATA", "KW_INPATH", "KW_IS", 
                             "KW_NULL", "KW_CREATE", "KW_EXTERNAL", "KW_ALTER", 
                             "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_AFTER", 
                             "KW_DESCRIBE", "KW_DROP", "KW_RENAME", "KW_TO", 
                             "KW_COMMENT", "KW_BOOLEAN", "KW_TINYINT", "KW_SMALLINT", 
                             "KW_INT", "KW_BIGINT", "KW_FLOAT", "KW_DOUBLE", 
                             "KW_PRECISION", "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", 
                             "KW_TIMESTAMPLOCALTZ", "KW_TIME", "KW_ZONE", 
                             "KW_INTERVAL", "KW_DECIMAL", "KW_STRING", "KW_CHAR", 
                             "KW_VARCHAR", "KW_ARRAY", "KW_STRUCT", "KW_MAP", 
                             "KW_UNIONTYPE", "KW_REDUCE", "KW_PARTITIONED", 
                             "KW_CLUSTERED", "KW_SORTED", "KW_INTO", "KW_BUCKETS", 
                             "KW_ROW", "KW_ROWS", "KW_FORMAT", "KW_DELIMITED", 
                             "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", 
                             "KW_COLLECTION", "KW_ITEMS", "KW_KEYS", "KW_KEY_TYPE", 
                             "KW_KILL", "KW_LINES", "KW_STORED", "KW_FILEFORMAT", 
                             "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "KW_INPUTDRIVER", 
                             "KW_OUTPUTDRIVER", "KW_ENABLE", "KW_DISABLE", 
                             "KW_LOCATION", "KW_TABLESAMPLE", "KW_BUCKET", 
                             "KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", 
                             "KW_ADD", "KW_REPLACE", "KW_RLIKE", "KW_REGEXP", 
                             "KW_TEMPORARY", "KW_FUNCTION", "KW_MACRO", 
                             "KW_FILE", "KW_JAR", "KW_EXPLAIN", "KW_EXTENDED", 
                             "KW_FORMATTED", "KW_DEPENDENCY", "KW_LOGICAL", 
                             "KW_SERDE", "KW_WITH", "KW_DEFERRED", "KW_SERDEPROPERTIES", 
                             "KW_DBPROPERTIES", "KW_LIMIT", "KW_OFFSET", 
                             "KW_SET", "KW_UNSET", "KW_TBLPROPERTIES", "KW_IDXPROPERTIES", 
                             "KW_VALUE_TYPE", "KW_ELEM_TYPE", "KW_DEFINED", 
                             "KW_CASE", "KW_WHEN", "KW_THEN", "KW_ELSE", 
                             "KW_END", "KW_MAPJOIN", "KW_STREAMTABLE", "KW_CLUSTERSTATUS", 
                             "KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", 
                             "KW_PLUS", "KW_MINUS", "KW_FETCH", "KW_INTERSECT", 
                             "KW_VIEW", "KW_VIEWS", "KW_IN", "KW_DATABASE", 
                             "KW_DATABASES", "KW_MATERIALIZED", "KW_SCHEMA", 
                             "KW_SCHEMAS", "KW_GRANT", "KW_REVOKE", "KW_SSL", 
                             "KW_UNDO", "KW_LOCK", "KW_LOCKS", "KW_UNLOCK", 
                             "KW_SHARED", "KW_EXCLUSIVE", "KW_PROCEDURE", 
                             "KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS", 
                             "KW_PURGE", "KW_RANGE", "KW_ANALYZE", "KW_BEFORE", 
                             "KW_BETWEEN", "KW_BOTH", "KW_BINARY", "KW_CROSS", 
                             "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", "KW_RECORDREADER", 
                             "KW_RECORDWRITER", "KW_SEMI", "KW_LATERAL", 
                             "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_COMPUTE", 
                             "KW_STATISTICS", "KW_USE", "KW_OPTION", "KW_CONCATENATE", 
                             "KW_SHOW_DATABASE", "KW_UPDATE", "KW_RESTRICT", 
                             "KW_CASCADE", "KW_SKEWED", "KW_ROLLUP", "KW_CUBE", 
                             "KW_DIRECTORIES", "KW_FOR", "KW_WINDOW", "KW_UNBOUNDED", 
                             "KW_PRECEDING", "KW_FOLLOWING", "KW_CURRENT", 
                             "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", 
                             "KW_LESS", "KW_MORE", "KW_OVER", "KW_GROUPING", 
                             "KW_SETS", "KW_TRUNCATE", "KW_NOSCAN", "KW_USER", 
                             "KW_ROLE", "KW_ROLES", "KW_INNER", "KW_EXCHANGE", 
                             "KW_URI", "KW_SERVER", "KW_ADMIN", "KW_OWNER", 
                             "KW_PRINCIPALS", "KW_COMPACT", "KW_COMPACTIONS", 
                             "KW_TRANSACTIONS", "KW_REWRITE", "KW_AUTHORIZATION", 
                             "KW_REOPTIMIZATION", "KW_CONF", "KW_VALUES", 
                             "KW_RELOAD", "KW_YEAR", "KW_QUERY", "KW_QUARTER", 
                             "KW_MONTH", "KW_WEEK", "KW_DAY", "KW_DOW", 
                             "KW_HOUR", "KW_MINUTE", "KW_SECOND", "KW_START", 
                             "KW_TRANSACTION", "KW_COMMIT", "KW_ROLLBACK", 
                             "KW_WORK", "KW_ONLY", "KW_WRITE", "KW_ISOLATION", 
                             "KW_LEVEL", "KW_SNAPSHOT", "KW_AUTOCOMMIT", 
                             "KW_CACHE", "KW_PRIMARY", "KW_FOREIGN", "KW_REFERENCES", 
                             "KW_CONSTRAINT", "KW_ENFORCED", "KW_VALIDATE", 
                             "KW_NOVALIDATE", "KW_RELY", "KW_NORELY", "KW_UNIQUE", 
                             "KW_KEY", "KW_ABORT", "KW_EXTRACT", "KW_FLOOR", 
                             "KW_MERGE", "KW_MATCHED", "KW_REPL", "KW_DUMP", 
                             "KW_STATUS", "KW_VECTORIZATION", "KW_SUMMARY", 
                             "KW_OPERATOR", "KW_EXPRESSION", "KW_DETAIL", 
                             "KW_WAIT", "KW_RESOURCE", "KW_PLAN", "KW_QUERY_PARALLELISM", 
                             "KW_PLANS", "KW_ACTIVATE", "KW_DEFAULT", "KW_CHECK", 
                             "KW_POOL", "KW_MOVE", "KW_DO", "KW_ALLOC_FRACTION", 
                             "KW_SCHEDULING_POLICY", "KW_PATH", "KW_MAPPING", 
                             "KW_WORKLOAD", "KW_MANAGEMENT", "KW_ACTIVE", 
                             "KW_UNMANAGED", "KW_APPLICATION", "KW_SYNC", 
                             "DOT", "COLON", "COMMA", "SEMICOLON", "LPAREN", 
                             "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", 
                             "EQUAL", "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", 
                             "LESSTHAN", "GREATERTHANOREQUALTO", "GREATERTHAN", 
                             "DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", 
                             "AMPERSAND", "TILDE", "BITWISEOR", "CONCATENATE", 
                             "BITWISEXOR", "QUESTION", "DOLLAR", "StringLiteral", 
                             "CharSetLiteral", "IntegralLiteral", "NumberLiteral", 
                             "ByteLengthLiteral", "Number", "Identifier", 
                             "QuotedIdentifier", "CharSetName", "WS", "LINE_COMMENT", 
                             "QUERY_HINT", "SHOW_HINT", "HIDDEN_HINT" ];
    static ruleNames = [ "statements", "statementSeparator", "statement", 
                         "explainStatement", "explainOption", "vectorizationOnly", 
                         "vectorizatonDetail", "execStatement", "loadStatement", 
                         "replicationClause", "exportStatement", "importStatement", 
                         "replDumpStatement", "replLoadStatement", "replConfigs", 
                         "replConfigsList", "replStatusStatement", "ddlStatement", 
                         "ifExists", "restrictOrCascade", "ifNotExists", 
                         "rewriteEnabled", "rewriteDisabled", "storedAsDirs", 
                         "orReplace", "createDatabaseStatement", "dbLocation", 
                         "dbProperties", "dbPropertiesList", "switchDatabaseStatement", 
                         "dropDatabaseStatement", "databaseComment", "createTableStatement", 
                         "truncateTableStatement", "dropTableStatement", 
                         "alterStatement", "alterTableStatementSuffix", 
                         "alterTblPartitionStatementSuffix", "alterStatementPartitionKeyType", 
                         "alterViewStatementSuffix", "alterMaterializedViewStatementSuffix", 
                         "alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", 
                         "alterDatabaseSuffixSetOwner", "alterDatabaseSuffixSetLocation", 
                         "alterStatementSuffixRename", "alterStatementSuffixAddCol", 
                         "alterStatementSuffixAddConstraint", "alterStatementSuffixDropConstraint", 
                         "alterStatementSuffixRenameCol", "alterStatementSuffixUpdateStatsCol", 
                         "alterStatementSuffixUpdateStats", "alterStatementChangeColPosition", 
                         "alterStatementSuffixAddPartitions", "alterStatementSuffixAddPartitionsElement", 
                         "alterStatementSuffixTouch", "alterStatementSuffixArchive", 
                         "alterStatementSuffixUnArchive", "partitionLocation", 
                         "alterStatementSuffixDropPartitions", "alterStatementSuffixProperties", 
                         "alterViewSuffixProperties", "alterMaterializedViewSuffixRewrite", 
                         "alterMaterializedViewSuffixRebuild", "alterStatementSuffixSerdeProperties", 
                         "alterIndexStatementSuffix", "alterStatementSuffixFileFormat", 
                         "alterStatementSuffixClusterbySortby", "alterTblPartitionStatementSuffixSkewedLocation", 
                         "skewedLocations", "skewedLocationsList", "skewedLocationMap", 
                         "alterStatementSuffixLocation", "alterStatementSuffixSkewedby", 
                         "alterStatementSuffixExchangePartition", "alterStatementSuffixRenamePart", 
                         "alterStatementSuffixStatsPart", "alterStatementSuffixMergeFiles", 
                         "alterStatementSuffixBucketNum", "createIndexStatement", 
                         "locationPath", "dropIndexStatement", "tablePartitionPrefix", 
                         "blocking", "alterStatementSuffixCompact", "alterStatementSuffixSetOwner", 
                         "fileFormat", "inputFileFormat", "tabTypeExpr", 
                         "partTypeExpr", "tabPartColTypeExpr", "descStatement", 
                         "analyzeStatement", "showStatement", "lockStatement", 
                         "lockDatabase", "lockMode", "unlockStatement", 
                         "unlockDatabase", "createRoleStatement", "dropRoleStatement", 
                         "grantPrivileges", "revokePrivileges", "grantRole", 
                         "revokeRole", "showRoleGrants", "showRoles", "showCurrentRole", 
                         "setRole", "showGrants", "showRolePrincipals", 
                         "privilegeIncludeColObject", "privilegeObject", 
                         "privObject", "privObjectCols", "privilegeList", 
                         "privlegeDef", "privilegeType", "principalSpecification", 
                         "principalName", "withGrantOption", "grantOptionFor", 
                         "adminOptionFor", "withAdminOption", "metastoreCheck", 
                         "resourceList", "resource", "resourceType", "createFunctionStatement", 
                         "dropFunctionStatement", "reloadFunctionStatement", 
                         "createMacroStatement", "dropMacroStatement", "createViewStatement", 
                         "createMaterializedViewStatement", "viewPartition", 
                         "dropViewStatement", "dropMaterializedViewStatement", 
                         "showFunctionIdentifier", "showStmtIdentifier", 
                         "tableComment", "tablePartition", "tableBuckets", 
                         "tableSkewed", "rowFormat", "recordReader", "recordWriter", 
                         "rowFormatSerde", "rowFormatDelimited", "tableRowFormat", 
                         "tablePropertiesPrefixed", "tableProperties", "tablePropertiesList", 
                         "keyValueProperty", "keyProperty", "tableRowFormatFieldIdentifier", 
                         "tableRowFormatCollItemsIdentifier", "tableRowFormatMapKeysIdentifier", 
                         "tableRowFormatLinesIdentifier", "tableRowNullFormat", 
                         "tableFileFormat", "tableLocation", "columnNameTypeList", 
                         "columnNameTypeOrConstraintList", "columnNameColonTypeList", 
                         "columnNameList", "columnName", "extColumnName", 
                         "columnNameOrderList", "columnParenthesesList", 
                         "enableValidateSpecification", "enableSpecification", 
                         "validateSpecification", "enforcedSpecification", 
                         "relySpecification", "createConstraint", "alterConstraintWithName", 
                         "pkConstraint", "createForeignKey", "alterForeignKeyWithName", 
                         "skewedValueElement", "skewedColumnValuePairList", 
                         "skewedColumnValuePair", "skewedColumnValues", 
                         "skewedColumnValue", "skewedValueLocationElement", 
                         "orderSpecification", "nullOrdering", "columnNameOrder", 
                         "columnNameCommentList", "columnNameComment", "columnRefOrder", 
                         "columnNameType", "columnNameTypeOrConstraint", 
                         "tableConstraint", "columnNameTypeConstraint", 
                         "columnConstraint", "foreignKeyConstraint", "colConstraint", 
                         "alterColumnConstraint", "alterForeignKeyConstraint", 
                         "alterColConstraint", "tableConstraintPrimaryKey", 
                         "constraintOptsCreate", "constraintOptsAlter", 
                         "columnNameColonType", "colType", "colTypeList", 
                         "type_db_col", "primitiveType", "listType", "structType", 
                         "mapType", "unionType", "setOperator", "queryStatementExpression", 
                         "queryStatementExpressionBody", "withClause", "cteStatement", 
                         "fromStatement", "singleFromStatement", "regularBody", 
                         "atomSelectStatement", "selectStatement", "setOpSelectStatement", 
                         "selectStatementWithCTE", "body", "insertClause", 
                         "destination", "limitClause", "deleteStatement", 
                         "columnAssignmentClause", "setColumnsClause", "updateStatement", 
                         "sqlTransactionStatement", "startTransactionStatement", 
                         "transactionMode", "transactionAccessMode", "isolationLevel", 
                         "levelOfIsolation", "commitStatement", "rollbackStatement", 
                         "setAutoCommitStatement", "abortTransactionStatement", 
                         "mergeStatement", "whenClauses", "whenNotMatchedClause", 
                         "whenMatchedAndClause", "whenMatchedThenClause", 
                         "updateOrDelete", "killQueryStatement", "selectClause", 
                         "selectList", "selectTrfmClause", "selectItem", 
                         "trfmClause", "selectExpression", "selectExpressionList", 
                         "window_clause", "window_defn", "window_specification", 
                         "window_frame", "window_range_expression", "window_value_expression", 
                         "window_frame_start_boundary", "window_frame_boundary", 
                         "tableAllColumns", "tableOrColumn", "expressionList", 
                         "aliasList", "fromClause", "fromSource", "atomjoinSource", 
                         "joinSource", "joinSourcePart", "uniqueJoinSource", 
                         "uniqueJoinExpr", "uniqueJoinToken", "joinToken", 
                         "lateralView", "tableAlias", "tableBucketSample", 
                         "splitSample", "tableSample", "tableSource", "uniqueJoinTableSource", 
                         "tableName", "viewName", "subQuerySource", "partitioningSpec", 
                         "partitionTableFunctionSource", "partitionedTableFunction", 
                         "whereClause", "searchCondition", "valuesClause", 
                         "valuesTableConstructor", "valueRowConstructor", 
                         "virtualTableSource", "groupByClause", "groupby_expression", 
                         "groupByEmpty", "rollupStandard", "rollupOldSyntax", 
                         "groupingSetExpression", "groupingSetExpressionMultiple", 
                         "groupingExpressionSingle", "havingClause", "havingCondition", 
                         "expressionsInParenthesis", "expressionsNotInParenthesis", 
                         "expressionPart", "expressions", "columnRefOrderInParenthesis", 
                         "columnRefOrderNotInParenthesis", "orderByClause", 
                         "clusterByClause", "partitionByClause", "distributeByClause", 
                         "sortByClause", "function_", "functionName", "castExpression", 
                         "caseExpression", "whenExpression", "floorExpression", 
                         "floorDateQualifiers", "extractExpression", "timeQualifiers", 
                         "constant", "stringLiteralSequence", "charSetStringLiteral", 
                         "dateLiteral", "timestampLiteral", "timestampLocalTZLiteral", 
                         "intervalValue", "intervalLiteral", "intervalExpression", 
                         "intervalQualifiers", "atomExpression", "precedenceUnaryOperator", 
                         "isCondition", "precedenceBitwiseXorOperator", 
                         "precedenceStarOperator", "precedencePlusOperator", 
                         "precedenceConcatenateOperator", "precedenceAmpersandOperator", 
                         "precedenceBitwiseOrOperator", "precedenceRegexpOperator", 
                         "precedenceComparisonOperator", "precedenceNotOperator", 
                         "precedenceLogicOperator", "expression", "precedenceSimilarExpressionIn", 
                         "subQueryExpression", "booleanValue", "booleanValueTok", 
                         "tableOrPartition", "partitionSpec", "partitionVal", 
                         "dropPartitionSpec", "dropPartitionVal", "dropPartitionOperator", 
                         "sysFuncNames", "descFuncNames", "identifier", 
                         "functionIdentifier", "principalIdentifier", "nonReserved", 
                         "sql11ReservedKeywordsUsedAsFunctionName" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = HiveParser.ruleNames;
        this.literalNames = HiveParser.literalNames;
        this.symbolicNames = HiveParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 351:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 15);
    		case 1:
    			return this.precpred(this._ctx, 14);
    		case 2:
    			return this.precpred(this._ctx, 13);
    		case 3:
    			return this.precpred(this._ctx, 12);
    		case 4:
    			return this.precpred(this._ctx, 11);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 5);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 16);
    		case 11:
    			return this.precpred(this._ctx, 7);
    		case 12:
    			return this.precpred(this._ctx, 6);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, HiveParser.RULE_statements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_FROM) | (1 << HiveParser.KW_SELECT) | (1 << HiveParser.KW_INSERT))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (HiveParser.KW_SHOW - 44)) | (1 << (HiveParser.KW_MSCK - 44)) | (1 << (HiveParser.KW_LOAD - 44)) | (1 << (HiveParser.KW_EXPORT - 44)) | (1 << (HiveParser.KW_IMPORT - 44)) | (1 << (HiveParser.KW_CREATE - 44)) | (1 << (HiveParser.KW_ALTER - 44)) | (1 << (HiveParser.KW_DESCRIBE - 44)) | (1 << (HiveParser.KW_DROP - 44)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (HiveParser.KW_MAP - 98)) | (1 << (HiveParser.KW_REDUCE - 98)) | (1 << (HiveParser.KW_KILL - 98)))) !== 0) || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (HiveParser.KW_EXPLAIN - 143)) | (1 << (HiveParser.KW_WITH - 143)) | (1 << (HiveParser.KW_SET - 143)) | (1 << (HiveParser.KW_DELETE - 143)))) !== 0) || ((((_la - 186)) & ~0x1f) == 0 && ((1 << (_la - 186)) & ((1 << (HiveParser.KW_GRANT - 186)) | (1 << (HiveParser.KW_REVOKE - 186)) | (1 << (HiveParser.KW_LOCK - 186)) | (1 << (HiveParser.KW_UNLOCK - 186)) | (1 << (HiveParser.KW_ANALYZE - 186)))) !== 0) || ((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & ((1 << (HiveParser.KW_USE - 220)) | (1 << (HiveParser.KW_UPDATE - 220)) | (1 << (HiveParser.KW_TRUNCATE - 220)))) !== 0) || ((((_la - 264)) & ~0x1f) == 0 && ((1 << (_la - 264)) & ((1 << (HiveParser.KW_RELOAD - 264)) | (1 << (HiveParser.KW_START - 264)) | (1 << (HiveParser.KW_COMMIT - 264)) | (1 << (HiveParser.KW_ROLLBACK - 264)))) !== 0) || ((((_la - 298)) & ~0x1f) == 0 && ((1 << (_la - 298)) & ((1 << (HiveParser.KW_ABORT - 298)) | (1 << (HiveParser.KW_MERGE - 298)) | (1 << (HiveParser.KW_REPL - 298)))) !== 0) || _la===HiveParser.LPAREN) {
	            this.state = 738;
	            this.statement();
	            this.state = 739;
	            this.statementSeparator();
	            this.state = 745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 746;
	        this.match(HiveParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementSeparator() {
	    let localctx = new StatementSeparatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, HiveParser.RULE_statementSeparator);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.SEMICOLON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.match(HiveParser.SEMICOLON);
	            break;
	        case HiveParser.EOF:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_FROM:
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_INSERT:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_IMPORT:
	        case HiveParser.KW_CREATE:
	        case HiveParser.KW_ALTER:
	        case HiveParser.KW_DESCRIBE:
	        case HiveParser.KW_DROP:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_WITH:
	        case HiveParser.KW_SET:
	        case HiveParser.KW_DELETE:
	        case HiveParser.KW_GRANT:
	        case HiveParser.KW_REVOKE:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_UPDATE:
	        case HiveParser.KW_TRUNCATE:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_START:
	        case HiveParser.KW_COMMIT:
	        case HiveParser.KW_ROLLBACK:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MERGE:
	        case HiveParser.KW_REPL:
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, HiveParser.RULE_statement);
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_EXPLAIN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 752;
	            this.explainStatement();
	            break;
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_FROM:
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_INSERT:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_IMPORT:
	        case HiveParser.KW_CREATE:
	        case HiveParser.KW_ALTER:
	        case HiveParser.KW_DESCRIBE:
	        case HiveParser.KW_DROP:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_WITH:
	        case HiveParser.KW_SET:
	        case HiveParser.KW_DELETE:
	        case HiveParser.KW_GRANT:
	        case HiveParser.KW_REVOKE:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_UPDATE:
	        case HiveParser.KW_TRUNCATE:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_START:
	        case HiveParser.KW_COMMIT:
	        case HiveParser.KW_ROLLBACK:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MERGE:
	        case HiveParser.KW_REPL:
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 753;
	            this.execStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainStatement() {
	    let localctx = new ExplainStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, HiveParser.RULE_explainStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 756;
	        this.match(HiveParser.KW_EXPLAIN);
	        this.state = 766;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_FROM:
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_INSERT:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_IMPORT:
	        case HiveParser.KW_CREATE:
	        case HiveParser.KW_ALTER:
	        case HiveParser.KW_DESCRIBE:
	        case HiveParser.KW_DROP:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_EXTENDED:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_WITH:
	        case HiveParser.KW_SET:
	        case HiveParser.KW_DELETE:
	        case HiveParser.KW_GRANT:
	        case HiveParser.KW_REVOKE:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_UPDATE:
	        case HiveParser.KW_TRUNCATE:
	        case HiveParser.KW_AUTHORIZATION:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_START:
	        case HiveParser.KW_COMMIT:
	        case HiveParser.KW_ROLLBACK:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MERGE:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.LPAREN:
	            this.state = 760;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 757;
	                    this.explainOption(); 
	                }
	                this.state = 762;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	            }

	            this.state = 763;
	            this.execStatement();
	            break;
	        case HiveParser.KW_REWRITE:
	            this.state = 764;
	            this.match(HiveParser.KW_REWRITE);
	            this.state = 765;
	            this.queryStatementExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainOption() {
	    let localctx = new ExplainOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, HiveParser.RULE_explainOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 782;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_EXTENDED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 768;
	            this.match(HiveParser.KW_EXTENDED);
	            break;
	        case HiveParser.KW_FORMATTED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 769;
	            this.match(HiveParser.KW_FORMATTED);
	            break;
	        case HiveParser.KW_DEPENDENCY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 770;
	            this.match(HiveParser.KW_DEPENDENCY);
	            break;
	        case HiveParser.KW_LOGICAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 771;
	            this.match(HiveParser.KW_LOGICAL);
	            break;
	        case HiveParser.KW_AUTHORIZATION:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 772;
	            this.match(HiveParser.KW_AUTHORIZATION);
	            break;
	        case HiveParser.KW_ANALYZE:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 773;
	            this.match(HiveParser.KW_ANALYZE);
	            break;
	        case HiveParser.KW_REOPTIMIZATION:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 774;
	            this.match(HiveParser.KW_REOPTIMIZATION);
	            break;
	        case HiveParser.KW_VECTORIZATION:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 775;
	            this.match(HiveParser.KW_VECTORIZATION);
	            this.state = 777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ONLY) {
	                this.state = 776;
	                this.vectorizationOnly();
	            }

	            this.state = 780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 307)) & ~0x1f) == 0 && ((1 << (_la - 307)) & ((1 << (HiveParser.KW_SUMMARY - 307)) | (1 << (HiveParser.KW_OPERATOR - 307)) | (1 << (HiveParser.KW_EXPRESSION - 307)) | (1 << (HiveParser.KW_DETAIL - 307)))) !== 0)) {
	                this.state = 779;
	                this.vectorizatonDetail();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vectorizationOnly() {
	    let localctx = new VectorizationOnlyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, HiveParser.RULE_vectorizationOnly);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 784;
	        this.match(HiveParser.KW_ONLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vectorizatonDetail() {
	    let localctx = new VectorizatonDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, HiveParser.RULE_vectorizatonDetail);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 786;
	        _la = this._input.LA(1);
	        if(!(((((_la - 307)) & ~0x1f) == 0 && ((1 << (_la - 307)) & ((1 << (HiveParser.KW_SUMMARY - 307)) | (1 << (HiveParser.KW_OPERATOR - 307)) | (1 << (HiveParser.KW_EXPRESSION - 307)) | (1 << (HiveParser.KW_DETAIL - 307)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execStatement() {
	    let localctx = new ExecStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, HiveParser.RULE_execStatement);
	    try {
	        this.state = 800;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 788;
	            this.queryStatementExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 789;
	            this.loadStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 790;
	            this.exportStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 791;
	            this.importStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 792;
	            this.replDumpStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 793;
	            this.replLoadStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 794;
	            this.replStatusStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 795;
	            this.ddlStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 796;
	            this.deleteStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 797;
	            this.updateStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 798;
	            this.sqlTransactionStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 799;
	            this.mergeStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadStatement() {
	    let localctx = new LoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, HiveParser.RULE_loadStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 802;
	        this.match(HiveParser.KW_LOAD);
	        this.state = 803;
	        this.match(HiveParser.KW_DATA);
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LOCAL) {
	            this.state = 804;
	            this.match(HiveParser.KW_LOCAL);
	        }

	        this.state = 807;
	        this.match(HiveParser.KW_INPATH);
	        this.state = 808;
	        this.match(HiveParser.StringLiteral);
	        this.state = 810;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_OVERWRITE) {
	            this.state = 809;
	            this.match(HiveParser.KW_OVERWRITE);
	        }

	        this.state = 812;
	        this.match(HiveParser.KW_INTO);
	        this.state = 813;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 814;
	        this.tableOrPartition();
	        this.state = 816;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_INPUTFORMAT) {
	            this.state = 815;
	            this.inputFileFormat();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationClause() {
	    let localctx = new ReplicationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, HiveParser.RULE_replicationClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 818;
	        this.match(HiveParser.KW_FOR);
	        this.state = 820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_METADATA) {
	            this.state = 819;
	            this.match(HiveParser.KW_METADATA);
	        }

	        this.state = 822;
	        this.match(HiveParser.KW_REPLICATION);
	        this.state = 823;
	        this.match(HiveParser.LPAREN);
	        this.state = 824;
	        this.match(HiveParser.StringLiteral);
	        this.state = 825;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, HiveParser.RULE_exportStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        this.match(HiveParser.KW_EXPORT);
	        this.state = 828;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 829;
	        this.tableOrPartition();
	        this.state = 830;
	        this.match(HiveParser.KW_TO);
	        this.state = 831;
	        this.match(HiveParser.StringLiteral);
	        this.state = 833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_FOR) {
	            this.state = 832;
	            this.replicationClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, HiveParser.RULE_importStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 835;
	        this.match(HiveParser.KW_IMPORT);
	        this.state = 841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TABLE || _la===HiveParser.KW_EXTERNAL) {
	            this.state = 837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_EXTERNAL) {
	                this.state = 836;
	                this.match(HiveParser.KW_EXTERNAL);
	            }

	            this.state = 839;
	            this.match(HiveParser.KW_TABLE);
	            this.state = 840;
	            this.tableOrPartition();
	        }

	        this.state = 843;
	        this.match(HiveParser.KW_FROM);

	        this.state = 844;
	        localctx.path = this.match(HiveParser.StringLiteral);
	        this.state = 846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LOCATION) {
	            this.state = 845;
	            this.tableLocation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replDumpStatement() {
	    let localctx = new ReplDumpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, HiveParser.RULE_replDumpStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.match(HiveParser.KW_REPL);
	        this.state = 849;
	        this.match(HiveParser.KW_DUMP);
	        this.state = 850;
	        this.identifier();
	        this.state = 853;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.DOT) {
	            this.state = 851;
	            this.match(HiveParser.DOT);
	            this.state = 852;
	            this.identifier();
	        }

	        this.state = 865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 855;
	            this.match(HiveParser.KW_FROM);
	            this.state = 856;
	            this.match(HiveParser.Number);
	            this.state = 859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_TO) {
	                this.state = 857;
	                this.match(HiveParser.KW_TO);
	                this.state = 858;
	                this.match(HiveParser.Number);
	            }

	            this.state = 863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LIMIT) {
	                this.state = 861;
	                this.match(HiveParser.KW_LIMIT);
	                this.state = 862;
	                this.match(HiveParser.Number);
	            }


	        }
	        this.state = 869;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 867;
	            this.match(HiveParser.KW_WITH);
	            this.state = 868;
	            this.replConfigs();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replLoadStatement() {
	    let localctx = new ReplLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, HiveParser.RULE_replLoadStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(HiveParser.KW_REPL);
	        this.state = 872;
	        this.match(HiveParser.KW_LOAD);
	        this.state = 878;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1f) == 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1f) == 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1f) == 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la===HiveParser.Identifier) {
	            this.state = 873;
	            this.identifier();
	            this.state = 876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.DOT) {
	                this.state = 874;
	                this.match(HiveParser.DOT);
	                this.state = 875;
	                this.identifier();
	            }

	        }

	        this.state = 880;
	        this.match(HiveParser.KW_FROM);
	        this.state = 881;
	        this.match(HiveParser.StringLiteral);
	        this.state = 884;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 882;
	            this.match(HiveParser.KW_WITH);
	            this.state = 883;
	            this.replConfigs();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replConfigs() {
	    let localctx = new ReplConfigsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, HiveParser.RULE_replConfigs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this.match(HiveParser.LPAREN);
	        this.state = 887;
	        this.replConfigsList();
	        this.state = 888;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replConfigsList() {
	    let localctx = new ReplConfigsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, HiveParser.RULE_replConfigsList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 890;
	        this.keyValueProperty();
	        this.state = 895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 891;
	            this.match(HiveParser.COMMA);
	            this.state = 892;
	            this.keyValueProperty();
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replStatusStatement() {
	    let localctx = new ReplStatusStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, HiveParser.RULE_replStatusStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 898;
	        this.match(HiveParser.KW_REPL);
	        this.state = 899;
	        this.match(HiveParser.KW_STATUS);
	        this.state = 900;
	        this.identifier();
	        this.state = 903;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.DOT) {
	            this.state = 901;
	            this.match(HiveParser.DOT);
	            this.state = 902;
	            this.identifier();
	        }

	        this.state = 907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 905;
	            this.match(HiveParser.KW_WITH);
	            this.state = 906;
	            this.replConfigs();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlStatement() {
	    let localctx = new DdlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, HiveParser.RULE_ddlStatement);
	    try {
	        this.state = 949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 909;
	            this.createDatabaseStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 910;
	            this.switchDatabaseStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 911;
	            this.dropDatabaseStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 912;
	            this.createTableStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 913;
	            this.dropTableStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 914;
	            this.truncateTableStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 915;
	            this.alterStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 916;
	            this.descStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 917;
	            this.showStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 918;
	            this.metastoreCheck();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 919;
	            this.createViewStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 920;
	            this.createMaterializedViewStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 921;
	            this.dropViewStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 922;
	            this.dropMaterializedViewStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 923;
	            this.createFunctionStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 924;
	            this.createMacroStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 925;
	            this.dropFunctionStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 926;
	            this.reloadFunctionStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 927;
	            this.dropMacroStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 928;
	            this.analyzeStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 929;
	            this.lockStatement();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 930;
	            this.unlockStatement();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 931;
	            this.lockDatabase();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 932;
	            this.unlockDatabase();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 933;
	            this.createRoleStatement();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 934;
	            this.dropRoleStatement();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 935;
	            this.grantPrivileges();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 936;
	            this.revokePrivileges();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 937;
	            this.showGrants();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 938;
	            this.showRoleGrants();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 939;
	            this.showRolePrincipals();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 940;
	            this.showRoles();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 941;
	            this.grantRole();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 942;
	            this.revokeRole();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 943;
	            this.setRole();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 944;
	            this.showCurrentRole();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 945;
	            this.abortTransactionStatement();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 946;
	            this.killQueryStatement();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 947;
	            this.createIndexStatement();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 948;
	            this.dropIndexStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExists() {
	    let localctx = new IfExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, HiveParser.RULE_ifExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 951;
	        this.match(HiveParser.KW_IF);
	        this.state = 952;
	        this.match(HiveParser.KW_EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restrictOrCascade() {
	    let localctx = new RestrictOrCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, HiveParser.RULE_restrictOrCascade);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_RESTRICT || _la===HiveParser.KW_CASCADE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExists() {
	    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, HiveParser.RULE_ifNotExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.match(HiveParser.KW_IF);
	        this.state = 957;
	        this.match(HiveParser.KW_NOT);
	        this.state = 958;
	        this.match(HiveParser.KW_EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rewriteEnabled() {
	    let localctx = new RewriteEnabledContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, HiveParser.RULE_rewriteEnabled);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this.match(HiveParser.KW_ENABLE);
	        this.state = 961;
	        this.match(HiveParser.KW_REWRITE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rewriteDisabled() {
	    let localctx = new RewriteDisabledContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, HiveParser.RULE_rewriteDisabled);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 963;
	        this.match(HiveParser.KW_DISABLE);
	        this.state = 964;
	        this.match(HiveParser.KW_REWRITE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storedAsDirs() {
	    let localctx = new StoredAsDirsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, HiveParser.RULE_storedAsDirs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this.match(HiveParser.KW_STORED);
	        this.state = 967;
	        this.match(HiveParser.KW_AS);
	        this.state = 968;
	        this.match(HiveParser.KW_DIRECTORIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orReplace() {
	    let localctx = new OrReplaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, HiveParser.RULE_orReplace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 970;
	        this.match(HiveParser.KW_OR);
	        this.state = 971;
	        this.match(HiveParser.KW_REPLACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabaseStatement() {
	    let localctx = new CreateDatabaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, HiveParser.RULE_createDatabaseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 974;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 975;
	            this.ifNotExists();
	        }

	        this.state = 978;
	        this.identifier();
	        this.state = 980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 979;
	            this.databaseComment();
	        }

	        this.state = 983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LOCATION) {
	            this.state = 982;
	            this.dbLocation();
	        }

	        this.state = 988;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        if(la_===1) {
	            this.state = 985;
	            this.match(HiveParser.KW_WITH);
	            this.state = 986;
	            this.match(HiveParser.KW_DBPROPERTIES);
	            this.state = 987;
	            this.dbProperties();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dbLocation() {
	    let localctx = new DbLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, HiveParser.RULE_dbLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.match(HiveParser.KW_LOCATION);
	        this.state = 991;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dbProperties() {
	    let localctx = new DbPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, HiveParser.RULE_dbProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        this.match(HiveParser.LPAREN);
	        this.state = 994;
	        this.dbPropertiesList();
	        this.state = 995;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dbPropertiesList() {
	    let localctx = new DbPropertiesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, HiveParser.RULE_dbPropertiesList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 997;
	        this.keyValueProperty();
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 998;
	            this.match(HiveParser.COMMA);
	            this.state = 999;
	            this.keyValueProperty();
	            this.state = 1004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchDatabaseStatement() {
	    let localctx = new SwitchDatabaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, HiveParser.RULE_switchDatabaseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1005;
	        this.match(HiveParser.KW_USE);
	        this.state = 1006;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDatabaseStatement() {
	    let localctx = new DropDatabaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, HiveParser.RULE_dropDatabaseStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1008;
	        this.match(HiveParser.KW_DROP);
	        this.state = 1009;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1011;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 1010;
	            this.ifExists();
	        }

	        this.state = 1013;
	        this.identifier();
	        this.state = 1015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_RESTRICT || _la===HiveParser.KW_CASCADE) {
	            this.state = 1014;
	            this.restrictOrCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	databaseComment() {
	    let localctx = new DatabaseCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, HiveParser.RULE_databaseComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this.match(HiveParser.KW_COMMENT);
	        this.state = 1018;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableStatement() {
	    let localctx = new CreateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, HiveParser.RULE_createTableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1020;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 1022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TEMPORARY) {
	            this.state = 1021;
	            this.match(HiveParser.KW_TEMPORARY);
	        }

	        this.state = 1025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_EXTERNAL) {
	            this.state = 1024;
	            this.match(HiveParser.KW_EXTERNAL);
	        }

	        this.state = 1027;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 1029;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 1028;
	            this.ifNotExists();
	        }

	        this.state = 1031;
	        this.tableName();
	        this.state = 1080;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_LIKE:
	            this.state = 1032;
	            this.match(HiveParser.KW_LIKE);
	            this.state = 1033;
	            this.tableName();
	            this.state = 1035;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ROW) {
	                this.state = 1034;
	                this.tableRowFormat();
	            }

	            this.state = 1038;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_STORED) {
	                this.state = 1037;
	                this.tableFileFormat();
	            }

	            this.state = 1041;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LOCATION) {
	                this.state = 1040;
	                this.tableLocation();
	            }

	            this.state = 1044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_TBLPROPERTIES) {
	                this.state = 1043;
	                this.tablePropertiesPrefixed();
	            }

	            break;
	        case HiveParser.EOF:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_FROM:
	        case HiveParser.KW_AS:
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_INSERT:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_IMPORT:
	        case HiveParser.KW_CREATE:
	        case HiveParser.KW_ALTER:
	        case HiveParser.KW_DESCRIBE:
	        case HiveParser.KW_DROP:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_ROW:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_WITH:
	        case HiveParser.KW_SET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_DELETE:
	        case HiveParser.KW_GRANT:
	        case HiveParser.KW_REVOKE:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_UPDATE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_TRUNCATE:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_START:
	        case HiveParser.KW_COMMIT:
	        case HiveParser.KW_ROLLBACK:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MERGE:
	        case HiveParser.KW_REPL:
	        case HiveParser.SEMICOLON:
	        case HiveParser.LPAREN:
	            this.state = 1050;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            if(la_===1) {
	                this.state = 1046;
	                this.match(HiveParser.LPAREN);
	                this.state = 1047;
	                this.columnNameTypeOrConstraintList();
	                this.state = 1048;
	                this.match(HiveParser.RPAREN);

	            }
	            this.state = 1053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_COMMENT) {
	                this.state = 1052;
	                this.tableComment();
	            }

	            this.state = 1056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PARTITIONED) {
	                this.state = 1055;
	                this.tablePartition();
	            }

	            this.state = 1059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_CLUSTERED) {
	                this.state = 1058;
	                this.tableBuckets();
	            }

	            this.state = 1062;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_SKEWED) {
	                this.state = 1061;
	                this.tableSkewed();
	            }

	            this.state = 1065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ROW) {
	                this.state = 1064;
	                this.tableRowFormat();
	            }

	            this.state = 1068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_STORED) {
	                this.state = 1067;
	                this.tableFileFormat();
	            }

	            this.state = 1071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LOCATION) {
	                this.state = 1070;
	                this.tableLocation();
	            }

	            this.state = 1074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_TBLPROPERTIES) {
	                this.state = 1073;
	                this.tablePropertiesPrefixed();
	            }

	            this.state = 1078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 1076;
	                this.match(HiveParser.KW_AS);
	                this.state = 1077;
	                this.selectStatementWithCTE();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateTableStatement() {
	    let localctx = new TruncateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, HiveParser.RULE_truncateTableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this.match(HiveParser.KW_TRUNCATE);
	        this.state = 1083;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 1084;
	        this.tablePartitionPrefix();
	        this.state = 1090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COLUMNS) {
	            this.state = 1085;
	            this.match(HiveParser.KW_COLUMNS);
	            this.state = 1086;
	            this.match(HiveParser.LPAREN);
	            this.state = 1087;
	            this.columnNameList();
	            this.state = 1088;
	            this.match(HiveParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTableStatement() {
	    let localctx = new DropTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, HiveParser.RULE_dropTableStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1092;
	        this.match(HiveParser.KW_DROP);
	        this.state = 1093;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 1095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 1094;
	            this.ifExists();
	        }

	        this.state = 1097;
	        this.tableName();
	        this.state = 1099;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PURGE) {
	            this.state = 1098;
	            this.match(HiveParser.KW_PURGE);
	        }

	        this.state = 1102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_FOR) {
	            this.state = 1101;
	            this.replicationClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatement() {
	    let localctx = new AlterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, HiveParser.RULE_alterStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1104;
	            this.match(HiveParser.KW_ALTER);
	            this.state = 1105;
	            this.match(HiveParser.KW_TABLE);
	            this.state = 1106;
	            this.tableName();
	            this.state = 1107;
	            this.alterTableStatementSuffix();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1109;
	            this.match(HiveParser.KW_ALTER);
	            this.state = 1110;
	            this.match(HiveParser.KW_VIEW);
	            this.state = 1111;
	            this.tableName();
	            this.state = 1113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 1112;
	                this.match(HiveParser.KW_AS);
	            }

	            this.state = 1115;
	            this.alterViewStatementSuffix();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1117;
	            this.match(HiveParser.KW_ALTER);
	            this.state = 1118;
	            this.match(HiveParser.KW_MATERIALIZED);
	            this.state = 1119;
	            this.match(HiveParser.KW_VIEW);
	            this.state = 1120;
	            this.tableName();
	            this.state = 1121;
	            this.alterMaterializedViewStatementSuffix();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1123;
	            this.match(HiveParser.KW_ALTER);
	            this.state = 1124;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1125;
	            this.alterDatabaseStatementSuffix();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1126;
	            this.match(HiveParser.KW_ALTER);
	            this.state = 1127;
	            this.match(HiveParser.KW_INDEX);
	            this.state = 1128;
	            this.alterIndexStatementSuffix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableStatementSuffix() {
	    let localctx = new AlterTableStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, HiveParser.RULE_alterTableStatementSuffix);
	    var _la = 0; // Token type
	    try {
	        this.state = 1148;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1131;
	            this.alterStatementSuffixRename();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1132;
	            this.alterStatementSuffixDropPartitions();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1133;
	            this.alterStatementSuffixAddPartitions();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1134;
	            this.alterStatementSuffixTouch();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1135;
	            this.alterStatementSuffixArchive();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1136;
	            this.alterStatementSuffixUnArchive();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1137;
	            this.alterStatementSuffixProperties();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1138;
	            this.alterStatementSuffixSkewedby();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1139;
	            this.alterStatementSuffixExchangePartition();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1140;
	            this.alterStatementPartitionKeyType();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1141;
	            this.alterStatementSuffixDropConstraint();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1142;
	            this.alterStatementSuffixAddConstraint();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1144;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PARTITION) {
	                this.state = 1143;
	                this.partitionSpec();
	            }

	            this.state = 1146;
	            this.alterTblPartitionStatementSuffix();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1147;
	            this.alterStatementSuffixSetOwner();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTblPartitionStatementSuffix() {
	    let localctx = new AlterTblPartitionStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, HiveParser.RULE_alterTblPartitionStatementSuffix);
	    try {
	        this.state = 1163;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1150;
	            this.alterStatementSuffixFileFormat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1151;
	            this.alterStatementSuffixLocation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1152;
	            this.alterStatementSuffixMergeFiles();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1153;
	            this.alterStatementSuffixSerdeProperties();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1154;
	            this.alterStatementSuffixRenamePart();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1155;
	            this.alterStatementSuffixBucketNum();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1156;
	            this.alterTblPartitionStatementSuffixSkewedLocation();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1157;
	            this.alterStatementSuffixClusterbySortby();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1158;
	            this.alterStatementSuffixCompact();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1159;
	            this.alterStatementSuffixUpdateStatsCol();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1160;
	            this.alterStatementSuffixUpdateStats();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1161;
	            this.alterStatementSuffixRenameCol();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1162;
	            this.alterStatementSuffixAddCol();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementPartitionKeyType() {
	    let localctx = new AlterStatementPartitionKeyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, HiveParser.RULE_alterStatementPartitionKeyType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.match(HiveParser.KW_PARTITION);
	        this.state = 1166;
	        this.match(HiveParser.KW_COLUMN);
	        this.state = 1167;
	        this.match(HiveParser.LPAREN);
	        this.state = 1168;
	        this.columnNameType();
	        this.state = 1169;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterViewStatementSuffix() {
	    let localctx = new AlterViewStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, HiveParser.RULE_alterViewStatementSuffix);
	    try {
	        this.state = 1176;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_SET:
	        case HiveParser.KW_UNSET:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1171;
	            this.alterViewSuffixProperties();
	            break;
	        case HiveParser.KW_RENAME:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1172;
	            this.alterStatementSuffixRename();
	            break;
	        case HiveParser.KW_ADD:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1173;
	            this.alterStatementSuffixAddPartitions();
	            break;
	        case HiveParser.KW_DROP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1174;
	            this.alterStatementSuffixDropPartitions();
	            break;
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.KW_WITH:
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1175;
	            this.selectStatementWithCTE();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterMaterializedViewStatementSuffix() {
	    let localctx = new AlterMaterializedViewStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, HiveParser.RULE_alterMaterializedViewStatementSuffix);
	    try {
	        this.state = 1180;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1178;
	            this.alterMaterializedViewSuffixRewrite();
	            break;
	        case HiveParser.KW_REBUILD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1179;
	            this.alterMaterializedViewSuffixRebuild();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseStatementSuffix() {
	    let localctx = new AlterDatabaseStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, HiveParser.RULE_alterDatabaseStatementSuffix);
	    try {
	        this.state = 1185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1182;
	            this.alterDatabaseSuffixProperties();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1183;
	            this.alterDatabaseSuffixSetOwner();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1184;
	            this.alterDatabaseSuffixSetLocation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseSuffixProperties() {
	    let localctx = new AlterDatabaseSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, HiveParser.RULE_alterDatabaseSuffixProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1187;
	        this.identifier();
	        this.state = 1188;
	        this.match(HiveParser.KW_SET);
	        this.state = 1189;
	        this.match(HiveParser.KW_DBPROPERTIES);
	        this.state = 1190;
	        this.dbProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseSuffixSetOwner() {
	    let localctx = new AlterDatabaseSuffixSetOwnerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, HiveParser.RULE_alterDatabaseSuffixSetOwner);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1192;
	        this.identifier();
	        this.state = 1193;
	        this.match(HiveParser.KW_SET);
	        this.state = 1194;
	        this.match(HiveParser.KW_OWNER);
	        this.state = 1195;
	        this.principalName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseSuffixSetLocation() {
	    let localctx = new AlterDatabaseSuffixSetLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, HiveParser.RULE_alterDatabaseSuffixSetLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1197;
	        this.identifier();
	        this.state = 1198;
	        this.match(HiveParser.KW_SET);
	        this.state = 1199;
	        this.match(HiveParser.KW_LOCATION);
	        this.state = 1200;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixRename() {
	    let localctx = new AlterStatementSuffixRenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, HiveParser.RULE_alterStatementSuffixRename);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1202;
	        this.match(HiveParser.KW_RENAME);
	        this.state = 1203;
	        this.match(HiveParser.KW_TO);
	        this.state = 1204;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddCol() {
	    let localctx = new AlterStatementSuffixAddColContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, HiveParser.RULE_alterStatementSuffixAddCol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1206;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_ADD || _la===HiveParser.KW_REPLACE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1207;
	        this.match(HiveParser.KW_COLUMNS);
	        this.state = 1208;
	        this.match(HiveParser.LPAREN);
	        this.state = 1209;
	        this.columnNameTypeList();
	        this.state = 1210;
	        this.match(HiveParser.RPAREN);
	        this.state = 1212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_RESTRICT || _la===HiveParser.KW_CASCADE) {
	            this.state = 1211;
	            this.restrictOrCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddConstraint() {
	    let localctx = new AlterStatementSuffixAddConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, HiveParser.RULE_alterStatementSuffixAddConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1214;
	        this.match(HiveParser.KW_ADD);
	        this.state = 1217;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1215;
	            this.alterForeignKeyWithName();
	            break;

	        case 2:
	            this.state = 1216;
	            this.alterConstraintWithName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixDropConstraint() {
	    let localctx = new AlterStatementSuffixDropConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, HiveParser.RULE_alterStatementSuffixDropConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1219;
	        this.match(HiveParser.KW_DROP);
	        this.state = 1220;
	        this.match(HiveParser.KW_CONSTRAINT);
	        this.state = 1221;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixRenameCol() {
	    let localctx = new AlterStatementSuffixRenameColContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, HiveParser.RULE_alterStatementSuffixRenameCol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1223;
	        this.match(HiveParser.KW_CHANGE);
	        this.state = 1225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COLUMN) {
	            this.state = 1224;
	            this.match(HiveParser.KW_COLUMN);
	        }

	        this.state = 1227;
	        this.identifier();
	        this.state = 1228;
	        this.identifier();
	        this.state = 1229;
	        this.colType();
	        this.state = 1231;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (HiveParser.KW_PRIMARY - 287)) | (1 << (HiveParser.KW_REFERENCES - 287)) | (1 << (HiveParser.KW_CONSTRAINT - 287)))) !== 0)) {
	            this.state = 1230;
	            this.alterColumnConstraint();
	        }

	        this.state = 1235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 1233;
	            this.match(HiveParser.KW_COMMENT);
	            this.state = 1234;
	            this.match(HiveParser.StringLiteral);
	        }

	        this.state = 1238;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_FIRST || _la===HiveParser.KW_AFTER) {
	            this.state = 1237;
	            this.alterStatementChangeColPosition();
	        }

	        this.state = 1241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_RESTRICT || _la===HiveParser.KW_CASCADE) {
	            this.state = 1240;
	            this.restrictOrCascade();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixUpdateStatsCol() {
	    let localctx = new AlterStatementSuffixUpdateStatsColContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, HiveParser.RULE_alterStatementSuffixUpdateStatsCol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        this.match(HiveParser.KW_UPDATE);
	        this.state = 1244;
	        this.match(HiveParser.KW_STATISTICS);
	        this.state = 1245;
	        this.match(HiveParser.KW_FOR);
	        this.state = 1247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COLUMN) {
	            this.state = 1246;
	            this.match(HiveParser.KW_COLUMN);
	        }

	        this.state = 1249;
	        this.identifier();
	        this.state = 1250;
	        this.match(HiveParser.KW_SET);
	        this.state = 1251;
	        this.tableProperties();
	        this.state = 1254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 1252;
	            this.match(HiveParser.KW_COMMENT);
	            this.state = 1253;
	            this.match(HiveParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixUpdateStats() {
	    let localctx = new AlterStatementSuffixUpdateStatsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, HiveParser.RULE_alterStatementSuffixUpdateStats);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this.match(HiveParser.KW_UPDATE);
	        this.state = 1257;
	        this.match(HiveParser.KW_STATISTICS);
	        this.state = 1258;
	        this.match(HiveParser.KW_SET);
	        this.state = 1259;
	        this.tableProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementChangeColPosition() {
	    let localctx = new AlterStatementChangeColPositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, HiveParser.RULE_alterStatementChangeColPosition);
	    try {
	        this.state = 1264;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_FIRST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1261;
	            localctx.first = this.match(HiveParser.KW_FIRST);
	            break;
	        case HiveParser.KW_AFTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1262;
	            this.match(HiveParser.KW_AFTER);
	            this.state = 1263;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddPartitions() {
	    let localctx = new AlterStatementSuffixAddPartitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, HiveParser.RULE_alterStatementSuffixAddPartitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1266;
	        this.match(HiveParser.KW_ADD);
	        this.state = 1268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 1267;
	            this.ifNotExists();
	        }

	        this.state = 1271; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1270;
	            this.alterStatementSuffixAddPartitionsElement();
	            this.state = 1273; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===HiveParser.KW_PARTITION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixAddPartitionsElement() {
	    let localctx = new AlterStatementSuffixAddPartitionsElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, HiveParser.RULE_alterStatementSuffixAddPartitionsElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1275;
	        this.partitionSpec();
	        this.state = 1277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LOCATION) {
	            this.state = 1276;
	            this.partitionLocation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixTouch() {
	    let localctx = new AlterStatementSuffixTouchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, HiveParser.RULE_alterStatementSuffixTouch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.match(HiveParser.KW_TOUCH);
	        this.state = 1283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.KW_PARTITION) {
	            this.state = 1280;
	            this.partitionSpec();
	            this.state = 1285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixArchive() {
	    let localctx = new AlterStatementSuffixArchiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, HiveParser.RULE_alterStatementSuffixArchive);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this.match(HiveParser.KW_ARCHIVE);
	        this.state = 1290;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.KW_PARTITION) {
	            this.state = 1287;
	            this.partitionSpec();
	            this.state = 1292;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixUnArchive() {
	    let localctx = new AlterStatementSuffixUnArchiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, HiveParser.RULE_alterStatementSuffixUnArchive);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.match(HiveParser.KW_UNARCHIVE);
	        this.state = 1297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.KW_PARTITION) {
	            this.state = 1294;
	            this.partitionSpec();
	            this.state = 1299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionLocation() {
	    let localctx = new PartitionLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, HiveParser.RULE_partitionLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1300;
	        this.match(HiveParser.KW_LOCATION);
	        this.state = 1301;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixDropPartitions() {
	    let localctx = new AlterStatementSuffixDropPartitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, HiveParser.RULE_alterStatementSuffixDropPartitions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1303;
	        this.match(HiveParser.KW_DROP);
	        this.state = 1305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 1304;
	            this.ifExists();
	        }

	        this.state = 1307;
	        this.dropPartitionSpec();
	        this.state = 1312;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 1308;
	            this.match(HiveParser.COMMA);
	            this.state = 1309;
	            this.dropPartitionSpec();
	            this.state = 1314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PURGE) {
	            this.state = 1315;
	            this.match(HiveParser.KW_PURGE);
	        }

	        this.state = 1319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_FOR) {
	            this.state = 1318;
	            this.replicationClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixProperties() {
	    let localctx = new AlterStatementSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, HiveParser.RULE_alterStatementSuffixProperties);
	    var _la = 0; // Token type
	    try {
	        this.state = 1330;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_SET:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1321;
	            this.match(HiveParser.KW_SET);
	            this.state = 1322;
	            this.match(HiveParser.KW_TBLPROPERTIES);
	            this.state = 1323;
	            this.tableProperties();
	            break;
	        case HiveParser.KW_UNSET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1324;
	            this.match(HiveParser.KW_UNSET);
	            this.state = 1325;
	            this.match(HiveParser.KW_TBLPROPERTIES);
	            this.state = 1327;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_IF) {
	                this.state = 1326;
	                this.ifExists();
	            }

	            this.state = 1329;
	            this.tableProperties();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterViewSuffixProperties() {
	    let localctx = new AlterViewSuffixPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, HiveParser.RULE_alterViewSuffixProperties);
	    var _la = 0; // Token type
	    try {
	        this.state = 1341;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_SET:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1332;
	            this.match(HiveParser.KW_SET);
	            this.state = 1333;
	            this.match(HiveParser.KW_TBLPROPERTIES);
	            this.state = 1334;
	            this.tableProperties();
	            break;
	        case HiveParser.KW_UNSET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1335;
	            this.match(HiveParser.KW_UNSET);
	            this.state = 1336;
	            this.match(HiveParser.KW_TBLPROPERTIES);
	            this.state = 1338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_IF) {
	                this.state = 1337;
	                this.ifExists();
	            }

	            this.state = 1340;
	            this.tableProperties();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterMaterializedViewSuffixRewrite() {
	    let localctx = new AlterMaterializedViewSuffixRewriteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, HiveParser.RULE_alterMaterializedViewSuffixRewrite);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1345;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ENABLE:
	            this.state = 1343;
	            this.rewriteEnabled();
	            break;
	        case HiveParser.KW_DISABLE:
	            this.state = 1344;
	            this.rewriteDisabled();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterMaterializedViewSuffixRebuild() {
	    let localctx = new AlterMaterializedViewSuffixRebuildContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, HiveParser.RULE_alterMaterializedViewSuffixRebuild);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1347;
	        this.match(HiveParser.KW_REBUILD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixSerdeProperties() {
	    let localctx = new AlterStatementSuffixSerdePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, HiveParser.RULE_alterStatementSuffixSerdeProperties);
	    try {
	        this.state = 1360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1349;
	            this.match(HiveParser.KW_SET);
	            this.state = 1350;
	            this.match(HiveParser.KW_SERDE);
	            this.state = 1351;
	            this.match(HiveParser.StringLiteral);
	            this.state = 1355;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            if(la_===1) {
	                this.state = 1352;
	                this.match(HiveParser.KW_WITH);
	                this.state = 1353;
	                this.match(HiveParser.KW_SERDEPROPERTIES);
	                this.state = 1354;
	                this.tableProperties();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1357;
	            this.match(HiveParser.KW_SET);
	            this.state = 1358;
	            this.match(HiveParser.KW_SERDEPROPERTIES);
	            this.state = 1359;
	            this.tableProperties();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterIndexStatementSuffix() {
	    let localctx = new AlterIndexStatementSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, HiveParser.RULE_alterIndexStatementSuffix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1362;
	        this.identifier();
	        this.state = 1363;
	        this.match(HiveParser.KW_ON);
	        this.state = 1364;
	        this.tableName();
	        this.state = 1366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITION) {
	            this.state = 1365;
	            this.partitionSpec();
	        }

	        this.state = 1368;
	        this.match(HiveParser.KW_REBUILD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixFileFormat() {
	    let localctx = new AlterStatementSuffixFileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, HiveParser.RULE_alterStatementSuffixFileFormat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1370;
	        this.match(HiveParser.KW_SET);
	        this.state = 1371;
	        this.match(HiveParser.KW_FILEFORMAT);
	        this.state = 1372;
	        this.fileFormat();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixClusterbySortby() {
	    let localctx = new AlterStatementSuffixClusterbySortbyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, HiveParser.RULE_alterStatementSuffixClusterbySortby);
	    try {
	        this.state = 1379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1374;
	            this.match(HiveParser.KW_NOT);
	            this.state = 1375;
	            this.match(HiveParser.KW_CLUSTERED);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1376;
	            this.match(HiveParser.KW_NOT);
	            this.state = 1377;
	            this.match(HiveParser.KW_SORTED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1378;
	            this.tableBuckets();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTblPartitionStatementSuffixSkewedLocation() {
	    let localctx = new AlterTblPartitionStatementSuffixSkewedLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1381;
	        this.match(HiveParser.KW_SET);
	        this.state = 1382;
	        this.match(HiveParser.KW_SKEWED);
	        this.state = 1383;
	        this.match(HiveParser.KW_LOCATION);
	        this.state = 1384;
	        this.skewedLocations();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedLocations() {
	    let localctx = new SkewedLocationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, HiveParser.RULE_skewedLocations);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1386;
	        this.match(HiveParser.LPAREN);
	        this.state = 1387;
	        this.skewedLocationsList();
	        this.state = 1388;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedLocationsList() {
	    let localctx = new SkewedLocationsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, HiveParser.RULE_skewedLocationsList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1390;
	        this.skewedLocationMap();
	        this.state = 1395;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 1391;
	            this.match(HiveParser.COMMA);
	            this.state = 1392;
	            this.skewedLocationMap();
	            this.state = 1397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedLocationMap() {
	    let localctx = new SkewedLocationMapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, HiveParser.RULE_skewedLocationMap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1398;
	        this.skewedValueLocationElement();
	        this.state = 1399;
	        this.match(HiveParser.EQUAL);
	        this.state = 1400;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixLocation() {
	    let localctx = new AlterStatementSuffixLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, HiveParser.RULE_alterStatementSuffixLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.match(HiveParser.KW_SET);
	        this.state = 1403;
	        this.match(HiveParser.KW_LOCATION);
	        this.state = 1404;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixSkewedby() {
	    let localctx = new AlterStatementSuffixSkewedbyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, HiveParser.RULE_alterStatementSuffixSkewedby);
	    try {
	        this.state = 1411;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1406;
	            this.tableSkewed();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1407;
	            this.match(HiveParser.KW_NOT);
	            this.state = 1408;
	            this.match(HiveParser.KW_SKEWED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1409;
	            this.match(HiveParser.KW_NOT);
	            this.state = 1410;
	            this.storedAsDirs();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixExchangePartition() {
	    let localctx = new AlterStatementSuffixExchangePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, HiveParser.RULE_alterStatementSuffixExchangePartition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        this.match(HiveParser.KW_EXCHANGE);
	        this.state = 1414;
	        this.partitionSpec();
	        this.state = 1415;
	        this.match(HiveParser.KW_WITH);
	        this.state = 1416;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 1417;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixRenamePart() {
	    let localctx = new AlterStatementSuffixRenamePartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, HiveParser.RULE_alterStatementSuffixRenamePart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1419;
	        this.match(HiveParser.KW_RENAME);
	        this.state = 1420;
	        this.match(HiveParser.KW_TO);
	        this.state = 1421;
	        this.partitionSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixStatsPart() {
	    let localctx = new AlterStatementSuffixStatsPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, HiveParser.RULE_alterStatementSuffixStatsPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1423;
	        this.match(HiveParser.KW_UPDATE);
	        this.state = 1424;
	        this.match(HiveParser.KW_STATISTICS);
	        this.state = 1425;
	        this.match(HiveParser.KW_FOR);
	        this.state = 1427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COLUMN) {
	            this.state = 1426;
	            this.match(HiveParser.KW_COLUMN);
	        }

	        this.state = 1429;
	        this.identifier();
	        this.state = 1430;
	        this.match(HiveParser.KW_SET);
	        this.state = 1431;
	        this.tableProperties();
	        this.state = 1434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 1432;
	            this.match(HiveParser.KW_COMMENT);
	            this.state = 1433;
	            this.match(HiveParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixMergeFiles() {
	    let localctx = new AlterStatementSuffixMergeFilesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, HiveParser.RULE_alterStatementSuffixMergeFiles);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        this.match(HiveParser.KW_CONCATENATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixBucketNum() {
	    let localctx = new AlterStatementSuffixBucketNumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, HiveParser.RULE_alterStatementSuffixBucketNum);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1438;
	        this.match(HiveParser.KW_INTO);
	        this.state = 1439;
	        this.match(HiveParser.Number);
	        this.state = 1440;
	        this.match(HiveParser.KW_BUCKETS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexStatement() {
	    let localctx = new CreateIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, HiveParser.RULE_createIndexStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 1443;
	        this.match(HiveParser.KW_INDEX);
	        this.state = 1444;
	        this.identifier();
	        this.state = 1445;
	        this.match(HiveParser.KW_ON);
	        this.state = 1446;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 1447;
	        this.tableName();
	        this.state = 1448;
	        this.columnParenthesesList();
	        this.state = 1449;
	        this.match(HiveParser.KW_AS);
	        this.state = 1450;
	        this.match(HiveParser.StringLiteral);
	        this.state = 1454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        if(la_===1) {
	            this.state = 1451;
	            this.match(HiveParser.KW_WITH);
	            this.state = 1452;
	            this.match(HiveParser.KW_DEFERRED);
	            this.state = 1453;
	            this.match(HiveParser.KW_REBUILD);

	        }
	        this.state = 1458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IDXPROPERTIES) {
	            this.state = 1456;
	            this.match(HiveParser.KW_IDXPROPERTIES);
	            this.state = 1457;
	            this.tableProperties();
	        }

	        this.state = 1463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IN) {
	            this.state = 1460;
	            this.match(HiveParser.KW_IN);
	            this.state = 1461;
	            this.match(HiveParser.KW_TABLE);
	            this.state = 1462;
	            this.tableName();
	        }

	        this.state = 1468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITIONED) {
	            this.state = 1465;
	            this.match(HiveParser.KW_PARTITIONED);
	            this.state = 1466;
	            this.match(HiveParser.KW_BY);
	            this.state = 1467;
	            this.columnParenthesesList();
	        }

	        this.state = 1474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ROW || _la===HiveParser.KW_STORED) {
	            this.state = 1471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ROW) {
	                this.state = 1470;
	                this.tableRowFormat();
	            }

	            this.state = 1473;
	            this.tableFileFormat();
	        }

	        this.state = 1478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LOCATION) {
	            this.state = 1476;
	            this.match(HiveParser.KW_LOCATION);
	            this.state = 1477;
	            this.locationPath();
	        }

	        this.state = 1481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TBLPROPERTIES) {
	            this.state = 1480;
	            this.tablePropertiesPrefixed();
	        }

	        this.state = 1484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 1483;
	            this.tableComment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	locationPath() {
	    let localctx = new LocationPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, HiveParser.RULE_locationPath);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        this.identifier();
	        this.state = 1491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.DOT) {
	            this.state = 1487;
	            this.match(HiveParser.DOT);
	            this.state = 1488;
	            this.identifier();
	            this.state = 1493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndexStatement() {
	    let localctx = new DropIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, HiveParser.RULE_dropIndexStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this.match(HiveParser.KW_DROP);
	        this.state = 1495;
	        this.match(HiveParser.KW_INDEX);
	        this.state = 1496;
	        this.identifier();
	        this.state = 1497;
	        this.match(HiveParser.KW_ON);
	        this.state = 1498;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePartitionPrefix() {
	    let localctx = new TablePartitionPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, HiveParser.RULE_tablePartitionPrefix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1500;
	        this.tableName();
	        this.state = 1502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITION) {
	            this.state = 1501;
	            this.partitionSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blocking() {
	    let localctx = new BlockingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, HiveParser.RULE_blocking);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1504;
	        this.match(HiveParser.KW_AND);
	        this.state = 1505;
	        this.match(HiveParser.KW_WAIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixCompact() {
	    let localctx = new AlterStatementSuffixCompactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, HiveParser.RULE_alterStatementSuffixCompact);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1507;
	        this.match(HiveParser.KW_COMPACT);
	        this.state = 1508;
	        this.match(HiveParser.StringLiteral);
	        this.state = 1510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_AND) {
	            this.state = 1509;
	            this.blocking();
	        }

	        this.state = 1516;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        if(la_===1) {
	            this.state = 1512;
	            this.match(HiveParser.KW_WITH);
	            this.state = 1513;
	            this.match(HiveParser.KW_OVERWRITE);
	            this.state = 1514;
	            this.match(HiveParser.KW_TBLPROPERTIES);
	            this.state = 1515;
	            this.tableProperties();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatementSuffixSetOwner() {
	    let localctx = new AlterStatementSuffixSetOwnerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, HiveParser.RULE_alterStatementSuffixSetOwner);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1518;
	        this.match(HiveParser.KW_SET);
	        this.state = 1519;
	        this.match(HiveParser.KW_OWNER);
	        this.state = 1520;
	        this.principalName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileFormat() {
	    let localctx = new FileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, HiveParser.RULE_fileFormat);
	    var _la = 0; // Token type
	    try {
	        this.state = 1535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1522;
	            this.match(HiveParser.KW_INPUTFORMAT);
	            this.state = 1523;
	            this.match(HiveParser.StringLiteral);
	            this.state = 1524;
	            this.match(HiveParser.KW_OUTPUTFORMAT);
	            this.state = 1525;
	            this.match(HiveParser.StringLiteral);
	            this.state = 1526;
	            this.match(HiveParser.KW_SERDE);
	            this.state = 1527;
	            this.match(HiveParser.StringLiteral);
	            this.state = 1532;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_INPUTDRIVER) {
	                this.state = 1528;
	                this.match(HiveParser.KW_INPUTDRIVER);
	                this.state = 1529;
	                this.match(HiveParser.StringLiteral);
	                this.state = 1530;
	                this.match(HiveParser.KW_OUTPUTDRIVER);
	                this.state = 1531;
	                this.match(HiveParser.StringLiteral);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1534;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputFileFormat() {
	    let localctx = new InputFileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, HiveParser.RULE_inputFileFormat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1537;
	        this.match(HiveParser.KW_INPUTFORMAT);
	        this.state = 1538;
	        this.match(HiveParser.StringLiteral);
	        this.state = 1539;
	        this.match(HiveParser.KW_SERDE);
	        this.state = 1540;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabTypeExpr() {
	    let localctx = new TabTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, HiveParser.RULE_tabTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1542;
	        this.identifier();
	        this.state = 1545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.DOT) {
	            this.state = 1543;
	            this.match(HiveParser.DOT);
	            this.state = 1544;
	            this.identifier();
	        }

	        this.state = 1560;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        if(la_===1) {
	            this.state = 1547;
	            this.identifier();
	            this.state = 1557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.DOT) {
	                this.state = 1548;
	                this.match(HiveParser.DOT);
	                this.state = 1553;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1549;
	                    this.match(HiveParser.KW_ELEM_TYPE);
	                    break;

	                case 2:
	                    this.state = 1550;
	                    this.match(HiveParser.KW_KEY_TYPE);
	                    break;

	                case 3:
	                    this.state = 1551;
	                    this.match(HiveParser.KW_VALUE_TYPE);
	                    break;

	                case 4:
	                    this.state = 1552;
	                    this.identifier();
	                    break;

	                }
	                this.state = 1559;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partTypeExpr() {
	    let localctx = new PartTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, HiveParser.RULE_partTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1562;
	        this.tabTypeExpr();
	        this.state = 1564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITION) {
	            this.state = 1563;
	            this.partitionSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabPartColTypeExpr() {
	    let localctx = new TabPartColTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, HiveParser.RULE_tabPartColTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1566;
	        this.tableName();
	        this.state = 1568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITION) {
	            this.state = 1567;
	            this.partitionSpec();
	        }

	        this.state = 1571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        if(la_===1) {
	            this.state = 1570;
	            this.extColumnName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descStatement() {
	    let localctx = new DescStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, HiveParser.RULE_descStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_DESC || _la===HiveParser.KW_DESCRIBE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1574;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_EXTENDED) {
	                this.state = 1575;
	                this.match(HiveParser.KW_EXTENDED);
	            }

	            this.state = 1578;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 1579;
	            this.match(HiveParser.KW_FUNCTION);
	            this.state = 1581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_EXTENDED) {
	                this.state = 1580;
	                this.match(HiveParser.KW_EXTENDED);
	            }

	            this.state = 1583;
	            this.descFuncNames();
	            break;

	        case 3:
	            this.state = 1584;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_EXTENDED || _la===HiveParser.KW_FORMATTED)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1585;
	            this.tabPartColTypeExpr();
	            break;

	        case 4:
	            this.state = 1586;
	            this.tabPartColTypeExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeStatement() {
	    let localctx = new AnalyzeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, HiveParser.RULE_analyzeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1589;
	        this.match(HiveParser.KW_ANALYZE);
	        this.state = 1590;
	        this.match(HiveParser.KW_TABLE);

	        this.state = 1591;
	        this.tableOrPartition();
	        this.state = 1604;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_COMPUTE:
	            this.state = 1592;
	            this.match(HiveParser.KW_COMPUTE);
	            this.state = 1593;
	            this.match(HiveParser.KW_STATISTICS);
	            this.state = 1600;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case HiveParser.KW_NOSCAN:
	            	this.state = 1594;
	            	this.match(HiveParser.KW_NOSCAN);
	            	break;
	            case HiveParser.KW_FOR:
	            	this.state = 1595;
	            	this.match(HiveParser.KW_FOR);
	            	this.state = 1596;
	            	this.match(HiveParser.KW_COLUMNS);
	            	this.state = 1598;
	            	this._errHandler.sync(this);
	            	var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	            	if(la_===1) {
	            	    this.state = 1597;
	            	    this.columnNameList();

	            	}
	            	break;
	            case HiveParser.EOF:
	            case HiveParser.KW_DESC:
	            case HiveParser.KW_FROM:
	            case HiveParser.KW_SELECT:
	            case HiveParser.KW_INSERT:
	            case HiveParser.KW_SHOW:
	            case HiveParser.KW_MSCK:
	            case HiveParser.KW_LOAD:
	            case HiveParser.KW_EXPORT:
	            case HiveParser.KW_IMPORT:
	            case HiveParser.KW_CREATE:
	            case HiveParser.KW_ALTER:
	            case HiveParser.KW_DESCRIBE:
	            case HiveParser.KW_DROP:
	            case HiveParser.KW_MAP:
	            case HiveParser.KW_REDUCE:
	            case HiveParser.KW_KILL:
	            case HiveParser.KW_EXPLAIN:
	            case HiveParser.KW_WITH:
	            case HiveParser.KW_SET:
	            case HiveParser.KW_DELETE:
	            case HiveParser.KW_GRANT:
	            case HiveParser.KW_REVOKE:
	            case HiveParser.KW_LOCK:
	            case HiveParser.KW_UNLOCK:
	            case HiveParser.KW_ANALYZE:
	            case HiveParser.KW_USE:
	            case HiveParser.KW_UPDATE:
	            case HiveParser.KW_TRUNCATE:
	            case HiveParser.KW_RELOAD:
	            case HiveParser.KW_START:
	            case HiveParser.KW_COMMIT:
	            case HiveParser.KW_ROLLBACK:
	            case HiveParser.KW_ABORT:
	            case HiveParser.KW_MERGE:
	            case HiveParser.KW_REPL:
	            case HiveParser.SEMICOLON:
	            case HiveParser.LPAREN:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case HiveParser.KW_CACHE:
	            this.state = 1602;
	            this.match(HiveParser.KW_CACHE);
	            this.state = 1603;
	            this.match(HiveParser.KW_METADATA);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatement() {
	    let localctx = new ShowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, HiveParser.RULE_showStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1606;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1607;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_DATABASES || _la===HiveParser.KW_SCHEMAS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LIKE) {
	                this.state = 1608;
	                this.match(HiveParser.KW_LIKE);
	                this.state = 1609;
	                this.showStmtIdentifier();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1612;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1613;
	            this.match(HiveParser.KW_TABLES);
	            this.state = 1616;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	            if(la_===1) {
	                this.state = 1614;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_FROM || _la===HiveParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1615;
	                this.identifier();

	            }
	            this.state = 1621;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	            if(la_===1) {
	                this.state = 1618;
	                this.match(HiveParser.KW_LIKE);
	                this.state = 1619;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 1620;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1623;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1624;
	            this.match(HiveParser.KW_VIEWS);
	            this.state = 1627;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	            if(la_===1) {
	                this.state = 1625;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_FROM || _la===HiveParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1626;
	                this.identifier();

	            }
	            this.state = 1632;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	            if(la_===1) {
	                this.state = 1629;
	                this.match(HiveParser.KW_LIKE);
	                this.state = 1630;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 1631;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1634;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1635;
	            this.match(HiveParser.KW_MATERIALIZED);
	            this.state = 1636;
	            this.match(HiveParser.KW_VIEWS);
	            this.state = 1639;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	            if(la_===1) {
	                this.state = 1637;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_FROM || _la===HiveParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1638;
	                this.identifier();

	            }
	            this.state = 1644;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	            if(la_===1) {
	                this.state = 1641;
	                this.match(HiveParser.KW_LIKE);
	                this.state = 1642;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 1643;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1646;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1647;
	            this.match(HiveParser.KW_COLUMNS);
	            this.state = 1648;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_FROM || _la===HiveParser.KW_IN)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1649;
	            this.tableName();
	            this.state = 1652;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	            if(la_===1) {
	                this.state = 1650;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_FROM || _la===HiveParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1651;
	                this.identifier();

	            }
	            this.state = 1657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	            if(la_===1) {
	                this.state = 1654;
	                this.match(HiveParser.KW_LIKE);
	                this.state = 1655;
	                this.showStmtIdentifier();

	            } else if(la_===2) {
	                this.state = 1656;
	                this.showStmtIdentifier();

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1659;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1660;
	            this.match(HiveParser.KW_FUNCTIONS);
	            this.state = 1664;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	            if(la_===1) {
	                this.state = 1661;
	                this.match(HiveParser.KW_LIKE);
	                this.state = 1662;
	                this.showFunctionIdentifier();

	            } else if(la_===2) {
	                this.state = 1663;
	                this.showFunctionIdentifier();

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1666;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1667;
	            this.match(HiveParser.KW_PARTITIONS);
	            this.state = 1668;
	            this.tableName();
	            this.state = 1670;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PARTITION) {
	                this.state = 1669;
	                this.partitionSpec();
	            }

	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1672;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1673;
	            this.match(HiveParser.KW_CREATE);
	            this.state = 1678;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case HiveParser.KW_DATABASE:
	            case HiveParser.KW_SCHEMA:
	                this.state = 1674;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1675;
	                this.identifier();
	                break;
	            case HiveParser.KW_TABLE:
	                this.state = 1676;
	                this.match(HiveParser.KW_TABLE);
	                this.state = 1677;
	                this.tableName();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1680;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1681;
	            this.match(HiveParser.KW_TABLE);
	            this.state = 1682;
	            this.match(HiveParser.KW_EXTENDED);
	            this.state = 1685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_FROM || _la===HiveParser.KW_IN) {
	                this.state = 1683;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_FROM || _la===HiveParser.KW_IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1684;
	                this.identifier();
	            }

	            this.state = 1687;
	            this.match(HiveParser.KW_LIKE);
	            this.state = 1688;
	            this.showStmtIdentifier();
	            this.state = 1690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PARTITION) {
	                this.state = 1689;
	                this.partitionSpec();
	            }

	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1692;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1693;
	            this.match(HiveParser.KW_TBLPROPERTIES);
	            this.state = 1694;
	            this.tableName();
	            this.state = 1698;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	            if(la_===1) {
	                this.state = 1695;
	                this.match(HiveParser.LPAREN);
	                this.state = 1696;
	                this.match(HiveParser.StringLiteral);
	                this.state = 1697;
	                this.match(HiveParser.RPAREN);

	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1700;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1701;
	            this.match(HiveParser.KW_LOCKS);
	            this.state = 1713;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1702;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1703;
	                this.identifier();
	                this.state = 1705;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===HiveParser.KW_EXTENDED) {
	                    this.state = 1704;
	                    this.match(HiveParser.KW_EXTENDED);
	                }

	                break;

	            case 2:
	                this.state = 1708;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	                if(la_===1) {
	                    this.state = 1707;
	                    this.partTypeExpr();

	                }
	                this.state = 1711;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===HiveParser.KW_EXTENDED) {
	                    this.state = 1710;
	                    this.match(HiveParser.KW_EXTENDED);
	                }

	                break;

	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1715;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1716;
	            this.match(HiveParser.KW_COMPACTIONS);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1717;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1718;
	            this.match(HiveParser.KW_TRANSACTIONS);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1719;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1720;
	            this.match(HiveParser.KW_CONF);
	            this.state = 1721;
	            this.match(HiveParser.StringLiteral);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1722;
	            this.match(HiveParser.KW_SHOW);
	            this.state = 1723;
	            this.match(HiveParser.KW_RESOURCE);
	            this.state = 1727;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case HiveParser.KW_PLAN:
	                this.state = 1724;
	                this.match(HiveParser.KW_PLAN);
	                this.state = 1725;
	                this.identifier();
	                break;
	            case HiveParser.KW_PLANS:
	                this.state = 1726;
	                this.match(HiveParser.KW_PLANS);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockStatement() {
	    let localctx = new LockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, HiveParser.RULE_lockStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1731;
	        this.match(HiveParser.KW_LOCK);
	        this.state = 1732;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 1733;
	        this.tableName();
	        this.state = 1735;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITION) {
	            this.state = 1734;
	            this.partitionSpec();
	        }

	        this.state = 1737;
	        this.lockMode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockDatabase() {
	    let localctx = new LockDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, HiveParser.RULE_lockDatabase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1739;
	        this.match(HiveParser.KW_LOCK);
	        this.state = 1740;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1741;
	        this.identifier();
	        this.state = 1742;
	        this.lockMode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockMode() {
	    let localctx = new LockModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, HiveParser.RULE_lockMode);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1744;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_SHARED || _la===HiveParser.KW_EXCLUSIVE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockStatement() {
	    let localctx = new UnlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, HiveParser.RULE_unlockStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1746;
	        this.match(HiveParser.KW_UNLOCK);
	        this.state = 1747;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 1748;
	        this.tableName();
	        this.state = 1750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITION) {
	            this.state = 1749;
	            this.partitionSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockDatabase() {
	    let localctx = new UnlockDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, HiveParser.RULE_unlockDatabase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1752;
	        this.match(HiveParser.KW_UNLOCK);
	        this.state = 1753;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1754;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRoleStatement() {
	    let localctx = new CreateRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, HiveParser.RULE_createRoleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1756;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 1757;
	        this.match(HiveParser.KW_ROLE);
	        this.state = 1758;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRoleStatement() {
	    let localctx = new DropRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, HiveParser.RULE_dropRoleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1760;
	        this.match(HiveParser.KW_DROP);
	        this.state = 1761;
	        this.match(HiveParser.KW_ROLE);
	        this.state = 1762;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantPrivileges() {
	    let localctx = new GrantPrivilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, HiveParser.RULE_grantPrivileges);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.match(HiveParser.KW_GRANT);
	        this.state = 1765;
	        this.privilegeList();
	        this.state = 1767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ON) {
	            this.state = 1766;
	            this.privilegeObject();
	        }

	        this.state = 1769;
	        this.match(HiveParser.KW_TO);
	        this.state = 1770;
	        this.principalSpecification();
	        this.state = 1772;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        if(la_===1) {
	            this.state = 1771;
	            this.withGrantOption();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokePrivileges() {
	    let localctx = new RevokePrivilegesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, HiveParser.RULE_revokePrivileges);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1774;
	        this.match(HiveParser.KW_REVOKE);
	        this.state = 1776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_GRANT) {
	            this.state = 1775;
	            this.grantOptionFor();
	        }

	        this.state = 1778;
	        this.privilegeList();
	        this.state = 1780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ON) {
	            this.state = 1779;
	            this.privilegeObject();
	        }

	        this.state = 1782;
	        this.match(HiveParser.KW_FROM);
	        this.state = 1783;
	        this.principalSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantRole() {
	    let localctx = new GrantRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, HiveParser.RULE_grantRole);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1785;
	        this.match(HiveParser.KW_GRANT);
	        this.state = 1787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        if(la_===1) {
	            this.state = 1786;
	            this.match(HiveParser.KW_ROLE);

	        }
	        this.state = 1789;
	        this.identifier();
	        this.state = 1794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 1790;
	            this.match(HiveParser.COMMA);
	            this.state = 1791;
	            this.identifier();
	            this.state = 1796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1797;
	        this.match(HiveParser.KW_TO);
	        this.state = 1798;
	        this.principalSpecification();
	        this.state = 1800;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        if(la_===1) {
	            this.state = 1799;
	            this.withAdminOption();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeRole() {
	    let localctx = new RevokeRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, HiveParser.RULE_revokeRole);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1802;
	        this.match(HiveParser.KW_REVOKE);
	        this.state = 1804;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        if(la_===1) {
	            this.state = 1803;
	            this.adminOptionFor();

	        }
	        this.state = 1807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 1806;
	            this.match(HiveParser.KW_ROLE);

	        }
	        this.state = 1809;
	        this.identifier();
	        this.state = 1814;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 1810;
	            this.match(HiveParser.COMMA);
	            this.state = 1811;
	            this.identifier();
	            this.state = 1816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1817;
	        this.match(HiveParser.KW_FROM);
	        this.state = 1818;
	        this.principalSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRoleGrants() {
	    let localctx = new ShowRoleGrantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, HiveParser.RULE_showRoleGrants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1820;
	        this.match(HiveParser.KW_SHOW);
	        this.state = 1821;
	        this.match(HiveParser.KW_ROLE);
	        this.state = 1822;
	        this.match(HiveParser.KW_GRANT);
	        this.state = 1823;
	        this.principalName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRoles() {
	    let localctx = new ShowRolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, HiveParser.RULE_showRoles);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1825;
	        this.match(HiveParser.KW_SHOW);
	        this.state = 1826;
	        this.match(HiveParser.KW_ROLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCurrentRole() {
	    let localctx = new ShowCurrentRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, HiveParser.RULE_showCurrentRole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1828;
	        this.match(HiveParser.KW_SHOW);
	        this.state = 1829;
	        this.match(HiveParser.KW_CURRENT);
	        this.state = 1830;
	        this.match(HiveParser.KW_ROLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setRole() {
	    let localctx = new SetRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, HiveParser.RULE_setRole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1832;
	        this.match(HiveParser.KW_SET);
	        this.state = 1833;
	        this.match(HiveParser.KW_ROLE);
	        this.state = 1837;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ALL:
	            this.state = 1834;
	            this.match(HiveParser.KW_ALL);
	            break;
	        case HiveParser.KW_NONE:
	            this.state = 1835;
	            this.match(HiveParser.KW_NONE);
	            break;
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.state = 1836;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGrants() {
	    let localctx = new ShowGrantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, HiveParser.RULE_showGrants);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1839;
	        this.match(HiveParser.KW_SHOW);
	        this.state = 1840;
	        this.match(HiveParser.KW_GRANT);
	        this.state = 1842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_GROUP || _la===HiveParser.KW_USER || _la===HiveParser.KW_ROLE) {
	            this.state = 1841;
	            this.principalName();
	        }

	        this.state = 1846;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ON) {
	            this.state = 1844;
	            this.match(HiveParser.KW_ON);
	            this.state = 1845;
	            this.privilegeIncludeColObject();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRolePrincipals() {
	    let localctx = new ShowRolePrincipalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, HiveParser.RULE_showRolePrincipals);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1848;
	        this.match(HiveParser.KW_SHOW);
	        this.state = 1849;
	        this.match(HiveParser.KW_PRINCIPALS);
	        this.state = 1850;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeIncludeColObject() {
	    let localctx = new PrivilegeIncludeColObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, HiveParser.RULE_privilegeIncludeColObject);
	    try {
	        this.state = 1854;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ALL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1852;
	            this.match(HiveParser.KW_ALL);
	            break;
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLE:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASE:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1853;
	            this.privObjectCols();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeObject() {
	    let localctx = new PrivilegeObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, HiveParser.RULE_privilegeObject);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1856;
	        this.match(HiveParser.KW_ON);
	        this.state = 1857;
	        this.privObject();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObject() {
	    let localctx = new PrivObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, HiveParser.RULE_privObject);
	    var _la = 0; // Token type
	    try {
	        this.state = 1872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1859;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1860;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_TABLE) {
	                this.state = 1861;
	                this.match(HiveParser.KW_TABLE);
	            }

	            this.state = 1864;
	            this.tableName();
	            this.state = 1866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PARTITION) {
	                this.state = 1865;
	                this.partitionSpec();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1868;
	            this.match(HiveParser.KW_URI);
	            this.state = 1869;
	            this.match(HiveParser.StringLiteral);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1870;
	            this.match(HiveParser.KW_SERVER);
	            this.state = 1871;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObjectCols() {
	    let localctx = new PrivObjectColsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, HiveParser.RULE_privObjectCols);
	    var _la = 0; // Token type
	    try {
	        this.state = 1893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1874;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_DATABASE || _la===HiveParser.KW_SCHEMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1875;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1877;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_TABLE) {
	                this.state = 1876;
	                this.match(HiveParser.KW_TABLE);
	            }

	            this.state = 1879;
	            this.tableName();
	            this.state = 1884;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	            if(la_===1) {
	                this.state = 1880;
	                this.match(HiveParser.LPAREN);
	                this.state = 1881;
	                this.columnNameList();
	                this.state = 1882;
	                this.match(HiveParser.RPAREN);

	            }
	            this.state = 1887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PARTITION) {
	                this.state = 1886;
	                this.partitionSpec();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1889;
	            this.match(HiveParser.KW_URI);
	            this.state = 1890;
	            this.match(HiveParser.StringLiteral);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1891;
	            this.match(HiveParser.KW_SERVER);
	            this.state = 1892;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeList() {
	    let localctx = new PrivilegeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, HiveParser.RULE_privilegeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1895;
	        this.privlegeDef();
	        this.state = 1900;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 1896;
	            this.match(HiveParser.COMMA);
	            this.state = 1897;
	            this.privlegeDef();
	            this.state = 1902;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privlegeDef() {
	    let localctx = new PrivlegeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, HiveParser.RULE_privlegeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1903;
	        this.privilegeType();
	        this.state = 1908;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.LPAREN) {
	            this.state = 1904;
	            this.match(HiveParser.LPAREN);
	            this.state = 1905;
	            this.columnNameList();
	            this.state = 1906;
	            this.match(HiveParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeType() {
	    let localctx = new PrivilegeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, HiveParser.RULE_privilegeType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1910;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_ALL) | (1 << HiveParser.KW_SELECT) | (1 << HiveParser.KW_INSERT))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (HiveParser.KW_CREATE - 65)) | (1 << (HiveParser.KW_ALTER - 65)) | (1 << (HiveParser.KW_DROP - 65)))) !== 0) || _la===HiveParser.KW_DELETE || _la===HiveParser.KW_LOCK || _la===HiveParser.KW_SHOW_DATABASE || _la===HiveParser.KW_UPDATE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principalSpecification() {
	    let localctx = new PrincipalSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, HiveParser.RULE_principalSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1912;
	        this.principalName();
	        this.state = 1917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 1913;
	            this.match(HiveParser.COMMA);
	            this.state = 1914;
	            this.principalName();
	            this.state = 1919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principalName() {
	    let localctx = new PrincipalNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, HiveParser.RULE_principalName);
	    try {
	        this.state = 1926;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_USER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1920;
	            this.match(HiveParser.KW_USER);
	            this.state = 1921;
	            this.principalIdentifier();
	            break;
	        case HiveParser.KW_GROUP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1922;
	            this.match(HiveParser.KW_GROUP);
	            this.state = 1923;
	            this.principalIdentifier();
	            break;
	        case HiveParser.KW_ROLE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1924;
	            this.match(HiveParser.KW_ROLE);
	            this.state = 1925;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withGrantOption() {
	    let localctx = new WithGrantOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, HiveParser.RULE_withGrantOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1928;
	        this.match(HiveParser.KW_WITH);
	        this.state = 1929;
	        this.match(HiveParser.KW_GRANT);
	        this.state = 1930;
	        this.match(HiveParser.KW_OPTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantOptionFor() {
	    let localctx = new GrantOptionForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, HiveParser.RULE_grantOptionFor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1932;
	        this.match(HiveParser.KW_GRANT);
	        this.state = 1933;
	        this.match(HiveParser.KW_OPTION);
	        this.state = 1934;
	        this.match(HiveParser.KW_FOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminOptionFor() {
	    let localctx = new AdminOptionForContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, HiveParser.RULE_adminOptionFor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1936;
	        this.match(HiveParser.KW_ADMIN);
	        this.state = 1937;
	        this.match(HiveParser.KW_OPTION);
	        this.state = 1938;
	        this.match(HiveParser.KW_FOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withAdminOption() {
	    let localctx = new WithAdminOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, HiveParser.RULE_withAdminOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1940;
	        this.match(HiveParser.KW_WITH);
	        this.state = 1941;
	        this.match(HiveParser.KW_ADMIN);
	        this.state = 1942;
	        this.match(HiveParser.KW_OPTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metastoreCheck() {
	    let localctx = new MetastoreCheckContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, HiveParser.RULE_metastoreCheck);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1944;
	        this.match(HiveParser.KW_MSCK);
	        this.state = 1946;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_REPAIR) {
	            this.state = 1945;
	            this.match(HiveParser.KW_REPAIR);
	        }

	        this.state = 1957;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_TABLE:
	            this.state = 1948;
	            this.match(HiveParser.KW_TABLE);
	            this.state = 1949;
	            this.tableName();
	            this.state = 1952;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	            if(la_===1) {
	                this.state = 1950;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_DROP || _la===HiveParser.KW_ADD || _la===HiveParser.KW_SYNC)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1951;
	                this.match(HiveParser.KW_PARTITIONS);

	            }
	            break;
	        case HiveParser.EOF:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_FROM:
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_INSERT:
	        case HiveParser.KW_PARTITION:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_IMPORT:
	        case HiveParser.KW_CREATE:
	        case HiveParser.KW_ALTER:
	        case HiveParser.KW_DESCRIBE:
	        case HiveParser.KW_DROP:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_WITH:
	        case HiveParser.KW_SET:
	        case HiveParser.KW_DELETE:
	        case HiveParser.KW_GRANT:
	        case HiveParser.KW_REVOKE:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_UPDATE:
	        case HiveParser.KW_TRUNCATE:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_START:
	        case HiveParser.KW_COMMIT:
	        case HiveParser.KW_ROLLBACK:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MERGE:
	        case HiveParser.KW_REPL:
	        case HiveParser.SEMICOLON:
	        case HiveParser.LPAREN:
	            this.state = 1955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PARTITION) {
	                this.state = 1954;
	                this.partitionSpec();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceList() {
	    let localctx = new ResourceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, HiveParser.RULE_resourceList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1959;
	        this.resource();
	        this.state = 1964;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 1960;
	            this.match(HiveParser.COMMA);
	            this.state = 1961;
	            this.resource();
	            this.state = 1966;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, HiveParser.RULE_resource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1967;
	        this.resourceType();
	        this.state = 1968;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceType() {
	    let localctx = new ResourceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, HiveParser.RULE_resourceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1970;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_FILE || _la===HiveParser.KW_JAR || _la===HiveParser.KW_ARCHIVE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunctionStatement() {
	    let localctx = new CreateFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, HiveParser.RULE_createFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1972;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 1974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TEMPORARY) {
	            this.state = 1973;
	            this.match(HiveParser.KW_TEMPORARY);
	        }

	        this.state = 1976;
	        this.match(HiveParser.KW_FUNCTION);
	        this.state = 1977;
	        this.functionIdentifier();
	        this.state = 1978;
	        this.match(HiveParser.KW_AS);
	        this.state = 1979;
	        this.match(HiveParser.StringLiteral);
	        this.state = 1982;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_USING) {
	            this.state = 1980;
	            this.match(HiveParser.KW_USING);
	            this.state = 1981;
	            this.resourceList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunctionStatement() {
	    let localctx = new DropFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, HiveParser.RULE_dropFunctionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1984;
	        this.match(HiveParser.KW_DROP);
	        this.state = 1986;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TEMPORARY) {
	            this.state = 1985;
	            this.match(HiveParser.KW_TEMPORARY);
	        }

	        this.state = 1988;
	        this.match(HiveParser.KW_FUNCTION);
	        this.state = 1990;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 1989;
	            this.ifExists();
	        }

	        this.state = 1992;
	        this.functionIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reloadFunctionStatement() {
	    let localctx = new ReloadFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, HiveParser.RULE_reloadFunctionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1994;
	        this.match(HiveParser.KW_RELOAD);
	        this.state = 1995;
	        this.match(HiveParser.KW_FUNCTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createMacroStatement() {
	    let localctx = new CreateMacroStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, HiveParser.RULE_createMacroStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1997;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 1998;
	        this.match(HiveParser.KW_TEMPORARY);
	        this.state = 1999;
	        this.match(HiveParser.KW_MACRO);
	        this.state = 2000;
	        this.match(HiveParser.Identifier);
	        this.state = 2001;
	        this.match(HiveParser.LPAREN);
	        this.state = 2003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1f) == 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1f) == 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1f) == 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la===HiveParser.Identifier) {
	            this.state = 2002;
	            this.columnNameTypeList();
	        }

	        this.state = 2005;
	        this.match(HiveParser.RPAREN);
	        this.state = 2006;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropMacroStatement() {
	    let localctx = new DropMacroStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, HiveParser.RULE_dropMacroStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2008;
	        this.match(HiveParser.KW_DROP);
	        this.state = 2009;
	        this.match(HiveParser.KW_TEMPORARY);
	        this.state = 2010;
	        this.match(HiveParser.KW_MACRO);
	        this.state = 2012;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 2011;
	            this.ifExists();
	        }

	        this.state = 2014;
	        this.match(HiveParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createViewStatement() {
	    let localctx = new CreateViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, HiveParser.RULE_createViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2016;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 2018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_OR) {
	            this.state = 2017;
	            this.orReplace();
	        }

	        this.state = 2020;
	        this.match(HiveParser.KW_VIEW);
	        this.state = 2022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 2021;
	            this.ifNotExists();
	        }

	        this.state = 2024;
	        this.tableName();
	        this.state = 2029;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.LPAREN) {
	            this.state = 2025;
	            this.match(HiveParser.LPAREN);
	            this.state = 2026;
	            this.columnNameCommentList();
	            this.state = 2027;
	            this.match(HiveParser.RPAREN);
	        }

	        this.state = 2032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 2031;
	            this.tableComment();
	        }

	        this.state = 2035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITIONED) {
	            this.state = 2034;
	            this.viewPartition();
	        }

	        this.state = 2038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TBLPROPERTIES) {
	            this.state = 2037;
	            this.tablePropertiesPrefixed();
	        }

	        this.state = 2040;
	        this.match(HiveParser.KW_AS);
	        this.state = 2041;
	        this.selectStatementWithCTE();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createMaterializedViewStatement() {
	    let localctx = new CreateMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, HiveParser.RULE_createMaterializedViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.match(HiveParser.KW_CREATE);
	        this.state = 2044;
	        this.match(HiveParser.KW_MATERIALIZED);
	        this.state = 2045;
	        this.match(HiveParser.KW_VIEW);
	        this.state = 2047;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 2046;
	            this.ifNotExists();
	        }

	        this.state = 2049;
	        this.tableName();
	        this.state = 2051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_DISABLE) {
	            this.state = 2050;
	            this.rewriteDisabled();
	        }

	        this.state = 2054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 2053;
	            this.tableComment();
	        }

	        this.state = 2057;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ROW) {
	            this.state = 2056;
	            this.tableRowFormat();
	        }

	        this.state = 2060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_STORED) {
	            this.state = 2059;
	            this.tableFileFormat();
	        }

	        this.state = 2063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LOCATION) {
	            this.state = 2062;
	            this.tableLocation();
	        }

	        this.state = 2066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TBLPROPERTIES) {
	            this.state = 2065;
	            this.tablePropertiesPrefixed();
	        }

	        this.state = 2068;
	        this.match(HiveParser.KW_AS);
	        this.state = 2069;
	        this.selectStatementWithCTE();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewPartition() {
	    let localctx = new ViewPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, HiveParser.RULE_viewPartition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2071;
	        this.match(HiveParser.KW_PARTITIONED);
	        this.state = 2072;
	        this.match(HiveParser.KW_ON);
	        this.state = 2073;
	        this.match(HiveParser.LPAREN);
	        this.state = 2074;
	        this.columnNameList();
	        this.state = 2075;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropViewStatement() {
	    let localctx = new DropViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, HiveParser.RULE_dropViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2077;
	        this.match(HiveParser.KW_DROP);
	        this.state = 2078;
	        this.match(HiveParser.KW_VIEW);
	        this.state = 2080;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 2079;
	            this.ifExists();
	        }

	        this.state = 2082;
	        this.viewName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropMaterializedViewStatement() {
	    let localctx = new DropMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, HiveParser.RULE_dropMaterializedViewStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2084;
	        this.match(HiveParser.KW_DROP);
	        this.state = 2085;
	        this.match(HiveParser.KW_MATERIALIZED);
	        this.state = 2086;
	        this.match(HiveParser.KW_VIEW);
	        this.state = 2088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_IF) {
	            this.state = 2087;
	            this.ifExists();
	        }

	        this.state = 2090;
	        this.viewName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFunctionIdentifier() {
	    let localctx = new ShowFunctionIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, HiveParser.RULE_showFunctionIdentifier);
	    try {
	        this.state = 2094;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2092;
	            this.functionIdentifier();
	            break;
	        case HiveParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2093;
	            this.match(HiveParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStmtIdentifier() {
	    let localctx = new ShowStmtIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, HiveParser.RULE_showStmtIdentifier);
	    try {
	        this.state = 2098;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2096;
	            this.identifier();
	            break;
	        case HiveParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2097;
	            this.match(HiveParser.StringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableComment() {
	    let localctx = new TableCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, HiveParser.RULE_tableComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2100;
	        this.match(HiveParser.KW_COMMENT);
	        this.state = 2101;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePartition() {
	    let localctx = new TablePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, HiveParser.RULE_tablePartition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2103;
	        this.match(HiveParser.KW_PARTITIONED);
	        this.state = 2104;
	        this.match(HiveParser.KW_BY);
	        this.state = 2105;
	        this.match(HiveParser.LPAREN);
	        this.state = 2106;
	        this.columnNameTypeConstraint();
	        this.state = 2111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2107;
	            this.match(HiveParser.COMMA);
	            this.state = 2108;
	            this.columnNameTypeConstraint();
	            this.state = 2113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2114;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableBuckets() {
	    let localctx = new TableBucketsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, HiveParser.RULE_tableBuckets);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2116;
	        this.match(HiveParser.KW_CLUSTERED);
	        this.state = 2117;
	        this.match(HiveParser.KW_BY);
	        this.state = 2118;
	        this.match(HiveParser.LPAREN);
	        this.state = 2119;
	        this.columnNameList();
	        this.state = 2120;
	        this.match(HiveParser.RPAREN);
	        this.state = 2127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_SORTED) {
	            this.state = 2121;
	            this.match(HiveParser.KW_SORTED);
	            this.state = 2122;
	            this.match(HiveParser.KW_BY);
	            this.state = 2123;
	            this.match(HiveParser.LPAREN);
	            this.state = 2124;
	            this.columnNameOrderList();
	            this.state = 2125;
	            this.match(HiveParser.RPAREN);
	        }

	        this.state = 2129;
	        this.match(HiveParser.KW_INTO);
	        this.state = 2130;
	        this.match(HiveParser.Number);
	        this.state = 2131;
	        this.match(HiveParser.KW_BUCKETS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSkewed() {
	    let localctx = new TableSkewedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, HiveParser.RULE_tableSkewed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2133;
	        this.match(HiveParser.KW_SKEWED);
	        this.state = 2134;
	        this.match(HiveParser.KW_BY);
	        this.state = 2135;
	        this.match(HiveParser.LPAREN);
	        this.state = 2136;
	        this.columnNameList();
	        this.state = 2137;
	        this.match(HiveParser.RPAREN);
	        this.state = 2138;
	        this.match(HiveParser.KW_ON);
	        this.state = 2139;
	        this.match(HiveParser.LPAREN);
	        this.state = 2140;
	        this.skewedValueElement();
	        this.state = 2141;
	        this.match(HiveParser.RPAREN);
	        this.state = 2143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        if(la_===1) {
	            this.state = 2142;
	            this.storedAsDirs();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormat() {
	    let localctx = new RowFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, HiveParser.RULE_rowFormat);
	    try {
	        this.state = 2147;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2145;
	            this.rowFormatSerde();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2146;
	            this.rowFormatDelimited();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordReader() {
	    let localctx = new RecordReaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, HiveParser.RULE_recordReader);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2149;
	        this.match(HiveParser.KW_RECORDREADER);
	        this.state = 2150;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordWriter() {
	    let localctx = new RecordWriterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, HiveParser.RULE_recordWriter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2152;
	        this.match(HiveParser.KW_RECORDWRITER);
	        this.state = 2153;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatSerde() {
	    let localctx = new RowFormatSerdeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, HiveParser.RULE_rowFormatSerde);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2155;
	        this.match(HiveParser.KW_ROW);
	        this.state = 2156;
	        this.match(HiveParser.KW_FORMAT);
	        this.state = 2157;
	        this.match(HiveParser.KW_SERDE);
	        this.state = 2158;
	        this.match(HiveParser.StringLiteral);
	        this.state = 2162;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        if(la_===1) {
	            this.state = 2159;
	            this.match(HiveParser.KW_WITH);
	            this.state = 2160;
	            this.match(HiveParser.KW_SERDEPROPERTIES);
	            this.state = 2161;
	            this.tableProperties();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormatDelimited() {
	    let localctx = new RowFormatDelimitedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, HiveParser.RULE_rowFormatDelimited);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2164;
	        this.match(HiveParser.KW_ROW);
	        this.state = 2165;
	        this.match(HiveParser.KW_FORMAT);
	        this.state = 2166;
	        this.match(HiveParser.KW_DELIMITED);
	        this.state = 2168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_FIELDS) {
	            this.state = 2167;
	            this.tableRowFormatFieldIdentifier();
	        }

	        this.state = 2171;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COLLECTION) {
	            this.state = 2170;
	            this.tableRowFormatCollItemsIdentifier();
	        }

	        this.state = 2174;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        if(la_===1) {
	            this.state = 2173;
	            this.tableRowFormatMapKeysIdentifier();

	        }
	        this.state = 2177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LINES) {
	            this.state = 2176;
	            this.tableRowFormatLinesIdentifier();
	        }

	        this.state = 2180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NULL) {
	            this.state = 2179;
	            this.tableRowNullFormat();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormat() {
	    let localctx = new TableRowFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, HiveParser.RULE_tableRowFormat);
	    try {
	        this.state = 2184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2182;
	            this.rowFormatDelimited();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2183;
	            this.rowFormatSerde();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropertiesPrefixed() {
	    let localctx = new TablePropertiesPrefixedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, HiveParser.RULE_tablePropertiesPrefixed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2186;
	        this.match(HiveParser.KW_TBLPROPERTIES);
	        this.state = 2187;
	        this.tableProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableProperties() {
	    let localctx = new TablePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, HiveParser.RULE_tableProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this.match(HiveParser.LPAREN);
	        this.state = 2190;
	        this.tablePropertiesList();
	        this.state = 2191;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropertiesList() {
	    let localctx = new TablePropertiesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, HiveParser.RULE_tablePropertiesList);
	    var _la = 0; // Token type
	    try {
	        this.state = 2209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2193;
	            this.keyValueProperty();
	            this.state = 2198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.COMMA) {
	                this.state = 2194;
	                this.match(HiveParser.COMMA);
	                this.state = 2195;
	                this.keyValueProperty();
	                this.state = 2200;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2201;
	            this.keyProperty();
	            this.state = 2206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.COMMA) {
	                this.state = 2202;
	                this.match(HiveParser.COMMA);
	                this.state = 2203;
	                this.keyProperty();
	                this.state = 2208;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyValueProperty() {
	    let localctx = new KeyValuePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, HiveParser.RULE_keyValueProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2211;
	        this.match(HiveParser.StringLiteral);
	        this.state = 2212;
	        this.match(HiveParser.EQUAL);
	        this.state = 2213;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyProperty() {
	    let localctx = new KeyPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, HiveParser.RULE_keyProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2215;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatFieldIdentifier() {
	    let localctx = new TableRowFormatFieldIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, HiveParser.RULE_tableRowFormatFieldIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2217;
	        this.match(HiveParser.KW_FIELDS);
	        this.state = 2218;
	        this.match(HiveParser.KW_TERMINATED);
	        this.state = 2219;
	        this.match(HiveParser.KW_BY);
	        this.state = 2220;
	        this.match(HiveParser.StringLiteral);
	        this.state = 2224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ESCAPED) {
	            this.state = 2221;
	            this.match(HiveParser.KW_ESCAPED);
	            this.state = 2222;
	            this.match(HiveParser.KW_BY);
	            this.state = 2223;
	            this.match(HiveParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatCollItemsIdentifier() {
	    let localctx = new TableRowFormatCollItemsIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, HiveParser.RULE_tableRowFormatCollItemsIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2226;
	        this.match(HiveParser.KW_COLLECTION);
	        this.state = 2227;
	        this.match(HiveParser.KW_ITEMS);
	        this.state = 2228;
	        this.match(HiveParser.KW_TERMINATED);
	        this.state = 2229;
	        this.match(HiveParser.KW_BY);
	        this.state = 2230;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatMapKeysIdentifier() {
	    let localctx = new TableRowFormatMapKeysIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, HiveParser.RULE_tableRowFormatMapKeysIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2232;
	        this.match(HiveParser.KW_MAP);
	        this.state = 2233;
	        this.match(HiveParser.KW_KEYS);
	        this.state = 2234;
	        this.match(HiveParser.KW_TERMINATED);
	        this.state = 2235;
	        this.match(HiveParser.KW_BY);
	        this.state = 2236;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowFormatLinesIdentifier() {
	    let localctx = new TableRowFormatLinesIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, HiveParser.RULE_tableRowFormatLinesIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2238;
	        this.match(HiveParser.KW_LINES);
	        this.state = 2239;
	        this.match(HiveParser.KW_TERMINATED);
	        this.state = 2240;
	        this.match(HiveParser.KW_BY);
	        this.state = 2241;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRowNullFormat() {
	    let localctx = new TableRowNullFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, HiveParser.RULE_tableRowNullFormat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2243;
	        this.match(HiveParser.KW_NULL);
	        this.state = 2244;
	        this.match(HiveParser.KW_DEFINED);
	        this.state = 2245;
	        this.match(HiveParser.KW_AS);
	        this.state = 2246;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableFileFormat() {
	    let localctx = new TableFileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, HiveParser.RULE_tableFileFormat);
	    var _la = 0; // Token type
	    try {
	        this.state = 2271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2248;
	            this.match(HiveParser.KW_STORED);
	            this.state = 2249;
	            this.match(HiveParser.KW_AS);
	            this.state = 2250;
	            this.match(HiveParser.KW_INPUTFORMAT);
	            this.state = 2251;
	            this.match(HiveParser.StringLiteral);
	            this.state = 2252;
	            this.match(HiveParser.KW_OUTPUTFORMAT);
	            this.state = 2253;
	            this.match(HiveParser.StringLiteral);
	            this.state = 2258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_INPUTDRIVER) {
	                this.state = 2254;
	                this.match(HiveParser.KW_INPUTDRIVER);
	                this.state = 2255;
	                this.match(HiveParser.StringLiteral);
	                this.state = 2256;
	                this.match(HiveParser.KW_OUTPUTDRIVER);
	                this.state = 2257;
	                this.match(HiveParser.StringLiteral);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2260;
	            this.match(HiveParser.KW_STORED);
	            this.state = 2261;
	            this.match(HiveParser.KW_BY);
	            this.state = 2262;
	            this.match(HiveParser.StringLiteral);
	            this.state = 2266;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	            if(la_===1) {
	                this.state = 2263;
	                this.match(HiveParser.KW_WITH);
	                this.state = 2264;
	                this.match(HiveParser.KW_SERDEPROPERTIES);
	                this.state = 2265;
	                this.tableProperties();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2268;
	            this.match(HiveParser.KW_STORED);
	            this.state = 2269;
	            this.match(HiveParser.KW_AS);
	            this.state = 2270;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableLocation() {
	    let localctx = new TableLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, HiveParser.RULE_tableLocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2273;
	        this.match(HiveParser.KW_LOCATION);
	        this.state = 2274;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameTypeList() {
	    let localctx = new ColumnNameTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, HiveParser.RULE_columnNameTypeList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2276;
	        this.columnNameType();
	        this.state = 2281;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2277;
	                this.match(HiveParser.COMMA);
	                this.state = 2278;
	                this.columnNameType(); 
	            }
	            this.state = 2283;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameTypeOrConstraintList() {
	    let localctx = new ColumnNameTypeOrConstraintListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, HiveParser.RULE_columnNameTypeOrConstraintList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2284;
	        this.columnNameTypeOrConstraint();
	        this.state = 2289;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2285;
	            this.match(HiveParser.COMMA);
	            this.state = 2286;
	            this.columnNameTypeOrConstraint();
	            this.state = 2291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameColonTypeList() {
	    let localctx = new ColumnNameColonTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, HiveParser.RULE_columnNameColonTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2292;
	        this.columnNameColonType();
	        this.state = 2297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2293;
	            this.match(HiveParser.COMMA);
	            this.state = 2294;
	            this.columnNameColonType();
	            this.state = 2299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameList() {
	    let localctx = new ColumnNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, HiveParser.RULE_columnNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2300;
	        this.columnName();
	        this.state = 2305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2301;
	            this.match(HiveParser.COMMA);
	            this.state = 2302;
	            this.columnName();
	            this.state = 2307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnName() {
	    let localctx = new ColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, HiveParser.RULE_columnName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2308;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extColumnName() {
	    let localctx = new ExtColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, HiveParser.RULE_extColumnName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2310;
	        this.identifier();
	        this.state = 2320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.DOT) {
	            this.state = 2311;
	            this.match(HiveParser.DOT);
	            this.state = 2316;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2312;
	                this.match(HiveParser.KW_ELEM_TYPE);
	                break;

	            case 2:
	                this.state = 2313;
	                this.match(HiveParser.KW_KEY_TYPE);
	                break;

	            case 3:
	                this.state = 2314;
	                this.match(HiveParser.KW_VALUE_TYPE);
	                break;

	            case 4:
	                this.state = 2315;
	                this.identifier();
	                break;

	            }
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameOrderList() {
	    let localctx = new ColumnNameOrderListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, HiveParser.RULE_columnNameOrderList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2323;
	        this.columnNameOrder();
	        this.state = 2328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2324;
	            this.match(HiveParser.COMMA);
	            this.state = 2325;
	            this.columnNameOrder();
	            this.state = 2330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnParenthesesList() {
	    let localctx = new ColumnParenthesesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, HiveParser.RULE_columnParenthesesList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2331;
	        this.match(HiveParser.LPAREN);
	        this.state = 2332;
	        this.columnNameList();
	        this.state = 2333;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enableValidateSpecification() {
	    let localctx = new EnableValidateSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, HiveParser.RULE_enableValidateSpecification);
	    var _la = 0; // Token type
	    try {
	        this.state = 2340;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2335;
	            this.enableSpecification();
	            this.state = 2337;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_VALIDATE || _la===HiveParser.KW_NOVALIDATE) {
	                this.state = 2336;
	                this.validateSpecification();
	            }

	            break;
	        case HiveParser.KW_NOT:
	        case HiveParser.KW_ENFORCED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2339;
	            this.enforcedSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enableSpecification() {
	    let localctx = new EnableSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, HiveParser.RULE_enableSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2342;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	validateSpecification() {
	    let localctx = new ValidateSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, HiveParser.RULE_validateSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2344;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_VALIDATE || _la===HiveParser.KW_NOVALIDATE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enforcedSpecification() {
	    let localctx = new EnforcedSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, HiveParser.RULE_enforcedSpecification);
	    try {
	        this.state = 2349;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ENFORCED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2346;
	            this.match(HiveParser.KW_ENFORCED);
	            break;
	        case HiveParser.KW_NOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2347;
	            this.match(HiveParser.KW_NOT);
	            this.state = 2348;
	            this.match(HiveParser.KW_ENFORCED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relySpecification() {
	    let localctx = new RelySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, HiveParser.RULE_relySpecification);
	    var _la = 0; // Token type
	    try {
	        this.state = 2355;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_RELY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2351;
	            this.match(HiveParser.KW_RELY);
	            break;
	        case HiveParser.EOF:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_FROM:
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_INSERT:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_IMPORT:
	        case HiveParser.KW_CREATE:
	        case HiveParser.KW_ALTER:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_DESCRIBE:
	        case HiveParser.KW_DROP:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_WITH:
	        case HiveParser.KW_SET:
	        case HiveParser.KW_DELETE:
	        case HiveParser.KW_GRANT:
	        case HiveParser.KW_REVOKE:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_UPDATE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_TRUNCATE:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_START:
	        case HiveParser.KW_COMMIT:
	        case HiveParser.KW_ROLLBACK:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MERGE:
	        case HiveParser.KW_REPL:
	        case HiveParser.COMMA:
	        case HiveParser.SEMICOLON:
	        case HiveParser.LPAREN:
	        case HiveParser.RPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_NORELY) {
	                this.state = 2352;
	                this.match(HiveParser.KW_NORELY);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createConstraint() {
	    let localctx = new CreateConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, HiveParser.RULE_createConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_CONSTRAINT) {
	            this.state = 2357;
	            this.match(HiveParser.KW_CONSTRAINT);
	            this.state = 2358;
	            this.identifier();
	        }

	        this.state = 2361;
	        this.pkConstraint();
	        this.state = 2363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2362;
	            this.constraintOptsCreate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterConstraintWithName() {
	    let localctx = new AlterConstraintWithNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, HiveParser.RULE_alterConstraintWithName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2365;
	        this.match(HiveParser.KW_CONSTRAINT);
	        this.state = 2366;
	        this.identifier();
	        this.state = 2367;
	        this.pkConstraint();
	        this.state = 2369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2368;
	            this.constraintOptsAlter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pkConstraint() {
	    let localctx = new PkConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, HiveParser.RULE_pkConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2371;
	        this.tableConstraintPrimaryKey();
	        this.state = 2372;
	        localctx.pkCols = this.columnParenthesesList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createForeignKey() {
	    let localctx = new CreateForeignKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, HiveParser.RULE_createForeignKey);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_CONSTRAINT) {
	            this.state = 2374;
	            this.match(HiveParser.KW_CONSTRAINT);
	            this.state = 2375;
	            this.identifier();
	        }

	        this.state = 2378;
	        this.match(HiveParser.KW_FOREIGN);
	        this.state = 2379;
	        this.match(HiveParser.KW_KEY);
	        this.state = 2380;
	        this.columnParenthesesList();
	        this.state = 2381;
	        this.match(HiveParser.KW_REFERENCES);
	        this.state = 2382;
	        this.tableName();
	        this.state = 2383;
	        this.columnParenthesesList();
	        this.state = 2385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2384;
	            this.constraintOptsCreate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterForeignKeyWithName() {
	    let localctx = new AlterForeignKeyWithNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, HiveParser.RULE_alterForeignKeyWithName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2387;
	        this.match(HiveParser.KW_CONSTRAINT);
	        this.state = 2388;
	        this.identifier();
	        this.state = 2389;
	        this.match(HiveParser.KW_FOREIGN);
	        this.state = 2390;
	        this.match(HiveParser.KW_KEY);
	        this.state = 2391;
	        this.columnParenthesesList();
	        this.state = 2392;
	        this.match(HiveParser.KW_REFERENCES);
	        this.state = 2393;
	        this.tableName();
	        this.state = 2394;
	        this.columnParenthesesList();
	        this.state = 2396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2395;
	            this.constraintOptsAlter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedValueElement() {
	    let localctx = new SkewedValueElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, HiveParser.RULE_skewedValueElement);
	    try {
	        this.state = 2400;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_TRUE:
	        case HiveParser.KW_FALSE:
	        case HiveParser.KW_NULL:
	        case HiveParser.KW_DATE:
	        case HiveParser.KW_TIMESTAMP:
	        case HiveParser.KW_TIMESTAMPLOCALTZ:
	        case HiveParser.KW_CURRENT_DATE:
	        case HiveParser.KW_CURRENT_TIMESTAMP:
	        case HiveParser.StringLiteral:
	        case HiveParser.IntegralLiteral:
	        case HiveParser.NumberLiteral:
	        case HiveParser.Number:
	        case HiveParser.CharSetName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2398;
	            this.skewedColumnValues();
	            break;
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2399;
	            this.skewedColumnValuePairList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValuePairList() {
	    let localctx = new SkewedColumnValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, HiveParser.RULE_skewedColumnValuePairList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2402;
	        this.skewedColumnValuePair();
	        this.state = 2407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2403;
	            this.match(HiveParser.COMMA);
	            this.state = 2404;
	            this.skewedColumnValuePair();
	            this.state = 2409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValuePair() {
	    let localctx = new SkewedColumnValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, HiveParser.RULE_skewedColumnValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2410;
	        this.match(HiveParser.LPAREN);
	        this.state = 2411;
	        this.skewedColumnValues();
	        this.state = 2412;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValues() {
	    let localctx = new SkewedColumnValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, HiveParser.RULE_skewedColumnValues);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2414;
	        this.skewedColumnValue();
	        this.state = 2419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2415;
	            this.match(HiveParser.COMMA);
	            this.state = 2416;
	            this.skewedColumnValue();
	            this.state = 2421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedColumnValue() {
	    let localctx = new SkewedColumnValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, HiveParser.RULE_skewedColumnValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2422;
	        this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewedValueLocationElement() {
	    let localctx = new SkewedValueLocationElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, HiveParser.RULE_skewedValueLocationElement);
	    try {
	        this.state = 2426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_TRUE:
	        case HiveParser.KW_FALSE:
	        case HiveParser.KW_NULL:
	        case HiveParser.KW_DATE:
	        case HiveParser.KW_TIMESTAMP:
	        case HiveParser.KW_TIMESTAMPLOCALTZ:
	        case HiveParser.KW_CURRENT_DATE:
	        case HiveParser.KW_CURRENT_TIMESTAMP:
	        case HiveParser.StringLiteral:
	        case HiveParser.IntegralLiteral:
	        case HiveParser.NumberLiteral:
	        case HiveParser.Number:
	        case HiveParser.CharSetName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2424;
	            this.skewedColumnValue();
	            break;
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2425;
	            this.skewedColumnValuePair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderSpecification() {
	    let localctx = new OrderSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, HiveParser.RULE_orderSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2428;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_ASC || _la===HiveParser.KW_DESC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullOrdering() {
	    let localctx = new NullOrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, HiveParser.RULE_nullOrdering);
	    try {
	        this.state = 2434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2430;
	            this.match(HiveParser.KW_NULLS);
	            this.state = 2431;
	            this.match(HiveParser.KW_FIRST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2432;
	            this.match(HiveParser.KW_NULLS);
	            this.state = 2433;
	            this.match(HiveParser.KW_LAST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameOrder() {
	    let localctx = new ColumnNameOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, HiveParser.RULE_columnNameOrder);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2436;
	        this.identifier();
	        this.state = 2438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ASC || _la===HiveParser.KW_DESC) {
	            this.state = 2437;
	            this.orderSpecification();
	        }

	        this.state = 2441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NULLS) {
	            this.state = 2440;
	            this.nullOrdering();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameCommentList() {
	    let localctx = new ColumnNameCommentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, HiveParser.RULE_columnNameCommentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2443;
	        this.columnNameComment();
	        this.state = 2448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2444;
	            this.match(HiveParser.COMMA);
	            this.state = 2445;
	            this.columnNameComment();
	            this.state = 2450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameComment() {
	    let localctx = new ColumnNameCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, HiveParser.RULE_columnNameComment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2451;
	        this.identifier();
	        this.state = 2454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 2452;
	            this.match(HiveParser.KW_COMMENT);
	            this.state = 2453;
	            this.match(HiveParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnRefOrder() {
	    let localctx = new ColumnRefOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, HiveParser.RULE_columnRefOrder);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2456;
	        this.expression(0);
	        this.state = 2458;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
	        if(la_===1) {
	            this.state = 2457;
	            this.orderSpecification();

	        }
	        this.state = 2461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NULLS) {
	            this.state = 2460;
	            this.nullOrdering();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameType() {
	    let localctx = new ColumnNameTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, HiveParser.RULE_columnNameType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2463;
	        this.identifier();
	        this.state = 2464;
	        this.colType();
	        this.state = 2467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 2465;
	            this.match(HiveParser.KW_COMMENT);
	            this.state = 2466;
	            this.match(HiveParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameTypeOrConstraint() {
	    let localctx = new ColumnNameTypeOrConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, HiveParser.RULE_columnNameTypeOrConstraint);
	    try {
	        this.state = 2471;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_PRIMARY:
	        case HiveParser.KW_FOREIGN:
	        case HiveParser.KW_CONSTRAINT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2469;
	            this.tableConstraint();
	            break;
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2470;
	            this.columnNameTypeConstraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraint() {
	    let localctx = new TableConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, HiveParser.RULE_tableConstraint);
	    try {
	        this.state = 2475;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2473;
	            this.createForeignKey();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2474;
	            this.createConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameTypeConstraint() {
	    let localctx = new ColumnNameTypeConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, HiveParser.RULE_columnNameTypeConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2477;
	        this.identifier();
	        this.state = 2478;
	        this.colType();
	        this.state = 2480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (HiveParser.KW_PRIMARY - 287)) | (1 << (HiveParser.KW_REFERENCES - 287)) | (1 << (HiveParser.KW_CONSTRAINT - 287)))) !== 0)) {
	            this.state = 2479;
	            this.columnConstraint();
	        }

	        this.state = 2484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 2482;
	            this.match(HiveParser.KW_COMMENT);
	            this.state = 2483;
	            this.match(HiveParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraint() {
	    let localctx = new ColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, HiveParser.RULE_columnConstraint);
	    try {
	        this.state = 2488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2486;
	            this.foreignKeyConstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2487;
	            this.colConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreignKeyConstraint() {
	    let localctx = new ForeignKeyConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, HiveParser.RULE_foreignKeyConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_CONSTRAINT) {
	            this.state = 2490;
	            this.match(HiveParser.KW_CONSTRAINT);
	            this.state = 2491;
	            this.identifier();
	        }

	        this.state = 2494;
	        this.match(HiveParser.KW_REFERENCES);
	        this.state = 2495;
	        this.tableName();
	        this.state = 2496;
	        this.match(HiveParser.LPAREN);
	        this.state = 2497;
	        this.columnName();
	        this.state = 2498;
	        this.match(HiveParser.RPAREN);
	        this.state = 2500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2499;
	            this.constraintOptsCreate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colConstraint() {
	    let localctx = new ColConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, HiveParser.RULE_colConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_CONSTRAINT) {
	            this.state = 2502;
	            this.match(HiveParser.KW_CONSTRAINT);
	            this.state = 2503;
	            this.identifier();
	        }

	        this.state = 2506;
	        this.tableConstraintPrimaryKey();
	        this.state = 2508;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2507;
	            this.constraintOptsCreate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterColumnConstraint() {
	    let localctx = new AlterColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, HiveParser.RULE_alterColumnConstraint);
	    try {
	        this.state = 2512;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2510;
	            this.alterForeignKeyConstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2511;
	            this.alterColConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterForeignKeyConstraint() {
	    let localctx = new AlterForeignKeyConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, HiveParser.RULE_alterForeignKeyConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_CONSTRAINT) {
	            this.state = 2514;
	            this.match(HiveParser.KW_CONSTRAINT);
	            this.state = 2515;
	            this.identifier();
	        }

	        this.state = 2518;
	        this.match(HiveParser.KW_REFERENCES);
	        this.state = 2519;
	        this.tableName();
	        this.state = 2520;
	        this.match(HiveParser.LPAREN);
	        this.state = 2521;
	        this.columnName();
	        this.state = 2522;
	        this.match(HiveParser.RPAREN);
	        this.state = 2524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2523;
	            this.constraintOptsAlter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterColConstraint() {
	    let localctx = new AlterColConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, HiveParser.RULE_alterColConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_CONSTRAINT) {
	            this.state = 2526;
	            this.match(HiveParser.KW_CONSTRAINT);
	            this.state = 2527;
	            this.identifier();
	        }

	        this.state = 2530;
	        this.tableConstraintPrimaryKey();
	        this.state = 2532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT || _la===HiveParser.KW_ENABLE || _la===HiveParser.KW_DISABLE || _la===HiveParser.KW_ENFORCED) {
	            this.state = 2531;
	            this.constraintOptsAlter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraintPrimaryKey() {
	    let localctx = new TableConstraintPrimaryKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, HiveParser.RULE_tableConstraintPrimaryKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2534;
	        this.match(HiveParser.KW_PRIMARY);
	        this.state = 2535;
	        this.match(HiveParser.KW_KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintOptsCreate() {
	    let localctx = new ConstraintOptsCreateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, HiveParser.RULE_constraintOptsCreate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2537;
	        this.enableValidateSpecification();
	        this.state = 2538;
	        this.relySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintOptsAlter() {
	    let localctx = new ConstraintOptsAlterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, HiveParser.RULE_constraintOptsAlter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2540;
	        this.enableValidateSpecification();
	        this.state = 2541;
	        this.relySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameColonType() {
	    let localctx = new ColumnNameColonTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, HiveParser.RULE_columnNameColonType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2543;
	        this.identifier();
	        this.state = 2544;
	        this.match(HiveParser.COLON);
	        this.state = 2545;
	        this.colType();
	        this.state = 2548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_COMMENT) {
	            this.state = 2546;
	            this.match(HiveParser.KW_COMMENT);
	            this.state = 2547;
	            this.match(HiveParser.StringLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colType() {
	    let localctx = new ColTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, HiveParser.RULE_colType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2550;
	        this.type_db_col();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colTypeList() {
	    let localctx = new ColTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, HiveParser.RULE_colTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2552;
	        this.colType();
	        this.state = 2557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2553;
	            this.match(HiveParser.COMMA);
	            this.state = 2554;
	            this.colType();
	            this.state = 2559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_db_col() {
	    let localctx = new Type_db_colContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, HiveParser.RULE_type_db_col);
	    try {
	        this.state = 2565;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_BOOLEAN:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_SMALLINT:
	        case HiveParser.KW_INT:
	        case HiveParser.KW_BIGINT:
	        case HiveParser.KW_FLOAT:
	        case HiveParser.KW_DOUBLE:
	        case HiveParser.KW_DATE:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_TIMESTAMP:
	        case HiveParser.KW_TIMESTAMPLOCALTZ:
	        case HiveParser.KW_DECIMAL:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_CHAR:
	        case HiveParser.KW_VARCHAR:
	        case HiveParser.KW_BINARY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2560;
	            this.primitiveType();
	            break;
	        case HiveParser.KW_ARRAY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2561;
	            this.listType();
	            break;
	        case HiveParser.KW_STRUCT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2562;
	            this.structType();
	            break;
	        case HiveParser.KW_MAP:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2563;
	            this.mapType();
	            break;
	        case HiveParser.KW_UNIONTYPE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2564;
	            this.unionType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, HiveParser.RULE_primitiveType);
	    var _la = 0; // Token type
	    try {
	        this.state = 2606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2567;
	            this.match(HiveParser.KW_TINYINT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2568;
	            this.match(HiveParser.KW_SMALLINT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2569;
	            this.match(HiveParser.KW_INT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2570;
	            this.match(HiveParser.KW_BIGINT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2571;
	            this.match(HiveParser.KW_BOOLEAN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2572;
	            this.match(HiveParser.KW_FLOAT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2573;
	            this.match(HiveParser.KW_DOUBLE);
	            this.state = 2575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_PRECISION) {
	                this.state = 2574;
	                this.match(HiveParser.KW_PRECISION);
	            }

	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2577;
	            this.match(HiveParser.KW_DATE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2578;
	            this.match(HiveParser.KW_DATETIME);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2579;
	            this.match(HiveParser.KW_TIMESTAMP);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2580;
	            this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2581;
	            this.match(HiveParser.KW_TIMESTAMP);
	            this.state = 2582;
	            this.match(HiveParser.KW_WITH);
	            this.state = 2583;
	            this.match(HiveParser.KW_LOCAL);
	            this.state = 2584;
	            this.match(HiveParser.KW_TIME);
	            this.state = 2585;
	            this.match(HiveParser.KW_ZONE);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2586;
	            this.match(HiveParser.KW_STRING);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2587;
	            this.match(HiveParser.KW_BINARY);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2588;
	            this.match(HiveParser.KW_DECIMAL);
	            this.state = 2596;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	            if(la_===1) {
	                this.state = 2589;
	                this.match(HiveParser.LPAREN);
	                this.state = 2590;
	                this.match(HiveParser.Number);
	                this.state = 2593;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===HiveParser.COMMA) {
	                    this.state = 2591;
	                    this.match(HiveParser.COMMA);
	                    this.state = 2592;
	                    this.match(HiveParser.Number);
	                }

	                this.state = 2595;
	                this.match(HiveParser.RPAREN);

	            }
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2598;
	            this.match(HiveParser.KW_VARCHAR);
	            this.state = 2599;
	            this.match(HiveParser.LPAREN);
	            this.state = 2600;
	            this.match(HiveParser.Number);
	            this.state = 2601;
	            this.match(HiveParser.RPAREN);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2602;
	            this.match(HiveParser.KW_CHAR);
	            this.state = 2603;
	            this.match(HiveParser.LPAREN);
	            this.state = 2604;
	            this.match(HiveParser.Number);
	            this.state = 2605;
	            this.match(HiveParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listType() {
	    let localctx = new ListTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, HiveParser.RULE_listType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2608;
	        this.match(HiveParser.KW_ARRAY);
	        this.state = 2609;
	        this.match(HiveParser.LESSTHAN);
	        this.state = 2610;
	        this.type_db_col();
	        this.state = 2611;
	        this.match(HiveParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structType() {
	    let localctx = new StructTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, HiveParser.RULE_structType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2613;
	        this.match(HiveParser.KW_STRUCT);
	        this.state = 2614;
	        this.match(HiveParser.LESSTHAN);
	        this.state = 2615;
	        this.columnNameColonTypeList();
	        this.state = 2616;
	        this.match(HiveParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapType() {
	    let localctx = new MapTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, HiveParser.RULE_mapType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2618;
	        this.match(HiveParser.KW_MAP);
	        this.state = 2619;
	        this.match(HiveParser.LESSTHAN);
	        this.state = 2620;
	        this.primitiveType();
	        this.state = 2621;
	        this.match(HiveParser.COMMA);
	        this.state = 2622;
	        this.type_db_col();
	        this.state = 2623;
	        this.match(HiveParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionType() {
	    let localctx = new UnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, HiveParser.RULE_unionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2625;
	        this.match(HiveParser.KW_UNIONTYPE);
	        this.state = 2626;
	        this.match(HiveParser.LESSTHAN);
	        this.state = 2627;
	        this.colTypeList();
	        this.state = 2628;
	        this.match(HiveParser.GREATERTHAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOperator() {
	    let localctx = new SetOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, HiveParser.RULE_setOperator);
	    var _la = 0; // Token type
	    try {
	        this.state = 2654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2630;
	            this.match(HiveParser.KW_UNION);
	            this.state = 2631;
	            this.match(HiveParser.KW_ALL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2632;
	            this.match(HiveParser.KW_UNION);
	            this.state = 2634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_DISTINCT) {
	                this.state = 2633;
	                this.match(HiveParser.KW_DISTINCT);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2636;
	            this.match(HiveParser.KW_INTERSECT);
	            this.state = 2637;
	            this.match(HiveParser.KW_ALL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2638;
	            this.match(HiveParser.KW_INTERSECT);
	            this.state = 2640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_DISTINCT) {
	                this.state = 2639;
	                this.match(HiveParser.KW_DISTINCT);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2642;
	            this.match(HiveParser.KW_EXCEPT);
	            this.state = 2643;
	            this.match(HiveParser.KW_ALL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2644;
	            this.match(HiveParser.KW_EXCEPT);
	            this.state = 2646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_DISTINCT) {
	                this.state = 2645;
	                this.match(HiveParser.KW_DISTINCT);
	            }

	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2648;
	            this.match(HiveParser.KW_MINUS);
	            this.state = 2649;
	            this.match(HiveParser.KW_ALL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2650;
	            this.match(HiveParser.KW_MINUS);
	            this.state = 2652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_DISTINCT) {
	                this.state = 2651;
	                this.match(HiveParser.KW_DISTINCT);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatementExpression() {
	    let localctx = new QueryStatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, HiveParser.RULE_queryStatementExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_WITH) {
	            this.state = 2656;
	            this.withClause();
	        }

	        this.state = 2659;
	        this.queryStatementExpressionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatementExpressionBody() {
	    let localctx = new QueryStatementExpressionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, HiveParser.RULE_queryStatementExpressionBody);
	    try {
	        this.state = 2663;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_FROM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2661;
	            this.fromStatement();
	            break;
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_INSERT:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2662;
	            this.regularBody();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, HiveParser.RULE_withClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2665;
	        this.match(HiveParser.KW_WITH);
	        this.state = 2666;
	        this.cteStatement();
	        this.state = 2671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2667;
	            this.match(HiveParser.COMMA);
	            this.state = 2668;
	            this.cteStatement();
	            this.state = 2673;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cteStatement() {
	    let localctx = new CteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, HiveParser.RULE_cteStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2674;
	        this.identifier();
	        this.state = 2675;
	        this.match(HiveParser.KW_AS);
	        this.state = 2676;
	        this.match(HiveParser.LPAREN);
	        this.state = 2677;
	        this.queryStatementExpression();
	        this.state = 2678;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromStatement() {
	    let localctx = new FromStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, HiveParser.RULE_fromStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2680;
	        this.singleFromStatement();
	        this.state = 2686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.KW_UNION || _la===HiveParser.KW_EXCEPT || _la===HiveParser.KW_MINUS || _la===HiveParser.KW_INTERSECT) {
	            this.state = 2681;
	            this.setOperator();
	            this.state = 2682;
	            this.singleFromStatement();
	            this.state = 2688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleFromStatement() {
	    let localctx = new SingleFromStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, HiveParser.RULE_singleFromStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2689;
	        this.fromClause();
	        this.state = 2691; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2690;
	        		this.body();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2693; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,281, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularBody() {
	    let localctx = new RegularBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, HiveParser.RULE_regularBody);
	    try {
	        this.state = 2701;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_INSERT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2695;
	            this.insertClause();
	            this.state = 2698;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case HiveParser.KW_SELECT:
	            case HiveParser.KW_MAP:
	            case HiveParser.KW_REDUCE:
	            case HiveParser.LPAREN:
	                this.state = 2696;
	                this.selectStatement();
	                break;
	            case HiveParser.KW_VALUES:
	                this.state = 2697;
	                this.valuesClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2700;
	            this.selectStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomSelectStatement() {
	    let localctx = new AtomSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, HiveParser.RULE_atomSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 2723;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2703;
	            this.selectClause();
	            this.state = 2705;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	            if(la_===1) {
	                this.state = 2704;
	                this.fromClause();

	            }
	            this.state = 2708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_WHERE) {
	                this.state = 2707;
	                this.whereClause();
	            }

	            this.state = 2711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_GROUP) {
	                this.state = 2710;
	                this.groupByClause();
	            }

	            this.state = 2714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_HAVING) {
	                this.state = 2713;
	                this.havingClause();
	            }

	            this.state = 2717;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_WINDOW) {
	                this.state = 2716;
	                this.window_clause();
	            }

	            break;
	        case HiveParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2719;
	            this.match(HiveParser.LPAREN);
	            this.state = 2720;
	            this.selectStatement();
	            this.state = 2721;
	            this.match(HiveParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, HiveParser.RULE_selectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2725;
	        this.atomSelectStatement();
	        this.state = 2727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_UNION || _la===HiveParser.KW_EXCEPT || _la===HiveParser.KW_MINUS || _la===HiveParser.KW_INTERSECT) {
	            this.state = 2726;
	            this.setOpSelectStatement();
	        }

	        this.state = 2730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ORDER) {
	            this.state = 2729;
	            this.orderByClause();
	        }

	        this.state = 2733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_CLUSTER) {
	            this.state = 2732;
	            this.clusterByClause();
	        }

	        this.state = 2736;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_DISTRIBUTE) {
	            this.state = 2735;
	            this.distributeByClause();
	        }

	        this.state = 2739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_SORT) {
	            this.state = 2738;
	            this.sortByClause();
	        }

	        this.state = 2742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_LIMIT) {
	            this.state = 2741;
	            this.limitClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOpSelectStatement() {
	    let localctx = new SetOpSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, HiveParser.RULE_setOpSelectStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2747; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2744;
	            this.setOperator();
	            this.state = 2745;
	            this.atomSelectStatement();
	            this.state = 2749; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===HiveParser.KW_UNION || _la===HiveParser.KW_EXCEPT || _la===HiveParser.KW_MINUS || _la===HiveParser.KW_INTERSECT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatementWithCTE() {
	    let localctx = new SelectStatementWithCTEContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, HiveParser.RULE_selectStatementWithCTE);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_WITH) {
	            this.state = 2751;
	            this.withClause();
	        }

	        this.state = 2754;
	        this.selectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, HiveParser.RULE_body);
	    var _la = 0; // Token type
	    try {
	        this.state = 2819;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_INSERT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2756;
	            this.insertClause();
	            this.state = 2757;
	            this.selectClause();
	            this.state = 2759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LATERAL || _la===HiveParser.COMMA) {
	                this.state = 2758;
	                this.lateralView();
	            }

	            this.state = 2762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_WHERE) {
	                this.state = 2761;
	                this.whereClause();
	            }

	            this.state = 2765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_GROUP) {
	                this.state = 2764;
	                this.groupByClause();
	            }

	            this.state = 2768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_HAVING) {
	                this.state = 2767;
	                this.havingClause();
	            }

	            this.state = 2771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_WINDOW) {
	                this.state = 2770;
	                this.window_clause();
	            }

	            this.state = 2774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ORDER) {
	                this.state = 2773;
	                this.orderByClause();
	            }

	            this.state = 2777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_CLUSTER) {
	                this.state = 2776;
	                this.clusterByClause();
	            }

	            this.state = 2780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_DISTRIBUTE) {
	                this.state = 2779;
	                this.distributeByClause();
	            }

	            this.state = 2783;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_SORT) {
	                this.state = 2782;
	                this.sortByClause();
	            }

	            this.state = 2786;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LIMIT) {
	                this.state = 2785;
	                this.limitClause();
	            }

	            break;
	        case HiveParser.KW_SELECT:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2788;
	            this.selectClause();
	            this.state = 2790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LATERAL || _la===HiveParser.COMMA) {
	                this.state = 2789;
	                this.lateralView();
	            }

	            this.state = 2793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_WHERE) {
	                this.state = 2792;
	                this.whereClause();
	            }

	            this.state = 2796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_GROUP) {
	                this.state = 2795;
	                this.groupByClause();
	            }

	            this.state = 2799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_HAVING) {
	                this.state = 2798;
	                this.havingClause();
	            }

	            this.state = 2802;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_WINDOW) {
	                this.state = 2801;
	                this.window_clause();
	            }

	            this.state = 2805;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ORDER) {
	                this.state = 2804;
	                this.orderByClause();
	            }

	            this.state = 2808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_CLUSTER) {
	                this.state = 2807;
	                this.clusterByClause();
	            }

	            this.state = 2811;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_DISTRIBUTE) {
	                this.state = 2810;
	                this.distributeByClause();
	            }

	            this.state = 2814;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_SORT) {
	                this.state = 2813;
	                this.sortByClause();
	            }

	            this.state = 2817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LIMIT) {
	                this.state = 2816;
	                this.limitClause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertClause() {
	    let localctx = new InsertClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, HiveParser.RULE_insertClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 2839;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2821;
	            this.match(HiveParser.KW_INSERT);
	            this.state = 2822;
	            this.match(HiveParser.KW_OVERWRITE);
	            this.state = 2823;
	            this.destination();
	            this.state = 2825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_IF) {
	                this.state = 2824;
	                this.ifNotExists();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2827;
	            this.match(HiveParser.KW_INSERT);
	            this.state = 2828;
	            this.match(HiveParser.KW_INTO);
	            this.state = 2830;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_TABLE) {
	                this.state = 2829;
	                this.match(HiveParser.KW_TABLE);
	            }

	            this.state = 2832;
	            this.tableOrPartition();
	            this.state = 2837;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	            if(la_===1) {
	                this.state = 2833;
	                this.match(HiveParser.LPAREN);
	                this.state = 2834;
	                this.columnNameList();
	                this.state = 2835;
	                this.match(HiveParser.RPAREN);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destination() {
	    let localctx = new DestinationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, HiveParser.RULE_destination);
	    var _la = 0; // Token type
	    try {
	        this.state = 2854;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_LOCAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_LOCAL) {
	                this.state = 2841;
	                this.match(HiveParser.KW_LOCAL);
	            }

	            this.state = 2844;
	            this.match(HiveParser.KW_DIRECTORY);
	            this.state = 2845;
	            this.match(HiveParser.StringLiteral);
	            this.state = 2847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ROW) {
	                this.state = 2846;
	                this.tableRowFormat();
	            }

	            this.state = 2850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_STORED) {
	                this.state = 2849;
	                this.tableFileFormat();
	            }

	            break;
	        case HiveParser.KW_TABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2852;
	            this.match(HiveParser.KW_TABLE);
	            this.state = 2853;
	            this.tableOrPartition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, HiveParser.RULE_limitClause);
	    try {
	        this.state = 2866;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2856;
	            this.match(HiveParser.KW_LIMIT);

	            this.state = 2859;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	            if(la_===1) {
	                this.state = 2857;
	                this.match(HiveParser.Number);
	                this.state = 2858;
	                this.match(HiveParser.COMMA);

	            }
	            this.state = 2861;
	            this.match(HiveParser.Number);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2862;
	            this.match(HiveParser.KW_LIMIT);
	            this.state = 2863;
	            this.match(HiveParser.Number);
	            this.state = 2864;
	            this.match(HiveParser.KW_OFFSET);
	            this.state = 2865;
	            this.match(HiveParser.Number);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, HiveParser.RULE_deleteStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2868;
	        this.match(HiveParser.KW_DELETE);
	        this.state = 2869;
	        this.match(HiveParser.KW_FROM);
	        this.state = 2870;
	        this.tableName();
	        this.state = 2872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_WHERE) {
	            this.state = 2871;
	            this.whereClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAssignmentClause() {
	    let localctx = new ColumnAssignmentClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, HiveParser.RULE_columnAssignmentClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2874;
	        this.tableOrColumn();
	        this.state = 2875;
	        this.match(HiveParser.EQUAL);
	        this.state = 2876;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setColumnsClause() {
	    let localctx = new SetColumnsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, HiveParser.RULE_setColumnsClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2878;
	        this.match(HiveParser.KW_SET);
	        this.state = 2879;
	        this.columnAssignmentClause();
	        this.state = 2884;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 2880;
	            this.match(HiveParser.COMMA);
	            this.state = 2881;
	            this.columnAssignmentClause();
	            this.state = 2886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatement() {
	    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, HiveParser.RULE_updateStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2887;
	        this.match(HiveParser.KW_UPDATE);
	        this.state = 2888;
	        this.tableName();
	        this.state = 2889;
	        this.setColumnsClause();
	        this.state = 2891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_WHERE) {
	            this.state = 2890;
	            this.whereClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlTransactionStatement() {
	    let localctx = new SqlTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, HiveParser.RULE_sqlTransactionStatement);
	    try {
	        this.state = 2897;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_START:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2893;
	            this.startTransactionStatement();
	            break;
	        case HiveParser.KW_COMMIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2894;
	            this.commitStatement();
	            break;
	        case HiveParser.KW_ROLLBACK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2895;
	            this.rollbackStatement();
	            break;
	        case HiveParser.KW_SET:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2896;
	            this.setAutoCommitStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTransactionStatement() {
	    let localctx = new StartTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, HiveParser.RULE_startTransactionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2899;
	        this.match(HiveParser.KW_START);
	        this.state = 2900;
	        this.match(HiveParser.KW_TRANSACTION);
	        this.state = 2909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_READ || _la===HiveParser.KW_ISOLATION) {
	            this.state = 2901;
	            this.transactionMode();
	            this.state = 2906;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.COMMA) {
	                this.state = 2902;
	                this.match(HiveParser.COMMA);
	                this.state = 2903;
	                this.transactionMode();
	                this.state = 2908;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, HiveParser.RULE_transactionMode);
	    try {
	        this.state = 2913;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ISOLATION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2911;
	            this.isolationLevel();
	            break;
	        case HiveParser.KW_READ:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2912;
	            this.transactionAccessMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionAccessMode() {
	    let localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, HiveParser.RULE_transactionAccessMode);
	    try {
	        this.state = 2919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2915;
	            this.match(HiveParser.KW_READ);
	            this.state = 2916;
	            this.match(HiveParser.KW_ONLY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2917;
	            this.match(HiveParser.KW_READ);
	            this.state = 2918;
	            this.match(HiveParser.KW_WRITE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isolationLevel() {
	    let localctx = new IsolationLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, HiveParser.RULE_isolationLevel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2921;
	        this.match(HiveParser.KW_ISOLATION);
	        this.state = 2922;
	        this.match(HiveParser.KW_LEVEL);
	        this.state = 2923;
	        this.levelOfIsolation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelOfIsolation() {
	    let localctx = new LevelOfIsolationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, HiveParser.RULE_levelOfIsolation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2925;
	        this.match(HiveParser.KW_SNAPSHOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitStatement() {
	    let localctx = new CommitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, HiveParser.RULE_commitStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2927;
	        this.match(HiveParser.KW_COMMIT);
	        this.state = 2929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_WORK) {
	            this.state = 2928;
	            this.match(HiveParser.KW_WORK);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackStatement() {
	    let localctx = new RollbackStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, HiveParser.RULE_rollbackStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2931;
	        this.match(HiveParser.KW_ROLLBACK);
	        this.state = 2933;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_WORK) {
	            this.state = 2932;
	            this.match(HiveParser.KW_WORK);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAutoCommitStatement() {
	    let localctx = new SetAutoCommitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, HiveParser.RULE_setAutoCommitStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2935;
	        this.match(HiveParser.KW_SET);
	        this.state = 2936;
	        this.match(HiveParser.KW_AUTOCOMMIT);
	        this.state = 2937;
	        this.booleanValueTok();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abortTransactionStatement() {
	    let localctx = new AbortTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, HiveParser.RULE_abortTransactionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2939;
	        this.match(HiveParser.KW_ABORT);
	        this.state = 2940;
	        this.match(HiveParser.KW_TRANSACTIONS);
	        this.state = 2942; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2941;
	            this.match(HiveParser.Number);
	            this.state = 2944; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===HiveParser.Number);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mergeStatement() {
	    let localctx = new MergeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, HiveParser.RULE_mergeStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2946;
	        this.match(HiveParser.KW_MERGE);
	        this.state = 2947;
	        this.match(HiveParser.KW_INTO);
	        this.state = 2948;
	        this.tableName();
	        this.state = 2953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_AS) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1f) == 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1f) == 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1f) == 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la===HiveParser.Identifier) {
	            this.state = 2950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 2949;
	                this.match(HiveParser.KW_AS);
	            }

	            this.state = 2952;
	            this.identifier();
	        }

	        this.state = 2955;
	        this.match(HiveParser.KW_USING);
	        this.state = 2956;
	        this.joinSourcePart();
	        this.state = 2957;
	        this.match(HiveParser.KW_ON);
	        this.state = 2958;
	        this.expression(0);
	        this.state = 2959;
	        this.whenClauses();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenClauses() {
	    let localctx = new WhenClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, HiveParser.RULE_whenClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2965;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,343,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2963;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2961;
	                    this.whenMatchedAndClause();
	                    break;

	                case 2:
	                    this.state = 2962;
	                    this.whenMatchedThenClause();
	                    break;

	                } 
	            }
	            this.state = 2967;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,343,this._ctx);
	        }

	        this.state = 2969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_WHEN) {
	            this.state = 2968;
	            this.whenNotMatchedClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenNotMatchedClause() {
	    let localctx = new WhenNotMatchedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, HiveParser.RULE_whenNotMatchedClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2971;
	        this.match(HiveParser.KW_WHEN);
	        this.state = 2972;
	        this.match(HiveParser.KW_NOT);
	        this.state = 2973;
	        this.match(HiveParser.KW_MATCHED);
	        this.state = 2976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_AND) {
	            this.state = 2974;
	            this.match(HiveParser.KW_AND);
	            this.state = 2975;
	            this.expression(0);
	        }

	        this.state = 2978;
	        this.match(HiveParser.KW_THEN);
	        this.state = 2979;
	        this.match(HiveParser.KW_INSERT);
	        this.state = 2980;
	        this.match(HiveParser.KW_VALUES);
	        this.state = 2981;
	        this.valueRowConstructor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenMatchedAndClause() {
	    let localctx = new WhenMatchedAndClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, HiveParser.RULE_whenMatchedAndClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2983;
	        this.match(HiveParser.KW_WHEN);
	        this.state = 2984;
	        this.match(HiveParser.KW_MATCHED);
	        this.state = 2985;
	        this.match(HiveParser.KW_AND);
	        this.state = 2986;
	        this.expression(0);
	        this.state = 2987;
	        this.match(HiveParser.KW_THEN);
	        this.state = 2988;
	        this.updateOrDelete();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenMatchedThenClause() {
	    let localctx = new WhenMatchedThenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, HiveParser.RULE_whenMatchedThenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2990;
	        this.match(HiveParser.KW_WHEN);
	        this.state = 2991;
	        this.match(HiveParser.KW_MATCHED);
	        this.state = 2992;
	        this.match(HiveParser.KW_THEN);
	        this.state = 2993;
	        this.updateOrDelete();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateOrDelete() {
	    let localctx = new UpdateOrDeleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, HiveParser.RULE_updateOrDelete);
	    try {
	        this.state = 2998;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_UPDATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2995;
	            this.match(HiveParser.KW_UPDATE);
	            this.state = 2996;
	            this.setColumnsClause();
	            break;
	        case HiveParser.KW_DELETE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2997;
	            this.match(HiveParser.KW_DELETE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killQueryStatement() {
	    let localctx = new KillQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, HiveParser.RULE_killQueryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3000;
	        this.match(HiveParser.KW_KILL);
	        this.state = 3001;
	        this.match(HiveParser.KW_QUERY);
	        this.state = 3003; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3002;
	            this.match(HiveParser.StringLiteral);
	            this.state = 3005; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, HiveParser.RULE_selectClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 3020;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_SELECT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3007;
	            this.match(HiveParser.KW_SELECT);
	            this.state = 3009;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.QUERY_HINT) {
	                this.state = 3008;
	                this.match(HiveParser.QUERY_HINT);
	            }

	            this.state = 3017;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case HiveParser.KW_TRUE:
	            case HiveParser.KW_FALSE:
	            case HiveParser.KW_ALL:
	            case HiveParser.KW_NOT:
	            case HiveParser.KW_IF:
	            case HiveParser.KW_EXISTS:
	            case HiveParser.KW_ASC:
	            case HiveParser.KW_DESC:
	            case HiveParser.KW_NULLS:
	            case HiveParser.KW_LAST:
	            case HiveParser.KW_DISTINCT:
	            case HiveParser.KW_OVERWRITE:
	            case HiveParser.KW_PARTITIONS:
	            case HiveParser.KW_TABLES:
	            case HiveParser.KW_COLUMNS:
	            case HiveParser.KW_INDEX:
	            case HiveParser.KW_INDEXES:
	            case HiveParser.KW_REBUILD:
	            case HiveParser.KW_FUNCTIONS:
	            case HiveParser.KW_SHOW:
	            case HiveParser.KW_MSCK:
	            case HiveParser.KW_REPAIR:
	            case HiveParser.KW_DIRECTORY:
	            case HiveParser.KW_CLUSTER:
	            case HiveParser.KW_DISTRIBUTE:
	            case HiveParser.KW_SORT:
	            case HiveParser.KW_LOAD:
	            case HiveParser.KW_EXPORT:
	            case HiveParser.KW_REPLICATION:
	            case HiveParser.KW_METADATA:
	            case HiveParser.KW_DATA:
	            case HiveParser.KW_INPATH:
	            case HiveParser.KW_NULL:
	            case HiveParser.KW_CHANGE:
	            case HiveParser.KW_FIRST:
	            case HiveParser.KW_AFTER:
	            case HiveParser.KW_RENAME:
	            case HiveParser.KW_COMMENT:
	            case HiveParser.KW_BOOLEAN:
	            case HiveParser.KW_TINYINT:
	            case HiveParser.KW_SMALLINT:
	            case HiveParser.KW_INT:
	            case HiveParser.KW_BIGINT:
	            case HiveParser.KW_FLOAT:
	            case HiveParser.KW_DOUBLE:
	            case HiveParser.KW_DATE:
	            case HiveParser.KW_DATETIME:
	            case HiveParser.KW_TIMESTAMP:
	            case HiveParser.KW_TIMESTAMPLOCALTZ:
	            case HiveParser.KW_ZONE:
	            case HiveParser.KW_INTERVAL:
	            case HiveParser.KW_STRING:
	            case HiveParser.KW_ARRAY:
	            case HiveParser.KW_STRUCT:
	            case HiveParser.KW_MAP:
	            case HiveParser.KW_UNIONTYPE:
	            case HiveParser.KW_PARTITIONED:
	            case HiveParser.KW_CLUSTERED:
	            case HiveParser.KW_SORTED:
	            case HiveParser.KW_BUCKETS:
	            case HiveParser.KW_FORMAT:
	            case HiveParser.KW_DELIMITED:
	            case HiveParser.KW_FIELDS:
	            case HiveParser.KW_TERMINATED:
	            case HiveParser.KW_ESCAPED:
	            case HiveParser.KW_COLLECTION:
	            case HiveParser.KW_ITEMS:
	            case HiveParser.KW_KEYS:
	            case HiveParser.KW_KEY_TYPE:
	            case HiveParser.KW_KILL:
	            case HiveParser.KW_LINES:
	            case HiveParser.KW_STORED:
	            case HiveParser.KW_FILEFORMAT:
	            case HiveParser.KW_INPUTFORMAT:
	            case HiveParser.KW_OUTPUTFORMAT:
	            case HiveParser.KW_INPUTDRIVER:
	            case HiveParser.KW_OUTPUTDRIVER:
	            case HiveParser.KW_ENABLE:
	            case HiveParser.KW_DISABLE:
	            case HiveParser.KW_LOCATION:
	            case HiveParser.KW_BUCKET:
	            case HiveParser.KW_CAST:
	            case HiveParser.KW_ADD:
	            case HiveParser.KW_REPLACE:
	            case HiveParser.KW_TEMPORARY:
	            case HiveParser.KW_FILE:
	            case HiveParser.KW_JAR:
	            case HiveParser.KW_EXPLAIN:
	            case HiveParser.KW_FORMATTED:
	            case HiveParser.KW_DEPENDENCY:
	            case HiveParser.KW_LOGICAL:
	            case HiveParser.KW_SERDE:
	            case HiveParser.KW_DEFERRED:
	            case HiveParser.KW_SERDEPROPERTIES:
	            case HiveParser.KW_DBPROPERTIES:
	            case HiveParser.KW_LIMIT:
	            case HiveParser.KW_OFFSET:
	            case HiveParser.KW_UNSET:
	            case HiveParser.KW_TBLPROPERTIES:
	            case HiveParser.KW_IDXPROPERTIES:
	            case HiveParser.KW_VALUE_TYPE:
	            case HiveParser.KW_ELEM_TYPE:
	            case HiveParser.KW_DEFINED:
	            case HiveParser.KW_CASE:
	            case HiveParser.KW_MAPJOIN:
	            case HiveParser.KW_STREAMTABLE:
	            case HiveParser.KW_CLUSTERSTATUS:
	            case HiveParser.KW_UTC:
	            case HiveParser.KW_UTCTIMESTAMP:
	            case HiveParser.KW_LONG:
	            case HiveParser.KW_PLUS:
	            case HiveParser.KW_VIEW:
	            case HiveParser.KW_VIEWS:
	            case HiveParser.KW_DATABASES:
	            case HiveParser.KW_MATERIALIZED:
	            case HiveParser.KW_SCHEMA:
	            case HiveParser.KW_SCHEMAS:
	            case HiveParser.KW_SSL:
	            case HiveParser.KW_UNDO:
	            case HiveParser.KW_LOCK:
	            case HiveParser.KW_LOCKS:
	            case HiveParser.KW_UNLOCK:
	            case HiveParser.KW_SHARED:
	            case HiveParser.KW_EXCLUSIVE:
	            case HiveParser.KW_UNSIGNED:
	            case HiveParser.KW_WHILE:
	            case HiveParser.KW_READ:
	            case HiveParser.KW_PURGE:
	            case HiveParser.KW_ANALYZE:
	            case HiveParser.KW_BEFORE:
	            case HiveParser.KW_BINARY:
	            case HiveParser.KW_CONTINUE:
	            case HiveParser.KW_RECORDREADER:
	            case HiveParser.KW_RECORDWRITER:
	            case HiveParser.KW_SEMI:
	            case HiveParser.KW_TOUCH:
	            case HiveParser.KW_ARCHIVE:
	            case HiveParser.KW_UNARCHIVE:
	            case HiveParser.KW_COMPUTE:
	            case HiveParser.KW_STATISTICS:
	            case HiveParser.KW_USE:
	            case HiveParser.KW_OPTION:
	            case HiveParser.KW_CONCATENATE:
	            case HiveParser.KW_SHOW_DATABASE:
	            case HiveParser.KW_RESTRICT:
	            case HiveParser.KW_CASCADE:
	            case HiveParser.KW_SKEWED:
	            case HiveParser.KW_DIRECTORIES:
	            case HiveParser.KW_CURRENT_DATE:
	            case HiveParser.KW_CURRENT_TIMESTAMP:
	            case HiveParser.KW_GROUPING:
	            case HiveParser.KW_SETS:
	            case HiveParser.KW_NOSCAN:
	            case HiveParser.KW_ROLE:
	            case HiveParser.KW_ROLES:
	            case HiveParser.KW_URI:
	            case HiveParser.KW_SERVER:
	            case HiveParser.KW_ADMIN:
	            case HiveParser.KW_OWNER:
	            case HiveParser.KW_PRINCIPALS:
	            case HiveParser.KW_COMPACT:
	            case HiveParser.KW_COMPACTIONS:
	            case HiveParser.KW_TRANSACTIONS:
	            case HiveParser.KW_REWRITE:
	            case HiveParser.KW_REOPTIMIZATION:
	            case HiveParser.KW_RELOAD:
	            case HiveParser.KW_YEAR:
	            case HiveParser.KW_QUERY:
	            case HiveParser.KW_QUARTER:
	            case HiveParser.KW_MONTH:
	            case HiveParser.KW_WEEK:
	            case HiveParser.KW_DAY:
	            case HiveParser.KW_DOW:
	            case HiveParser.KW_HOUR:
	            case HiveParser.KW_MINUTE:
	            case HiveParser.KW_SECOND:
	            case HiveParser.KW_TRANSACTION:
	            case HiveParser.KW_WORK:
	            case HiveParser.KW_WRITE:
	            case HiveParser.KW_ISOLATION:
	            case HiveParser.KW_LEVEL:
	            case HiveParser.KW_SNAPSHOT:
	            case HiveParser.KW_AUTOCOMMIT:
	            case HiveParser.KW_CACHE:
	            case HiveParser.KW_ENFORCED:
	            case HiveParser.KW_VALIDATE:
	            case HiveParser.KW_NOVALIDATE:
	            case HiveParser.KW_RELY:
	            case HiveParser.KW_NORELY:
	            case HiveParser.KW_KEY:
	            case HiveParser.KW_ABORT:
	            case HiveParser.KW_EXTRACT:
	            case HiveParser.KW_FLOOR:
	            case HiveParser.KW_MATCHED:
	            case HiveParser.KW_REPL:
	            case HiveParser.KW_DUMP:
	            case HiveParser.KW_STATUS:
	            case HiveParser.KW_VECTORIZATION:
	            case HiveParser.KW_SUMMARY:
	            case HiveParser.KW_OPERATOR:
	            case HiveParser.KW_EXPRESSION:
	            case HiveParser.KW_DETAIL:
	            case HiveParser.KW_WAIT:
	            case HiveParser.KW_RESOURCE:
	            case HiveParser.KW_PLAN:
	            case HiveParser.KW_QUERY_PARALLELISM:
	            case HiveParser.KW_PLANS:
	            case HiveParser.KW_ACTIVATE:
	            case HiveParser.KW_DEFAULT:
	            case HiveParser.KW_CHECK:
	            case HiveParser.KW_POOL:
	            case HiveParser.KW_MOVE:
	            case HiveParser.KW_DO:
	            case HiveParser.KW_ALLOC_FRACTION:
	            case HiveParser.KW_SCHEDULING_POLICY:
	            case HiveParser.KW_PATH:
	            case HiveParser.KW_MAPPING:
	            case HiveParser.KW_WORKLOAD:
	            case HiveParser.KW_MANAGEMENT:
	            case HiveParser.KW_ACTIVE:
	            case HiveParser.KW_UNMANAGED:
	            case HiveParser.LPAREN:
	            case HiveParser.PLUS:
	            case HiveParser.MINUS:
	            case HiveParser.STAR:
	            case HiveParser.TILDE:
	            case HiveParser.StringLiteral:
	            case HiveParser.IntegralLiteral:
	            case HiveParser.NumberLiteral:
	            case HiveParser.Number:
	            case HiveParser.Identifier:
	            case HiveParser.CharSetName:
	                this.state = 3012;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===HiveParser.KW_ALL || _la===HiveParser.KW_DISTINCT) {
	                    this.state = 3011;
	                    _la = this._input.LA(1);
	                    if(!(_la===HiveParser.KW_ALL || _la===HiveParser.KW_DISTINCT)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 3014;
	                this.selectList();
	                break;
	            case HiveParser.KW_TRANSFORM:
	                this.state = 3015;
	                this.match(HiveParser.KW_TRANSFORM);
	                this.state = 3016;
	                this.selectTrfmClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_REDUCE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3019;
	            this.trfmClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectList() {
	    let localctx = new SelectListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, HiveParser.RULE_selectList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3022;
	        this.selectItem();
	        this.state = 3027;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,352,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3023;
	                this.match(HiveParser.COMMA);
	                this.state = 3024;
	                this.selectItem(); 
	            }
	            this.state = 3029;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,352,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectTrfmClause() {
	    let localctx = new SelectTrfmClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, HiveParser.RULE_selectTrfmClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3030;
	        this.match(HiveParser.LPAREN);
	        this.state = 3031;
	        this.selectExpressionList();
	        this.state = 3032;
	        this.match(HiveParser.RPAREN);
	        this.state = 3034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ROW) {
	            this.state = 3033;
	            this.rowFormat();
	        }

	        this.state = 3037;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_RECORDWRITER) {
	            this.state = 3036;
	            this.recordWriter();
	        }

	        this.state = 3039;
	        this.match(HiveParser.KW_USING);
	        this.state = 3040;
	        this.match(HiveParser.StringLiteral);
	        this.state = 3055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_AS) {
	            this.state = 3041;
	            this.match(HiveParser.KW_AS);
	            this.state = 3053;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case HiveParser.LPAREN:
	                this.state = 3042;
	                this.match(HiveParser.LPAREN);
	                this.state = 3045;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 3043;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 3044;
	                    this.columnNameTypeList();
	                    break;

	                }
	                this.state = 3047;
	                this.match(HiveParser.RPAREN);
	                break;
	            case HiveParser.KW_ASC:
	            case HiveParser.KW_DESC:
	            case HiveParser.KW_NULLS:
	            case HiveParser.KW_LAST:
	            case HiveParser.KW_OVERWRITE:
	            case HiveParser.KW_PARTITIONS:
	            case HiveParser.KW_TABLES:
	            case HiveParser.KW_COLUMNS:
	            case HiveParser.KW_INDEX:
	            case HiveParser.KW_INDEXES:
	            case HiveParser.KW_REBUILD:
	            case HiveParser.KW_FUNCTIONS:
	            case HiveParser.KW_SHOW:
	            case HiveParser.KW_MSCK:
	            case HiveParser.KW_REPAIR:
	            case HiveParser.KW_DIRECTORY:
	            case HiveParser.KW_CLUSTER:
	            case HiveParser.KW_DISTRIBUTE:
	            case HiveParser.KW_SORT:
	            case HiveParser.KW_LOAD:
	            case HiveParser.KW_EXPORT:
	            case HiveParser.KW_REPLICATION:
	            case HiveParser.KW_METADATA:
	            case HiveParser.KW_DATA:
	            case HiveParser.KW_INPATH:
	            case HiveParser.KW_CHANGE:
	            case HiveParser.KW_FIRST:
	            case HiveParser.KW_AFTER:
	            case HiveParser.KW_RENAME:
	            case HiveParser.KW_COMMENT:
	            case HiveParser.KW_TINYINT:
	            case HiveParser.KW_DATETIME:
	            case HiveParser.KW_ZONE:
	            case HiveParser.KW_STRING:
	            case HiveParser.KW_STRUCT:
	            case HiveParser.KW_UNIONTYPE:
	            case HiveParser.KW_PARTITIONED:
	            case HiveParser.KW_CLUSTERED:
	            case HiveParser.KW_SORTED:
	            case HiveParser.KW_BUCKETS:
	            case HiveParser.KW_FORMAT:
	            case HiveParser.KW_DELIMITED:
	            case HiveParser.KW_FIELDS:
	            case HiveParser.KW_TERMINATED:
	            case HiveParser.KW_ESCAPED:
	            case HiveParser.KW_COLLECTION:
	            case HiveParser.KW_ITEMS:
	            case HiveParser.KW_KEYS:
	            case HiveParser.KW_KEY_TYPE:
	            case HiveParser.KW_KILL:
	            case HiveParser.KW_LINES:
	            case HiveParser.KW_STORED:
	            case HiveParser.KW_FILEFORMAT:
	            case HiveParser.KW_INPUTFORMAT:
	            case HiveParser.KW_OUTPUTFORMAT:
	            case HiveParser.KW_INPUTDRIVER:
	            case HiveParser.KW_OUTPUTDRIVER:
	            case HiveParser.KW_ENABLE:
	            case HiveParser.KW_DISABLE:
	            case HiveParser.KW_LOCATION:
	            case HiveParser.KW_BUCKET:
	            case HiveParser.KW_ADD:
	            case HiveParser.KW_REPLACE:
	            case HiveParser.KW_TEMPORARY:
	            case HiveParser.KW_FILE:
	            case HiveParser.KW_JAR:
	            case HiveParser.KW_EXPLAIN:
	            case HiveParser.KW_FORMATTED:
	            case HiveParser.KW_DEPENDENCY:
	            case HiveParser.KW_LOGICAL:
	            case HiveParser.KW_SERDE:
	            case HiveParser.KW_DEFERRED:
	            case HiveParser.KW_SERDEPROPERTIES:
	            case HiveParser.KW_DBPROPERTIES:
	            case HiveParser.KW_LIMIT:
	            case HiveParser.KW_OFFSET:
	            case HiveParser.KW_UNSET:
	            case HiveParser.KW_TBLPROPERTIES:
	            case HiveParser.KW_IDXPROPERTIES:
	            case HiveParser.KW_VALUE_TYPE:
	            case HiveParser.KW_ELEM_TYPE:
	            case HiveParser.KW_DEFINED:
	            case HiveParser.KW_MAPJOIN:
	            case HiveParser.KW_STREAMTABLE:
	            case HiveParser.KW_CLUSTERSTATUS:
	            case HiveParser.KW_UTC:
	            case HiveParser.KW_UTCTIMESTAMP:
	            case HiveParser.KW_LONG:
	            case HiveParser.KW_PLUS:
	            case HiveParser.KW_VIEW:
	            case HiveParser.KW_VIEWS:
	            case HiveParser.KW_DATABASES:
	            case HiveParser.KW_MATERIALIZED:
	            case HiveParser.KW_SCHEMA:
	            case HiveParser.KW_SCHEMAS:
	            case HiveParser.KW_SSL:
	            case HiveParser.KW_UNDO:
	            case HiveParser.KW_LOCK:
	            case HiveParser.KW_LOCKS:
	            case HiveParser.KW_UNLOCK:
	            case HiveParser.KW_SHARED:
	            case HiveParser.KW_EXCLUSIVE:
	            case HiveParser.KW_UNSIGNED:
	            case HiveParser.KW_WHILE:
	            case HiveParser.KW_READ:
	            case HiveParser.KW_PURGE:
	            case HiveParser.KW_ANALYZE:
	            case HiveParser.KW_BEFORE:
	            case HiveParser.KW_CONTINUE:
	            case HiveParser.KW_RECORDREADER:
	            case HiveParser.KW_RECORDWRITER:
	            case HiveParser.KW_SEMI:
	            case HiveParser.KW_TOUCH:
	            case HiveParser.KW_ARCHIVE:
	            case HiveParser.KW_UNARCHIVE:
	            case HiveParser.KW_COMPUTE:
	            case HiveParser.KW_STATISTICS:
	            case HiveParser.KW_USE:
	            case HiveParser.KW_OPTION:
	            case HiveParser.KW_CONCATENATE:
	            case HiveParser.KW_SHOW_DATABASE:
	            case HiveParser.KW_RESTRICT:
	            case HiveParser.KW_CASCADE:
	            case HiveParser.KW_SKEWED:
	            case HiveParser.KW_DIRECTORIES:
	            case HiveParser.KW_SETS:
	            case HiveParser.KW_NOSCAN:
	            case HiveParser.KW_ROLE:
	            case HiveParser.KW_ROLES:
	            case HiveParser.KW_URI:
	            case HiveParser.KW_SERVER:
	            case HiveParser.KW_ADMIN:
	            case HiveParser.KW_OWNER:
	            case HiveParser.KW_PRINCIPALS:
	            case HiveParser.KW_COMPACT:
	            case HiveParser.KW_COMPACTIONS:
	            case HiveParser.KW_TRANSACTIONS:
	            case HiveParser.KW_REWRITE:
	            case HiveParser.KW_REOPTIMIZATION:
	            case HiveParser.KW_RELOAD:
	            case HiveParser.KW_YEAR:
	            case HiveParser.KW_QUERY:
	            case HiveParser.KW_QUARTER:
	            case HiveParser.KW_MONTH:
	            case HiveParser.KW_WEEK:
	            case HiveParser.KW_DAY:
	            case HiveParser.KW_DOW:
	            case HiveParser.KW_HOUR:
	            case HiveParser.KW_MINUTE:
	            case HiveParser.KW_SECOND:
	            case HiveParser.KW_TRANSACTION:
	            case HiveParser.KW_WORK:
	            case HiveParser.KW_WRITE:
	            case HiveParser.KW_ISOLATION:
	            case HiveParser.KW_LEVEL:
	            case HiveParser.KW_SNAPSHOT:
	            case HiveParser.KW_AUTOCOMMIT:
	            case HiveParser.KW_CACHE:
	            case HiveParser.KW_ENFORCED:
	            case HiveParser.KW_VALIDATE:
	            case HiveParser.KW_NOVALIDATE:
	            case HiveParser.KW_RELY:
	            case HiveParser.KW_NORELY:
	            case HiveParser.KW_KEY:
	            case HiveParser.KW_ABORT:
	            case HiveParser.KW_MATCHED:
	            case HiveParser.KW_REPL:
	            case HiveParser.KW_DUMP:
	            case HiveParser.KW_STATUS:
	            case HiveParser.KW_VECTORIZATION:
	            case HiveParser.KW_SUMMARY:
	            case HiveParser.KW_OPERATOR:
	            case HiveParser.KW_EXPRESSION:
	            case HiveParser.KW_DETAIL:
	            case HiveParser.KW_WAIT:
	            case HiveParser.KW_RESOURCE:
	            case HiveParser.KW_PLAN:
	            case HiveParser.KW_QUERY_PARALLELISM:
	            case HiveParser.KW_PLANS:
	            case HiveParser.KW_ACTIVATE:
	            case HiveParser.KW_DEFAULT:
	            case HiveParser.KW_CHECK:
	            case HiveParser.KW_POOL:
	            case HiveParser.KW_MOVE:
	            case HiveParser.KW_DO:
	            case HiveParser.KW_ALLOC_FRACTION:
	            case HiveParser.KW_SCHEDULING_POLICY:
	            case HiveParser.KW_PATH:
	            case HiveParser.KW_MAPPING:
	            case HiveParser.KW_WORKLOAD:
	            case HiveParser.KW_MANAGEMENT:
	            case HiveParser.KW_ACTIVE:
	            case HiveParser.KW_UNMANAGED:
	            case HiveParser.Identifier:
	                this.state = 3051;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 3049;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 3050;
	                    this.columnNameTypeList();
	                    break;

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 3058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ROW) {
	            this.state = 3057;
	            this.rowFormat();
	        }

	        this.state = 3061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_RECORDREADER) {
	            this.state = 3060;
	            this.recordReader();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, HiveParser.RULE_selectItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 3083;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3063;
	            this.tableAllColumns();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3064;
	            this.expression(0);
	            this.state = 3081;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
	            if(la_===1) {
	                this.state = 3066;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===HiveParser.KW_AS) {
	                    this.state = 3065;
	                    this.match(HiveParser.KW_AS);
	                }

	                this.state = 3068;
	                this.identifier();

	            } else if(la_===2) {
	                this.state = 3069;
	                this.match(HiveParser.KW_AS);
	                this.state = 3070;
	                this.match(HiveParser.LPAREN);
	                this.state = 3071;
	                this.identifier();
	                this.state = 3076;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===HiveParser.COMMA) {
	                    this.state = 3072;
	                    this.match(HiveParser.COMMA);
	                    this.state = 3073;
	                    this.identifier();
	                    this.state = 3078;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 3079;
	                this.match(HiveParser.RPAREN);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trfmClause() {
	    let localctx = new TrfmClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, HiveParser.RULE_trfmClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3089;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_MAP:
	            this.state = 3085;
	            this.match(HiveParser.KW_MAP);
	            this.state = 3086;
	            this.selectExpressionList();
	            break;
	        case HiveParser.KW_REDUCE:
	            this.state = 3087;
	            this.match(HiveParser.KW_REDUCE);
	            this.state = 3088;
	            this.selectExpressionList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ROW) {
	            this.state = 3091;
	            this.rowFormat();
	        }

	        this.state = 3095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_RECORDWRITER) {
	            this.state = 3094;
	            this.recordWriter();
	        }

	        this.state = 3097;
	        this.match(HiveParser.KW_USING);
	        this.state = 3098;
	        this.match(HiveParser.StringLiteral);
	        this.state = 3113;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_AS) {
	            this.state = 3099;
	            this.match(HiveParser.KW_AS);
	            this.state = 3111;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case HiveParser.LPAREN:
	                this.state = 3100;
	                this.match(HiveParser.LPAREN);
	                this.state = 3103;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 3101;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 3102;
	                    this.columnNameTypeList();
	                    break;

	                }
	                this.state = 3105;
	                this.match(HiveParser.RPAREN);
	                break;
	            case HiveParser.KW_ASC:
	            case HiveParser.KW_DESC:
	            case HiveParser.KW_NULLS:
	            case HiveParser.KW_LAST:
	            case HiveParser.KW_OVERWRITE:
	            case HiveParser.KW_PARTITIONS:
	            case HiveParser.KW_TABLES:
	            case HiveParser.KW_COLUMNS:
	            case HiveParser.KW_INDEX:
	            case HiveParser.KW_INDEXES:
	            case HiveParser.KW_REBUILD:
	            case HiveParser.KW_FUNCTIONS:
	            case HiveParser.KW_SHOW:
	            case HiveParser.KW_MSCK:
	            case HiveParser.KW_REPAIR:
	            case HiveParser.KW_DIRECTORY:
	            case HiveParser.KW_CLUSTER:
	            case HiveParser.KW_DISTRIBUTE:
	            case HiveParser.KW_SORT:
	            case HiveParser.KW_LOAD:
	            case HiveParser.KW_EXPORT:
	            case HiveParser.KW_REPLICATION:
	            case HiveParser.KW_METADATA:
	            case HiveParser.KW_DATA:
	            case HiveParser.KW_INPATH:
	            case HiveParser.KW_CHANGE:
	            case HiveParser.KW_FIRST:
	            case HiveParser.KW_AFTER:
	            case HiveParser.KW_RENAME:
	            case HiveParser.KW_COMMENT:
	            case HiveParser.KW_TINYINT:
	            case HiveParser.KW_DATETIME:
	            case HiveParser.KW_ZONE:
	            case HiveParser.KW_STRING:
	            case HiveParser.KW_STRUCT:
	            case HiveParser.KW_UNIONTYPE:
	            case HiveParser.KW_PARTITIONED:
	            case HiveParser.KW_CLUSTERED:
	            case HiveParser.KW_SORTED:
	            case HiveParser.KW_BUCKETS:
	            case HiveParser.KW_FORMAT:
	            case HiveParser.KW_DELIMITED:
	            case HiveParser.KW_FIELDS:
	            case HiveParser.KW_TERMINATED:
	            case HiveParser.KW_ESCAPED:
	            case HiveParser.KW_COLLECTION:
	            case HiveParser.KW_ITEMS:
	            case HiveParser.KW_KEYS:
	            case HiveParser.KW_KEY_TYPE:
	            case HiveParser.KW_KILL:
	            case HiveParser.KW_LINES:
	            case HiveParser.KW_STORED:
	            case HiveParser.KW_FILEFORMAT:
	            case HiveParser.KW_INPUTFORMAT:
	            case HiveParser.KW_OUTPUTFORMAT:
	            case HiveParser.KW_INPUTDRIVER:
	            case HiveParser.KW_OUTPUTDRIVER:
	            case HiveParser.KW_ENABLE:
	            case HiveParser.KW_DISABLE:
	            case HiveParser.KW_LOCATION:
	            case HiveParser.KW_BUCKET:
	            case HiveParser.KW_ADD:
	            case HiveParser.KW_REPLACE:
	            case HiveParser.KW_TEMPORARY:
	            case HiveParser.KW_FILE:
	            case HiveParser.KW_JAR:
	            case HiveParser.KW_EXPLAIN:
	            case HiveParser.KW_FORMATTED:
	            case HiveParser.KW_DEPENDENCY:
	            case HiveParser.KW_LOGICAL:
	            case HiveParser.KW_SERDE:
	            case HiveParser.KW_DEFERRED:
	            case HiveParser.KW_SERDEPROPERTIES:
	            case HiveParser.KW_DBPROPERTIES:
	            case HiveParser.KW_LIMIT:
	            case HiveParser.KW_OFFSET:
	            case HiveParser.KW_UNSET:
	            case HiveParser.KW_TBLPROPERTIES:
	            case HiveParser.KW_IDXPROPERTIES:
	            case HiveParser.KW_VALUE_TYPE:
	            case HiveParser.KW_ELEM_TYPE:
	            case HiveParser.KW_DEFINED:
	            case HiveParser.KW_MAPJOIN:
	            case HiveParser.KW_STREAMTABLE:
	            case HiveParser.KW_CLUSTERSTATUS:
	            case HiveParser.KW_UTC:
	            case HiveParser.KW_UTCTIMESTAMP:
	            case HiveParser.KW_LONG:
	            case HiveParser.KW_PLUS:
	            case HiveParser.KW_VIEW:
	            case HiveParser.KW_VIEWS:
	            case HiveParser.KW_DATABASES:
	            case HiveParser.KW_MATERIALIZED:
	            case HiveParser.KW_SCHEMA:
	            case HiveParser.KW_SCHEMAS:
	            case HiveParser.KW_SSL:
	            case HiveParser.KW_UNDO:
	            case HiveParser.KW_LOCK:
	            case HiveParser.KW_LOCKS:
	            case HiveParser.KW_UNLOCK:
	            case HiveParser.KW_SHARED:
	            case HiveParser.KW_EXCLUSIVE:
	            case HiveParser.KW_UNSIGNED:
	            case HiveParser.KW_WHILE:
	            case HiveParser.KW_READ:
	            case HiveParser.KW_PURGE:
	            case HiveParser.KW_ANALYZE:
	            case HiveParser.KW_BEFORE:
	            case HiveParser.KW_CONTINUE:
	            case HiveParser.KW_RECORDREADER:
	            case HiveParser.KW_RECORDWRITER:
	            case HiveParser.KW_SEMI:
	            case HiveParser.KW_TOUCH:
	            case HiveParser.KW_ARCHIVE:
	            case HiveParser.KW_UNARCHIVE:
	            case HiveParser.KW_COMPUTE:
	            case HiveParser.KW_STATISTICS:
	            case HiveParser.KW_USE:
	            case HiveParser.KW_OPTION:
	            case HiveParser.KW_CONCATENATE:
	            case HiveParser.KW_SHOW_DATABASE:
	            case HiveParser.KW_RESTRICT:
	            case HiveParser.KW_CASCADE:
	            case HiveParser.KW_SKEWED:
	            case HiveParser.KW_DIRECTORIES:
	            case HiveParser.KW_SETS:
	            case HiveParser.KW_NOSCAN:
	            case HiveParser.KW_ROLE:
	            case HiveParser.KW_ROLES:
	            case HiveParser.KW_URI:
	            case HiveParser.KW_SERVER:
	            case HiveParser.KW_ADMIN:
	            case HiveParser.KW_OWNER:
	            case HiveParser.KW_PRINCIPALS:
	            case HiveParser.KW_COMPACT:
	            case HiveParser.KW_COMPACTIONS:
	            case HiveParser.KW_TRANSACTIONS:
	            case HiveParser.KW_REWRITE:
	            case HiveParser.KW_REOPTIMIZATION:
	            case HiveParser.KW_RELOAD:
	            case HiveParser.KW_YEAR:
	            case HiveParser.KW_QUERY:
	            case HiveParser.KW_QUARTER:
	            case HiveParser.KW_MONTH:
	            case HiveParser.KW_WEEK:
	            case HiveParser.KW_DAY:
	            case HiveParser.KW_DOW:
	            case HiveParser.KW_HOUR:
	            case HiveParser.KW_MINUTE:
	            case HiveParser.KW_SECOND:
	            case HiveParser.KW_TRANSACTION:
	            case HiveParser.KW_WORK:
	            case HiveParser.KW_WRITE:
	            case HiveParser.KW_ISOLATION:
	            case HiveParser.KW_LEVEL:
	            case HiveParser.KW_SNAPSHOT:
	            case HiveParser.KW_AUTOCOMMIT:
	            case HiveParser.KW_CACHE:
	            case HiveParser.KW_ENFORCED:
	            case HiveParser.KW_VALIDATE:
	            case HiveParser.KW_NOVALIDATE:
	            case HiveParser.KW_RELY:
	            case HiveParser.KW_NORELY:
	            case HiveParser.KW_KEY:
	            case HiveParser.KW_ABORT:
	            case HiveParser.KW_MATCHED:
	            case HiveParser.KW_REPL:
	            case HiveParser.KW_DUMP:
	            case HiveParser.KW_STATUS:
	            case HiveParser.KW_VECTORIZATION:
	            case HiveParser.KW_SUMMARY:
	            case HiveParser.KW_OPERATOR:
	            case HiveParser.KW_EXPRESSION:
	            case HiveParser.KW_DETAIL:
	            case HiveParser.KW_WAIT:
	            case HiveParser.KW_RESOURCE:
	            case HiveParser.KW_PLAN:
	            case HiveParser.KW_QUERY_PARALLELISM:
	            case HiveParser.KW_PLANS:
	            case HiveParser.KW_ACTIVATE:
	            case HiveParser.KW_DEFAULT:
	            case HiveParser.KW_CHECK:
	            case HiveParser.KW_POOL:
	            case HiveParser.KW_MOVE:
	            case HiveParser.KW_DO:
	            case HiveParser.KW_ALLOC_FRACTION:
	            case HiveParser.KW_SCHEDULING_POLICY:
	            case HiveParser.KW_PATH:
	            case HiveParser.KW_MAPPING:
	            case HiveParser.KW_WORKLOAD:
	            case HiveParser.KW_MANAGEMENT:
	            case HiveParser.KW_ACTIVE:
	            case HiveParser.KW_UNMANAGED:
	            case HiveParser.Identifier:
	                this.state = 3109;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 3107;
	                    this.aliasList();
	                    break;

	                case 2:
	                    this.state = 3108;
	                    this.columnNameTypeList();
	                    break;

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 3116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ROW) {
	            this.state = 3115;
	            this.rowFormat();
	        }

	        this.state = 3119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_RECORDREADER) {
	            this.state = 3118;
	            this.recordReader();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectExpression() {
	    let localctx = new SelectExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, HiveParser.RULE_selectExpression);
	    try {
	        this.state = 3123;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,374,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3121;
	            this.tableAllColumns();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3122;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectExpressionList() {
	    let localctx = new SelectExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, HiveParser.RULE_selectExpressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3125;
	        this.selectExpression();
	        this.state = 3130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3126;
	            this.match(HiveParser.COMMA);
	            this.state = 3127;
	            this.selectExpression();
	            this.state = 3132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_clause() {
	    let localctx = new Window_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, HiveParser.RULE_window_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3133;
	        this.match(HiveParser.KW_WINDOW);
	        this.state = 3134;
	        this.window_defn();
	        this.state = 3139;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3135;
	            this.match(HiveParser.COMMA);
	            this.state = 3136;
	            this.window_defn();
	            this.state = 3141;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_defn() {
	    let localctx = new Window_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, HiveParser.RULE_window_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3142;
	        this.identifier();
	        this.state = 3143;
	        this.match(HiveParser.KW_AS);
	        this.state = 3144;
	        this.window_specification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification() {
	    let localctx = new Window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, HiveParser.RULE_window_specification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3158;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.state = 3146;
	            this.identifier();
	            break;
	        case HiveParser.LPAREN:
	            this.state = 3147;
	            this.match(HiveParser.LPAREN);
	            this.state = 3149;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
	            if(la_===1) {
	                this.state = 3148;
	                this.identifier();

	            }
	            this.state = 3152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ORDER || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (HiveParser.KW_PARTITION - 35)) | (1 << (HiveParser.KW_CLUSTER - 35)) | (1 << (HiveParser.KW_DISTRIBUTE - 35)) | (1 << (HiveParser.KW_SORT - 35)))) !== 0)) {
	                this.state = 3151;
	                this.partitioningSpec();
	            }

	            this.state = 3155;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ROWS || _la===HiveParser.KW_RANGE) {
	                this.state = 3154;
	                this.window_frame();
	            }

	            this.state = 3157;
	            this.match(HiveParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame() {
	    let localctx = new Window_frameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, HiveParser.RULE_window_frame);
	    try {
	        this.state = 3162;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ROWS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3160;
	            this.window_range_expression();
	            break;
	        case HiveParser.KW_RANGE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3161;
	            this.window_value_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_range_expression() {
	    let localctx = new Window_range_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, HiveParser.RULE_window_range_expression);
	    try {
	        this.state = 3172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3164;
	            this.match(HiveParser.KW_ROWS);
	            this.state = 3165;
	            this.window_frame_start_boundary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3166;
	            this.match(HiveParser.KW_ROWS);
	            this.state = 3167;
	            this.match(HiveParser.KW_BETWEEN);
	            this.state = 3168;
	            this.window_frame_boundary();
	            this.state = 3169;
	            this.match(HiveParser.KW_AND);
	            this.state = 3170;
	            this.window_frame_boundary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_value_expression() {
	    let localctx = new Window_value_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, HiveParser.RULE_window_value_expression);
	    try {
	        this.state = 3182;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3174;
	            this.match(HiveParser.KW_RANGE);
	            this.state = 3175;
	            this.window_frame_start_boundary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3176;
	            this.match(HiveParser.KW_RANGE);
	            this.state = 3177;
	            this.match(HiveParser.KW_BETWEEN);
	            this.state = 3178;
	            this.window_frame_boundary();
	            this.state = 3179;
	            this.match(HiveParser.KW_AND);
	            this.state = 3180;
	            this.window_frame_boundary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_start_boundary() {
	    let localctx = new Window_frame_start_boundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, HiveParser.RULE_window_frame_start_boundary);
	    try {
	        this.state = 3190;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_UNBOUNDED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3184;
	            this.match(HiveParser.KW_UNBOUNDED);
	            this.state = 3185;
	            this.match(HiveParser.KW_PRECEDING);
	            break;
	        case HiveParser.KW_CURRENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3186;
	            this.match(HiveParser.KW_CURRENT);
	            this.state = 3187;
	            this.match(HiveParser.KW_ROW);
	            break;
	        case HiveParser.Number:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3188;
	            this.match(HiveParser.Number);
	            this.state = 3189;
	            this.match(HiveParser.KW_PRECEDING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_boundary() {
	    let localctx = new Window_frame_boundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, HiveParser.RULE_window_frame_boundary);
	    var _la = 0; // Token type
	    try {
	        this.state = 3198;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_UNBOUNDED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3192;
	            this.match(HiveParser.KW_UNBOUNDED);
	            this.state = 3193;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_PRECEDING || _la===HiveParser.KW_FOLLOWING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case HiveParser.KW_CURRENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3194;
	            this.match(HiveParser.KW_CURRENT);
	            this.state = 3195;
	            this.match(HiveParser.KW_ROW);
	            break;
	        case HiveParser.Number:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3196;
	            this.match(HiveParser.Number);
	            this.state = 3197;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_PRECEDING || _la===HiveParser.KW_FOLLOWING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAllColumns() {
	    let localctx = new TableAllColumnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, HiveParser.RULE_tableAllColumns);
	    try {
	        this.state = 3205;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.STAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3200;
	            this.match(HiveParser.STAR);
	            break;
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3201;
	            this.tableName();
	            this.state = 3202;
	            this.match(HiveParser.DOT);
	            this.state = 3203;
	            this.match(HiveParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrColumn() {
	    let localctx = new TableOrColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, HiveParser.RULE_tableOrColumn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3207;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, HiveParser.RULE_expressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3209;
	        this.expression(0);
	        this.state = 3214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3210;
	            this.match(HiveParser.COMMA);
	            this.state = 3211;
	            this.expression(0);
	            this.state = 3216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasList() {
	    let localctx = new AliasListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, HiveParser.RULE_aliasList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3217;
	        this.identifier();
	        this.state = 3222;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,388,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3218;
	                this.match(HiveParser.COMMA);
	                this.state = 3219;
	                this.identifier(); 
	            }
	            this.state = 3224;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,388,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, HiveParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3225;
	        this.match(HiveParser.KW_FROM);
	        this.state = 3226;
	        this.fromSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromSource() {
	    let localctx = new FromSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, HiveParser.RULE_fromSource);
	    var _la = 0; // Token type
	    try {
	        this.state = 3237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_UNIQUEJOIN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3228;
	            this.uniqueJoinToken();
	            this.state = 3229;
	            this.uniqueJoinSource();
	            this.state = 3232; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3230;
	                this.match(HiveParser.COMMA);
	                this.state = 3231;
	                this.uniqueJoinSource();
	                this.state = 3234; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===HiveParser.COMMA);
	            break;
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLE:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.LPAREN:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3236;
	            this.joinSource();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomjoinSource() {
	    let localctx = new AtomjoinSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, HiveParser.RULE_atomjoinSource);
	    try {
	        this.state = 3271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3239;
	            this.tableSource();
	            this.state = 3243;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,391,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3240;
	                    this.lateralView(); 
	                }
	                this.state = 3245;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,391,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3246;
	            this.virtualTableSource();
	            this.state = 3250;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,392,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3247;
	                    this.lateralView(); 
	                }
	                this.state = 3252;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,392,this._ctx);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3253;
	            this.subQuerySource();
	            this.state = 3257;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,393,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3254;
	                    this.lateralView(); 
	                }
	                this.state = 3259;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,393,this._ctx);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3260;
	            this.partitionedTableFunction();
	            this.state = 3264;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,394,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3261;
	                    this.lateralView(); 
	                }
	                this.state = 3266;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,394,this._ctx);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3267;
	            this.match(HiveParser.LPAREN);
	            this.state = 3268;
	            this.joinSource();
	            this.state = 3269;
	            this.match(HiveParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinSource() {
	    let localctx = new JoinSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, HiveParser.RULE_joinSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3273;
	        this.atomjoinSource();
	        this.state = 3284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (HiveParser.KW_JOIN - 30)) | (1 << (HiveParser.KW_LEFT - 30)) | (1 << (HiveParser.KW_RIGHT - 30)) | (1 << (HiveParser.KW_FULL - 30)))) !== 0) || _la===HiveParser.KW_CROSS || _la===HiveParser.KW_INNER || _la===HiveParser.COMMA) {
	            this.state = 3274;
	            this.joinToken();
	            this.state = 3275;
	            this.joinSourcePart();
	            this.state = 3280;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case HiveParser.KW_ON:
	            	this.state = 3276;
	            	this.match(HiveParser.KW_ON);
	            	this.state = 3277;
	            	this.expression(0);
	            	break;
	            case HiveParser.KW_USING:
	            	this.state = 3278;
	            	this.match(HiveParser.KW_USING);
	            	this.state = 3279;
	            	this.columnParenthesesList();
	            	break;
	            case HiveParser.EOF:
	            case HiveParser.KW_DESC:
	            case HiveParser.KW_ORDER:
	            case HiveParser.KW_GROUP:
	            case HiveParser.KW_HAVING:
	            case HiveParser.KW_WHERE:
	            case HiveParser.KW_FROM:
	            case HiveParser.KW_SELECT:
	            case HiveParser.KW_INSERT:
	            case HiveParser.KW_JOIN:
	            case HiveParser.KW_LEFT:
	            case HiveParser.KW_RIGHT:
	            case HiveParser.KW_FULL:
	            case HiveParser.KW_SHOW:
	            case HiveParser.KW_MSCK:
	            case HiveParser.KW_CLUSTER:
	            case HiveParser.KW_DISTRIBUTE:
	            case HiveParser.KW_SORT:
	            case HiveParser.KW_UNION:
	            case HiveParser.KW_EXCEPT:
	            case HiveParser.KW_LOAD:
	            case HiveParser.KW_EXPORT:
	            case HiveParser.KW_IMPORT:
	            case HiveParser.KW_CREATE:
	            case HiveParser.KW_ALTER:
	            case HiveParser.KW_DESCRIBE:
	            case HiveParser.KW_DROP:
	            case HiveParser.KW_MAP:
	            case HiveParser.KW_REDUCE:
	            case HiveParser.KW_KILL:
	            case HiveParser.KW_EXPLAIN:
	            case HiveParser.KW_WITH:
	            case HiveParser.KW_LIMIT:
	            case HiveParser.KW_SET:
	            case HiveParser.KW_DELETE:
	            case HiveParser.KW_MINUS:
	            case HiveParser.KW_INTERSECT:
	            case HiveParser.KW_GRANT:
	            case HiveParser.KW_REVOKE:
	            case HiveParser.KW_LOCK:
	            case HiveParser.KW_UNLOCK:
	            case HiveParser.KW_ANALYZE:
	            case HiveParser.KW_CROSS:
	            case HiveParser.KW_USE:
	            case HiveParser.KW_UPDATE:
	            case HiveParser.KW_WINDOW:
	            case HiveParser.KW_TRUNCATE:
	            case HiveParser.KW_INNER:
	            case HiveParser.KW_RELOAD:
	            case HiveParser.KW_START:
	            case HiveParser.KW_COMMIT:
	            case HiveParser.KW_ROLLBACK:
	            case HiveParser.KW_ABORT:
	            case HiveParser.KW_MERGE:
	            case HiveParser.KW_REPL:
	            case HiveParser.COMMA:
	            case HiveParser.SEMICOLON:
	            case HiveParser.LPAREN:
	            case HiveParser.RPAREN:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 3286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinSourcePart() {
	    let localctx = new JoinSourcePartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, HiveParser.RULE_joinSourcePart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3287;
	            this.tableSource();
	            break;

	        case 2:
	            this.state = 3288;
	            this.virtualTableSource();
	            break;

	        case 3:
	            this.state = 3289;
	            this.subQuerySource();
	            break;

	        case 4:
	            this.state = 3290;
	            this.partitionedTableFunction();
	            break;

	        }
	        this.state = 3296;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,399,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3293;
	                this.lateralView(); 
	            }
	            this.state = 3298;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,399,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueJoinSource() {
	    let localctx = new UniqueJoinSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, HiveParser.RULE_uniqueJoinSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PRESERVE) {
	            this.state = 3299;
	            this.match(HiveParser.KW_PRESERVE);
	        }

	        this.state = 3302;
	        this.uniqueJoinTableSource();
	        this.state = 3303;
	        this.uniqueJoinExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueJoinExpr() {
	    let localctx = new UniqueJoinExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, HiveParser.RULE_uniqueJoinExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3305;
	        this.match(HiveParser.LPAREN);
	        this.state = 3306;
	        this.expressionList();
	        this.state = 3307;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueJoinToken() {
	    let localctx = new UniqueJoinTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, HiveParser.RULE_uniqueJoinToken);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3309;
	        this.match(HiveParser.KW_UNIQUEJOIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinToken() {
	    let localctx = new JoinTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, HiveParser.RULE_joinToken);
	    var _la = 0; // Token type
	    try {
	        this.state = 3335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3311;
	            this.match(HiveParser.KW_JOIN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3312;
	            this.match(HiveParser.KW_INNER);
	            this.state = 3313;
	            this.match(HiveParser.KW_JOIN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3314;
	            this.match(HiveParser.COMMA);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3315;
	            this.match(HiveParser.KW_CROSS);
	            this.state = 3316;
	            this.match(HiveParser.KW_JOIN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3317;
	            this.match(HiveParser.KW_LEFT);
	            this.state = 3319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_OUTER) {
	                this.state = 3318;
	                this.match(HiveParser.KW_OUTER);
	            }

	            this.state = 3321;
	            this.match(HiveParser.KW_JOIN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3322;
	            this.match(HiveParser.KW_RIGHT);
	            this.state = 3324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_OUTER) {
	                this.state = 3323;
	                this.match(HiveParser.KW_OUTER);
	            }

	            this.state = 3326;
	            this.match(HiveParser.KW_JOIN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3327;
	            this.match(HiveParser.KW_FULL);
	            this.state = 3329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_OUTER) {
	                this.state = 3328;
	                this.match(HiveParser.KW_OUTER);
	            }

	            this.state = 3331;
	            this.match(HiveParser.KW_JOIN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3332;
	            this.match(HiveParser.KW_LEFT);
	            this.state = 3333;
	            this.match(HiveParser.KW_SEMI);
	            this.state = 3334;
	            this.match(HiveParser.KW_JOIN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lateralView() {
	    let localctx = new LateralViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, HiveParser.RULE_lateralView);
	    var _la = 0; // Token type
	    try {
	        this.state = 3396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3337;
	            this.match(HiveParser.KW_LATERAL);
	            this.state = 3338;
	            this.match(HiveParser.KW_VIEW);
	            this.state = 3339;
	            this.match(HiveParser.KW_OUTER);
	            this.state = 3340;
	            this.function_();
	            this.state = 3341;
	            this.tableAlias();
	            this.state = 3351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 3342;
	                this.match(HiveParser.KW_AS);
	                this.state = 3343;
	                this.identifier();
	                this.state = 3348;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,405,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3344;
	                        this.match(HiveParser.COMMA);
	                        this.state = 3345;
	                        this.identifier(); 
	                    }
	                    this.state = 3350;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,405,this._ctx);
	                }

	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.COMMA) {
	                this.state = 3353;
	                this.match(HiveParser.COMMA);
	            }

	            this.state = 3356;
	            this.match(HiveParser.KW_LATERAL);
	            this.state = 3357;
	            this.match(HiveParser.KW_VIEW);
	            this.state = 3358;
	            this.function_();
	            this.state = 3359;
	            this.tableAlias();
	            this.state = 3369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 3360;
	                this.match(HiveParser.KW_AS);
	                this.state = 3361;
	                this.identifier();
	                this.state = 3366;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,408,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3362;
	                        this.match(HiveParser.COMMA);
	                        this.state = 3363;
	                        this.identifier(); 
	                    }
	                    this.state = 3368;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,408,this._ctx);
	                }

	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.COMMA) {
	                this.state = 3371;
	                this.match(HiveParser.COMMA);
	            }

	            this.state = 3374;
	            this.match(HiveParser.KW_LATERAL);
	            this.state = 3375;
	            this.match(HiveParser.KW_TABLE);
	            this.state = 3376;
	            this.match(HiveParser.LPAREN);
	            this.state = 3377;
	            this.valuesClause();
	            this.state = 3378;
	            this.match(HiveParser.RPAREN);
	            this.state = 3380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 3379;
	                this.match(HiveParser.KW_AS);
	            }

	            this.state = 3382;
	            this.tableAlias();
	            this.state = 3394;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
	            if(la_===1) {
	                this.state = 3383;
	                this.match(HiveParser.LPAREN);
	                this.state = 3384;
	                this.identifier();
	                this.state = 3389;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===HiveParser.COMMA) {
	                    this.state = 3385;
	                    this.match(HiveParser.COMMA);
	                    this.state = 3386;
	                    this.identifier();
	                    this.state = 3391;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 3392;
	                this.match(HiveParser.RPAREN);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAlias() {
	    let localctx = new TableAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, HiveParser.RULE_tableAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3398;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableBucketSample() {
	    let localctx = new TableBucketSampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, HiveParser.RULE_tableBucketSample);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3400;
	        this.match(HiveParser.KW_TABLESAMPLE);
	        this.state = 3401;
	        this.match(HiveParser.LPAREN);
	        this.state = 3402;
	        this.match(HiveParser.KW_BUCKET);
	        this.state = 3403;
	        this.match(HiveParser.Number);
	        this.state = 3404;
	        this.match(HiveParser.KW_OUT);
	        this.state = 3405;
	        this.match(HiveParser.KW_OF);
	        this.state = 3406;
	        this.match(HiveParser.Number);
	        this.state = 3416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ON) {
	            this.state = 3407;
	            this.match(HiveParser.KW_ON);
	            this.state = 3408;
	            this.expression(0);
	            this.state = 3413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.COMMA) {
	                this.state = 3409;
	                this.match(HiveParser.COMMA);
	                this.state = 3410;
	                this.expression(0);
	                this.state = 3415;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3418;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	splitSample() {
	    let localctx = new SplitSampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, HiveParser.RULE_splitSample);
	    var _la = 0; // Token type
	    try {
	        this.state = 3429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3420;
	            this.match(HiveParser.KW_TABLESAMPLE);
	            this.state = 3421;
	            this.match(HiveParser.LPAREN);
	            this.state = 3422;
	            this.match(HiveParser.Number);
	            this.state = 3423;
	            _la = this._input.LA(1);
	            if(!(_la===HiveParser.KW_ROWS || _la===HiveParser.KW_PERCENT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3424;
	            this.match(HiveParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3425;
	            this.match(HiveParser.KW_TABLESAMPLE);
	            this.state = 3426;
	            this.match(HiveParser.LPAREN);
	            this.state = 3427;
	            this.match(HiveParser.ByteLengthLiteral);
	            this.state = 3428;
	            this.match(HiveParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSample() {
	    let localctx = new TableSampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, HiveParser.RULE_tableSample);
	    try {
	        this.state = 3433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3431;
	            this.tableBucketSample();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3432;
	            this.splitSample();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSource() {
	    let localctx = new TableSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, HiveParser.RULE_tableSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3435;
	        this.tableName();
	        this.state = 3437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	        if(la_===1) {
	            this.state = 3436;
	            this.tableProperties();

	        }
	        this.state = 3440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TABLESAMPLE) {
	            this.state = 3439;
	            this.tableSample();
	        }

	        this.state = 3446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,422,this._ctx);
	        if(la_===1) {
	            this.state = 3443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 3442;
	                this.match(HiveParser.KW_AS);
	            }

	            this.state = 3445;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueJoinTableSource() {
	    let localctx = new UniqueJoinTableSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, HiveParser.RULE_uniqueJoinTableSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3448;
	        this.tableName();
	        this.state = 3450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TABLESAMPLE) {
	            this.state = 3449;
	            this.tableSample();
	        }

	        this.state = 3456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_AS) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1f) == 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1f) == 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1f) == 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la===HiveParser.Identifier) {
	            this.state = 3453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_AS) {
	                this.state = 3452;
	                this.match(HiveParser.KW_AS);
	            }

	            this.state = 3455;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableName() {
	    let localctx = new TableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, HiveParser.RULE_tableName);
	    try {
	        this.state = 3463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3458;
	            this.identifier();
	            this.state = 3459;
	            this.match(HiveParser.DOT);
	            this.state = 3460;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3462;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewName() {
	    let localctx = new ViewNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, HiveParser.RULE_viewName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3468;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,427,this._ctx);
	        if(la_===1) {
	            this.state = 3465;
	            this.identifier();
	            this.state = 3466;
	            this.match(HiveParser.DOT);

	        }
	        this.state = 3470;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subQuerySource() {
	    let localctx = new SubQuerySourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, HiveParser.RULE_subQuerySource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3472;
	        this.match(HiveParser.LPAREN);
	        this.state = 3473;
	        this.queryStatementExpression();
	        this.state = 3474;
	        this.match(HiveParser.RPAREN);
	        this.state = 3476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_AS) {
	            this.state = 3475;
	            this.match(HiveParser.KW_AS);
	        }

	        this.state = 3478;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitioningSpec() {
	    let localctx = new PartitioningSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, HiveParser.RULE_partitioningSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 3491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_PARTITION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3480;
	            this.partitionByClause();
	            this.state = 3482;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ORDER) {
	                this.state = 3481;
	                this.orderByClause();
	            }

	            break;
	        case HiveParser.KW_ORDER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3484;
	            this.orderByClause();
	            break;
	        case HiveParser.KW_DISTRIBUTE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3485;
	            this.distributeByClause();
	            this.state = 3487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_SORT) {
	                this.state = 3486;
	                this.sortByClause();
	            }

	            break;
	        case HiveParser.KW_SORT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3489;
	            this.sortByClause();
	            break;
	        case HiveParser.KW_CLUSTER:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3490;
	            this.clusterByClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionTableFunctionSource() {
	    let localctx = new PartitionTableFunctionSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, HiveParser.RULE_partitionTableFunctionSource);
	    try {
	        this.state = 3496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,432,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3493;
	            this.subQuerySource();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3494;
	            this.tableSource();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3495;
	            this.partitionedTableFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionedTableFunction() {
	    let localctx = new PartitionedTableFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, HiveParser.RULE_partitionedTableFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3498;
	        this.identifier();
	        this.state = 3499;
	        this.match(HiveParser.LPAREN);
	        this.state = 3500;
	        this.match(HiveParser.KW_ON);
	        this.state = 3501;
	        this.partitionTableFunctionSource();
	        this.state = 3503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ORDER || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (HiveParser.KW_PARTITION - 35)) | (1 << (HiveParser.KW_CLUSTER - 35)) | (1 << (HiveParser.KW_DISTRIBUTE - 35)) | (1 << (HiveParser.KW_SORT - 35)))) !== 0)) {
	            this.state = 3502;
	            this.partitioningSpec();
	        }

	        this.state = 3520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.Identifier) {
	            this.state = 3505;
	            this.match(HiveParser.Identifier);
	            this.state = 3506;
	            this.match(HiveParser.LPAREN);
	            this.state = 3507;
	            this.expression(0);
	            this.state = 3508;
	            this.match(HiveParser.RPAREN);
	            this.state = 3517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.COMMA) {
	                this.state = 3509;
	                this.match(HiveParser.COMMA);
	                this.state = 3510;
	                this.match(HiveParser.Identifier);
	                this.state = 3511;
	                this.match(HiveParser.LPAREN);
	                this.state = 3512;
	                this.expression(0);
	                this.state = 3513;
	                this.match(HiveParser.RPAREN);
	                this.state = 3519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3522;
	        this.match(HiveParser.RPAREN);
	        this.state = 3524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
	        if(la_===1) {
	            this.state = 3523;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, HiveParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3526;
	        this.match(HiveParser.KW_WHERE);
	        this.state = 3527;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchCondition() {
	    let localctx = new SearchConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, HiveParser.RULE_searchCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3529;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesClause() {
	    let localctx = new ValuesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, HiveParser.RULE_valuesClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3531;
	        this.match(HiveParser.KW_VALUES);
	        this.state = 3532;
	        this.valuesTableConstructor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesTableConstructor() {
	    let localctx = new ValuesTableConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, HiveParser.RULE_valuesTableConstructor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3534;
	        this.valueRowConstructor();
	        this.state = 3539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3535;
	            this.match(HiveParser.COMMA);
	            this.state = 3536;
	            this.valueRowConstructor();
	            this.state = 3541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueRowConstructor() {
	    let localctx = new ValueRowConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, HiveParser.RULE_valueRowConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3542;
	        this.expressionsInParenthesis();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	virtualTableSource() {
	    let localctx = new VirtualTableSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, HiveParser.RULE_virtualTableSource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3544;
	        this.match(HiveParser.KW_TABLE);
	        this.state = 3545;
	        this.match(HiveParser.LPAREN);
	        this.state = 3546;
	        this.valuesClause();
	        this.state = 3547;
	        this.match(HiveParser.RPAREN);
	        this.state = 3549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_AS) {
	            this.state = 3548;
	            this.match(HiveParser.KW_AS);
	        }

	        this.state = 3551;
	        this.tableAlias();
	        this.state = 3561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.LPAREN) {
	            this.state = 3552;
	            this.match(HiveParser.LPAREN);
	            this.state = 3553;
	            this.identifier();
	            this.state = 3558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.COMMA) {
	                this.state = 3554;
	                this.match(HiveParser.COMMA);
	                this.state = 3555;
	                this.identifier();
	                this.state = 3560;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3563;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, HiveParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3565;
	        this.match(HiveParser.KW_GROUP);
	        this.state = 3566;
	        this.match(HiveParser.KW_BY);
	        this.state = 3567;
	        this.groupby_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupby_expression() {
	    let localctx = new Groupby_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, HiveParser.RULE_groupby_expression);
	    try {
	        this.state = 3572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3569;
	            this.rollupStandard();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3570;
	            this.rollupOldSyntax();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3571;
	            this.groupByEmpty();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByEmpty() {
	    let localctx = new GroupByEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, HiveParser.RULE_groupByEmpty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3574;
	        this.match(HiveParser.LPAREN);
	        this.state = 3575;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollupStandard() {
	    let localctx = new RollupStandardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, HiveParser.RULE_rollupStandard);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3577;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_ROLLUP || _la===HiveParser.KW_CUBE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3578;
	        this.match(HiveParser.LPAREN);
	        this.state = 3579;
	        this.expression(0);
	        this.state = 3584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3580;
	            this.match(HiveParser.COMMA);
	            this.state = 3581;
	            this.expression(0);
	            this.state = 3586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3587;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollupOldSyntax() {
	    let localctx = new RollupOldSyntaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, HiveParser.RULE_rollupOldSyntax);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3589;
	        this.expressionsNotInParenthesis();
	        this.state = 3594;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	        if(la_===1) {
	            this.state = 3590;
	            this.match(HiveParser.KW_WITH);
	            this.state = 3591;
	            this.match(HiveParser.KW_ROLLUP);

	        } else if(la_===2) {
	            this.state = 3592;
	            this.match(HiveParser.KW_WITH);
	            this.state = 3593;
	            this.match(HiveParser.KW_CUBE);

	        }
	        this.state = 3609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_GROUPING) {
	            this.state = 3596;
	            this.match(HiveParser.KW_GROUPING);
	            this.state = 3597;
	            this.match(HiveParser.KW_SETS);
	            this.state = 3598;
	            this.match(HiveParser.LPAREN);
	            this.state = 3599;
	            this.groupingSetExpression();
	            this.state = 3604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===HiveParser.COMMA) {
	                this.state = 3600;
	                this.match(HiveParser.COMMA);
	                this.state = 3601;
	                this.groupingSetExpression();
	                this.state = 3606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3607;
	            this.match(HiveParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSetExpression() {
	    let localctx = new GroupingSetExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, HiveParser.RULE_groupingSetExpression);
	    try {
	        this.state = 3613;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3611;
	            this.groupingSetExpressionMultiple();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3612;
	            this.groupingExpressionSingle();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSetExpressionMultiple() {
	    let localctx = new GroupingSetExpressionMultipleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, HiveParser.RULE_groupingSetExpressionMultiple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3615;
	        this.match(HiveParser.LPAREN);
	        this.state = 3617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_TRUE) | (1 << HiveParser.KW_FALSE) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_IF) | (1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)) | (1 << (HiveParser.KW_NULL - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_BOOLEAN - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_SMALLINT - 68)) | (1 << (HiveParser.KW_INT - 68)) | (1 << (HiveParser.KW_BIGINT - 68)) | (1 << (HiveParser.KW_FLOAT - 68)) | (1 << (HiveParser.KW_DOUBLE - 68)) | (1 << (HiveParser.KW_DATE - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_TIMESTAMP - 68)) | (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_INTERVAL - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_ARRAY - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_MAP - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (HiveParser.KW_CAST - 133)) | (1 << (HiveParser.KW_ADD - 133)) | (1 << (HiveParser.KW_REPLACE - 133)) | (1 << (HiveParser.KW_TEMPORARY - 133)) | (1 << (HiveParser.KW_FILE - 133)) | (1 << (HiveParser.KW_JAR - 133)) | (1 << (HiveParser.KW_EXPLAIN - 133)) | (1 << (HiveParser.KW_FORMATTED - 133)) | (1 << (HiveParser.KW_DEPENDENCY - 133)) | (1 << (HiveParser.KW_LOGICAL - 133)) | (1 << (HiveParser.KW_SERDE - 133)) | (1 << (HiveParser.KW_DEFERRED - 133)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 133)) | (1 << (HiveParser.KW_DBPROPERTIES - 133)) | (1 << (HiveParser.KW_LIMIT - 133)) | (1 << (HiveParser.KW_OFFSET - 133)) | (1 << (HiveParser.KW_UNSET - 133)) | (1 << (HiveParser.KW_TBLPROPERTIES - 133)) | (1 << (HiveParser.KW_IDXPROPERTIES - 133)) | (1 << (HiveParser.KW_VALUE_TYPE - 133)) | (1 << (HiveParser.KW_ELEM_TYPE - 133)) | (1 << (HiveParser.KW_DEFINED - 133)) | (1 << (HiveParser.KW_CASE - 133)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_BINARY - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 237)) & ~0x1f) == 0 && ((1 << (_la - 237)) & ((1 << (HiveParser.KW_CURRENT_DATE - 237)) | (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 237)) | (1 << (HiveParser.KW_GROUPING - 237)) | (1 << (HiveParser.KW_SETS - 237)) | (1 << (HiveParser.KW_NOSCAN - 237)) | (1 << (HiveParser.KW_ROLE - 237)) | (1 << (HiveParser.KW_ROLES - 237)) | (1 << (HiveParser.KW_URI - 237)) | (1 << (HiveParser.KW_SERVER - 237)) | (1 << (HiveParser.KW_ADMIN - 237)) | (1 << (HiveParser.KW_OWNER - 237)) | (1 << (HiveParser.KW_PRINCIPALS - 237)) | (1 << (HiveParser.KW_COMPACT - 237)) | (1 << (HiveParser.KW_COMPACTIONS - 237)) | (1 << (HiveParser.KW_TRANSACTIONS - 237)) | (1 << (HiveParser.KW_REWRITE - 237)) | (1 << (HiveParser.KW_REOPTIMIZATION - 237)) | (1 << (HiveParser.KW_RELOAD - 237)) | (1 << (HiveParser.KW_YEAR - 237)) | (1 << (HiveParser.KW_QUERY - 237)) | (1 << (HiveParser.KW_QUARTER - 237)) | (1 << (HiveParser.KW_MONTH - 237)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (HiveParser.KW_WEEK - 269)) | (1 << (HiveParser.KW_DAY - 269)) | (1 << (HiveParser.KW_DOW - 269)) | (1 << (HiveParser.KW_HOUR - 269)) | (1 << (HiveParser.KW_MINUTE - 269)) | (1 << (HiveParser.KW_SECOND - 269)) | (1 << (HiveParser.KW_TRANSACTION - 269)) | (1 << (HiveParser.KW_WORK - 269)) | (1 << (HiveParser.KW_WRITE - 269)) | (1 << (HiveParser.KW_ISOLATION - 269)) | (1 << (HiveParser.KW_LEVEL - 269)) | (1 << (HiveParser.KW_SNAPSHOT - 269)) | (1 << (HiveParser.KW_AUTOCOMMIT - 269)) | (1 << (HiveParser.KW_CACHE - 269)) | (1 << (HiveParser.KW_ENFORCED - 269)) | (1 << (HiveParser.KW_VALIDATE - 269)) | (1 << (HiveParser.KW_NOVALIDATE - 269)) | (1 << (HiveParser.KW_RELY - 269)) | (1 << (HiveParser.KW_NORELY - 269)) | (1 << (HiveParser.KW_KEY - 269)) | (1 << (HiveParser.KW_ABORT - 269)) | (1 << (HiveParser.KW_EXTRACT - 269)) | (1 << (HiveParser.KW_FLOOR - 269)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (HiveParser.KW_MATCHED - 302)) | (1 << (HiveParser.KW_REPL - 302)) | (1 << (HiveParser.KW_DUMP - 302)) | (1 << (HiveParser.KW_STATUS - 302)) | (1 << (HiveParser.KW_VECTORIZATION - 302)) | (1 << (HiveParser.KW_SUMMARY - 302)) | (1 << (HiveParser.KW_OPERATOR - 302)) | (1 << (HiveParser.KW_EXPRESSION - 302)) | (1 << (HiveParser.KW_DETAIL - 302)) | (1 << (HiveParser.KW_WAIT - 302)) | (1 << (HiveParser.KW_RESOURCE - 302)) | (1 << (HiveParser.KW_PLAN - 302)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 302)) | (1 << (HiveParser.KW_PLANS - 302)) | (1 << (HiveParser.KW_ACTIVATE - 302)) | (1 << (HiveParser.KW_DEFAULT - 302)) | (1 << (HiveParser.KW_CHECK - 302)) | (1 << (HiveParser.KW_POOL - 302)) | (1 << (HiveParser.KW_MOVE - 302)) | (1 << (HiveParser.KW_DO - 302)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 302)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 302)) | (1 << (HiveParser.KW_PATH - 302)) | (1 << (HiveParser.KW_MAPPING - 302)) | (1 << (HiveParser.KW_WORKLOAD - 302)) | (1 << (HiveParser.KW_MANAGEMENT - 302)) | (1 << (HiveParser.KW_ACTIVE - 302)) | (1 << (HiveParser.KW_UNMANAGED - 302)))) !== 0) || ((((_la - 336)) & ~0x1f) == 0 && ((1 << (_la - 336)) & ((1 << (HiveParser.LPAREN - 336)) | (1 << (HiveParser.PLUS - 336)) | (1 << (HiveParser.MINUS - 336)) | (1 << (HiveParser.TILDE - 336)) | (1 << (HiveParser.StringLiteral - 336)) | (1 << (HiveParser.IntegralLiteral - 336)) | (1 << (HiveParser.NumberLiteral - 336)) | (1 << (HiveParser.Number - 336)))) !== 0) || _la===HiveParser.Identifier || _la===HiveParser.CharSetName) {
	            this.state = 3616;
	            this.expression(0);
	        }

	        this.state = 3623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3619;
	            this.match(HiveParser.COMMA);
	            this.state = 3620;
	            this.expression(0);
	            this.state = 3625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3626;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingExpressionSingle() {
	    let localctx = new GroupingExpressionSingleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, HiveParser.RULE_groupingExpressionSingle);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3628;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, HiveParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3630;
	        this.match(HiveParser.KW_HAVING);
	        this.state = 3631;
	        this.havingCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingCondition() {
	    let localctx = new HavingConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, HiveParser.RULE_havingCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3633;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsInParenthesis() {
	    let localctx = new ExpressionsInParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, HiveParser.RULE_expressionsInParenthesis);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3635;
	        this.match(HiveParser.LPAREN);
	        this.state = 3636;
	        this.expressionsNotInParenthesis();
	        this.state = 3637;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsNotInParenthesis() {
	    let localctx = new ExpressionsNotInParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, HiveParser.RULE_expressionsNotInParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3639;
	        this.expression(0);
	        this.state = 3641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.COMMA) {
	            this.state = 3640;
	            this.expressionPart();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionPart() {
	    let localctx = new ExpressionPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, HiveParser.RULE_expressionPart);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3645; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3643;
	            this.match(HiveParser.COMMA);
	            this.state = 3644;
	            this.expression(0);
	            this.state = 3647; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===HiveParser.COMMA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressions() {
	    let localctx = new ExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, HiveParser.RULE_expressions);
	    try {
	        this.state = 3651;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3649;
	            this.expressionsInParenthesis();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3650;
	            this.expressionsNotInParenthesis();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnRefOrderInParenthesis() {
	    let localctx = new ColumnRefOrderInParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, HiveParser.RULE_columnRefOrderInParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3653;
	        this.match(HiveParser.LPAREN);
	        this.state = 3654;
	        this.columnRefOrder();
	        this.state = 3659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3655;
	            this.match(HiveParser.COMMA);
	            this.state = 3656;
	            this.columnRefOrder();
	            this.state = 3661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3662;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnRefOrderNotInParenthesis() {
	    let localctx = new ColumnRefOrderNotInParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, HiveParser.RULE_columnRefOrderNotInParenthesis);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3664;
	        this.columnRefOrder();
	        this.state = 3669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3665;
	            this.match(HiveParser.COMMA);
	            this.state = 3666;
	            this.columnRefOrder();
	            this.state = 3671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, HiveParser.RULE_orderByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3672;
	        this.match(HiveParser.KW_ORDER);
	        this.state = 3673;
	        this.match(HiveParser.KW_BY);
	        this.state = 3674;
	        this.columnRefOrder();
	        this.state = 3679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 3675;
	            this.match(HiveParser.COMMA);
	            this.state = 3676;
	            this.columnRefOrder();
	            this.state = 3681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusterByClause() {
	    let localctx = new ClusterByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, HiveParser.RULE_clusterByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3682;
	        this.match(HiveParser.KW_CLUSTER);
	        this.state = 3683;
	        this.match(HiveParser.KW_BY);
	        this.state = 3684;
	        this.expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionByClause() {
	    let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, HiveParser.RULE_partitionByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3686;
	        this.match(HiveParser.KW_PARTITION);
	        this.state = 3687;
	        this.match(HiveParser.KW_BY);
	        this.state = 3688;
	        this.expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distributeByClause() {
	    let localctx = new DistributeByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, HiveParser.RULE_distributeByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3690;
	        this.match(HiveParser.KW_DISTRIBUTE);
	        this.state = 3691;
	        this.match(HiveParser.KW_BY);
	        this.state = 3692;
	        this.expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortByClause() {
	    let localctx = new SortByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, HiveParser.RULE_sortByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3694;
	        this.match(HiveParser.KW_SORT);
	        this.state = 3695;
	        this.match(HiveParser.KW_BY);
	        this.state = 3698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3696;
	            this.columnRefOrderInParenthesis();
	            break;

	        case 2:
	            this.state = 3697;
	            this.columnRefOrderNotInParenthesis();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new Function_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, HiveParser.RULE_function_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3700;
	        this.functionName();
	        this.state = 3701;
	        this.match(HiveParser.LPAREN);
	        this.state = 3716;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3702;
	            this.match(HiveParser.STAR);
	            break;

	        case 2:
	            this.state = 3704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===HiveParser.KW_ALL || _la===HiveParser.KW_DISTINCT) {
	                this.state = 3703;
	                _la = this._input.LA(1);
	                if(!(_la===HiveParser.KW_ALL || _la===HiveParser.KW_DISTINCT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_TRUE) | (1 << HiveParser.KW_FALSE) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_IF) | (1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)) | (1 << (HiveParser.KW_NULL - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_BOOLEAN - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_SMALLINT - 68)) | (1 << (HiveParser.KW_INT - 68)) | (1 << (HiveParser.KW_BIGINT - 68)) | (1 << (HiveParser.KW_FLOAT - 68)) | (1 << (HiveParser.KW_DOUBLE - 68)) | (1 << (HiveParser.KW_DATE - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_TIMESTAMP - 68)) | (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_INTERVAL - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_ARRAY - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_MAP - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (HiveParser.KW_CAST - 133)) | (1 << (HiveParser.KW_ADD - 133)) | (1 << (HiveParser.KW_REPLACE - 133)) | (1 << (HiveParser.KW_TEMPORARY - 133)) | (1 << (HiveParser.KW_FILE - 133)) | (1 << (HiveParser.KW_JAR - 133)) | (1 << (HiveParser.KW_EXPLAIN - 133)) | (1 << (HiveParser.KW_FORMATTED - 133)) | (1 << (HiveParser.KW_DEPENDENCY - 133)) | (1 << (HiveParser.KW_LOGICAL - 133)) | (1 << (HiveParser.KW_SERDE - 133)) | (1 << (HiveParser.KW_DEFERRED - 133)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 133)) | (1 << (HiveParser.KW_DBPROPERTIES - 133)) | (1 << (HiveParser.KW_LIMIT - 133)) | (1 << (HiveParser.KW_OFFSET - 133)) | (1 << (HiveParser.KW_UNSET - 133)) | (1 << (HiveParser.KW_TBLPROPERTIES - 133)) | (1 << (HiveParser.KW_IDXPROPERTIES - 133)) | (1 << (HiveParser.KW_VALUE_TYPE - 133)) | (1 << (HiveParser.KW_ELEM_TYPE - 133)) | (1 << (HiveParser.KW_DEFINED - 133)) | (1 << (HiveParser.KW_CASE - 133)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_BINARY - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 237)) & ~0x1f) == 0 && ((1 << (_la - 237)) & ((1 << (HiveParser.KW_CURRENT_DATE - 237)) | (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 237)) | (1 << (HiveParser.KW_GROUPING - 237)) | (1 << (HiveParser.KW_SETS - 237)) | (1 << (HiveParser.KW_NOSCAN - 237)) | (1 << (HiveParser.KW_ROLE - 237)) | (1 << (HiveParser.KW_ROLES - 237)) | (1 << (HiveParser.KW_URI - 237)) | (1 << (HiveParser.KW_SERVER - 237)) | (1 << (HiveParser.KW_ADMIN - 237)) | (1 << (HiveParser.KW_OWNER - 237)) | (1 << (HiveParser.KW_PRINCIPALS - 237)) | (1 << (HiveParser.KW_COMPACT - 237)) | (1 << (HiveParser.KW_COMPACTIONS - 237)) | (1 << (HiveParser.KW_TRANSACTIONS - 237)) | (1 << (HiveParser.KW_REWRITE - 237)) | (1 << (HiveParser.KW_REOPTIMIZATION - 237)) | (1 << (HiveParser.KW_RELOAD - 237)) | (1 << (HiveParser.KW_YEAR - 237)) | (1 << (HiveParser.KW_QUERY - 237)) | (1 << (HiveParser.KW_QUARTER - 237)) | (1 << (HiveParser.KW_MONTH - 237)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (HiveParser.KW_WEEK - 269)) | (1 << (HiveParser.KW_DAY - 269)) | (1 << (HiveParser.KW_DOW - 269)) | (1 << (HiveParser.KW_HOUR - 269)) | (1 << (HiveParser.KW_MINUTE - 269)) | (1 << (HiveParser.KW_SECOND - 269)) | (1 << (HiveParser.KW_TRANSACTION - 269)) | (1 << (HiveParser.KW_WORK - 269)) | (1 << (HiveParser.KW_WRITE - 269)) | (1 << (HiveParser.KW_ISOLATION - 269)) | (1 << (HiveParser.KW_LEVEL - 269)) | (1 << (HiveParser.KW_SNAPSHOT - 269)) | (1 << (HiveParser.KW_AUTOCOMMIT - 269)) | (1 << (HiveParser.KW_CACHE - 269)) | (1 << (HiveParser.KW_ENFORCED - 269)) | (1 << (HiveParser.KW_VALIDATE - 269)) | (1 << (HiveParser.KW_NOVALIDATE - 269)) | (1 << (HiveParser.KW_RELY - 269)) | (1 << (HiveParser.KW_NORELY - 269)) | (1 << (HiveParser.KW_KEY - 269)) | (1 << (HiveParser.KW_ABORT - 269)) | (1 << (HiveParser.KW_EXTRACT - 269)) | (1 << (HiveParser.KW_FLOOR - 269)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (HiveParser.KW_MATCHED - 302)) | (1 << (HiveParser.KW_REPL - 302)) | (1 << (HiveParser.KW_DUMP - 302)) | (1 << (HiveParser.KW_STATUS - 302)) | (1 << (HiveParser.KW_VECTORIZATION - 302)) | (1 << (HiveParser.KW_SUMMARY - 302)) | (1 << (HiveParser.KW_OPERATOR - 302)) | (1 << (HiveParser.KW_EXPRESSION - 302)) | (1 << (HiveParser.KW_DETAIL - 302)) | (1 << (HiveParser.KW_WAIT - 302)) | (1 << (HiveParser.KW_RESOURCE - 302)) | (1 << (HiveParser.KW_PLAN - 302)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 302)) | (1 << (HiveParser.KW_PLANS - 302)) | (1 << (HiveParser.KW_ACTIVATE - 302)) | (1 << (HiveParser.KW_DEFAULT - 302)) | (1 << (HiveParser.KW_CHECK - 302)) | (1 << (HiveParser.KW_POOL - 302)) | (1 << (HiveParser.KW_MOVE - 302)) | (1 << (HiveParser.KW_DO - 302)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 302)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 302)) | (1 << (HiveParser.KW_PATH - 302)) | (1 << (HiveParser.KW_MAPPING - 302)) | (1 << (HiveParser.KW_WORKLOAD - 302)) | (1 << (HiveParser.KW_MANAGEMENT - 302)) | (1 << (HiveParser.KW_ACTIVE - 302)) | (1 << (HiveParser.KW_UNMANAGED - 302)))) !== 0) || ((((_la - 336)) & ~0x1f) == 0 && ((1 << (_la - 336)) & ((1 << (HiveParser.LPAREN - 336)) | (1 << (HiveParser.PLUS - 336)) | (1 << (HiveParser.MINUS - 336)) | (1 << (HiveParser.STAR - 336)) | (1 << (HiveParser.TILDE - 336)) | (1 << (HiveParser.StringLiteral - 336)) | (1 << (HiveParser.IntegralLiteral - 336)) | (1 << (HiveParser.NumberLiteral - 336)) | (1 << (HiveParser.Number - 336)))) !== 0) || _la===HiveParser.Identifier || _la===HiveParser.CharSetName) {
	                this.state = 3706;
	                this.selectExpression();
	                this.state = 3711;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===HiveParser.COMMA) {
	                    this.state = 3707;
	                    this.match(HiveParser.COMMA);
	                    this.state = 3708;
	                    this.selectExpression();
	                    this.state = 3713;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        }
	        this.state = 3718;
	        this.match(HiveParser.RPAREN);
	        this.state = 3721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
	        if(la_===1) {
	            this.state = 3719;
	            this.match(HiveParser.KW_OVER);
	            this.state = 3720;
	            this.window_specification();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, HiveParser.RULE_functionName);
	    try {
	        this.state = 3725;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3723;
	            this.functionIdentifier();
	            break;
	        case HiveParser.KW_IF:
	        case HiveParser.KW_BOOLEAN:
	        case HiveParser.KW_SMALLINT:
	        case HiveParser.KW_INT:
	        case HiveParser.KW_BIGINT:
	        case HiveParser.KW_FLOAT:
	        case HiveParser.KW_DOUBLE:
	        case HiveParser.KW_DATE:
	        case HiveParser.KW_TIMESTAMP:
	        case HiveParser.KW_ARRAY:
	        case HiveParser.KW_MAP:
	        case HiveParser.KW_BINARY:
	        case HiveParser.KW_CURRENT_DATE:
	        case HiveParser.KW_CURRENT_TIMESTAMP:
	        case HiveParser.KW_GROUPING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3724;
	            this.sql11ReservedKeywordsUsedAsFunctionName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, HiveParser.RULE_castExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3727;
	        this.match(HiveParser.KW_CAST);
	        this.state = 3728;
	        this.match(HiveParser.LPAREN);
	        this.state = 3729;
	        this.expression(0);
	        this.state = 3730;
	        this.match(HiveParser.KW_AS);
	        this.state = 3731;
	        this.primitiveType();
	        this.state = 3732;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpression() {
	    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, HiveParser.RULE_caseExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3734;
	        this.match(HiveParser.KW_CASE);
	        this.state = 3735;
	        this.expression(0);
	        this.state = 3741; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3736;
	            this.match(HiveParser.KW_WHEN);
	            this.state = 3737;
	            this.expression(0);
	            this.state = 3738;
	            this.match(HiveParser.KW_THEN);
	            this.state = 3739;
	            this.expression(0);
	            this.state = 3743; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===HiveParser.KW_WHEN);
	        this.state = 3747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ELSE) {
	            this.state = 3745;
	            this.match(HiveParser.KW_ELSE);
	            this.state = 3746;
	            this.expression(0);
	        }

	        this.state = 3749;
	        this.match(HiveParser.KW_END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenExpression() {
	    let localctx = new WhenExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, HiveParser.RULE_whenExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3751;
	        this.match(HiveParser.KW_CASE);
	        this.state = 3757; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3752;
	            this.match(HiveParser.KW_WHEN);
	            this.state = 3753;
	            this.expression(0);
	            this.state = 3754;
	            this.match(HiveParser.KW_THEN);
	            this.state = 3755;
	            this.expression(0);
	            this.state = 3759; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===HiveParser.KW_WHEN);
	        this.state = 3763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_ELSE) {
	            this.state = 3761;
	            this.match(HiveParser.KW_ELSE);
	            this.state = 3762;
	            this.expression(0);
	        }

	        this.state = 3765;
	        this.match(HiveParser.KW_END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floorExpression() {
	    let localctx = new FloorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, HiveParser.RULE_floorExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3767;
	        this.match(HiveParser.KW_FLOOR);
	        this.state = 3768;
	        this.match(HiveParser.LPAREN);
	        this.state = 3769;
	        this.expression(0);
	        this.state = 3772;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_TO) {
	            this.state = 3770;
	            this.match(HiveParser.KW_TO);
	            this.state = 3771;
	            this.floorDateQualifiers();
	        }

	        this.state = 3774;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floorDateQualifiers() {
	    let localctx = new FloorDateQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, HiveParser.RULE_floorDateQualifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3776;
	        _la = this._input.LA(1);
	        if(!(((((_la - 265)) & ~0x1f) == 0 && ((1 << (_la - 265)) & ((1 << (HiveParser.KW_YEAR - 265)) | (1 << (HiveParser.KW_QUARTER - 265)) | (1 << (HiveParser.KW_MONTH - 265)) | (1 << (HiveParser.KW_WEEK - 265)) | (1 << (HiveParser.KW_DAY - 265)) | (1 << (HiveParser.KW_HOUR - 265)) | (1 << (HiveParser.KW_MINUTE - 265)) | (1 << (HiveParser.KW_SECOND - 265)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extractExpression() {
	    let localctx = new ExtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, HiveParser.RULE_extractExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3778;
	        this.match(HiveParser.KW_EXTRACT);
	        this.state = 3779;
	        this.match(HiveParser.LPAREN);
	        this.state = 3780;
	        this.timeQualifiers();
	        this.state = 3781;
	        this.match(HiveParser.KW_FROM);
	        this.state = 3782;
	        this.expression(0);
	        this.state = 3783;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeQualifiers() {
	    let localctx = new TimeQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, HiveParser.RULE_timeQualifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3785;
	        _la = this._input.LA(1);
	        if(!(((((_la - 265)) & ~0x1f) == 0 && ((1 << (_la - 265)) & ((1 << (HiveParser.KW_YEAR - 265)) | (1 << (HiveParser.KW_QUARTER - 265)) | (1 << (HiveParser.KW_MONTH - 265)) | (1 << (HiveParser.KW_WEEK - 265)) | (1 << (HiveParser.KW_DAY - 265)) | (1 << (HiveParser.KW_DOW - 265)) | (1 << (HiveParser.KW_HOUR - 265)) | (1 << (HiveParser.KW_MINUTE - 265)) | (1 << (HiveParser.KW_SECOND - 265)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, HiveParser.RULE_constant);
	    try {
	        this.state = 3799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3787;
	            this.intervalLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3788;
	            this.match(HiveParser.Number);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3789;
	            this.dateLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3790;
	            this.timestampLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3791;
	            this.timestampLocalTZLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3792;
	            this.match(HiveParser.StringLiteral);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3793;
	            this.stringLiteralSequence();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3794;
	            this.match(HiveParser.IntegralLiteral);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3795;
	            this.match(HiveParser.NumberLiteral);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3796;
	            this.charSetStringLiteral();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3797;
	            this.booleanValue();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3798;
	            this.match(HiveParser.KW_NULL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteralSequence() {
	    let localctx = new StringLiteralSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, HiveParser.RULE_stringLiteralSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3801;
	        this.match(HiveParser.StringLiteral);
	        this.state = 3803; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3802;
	        		this.match(HiveParser.StringLiteral);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3805; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,468, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charSetStringLiteral() {
	    let localctx = new CharSetStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, HiveParser.RULE_charSetStringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3807;
	        this.match(HiveParser.CharSetName);
	        this.state = 3808;
	        this.match(HiveParser.CharSetLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, HiveParser.RULE_dateLiteral);
	    try {
	        this.state = 3813;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_DATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3810;
	            this.match(HiveParser.KW_DATE);
	            this.state = 3811;
	            this.match(HiveParser.StringLiteral);
	            break;
	        case HiveParser.KW_CURRENT_DATE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3812;
	            this.match(HiveParser.KW_CURRENT_DATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timestampLiteral() {
	    let localctx = new TimestampLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, HiveParser.RULE_timestampLiteral);
	    try {
	        this.state = 3818;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_TIMESTAMP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3815;
	            this.match(HiveParser.KW_TIMESTAMP);
	            this.state = 3816;
	            this.match(HiveParser.StringLiteral);
	            break;
	        case HiveParser.KW_CURRENT_TIMESTAMP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3817;
	            this.match(HiveParser.KW_CURRENT_TIMESTAMP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timestampLocalTZLiteral() {
	    let localctx = new TimestampLocalTZLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, HiveParser.RULE_timestampLocalTZLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3820;
	        this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
	        this.state = 3821;
	        this.match(HiveParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalValue() {
	    let localctx = new IntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, HiveParser.RULE_intervalValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3823;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.StringLiteral || _la===HiveParser.Number)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalLiteral() {
	    let localctx = new IntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, HiveParser.RULE_intervalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3825;
	        this.intervalValue();
	        this.state = 3826;
	        this.intervalQualifiers();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalExpression() {
	    let localctx = new IntervalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, HiveParser.RULE_intervalExpression);
	    try {
	        this.state = 3843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3828;
	            this.match(HiveParser.LPAREN);
	            this.state = 3829;
	            this.intervalValue();
	            this.state = 3830;
	            this.match(HiveParser.RPAREN);
	            this.state = 3831;
	            this.intervalQualifiers();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3833;
	            this.match(HiveParser.KW_INTERVAL);
	            this.state = 3834;
	            this.intervalValue();
	            this.state = 3835;
	            this.intervalQualifiers();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3837;
	            this.match(HiveParser.KW_INTERVAL);
	            this.state = 3838;
	            this.match(HiveParser.LPAREN);
	            this.state = 3839;
	            this.expression(0);
	            this.state = 3840;
	            this.match(HiveParser.RPAREN);
	            this.state = 3841;
	            this.intervalQualifiers();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalQualifiers() {
	    let localctx = new IntervalQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, HiveParser.RULE_intervalQualifiers);
	    try {
	        this.state = 3857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3845;
	            this.match(HiveParser.KW_YEAR);
	            this.state = 3846;
	            this.match(HiveParser.KW_TO);
	            this.state = 3847;
	            this.match(HiveParser.KW_MONTH);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3848;
	            this.match(HiveParser.KW_DAY);
	            this.state = 3849;
	            this.match(HiveParser.KW_TO);
	            this.state = 3850;
	            this.match(HiveParser.KW_SECOND);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3851;
	            this.match(HiveParser.KW_YEAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3852;
	            this.match(HiveParser.KW_MONTH);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3853;
	            this.match(HiveParser.KW_DAY);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3854;
	            this.match(HiveParser.KW_HOUR);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3855;
	            this.match(HiveParser.KW_MINUTE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3856;
	            this.match(HiveParser.KW_SECOND);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomExpression() {
	    let localctx = new AtomExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, HiveParser.RULE_atomExpression);
	    try {
	        this.state = 3870;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3859;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3860;
	            this.intervalExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3861;
	            this.castExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3862;
	            this.extractExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3863;
	            this.floorExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3864;
	            this.caseExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3865;
	            this.whenExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3866;
	            this.subQueryExpression();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3867;
	            this.function_();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3868;
	            this.tableOrColumn();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3869;
	            this.expressionsInParenthesis();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceUnaryOperator() {
	    let localctx = new PrecedenceUnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, HiveParser.RULE_precedenceUnaryOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3872;
	        _la = this._input.LA(1);
	        if(!(((((_la - 350)) & ~0x1f) == 0 && ((1 << (_la - 350)) & ((1 << (HiveParser.PLUS - 350)) | (1 << (HiveParser.MINUS - 350)) | (1 << (HiveParser.TILDE - 350)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isCondition() {
	    let localctx = new IsConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, HiveParser.RULE_isCondition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_NOT) {
	            this.state = 3874;
	            this.match(HiveParser.KW_NOT);
	        }

	        this.state = 3882;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_NULL:
	            this.state = 3877;
	            this.match(HiveParser.KW_NULL);
	            break;
	        case HiveParser.KW_TRUE:
	            this.state = 3878;
	            this.match(HiveParser.KW_TRUE);
	            break;
	        case HiveParser.KW_FALSE:
	            this.state = 3879;
	            this.match(HiveParser.KW_FALSE);
	            break;
	        case HiveParser.KW_DISTINCT:
	            this.state = 3880;
	            this.match(HiveParser.KW_DISTINCT);
	            this.state = 3881;
	            this.match(HiveParser.KW_FROM);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceBitwiseXorOperator() {
	    let localctx = new PrecedenceBitwiseXorOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, HiveParser.RULE_precedenceBitwiseXorOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3884;
	        this.match(HiveParser.BITWISEXOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceStarOperator() {
	    let localctx = new PrecedenceStarOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, HiveParser.RULE_precedenceStarOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3886;
	        _la = this._input.LA(1);
	        if(!(((((_la - 349)) & ~0x1f) == 0 && ((1 << (_la - 349)) & ((1 << (HiveParser.DIVIDE - 349)) | (1 << (HiveParser.STAR - 349)) | (1 << (HiveParser.MOD - 349)) | (1 << (HiveParser.DIV - 349)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedencePlusOperator() {
	    let localctx = new PrecedencePlusOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, HiveParser.RULE_precedencePlusOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3888;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.PLUS || _la===HiveParser.MINUS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceConcatenateOperator() {
	    let localctx = new PrecedenceConcatenateOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, HiveParser.RULE_precedenceConcatenateOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3890;
	        this.match(HiveParser.CONCATENATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceAmpersandOperator() {
	    let localctx = new PrecedenceAmpersandOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, HiveParser.RULE_precedenceAmpersandOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3892;
	        this.match(HiveParser.AMPERSAND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceBitwiseOrOperator() {
	    let localctx = new PrecedenceBitwiseOrOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, HiveParser.RULE_precedenceBitwiseOrOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3894;
	        this.match(HiveParser.BITWISEOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceRegexpOperator() {
	    let localctx = new PrecedenceRegexpOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, HiveParser.RULE_precedenceRegexpOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3896;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_LIKE || _la===HiveParser.KW_RLIKE || _la===HiveParser.KW_REGEXP)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceComparisonOperator() {
	    let localctx = new PrecedenceComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, HiveParser.RULE_precedenceComparisonOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3898;
	        _la = this._input.LA(1);
	        if(!(((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (HiveParser.EQUAL - 342)) | (1 << (HiveParser.EQUAL_NS - 342)) | (1 << (HiveParser.NOTEQUAL - 342)) | (1 << (HiveParser.LESSTHANOREQUALTO - 342)) | (1 << (HiveParser.LESSTHAN - 342)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 342)) | (1 << (HiveParser.GREATERTHAN - 342)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceNotOperator() {
	    let localctx = new PrecedenceNotOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, HiveParser.RULE_precedenceNotOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3900;
	        this.match(HiveParser.KW_NOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedenceLogicOperator() {
	    let localctx = new PrecedenceLogicOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, HiveParser.RULE_precedenceLogicOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3902;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_AND || _la===HiveParser.KW_OR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 702;
	    this.enterRecursionRule(localctx, 702, HiveParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3929;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3905;
	            this.atomExpression();
	            this.state = 3914;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,477,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3912;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case HiveParser.LSQUARE:
	                        this.state = 3906;
	                        this.match(HiveParser.LSQUARE);
	                        this.state = 3907;
	                        this.expression(0);
	                        this.state = 3908;
	                        this.match(HiveParser.RSQUARE);
	                        break;
	                    case HiveParser.DOT:
	                        this.state = 3910;
	                        this.match(HiveParser.DOT);
	                        this.state = 3911;
	                        this.identifier();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 3916;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,477,this._ctx);
	            }

	            break;

	        case 2:
	            this.state = 3917;
	            this.precedenceUnaryOperator();
	            this.state = 3918;
	            this.expression(17);
	            break;

	        case 3:
	            this.state = 3920;
	            this.match(HiveParser.KW_EXISTS);
	            this.state = 3921;
	            this.subQueryExpression();
	            break;

	        case 4:
	            this.state = 3922;
	            this.precedenceNotOperator();
	            this.state = 3923;
	            this.expression(3);
	            break;

	        case 5:
	            this.state = 3925;
	            this.match(HiveParser.LPAREN);
	            this.state = 3926;
	            this.expression(0);
	            this.state = 3927;
	            this.match(HiveParser.RPAREN);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3997;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,484,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3995;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3931;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 3932;
	                    this.precedenceBitwiseXorOperator();
	                    this.state = 3933;
	                    this.expression(16);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3935;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 3936;
	                    this.precedenceStarOperator();
	                    this.state = 3937;
	                    this.expression(15);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3939;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 3940;
	                    this.precedencePlusOperator();
	                    this.state = 3941;
	                    this.expression(14);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3943;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 3944;
	                    this.precedenceConcatenateOperator();
	                    this.state = 3945;
	                    this.expression(13);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3947;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 3948;
	                    this.precedenceAmpersandOperator();
	                    this.state = 3949;
	                    this.expression(12);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3951;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 3952;
	                    this.precedenceBitwiseOrOperator();
	                    this.state = 3953;
	                    this.expression(11);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3955;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 3956;
	                    this.precedenceComparisonOperator();
	                    this.state = 3957;
	                    this.expression(10);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3959;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 3961;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===HiveParser.KW_NOT) {
	                        this.state = 3960;
	                        this.match(HiveParser.KW_NOT);
	                    }

	                    this.state = 3963;
	                    this.precedenceRegexpOperator();
	                    this.state = 3964;
	                    this.expression(9);
	                    break;

	                case 9:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3966;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 3968;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===HiveParser.KW_NOT) {
	                        this.state = 3967;
	                        this.match(HiveParser.KW_NOT);
	                    }

	                    this.state = 3970;
	                    this.match(HiveParser.KW_BETWEEN);
	                    this.state = 3971;
	                    this.expression(0);
	                    this.state = 3972;
	                    this.match(HiveParser.KW_AND);
	                    this.state = 3973;
	                    this.expression(6);
	                    break;

	                case 10:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3975;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 3976;
	                    this.precedenceLogicOperator();
	                    this.state = 3977;
	                    this.expression(3);
	                    break;

	                case 11:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3979;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 3980;
	                    this.match(HiveParser.KW_IS);
	                    this.state = 3981;
	                    this.isCondition();
	                    break;

	                case 12:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3982;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 3984;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===HiveParser.KW_NOT) {
	                        this.state = 3983;
	                        this.match(HiveParser.KW_NOT);
	                    }

	                    this.state = 3986;
	                    this.match(HiveParser.KW_LIKE);
	                    this.state = 3987;
	                    _la = this._input.LA(1);
	                    if(!(_la===HiveParser.KW_ALL || _la===HiveParser.KW_ANY)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3988;
	                    this.expressionsInParenthesis();
	                    break;

	                case 13:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, HiveParser.RULE_expression);
	                    this.state = 3989;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 3991;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===HiveParser.KW_NOT) {
	                        this.state = 3990;
	                        this.match(HiveParser.KW_NOT);
	                    }

	                    this.state = 3993;
	                    this.match(HiveParser.KW_IN);
	                    this.state = 3994;
	                    this.precedenceSimilarExpressionIn();
	                    break;

	                } 
	            }
	            this.state = 3999;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,484,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	precedenceSimilarExpressionIn() {
	    let localctx = new PrecedenceSimilarExpressionInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, HiveParser.RULE_precedenceSimilarExpressionIn);
	    try {
	        this.state = 4002;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4000;
	            this.subQueryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4001;
	            this.expressionsInParenthesis();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subQueryExpression() {
	    let localctx = new SubQueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, HiveParser.RULE_subQueryExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4004;
	        this.match(HiveParser.LPAREN);
	        this.state = 4005;
	        this.selectStatement();
	        this.state = 4006;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValue() {
	    let localctx = new BooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, HiveParser.RULE_booleanValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4008;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_TRUE || _la===HiveParser.KW_FALSE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValueTok() {
	    let localctx = new BooleanValueTokContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, HiveParser.RULE_booleanValueTok);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4010;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_TRUE || _la===HiveParser.KW_FALSE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOrPartition() {
	    let localctx = new TableOrPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, HiveParser.RULE_tableOrPartition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4012;
	        this.tableName();
	        this.state = 4014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.KW_PARTITION) {
	            this.state = 4013;
	            this.partitionSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionSpec() {
	    let localctx = new PartitionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, HiveParser.RULE_partitionSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4016;
	        this.match(HiveParser.KW_PARTITION);
	        this.state = 4017;
	        this.match(HiveParser.LPAREN);
	        this.state = 4018;
	        this.partitionVal();
	        this.state = 4023;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 4019;
	            this.match(HiveParser.COMMA);
	            this.state = 4020;
	            this.partitionVal();
	            this.state = 4025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4026;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionVal() {
	    let localctx = new PartitionValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, HiveParser.RULE_partitionVal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4028;
	        this.identifier();
	        this.state = 4031;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===HiveParser.EQUAL) {
	            this.state = 4029;
	            this.match(HiveParser.EQUAL);
	            this.state = 4030;
	            this.constant();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionSpec() {
	    let localctx = new DropPartitionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, HiveParser.RULE_dropPartitionSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4033;
	        this.match(HiveParser.KW_PARTITION);
	        this.state = 4034;
	        this.match(HiveParser.LPAREN);
	        this.state = 4035;
	        this.dropPartitionVal();
	        this.state = 4040;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===HiveParser.COMMA) {
	            this.state = 4036;
	            this.match(HiveParser.COMMA);
	            this.state = 4037;
	            this.dropPartitionVal();
	            this.state = 4042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4043;
	        this.match(HiveParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionVal() {
	    let localctx = new DropPartitionValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, HiveParser.RULE_dropPartitionVal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4045;
	        this.identifier();
	        this.state = 4046;
	        this.dropPartitionOperator();
	        this.state = 4047;
	        this.constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionOperator() {
	    let localctx = new DropPartitionOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, HiveParser.RULE_dropPartitionOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4049;
	        _la = this._input.LA(1);
	        if(!(((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (HiveParser.EQUAL - 342)) | (1 << (HiveParser.NOTEQUAL - 342)) | (1 << (HiveParser.LESSTHANOREQUALTO - 342)) | (1 << (HiveParser.LESSTHAN - 342)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 342)) | (1 << (HiveParser.GREATERTHAN - 342)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sysFuncNames() {
	    let localctx = new SysFuncNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, HiveParser.RULE_sysFuncNames);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4051;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_AND) | (1 << HiveParser.KW_OR) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_LIKE) | (1 << HiveParser.KW_IF))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (HiveParser.KW_BOOLEAN - 77)) | (1 << (HiveParser.KW_TINYINT - 77)) | (1 << (HiveParser.KW_SMALLINT - 77)) | (1 << (HiveParser.KW_INT - 77)) | (1 << (HiveParser.KW_BIGINT - 77)) | (1 << (HiveParser.KW_FLOAT - 77)) | (1 << (HiveParser.KW_DOUBLE - 77)) | (1 << (HiveParser.KW_STRING - 77)) | (1 << (HiveParser.KW_ARRAY - 77)) | (1 << (HiveParser.KW_STRUCT - 77)) | (1 << (HiveParser.KW_MAP - 77)) | (1 << (HiveParser.KW_UNIONTYPE - 77)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (HiveParser.KW_RLIKE - 136)) | (1 << (HiveParser.KW_REGEXP - 136)) | (1 << (HiveParser.KW_CASE - 136)) | (1 << (HiveParser.KW_WHEN - 136)))) !== 0) || ((((_la - 180)) & ~0x1f) == 0 && ((1 << (_la - 180)) & ((1 << (HiveParser.KW_IN - 180)) | (1 << (HiveParser.KW_BETWEEN - 180)) | (1 << (HiveParser.KW_BINARY - 180)))) !== 0) || _la===HiveParser.KW_FLOOR || ((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (HiveParser.EQUAL - 342)) | (1 << (HiveParser.EQUAL_NS - 342)) | (1 << (HiveParser.NOTEQUAL - 342)) | (1 << (HiveParser.LESSTHANOREQUALTO - 342)) | (1 << (HiveParser.LESSTHAN - 342)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 342)) | (1 << (HiveParser.GREATERTHAN - 342)) | (1 << (HiveParser.DIVIDE - 342)) | (1 << (HiveParser.PLUS - 342)) | (1 << (HiveParser.MINUS - 342)) | (1 << (HiveParser.STAR - 342)) | (1 << (HiveParser.MOD - 342)) | (1 << (HiveParser.DIV - 342)) | (1 << (HiveParser.AMPERSAND - 342)) | (1 << (HiveParser.TILDE - 342)) | (1 << (HiveParser.BITWISEOR - 342)) | (1 << (HiveParser.BITWISEXOR - 342)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descFuncNames() {
	    let localctx = new DescFuncNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, HiveParser.RULE_descFuncNames);
	    try {
	        this.state = 4056;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4053;
	            this.sysFuncNames();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4054;
	            this.match(HiveParser.StringLiteral);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4055;
	            this.functionIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, HiveParser.RULE_identifier);
	    try {
	        this.state = 4060;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4058;
	            this.match(HiveParser.Identifier);
	            break;
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4059;
	            this.nonReserved();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionIdentifier() {
	    let localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, HiveParser.RULE_functionIdentifier);
	    try {
	        this.state = 4067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4062;
	            this.identifier();
	            this.state = 4063;
	            this.match(HiveParser.DOT);
	            this.state = 4064;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4066;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principalIdentifier() {
	    let localctx = new PrincipalIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, HiveParser.RULE_principalIdentifier);
	    try {
	        this.state = 4071;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case HiveParser.KW_ASC:
	        case HiveParser.KW_DESC:
	        case HiveParser.KW_NULLS:
	        case HiveParser.KW_LAST:
	        case HiveParser.KW_OVERWRITE:
	        case HiveParser.KW_PARTITIONS:
	        case HiveParser.KW_TABLES:
	        case HiveParser.KW_COLUMNS:
	        case HiveParser.KW_INDEX:
	        case HiveParser.KW_INDEXES:
	        case HiveParser.KW_REBUILD:
	        case HiveParser.KW_FUNCTIONS:
	        case HiveParser.KW_SHOW:
	        case HiveParser.KW_MSCK:
	        case HiveParser.KW_REPAIR:
	        case HiveParser.KW_DIRECTORY:
	        case HiveParser.KW_CLUSTER:
	        case HiveParser.KW_DISTRIBUTE:
	        case HiveParser.KW_SORT:
	        case HiveParser.KW_LOAD:
	        case HiveParser.KW_EXPORT:
	        case HiveParser.KW_REPLICATION:
	        case HiveParser.KW_METADATA:
	        case HiveParser.KW_DATA:
	        case HiveParser.KW_INPATH:
	        case HiveParser.KW_CHANGE:
	        case HiveParser.KW_FIRST:
	        case HiveParser.KW_AFTER:
	        case HiveParser.KW_RENAME:
	        case HiveParser.KW_COMMENT:
	        case HiveParser.KW_TINYINT:
	        case HiveParser.KW_DATETIME:
	        case HiveParser.KW_ZONE:
	        case HiveParser.KW_STRING:
	        case HiveParser.KW_STRUCT:
	        case HiveParser.KW_UNIONTYPE:
	        case HiveParser.KW_PARTITIONED:
	        case HiveParser.KW_CLUSTERED:
	        case HiveParser.KW_SORTED:
	        case HiveParser.KW_BUCKETS:
	        case HiveParser.KW_FORMAT:
	        case HiveParser.KW_DELIMITED:
	        case HiveParser.KW_FIELDS:
	        case HiveParser.KW_TERMINATED:
	        case HiveParser.KW_ESCAPED:
	        case HiveParser.KW_COLLECTION:
	        case HiveParser.KW_ITEMS:
	        case HiveParser.KW_KEYS:
	        case HiveParser.KW_KEY_TYPE:
	        case HiveParser.KW_KILL:
	        case HiveParser.KW_LINES:
	        case HiveParser.KW_STORED:
	        case HiveParser.KW_FILEFORMAT:
	        case HiveParser.KW_INPUTFORMAT:
	        case HiveParser.KW_OUTPUTFORMAT:
	        case HiveParser.KW_INPUTDRIVER:
	        case HiveParser.KW_OUTPUTDRIVER:
	        case HiveParser.KW_ENABLE:
	        case HiveParser.KW_DISABLE:
	        case HiveParser.KW_LOCATION:
	        case HiveParser.KW_BUCKET:
	        case HiveParser.KW_ADD:
	        case HiveParser.KW_REPLACE:
	        case HiveParser.KW_TEMPORARY:
	        case HiveParser.KW_FILE:
	        case HiveParser.KW_JAR:
	        case HiveParser.KW_EXPLAIN:
	        case HiveParser.KW_FORMATTED:
	        case HiveParser.KW_DEPENDENCY:
	        case HiveParser.KW_LOGICAL:
	        case HiveParser.KW_SERDE:
	        case HiveParser.KW_DEFERRED:
	        case HiveParser.KW_SERDEPROPERTIES:
	        case HiveParser.KW_DBPROPERTIES:
	        case HiveParser.KW_LIMIT:
	        case HiveParser.KW_OFFSET:
	        case HiveParser.KW_UNSET:
	        case HiveParser.KW_TBLPROPERTIES:
	        case HiveParser.KW_IDXPROPERTIES:
	        case HiveParser.KW_VALUE_TYPE:
	        case HiveParser.KW_ELEM_TYPE:
	        case HiveParser.KW_DEFINED:
	        case HiveParser.KW_MAPJOIN:
	        case HiveParser.KW_STREAMTABLE:
	        case HiveParser.KW_CLUSTERSTATUS:
	        case HiveParser.KW_UTC:
	        case HiveParser.KW_UTCTIMESTAMP:
	        case HiveParser.KW_LONG:
	        case HiveParser.KW_PLUS:
	        case HiveParser.KW_VIEW:
	        case HiveParser.KW_VIEWS:
	        case HiveParser.KW_DATABASES:
	        case HiveParser.KW_MATERIALIZED:
	        case HiveParser.KW_SCHEMA:
	        case HiveParser.KW_SCHEMAS:
	        case HiveParser.KW_SSL:
	        case HiveParser.KW_UNDO:
	        case HiveParser.KW_LOCK:
	        case HiveParser.KW_LOCKS:
	        case HiveParser.KW_UNLOCK:
	        case HiveParser.KW_SHARED:
	        case HiveParser.KW_EXCLUSIVE:
	        case HiveParser.KW_UNSIGNED:
	        case HiveParser.KW_WHILE:
	        case HiveParser.KW_READ:
	        case HiveParser.KW_PURGE:
	        case HiveParser.KW_ANALYZE:
	        case HiveParser.KW_BEFORE:
	        case HiveParser.KW_CONTINUE:
	        case HiveParser.KW_RECORDREADER:
	        case HiveParser.KW_RECORDWRITER:
	        case HiveParser.KW_SEMI:
	        case HiveParser.KW_TOUCH:
	        case HiveParser.KW_ARCHIVE:
	        case HiveParser.KW_UNARCHIVE:
	        case HiveParser.KW_COMPUTE:
	        case HiveParser.KW_STATISTICS:
	        case HiveParser.KW_USE:
	        case HiveParser.KW_OPTION:
	        case HiveParser.KW_CONCATENATE:
	        case HiveParser.KW_SHOW_DATABASE:
	        case HiveParser.KW_RESTRICT:
	        case HiveParser.KW_CASCADE:
	        case HiveParser.KW_SKEWED:
	        case HiveParser.KW_DIRECTORIES:
	        case HiveParser.KW_SETS:
	        case HiveParser.KW_NOSCAN:
	        case HiveParser.KW_ROLE:
	        case HiveParser.KW_ROLES:
	        case HiveParser.KW_URI:
	        case HiveParser.KW_SERVER:
	        case HiveParser.KW_ADMIN:
	        case HiveParser.KW_OWNER:
	        case HiveParser.KW_PRINCIPALS:
	        case HiveParser.KW_COMPACT:
	        case HiveParser.KW_COMPACTIONS:
	        case HiveParser.KW_TRANSACTIONS:
	        case HiveParser.KW_REWRITE:
	        case HiveParser.KW_REOPTIMIZATION:
	        case HiveParser.KW_RELOAD:
	        case HiveParser.KW_YEAR:
	        case HiveParser.KW_QUERY:
	        case HiveParser.KW_QUARTER:
	        case HiveParser.KW_MONTH:
	        case HiveParser.KW_WEEK:
	        case HiveParser.KW_DAY:
	        case HiveParser.KW_DOW:
	        case HiveParser.KW_HOUR:
	        case HiveParser.KW_MINUTE:
	        case HiveParser.KW_SECOND:
	        case HiveParser.KW_TRANSACTION:
	        case HiveParser.KW_WORK:
	        case HiveParser.KW_WRITE:
	        case HiveParser.KW_ISOLATION:
	        case HiveParser.KW_LEVEL:
	        case HiveParser.KW_SNAPSHOT:
	        case HiveParser.KW_AUTOCOMMIT:
	        case HiveParser.KW_CACHE:
	        case HiveParser.KW_ENFORCED:
	        case HiveParser.KW_VALIDATE:
	        case HiveParser.KW_NOVALIDATE:
	        case HiveParser.KW_RELY:
	        case HiveParser.KW_NORELY:
	        case HiveParser.KW_KEY:
	        case HiveParser.KW_ABORT:
	        case HiveParser.KW_MATCHED:
	        case HiveParser.KW_REPL:
	        case HiveParser.KW_DUMP:
	        case HiveParser.KW_STATUS:
	        case HiveParser.KW_VECTORIZATION:
	        case HiveParser.KW_SUMMARY:
	        case HiveParser.KW_OPERATOR:
	        case HiveParser.KW_EXPRESSION:
	        case HiveParser.KW_DETAIL:
	        case HiveParser.KW_WAIT:
	        case HiveParser.KW_RESOURCE:
	        case HiveParser.KW_PLAN:
	        case HiveParser.KW_QUERY_PARALLELISM:
	        case HiveParser.KW_PLANS:
	        case HiveParser.KW_ACTIVATE:
	        case HiveParser.KW_DEFAULT:
	        case HiveParser.KW_CHECK:
	        case HiveParser.KW_POOL:
	        case HiveParser.KW_MOVE:
	        case HiveParser.KW_DO:
	        case HiveParser.KW_ALLOC_FRACTION:
	        case HiveParser.KW_SCHEDULING_POLICY:
	        case HiveParser.KW_PATH:
	        case HiveParser.KW_MAPPING:
	        case HiveParser.KW_WORKLOAD:
	        case HiveParser.KW_MANAGEMENT:
	        case HiveParser.KW_ACTIVE:
	        case HiveParser.KW_UNMANAGED:
	        case HiveParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4069;
	            this.identifier();
	            break;
	        case HiveParser.QuotedIdentifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4070;
	            this.match(HiveParser.QuotedIdentifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReserved() {
	    let localctx = new NonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, HiveParser.RULE_nonReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4073;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1f) == 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1f) == 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1f) == 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sql11ReservedKeywordsUsedAsFunctionName() {
	    let localctx = new Sql11ReservedKeywordsUsedAsFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4075;
	        _la = this._input.LA(1);
	        if(!(_la===HiveParser.KW_IF || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (HiveParser.KW_BOOLEAN - 77)) | (1 << (HiveParser.KW_SMALLINT - 77)) | (1 << (HiveParser.KW_INT - 77)) | (1 << (HiveParser.KW_BIGINT - 77)) | (1 << (HiveParser.KW_FLOAT - 77)) | (1 << (HiveParser.KW_DOUBLE - 77)) | (1 << (HiveParser.KW_DATE - 77)) | (1 << (HiveParser.KW_TIMESTAMP - 77)) | (1 << (HiveParser.KW_ARRAY - 77)) | (1 << (HiveParser.KW_MAP - 77)))) !== 0) || _la===HiveParser.KW_BINARY || _la===HiveParser.KW_CURRENT_DATE || _la===HiveParser.KW_CURRENT_TIMESTAMP || _la===HiveParser.KW_GROUPING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

HiveParser.EOF = antlr4.Token.EOF;
HiveParser.KW_TRUE = 1;
HiveParser.KW_FALSE = 2;
HiveParser.KW_ALL = 3;
HiveParser.KW_NONE = 4;
HiveParser.KW_AND = 5;
HiveParser.KW_OR = 6;
HiveParser.KW_NOT = 7;
HiveParser.KW_LIKE = 8;
HiveParser.KW_ANY = 9;
HiveParser.KW_IF = 10;
HiveParser.KW_EXISTS = 11;
HiveParser.KW_ASC = 12;
HiveParser.KW_DESC = 13;
HiveParser.KW_NULLS = 14;
HiveParser.KW_LAST = 15;
HiveParser.KW_ORDER = 16;
HiveParser.KW_GROUP = 17;
HiveParser.KW_BY = 18;
HiveParser.KW_HAVING = 19;
HiveParser.KW_WHERE = 20;
HiveParser.KW_FROM = 21;
HiveParser.KW_AS = 22;
HiveParser.KW_SELECT = 23;
HiveParser.KW_DISTINCT = 24;
HiveParser.KW_INSERT = 25;
HiveParser.KW_OVERWRITE = 26;
HiveParser.KW_OUTER = 27;
HiveParser.KW_UNIQUEJOIN = 28;
HiveParser.KW_PRESERVE = 29;
HiveParser.KW_JOIN = 30;
HiveParser.KW_LEFT = 31;
HiveParser.KW_RIGHT = 32;
HiveParser.KW_FULL = 33;
HiveParser.KW_ON = 34;
HiveParser.KW_PARTITION = 35;
HiveParser.KW_PARTITIONS = 36;
HiveParser.KW_TABLE = 37;
HiveParser.KW_TABLES = 38;
HiveParser.KW_COLUMNS = 39;
HiveParser.KW_INDEX = 40;
HiveParser.KW_INDEXES = 41;
HiveParser.KW_REBUILD = 42;
HiveParser.KW_FUNCTIONS = 43;
HiveParser.KW_SHOW = 44;
HiveParser.KW_MSCK = 45;
HiveParser.KW_REPAIR = 46;
HiveParser.KW_DIRECTORY = 47;
HiveParser.KW_LOCAL = 48;
HiveParser.KW_TRANSFORM = 49;
HiveParser.KW_USING = 50;
HiveParser.KW_CLUSTER = 51;
HiveParser.KW_DISTRIBUTE = 52;
HiveParser.KW_SORT = 53;
HiveParser.KW_UNION = 54;
HiveParser.KW_EXCEPT = 55;
HiveParser.KW_LOAD = 56;
HiveParser.KW_EXPORT = 57;
HiveParser.KW_IMPORT = 58;
HiveParser.KW_REPLICATION = 59;
HiveParser.KW_METADATA = 60;
HiveParser.KW_DATA = 61;
HiveParser.KW_INPATH = 62;
HiveParser.KW_IS = 63;
HiveParser.KW_NULL = 64;
HiveParser.KW_CREATE = 65;
HiveParser.KW_EXTERNAL = 66;
HiveParser.KW_ALTER = 67;
HiveParser.KW_CHANGE = 68;
HiveParser.KW_COLUMN = 69;
HiveParser.KW_FIRST = 70;
HiveParser.KW_AFTER = 71;
HiveParser.KW_DESCRIBE = 72;
HiveParser.KW_DROP = 73;
HiveParser.KW_RENAME = 74;
HiveParser.KW_TO = 75;
HiveParser.KW_COMMENT = 76;
HiveParser.KW_BOOLEAN = 77;
HiveParser.KW_TINYINT = 78;
HiveParser.KW_SMALLINT = 79;
HiveParser.KW_INT = 80;
HiveParser.KW_BIGINT = 81;
HiveParser.KW_FLOAT = 82;
HiveParser.KW_DOUBLE = 83;
HiveParser.KW_PRECISION = 84;
HiveParser.KW_DATE = 85;
HiveParser.KW_DATETIME = 86;
HiveParser.KW_TIMESTAMP = 87;
HiveParser.KW_TIMESTAMPLOCALTZ = 88;
HiveParser.KW_TIME = 89;
HiveParser.KW_ZONE = 90;
HiveParser.KW_INTERVAL = 91;
HiveParser.KW_DECIMAL = 92;
HiveParser.KW_STRING = 93;
HiveParser.KW_CHAR = 94;
HiveParser.KW_VARCHAR = 95;
HiveParser.KW_ARRAY = 96;
HiveParser.KW_STRUCT = 97;
HiveParser.KW_MAP = 98;
HiveParser.KW_UNIONTYPE = 99;
HiveParser.KW_REDUCE = 100;
HiveParser.KW_PARTITIONED = 101;
HiveParser.KW_CLUSTERED = 102;
HiveParser.KW_SORTED = 103;
HiveParser.KW_INTO = 104;
HiveParser.KW_BUCKETS = 105;
HiveParser.KW_ROW = 106;
HiveParser.KW_ROWS = 107;
HiveParser.KW_FORMAT = 108;
HiveParser.KW_DELIMITED = 109;
HiveParser.KW_FIELDS = 110;
HiveParser.KW_TERMINATED = 111;
HiveParser.KW_ESCAPED = 112;
HiveParser.KW_COLLECTION = 113;
HiveParser.KW_ITEMS = 114;
HiveParser.KW_KEYS = 115;
HiveParser.KW_KEY_TYPE = 116;
HiveParser.KW_KILL = 117;
HiveParser.KW_LINES = 118;
HiveParser.KW_STORED = 119;
HiveParser.KW_FILEFORMAT = 120;
HiveParser.KW_INPUTFORMAT = 121;
HiveParser.KW_OUTPUTFORMAT = 122;
HiveParser.KW_INPUTDRIVER = 123;
HiveParser.KW_OUTPUTDRIVER = 124;
HiveParser.KW_ENABLE = 125;
HiveParser.KW_DISABLE = 126;
HiveParser.KW_LOCATION = 127;
HiveParser.KW_TABLESAMPLE = 128;
HiveParser.KW_BUCKET = 129;
HiveParser.KW_OUT = 130;
HiveParser.KW_OF = 131;
HiveParser.KW_PERCENT = 132;
HiveParser.KW_CAST = 133;
HiveParser.KW_ADD = 134;
HiveParser.KW_REPLACE = 135;
HiveParser.KW_RLIKE = 136;
HiveParser.KW_REGEXP = 137;
HiveParser.KW_TEMPORARY = 138;
HiveParser.KW_FUNCTION = 139;
HiveParser.KW_MACRO = 140;
HiveParser.KW_FILE = 141;
HiveParser.KW_JAR = 142;
HiveParser.KW_EXPLAIN = 143;
HiveParser.KW_EXTENDED = 144;
HiveParser.KW_FORMATTED = 145;
HiveParser.KW_DEPENDENCY = 146;
HiveParser.KW_LOGICAL = 147;
HiveParser.KW_SERDE = 148;
HiveParser.KW_WITH = 149;
HiveParser.KW_DEFERRED = 150;
HiveParser.KW_SERDEPROPERTIES = 151;
HiveParser.KW_DBPROPERTIES = 152;
HiveParser.KW_LIMIT = 153;
HiveParser.KW_OFFSET = 154;
HiveParser.KW_SET = 155;
HiveParser.KW_UNSET = 156;
HiveParser.KW_TBLPROPERTIES = 157;
HiveParser.KW_IDXPROPERTIES = 158;
HiveParser.KW_VALUE_TYPE = 159;
HiveParser.KW_ELEM_TYPE = 160;
HiveParser.KW_DEFINED = 161;
HiveParser.KW_CASE = 162;
HiveParser.KW_WHEN = 163;
HiveParser.KW_THEN = 164;
HiveParser.KW_ELSE = 165;
HiveParser.KW_END = 166;
HiveParser.KW_MAPJOIN = 167;
HiveParser.KW_STREAMTABLE = 168;
HiveParser.KW_CLUSTERSTATUS = 169;
HiveParser.KW_UTC = 170;
HiveParser.KW_UTCTIMESTAMP = 171;
HiveParser.KW_LONG = 172;
HiveParser.KW_DELETE = 173;
HiveParser.KW_PLUS = 174;
HiveParser.KW_MINUS = 175;
HiveParser.KW_FETCH = 176;
HiveParser.KW_INTERSECT = 177;
HiveParser.KW_VIEW = 178;
HiveParser.KW_VIEWS = 179;
HiveParser.KW_IN = 180;
HiveParser.KW_DATABASE = 181;
HiveParser.KW_DATABASES = 182;
HiveParser.KW_MATERIALIZED = 183;
HiveParser.KW_SCHEMA = 184;
HiveParser.KW_SCHEMAS = 185;
HiveParser.KW_GRANT = 186;
HiveParser.KW_REVOKE = 187;
HiveParser.KW_SSL = 188;
HiveParser.KW_UNDO = 189;
HiveParser.KW_LOCK = 190;
HiveParser.KW_LOCKS = 191;
HiveParser.KW_UNLOCK = 192;
HiveParser.KW_SHARED = 193;
HiveParser.KW_EXCLUSIVE = 194;
HiveParser.KW_PROCEDURE = 195;
HiveParser.KW_UNSIGNED = 196;
HiveParser.KW_WHILE = 197;
HiveParser.KW_READ = 198;
HiveParser.KW_READS = 199;
HiveParser.KW_PURGE = 200;
HiveParser.KW_RANGE = 201;
HiveParser.KW_ANALYZE = 202;
HiveParser.KW_BEFORE = 203;
HiveParser.KW_BETWEEN = 204;
HiveParser.KW_BOTH = 205;
HiveParser.KW_BINARY = 206;
HiveParser.KW_CROSS = 207;
HiveParser.KW_CONTINUE = 208;
HiveParser.KW_CURSOR = 209;
HiveParser.KW_TRIGGER = 210;
HiveParser.KW_RECORDREADER = 211;
HiveParser.KW_RECORDWRITER = 212;
HiveParser.KW_SEMI = 213;
HiveParser.KW_LATERAL = 214;
HiveParser.KW_TOUCH = 215;
HiveParser.KW_ARCHIVE = 216;
HiveParser.KW_UNARCHIVE = 217;
HiveParser.KW_COMPUTE = 218;
HiveParser.KW_STATISTICS = 219;
HiveParser.KW_USE = 220;
HiveParser.KW_OPTION = 221;
HiveParser.KW_CONCATENATE = 222;
HiveParser.KW_SHOW_DATABASE = 223;
HiveParser.KW_UPDATE = 224;
HiveParser.KW_RESTRICT = 225;
HiveParser.KW_CASCADE = 226;
HiveParser.KW_SKEWED = 227;
HiveParser.KW_ROLLUP = 228;
HiveParser.KW_CUBE = 229;
HiveParser.KW_DIRECTORIES = 230;
HiveParser.KW_FOR = 231;
HiveParser.KW_WINDOW = 232;
HiveParser.KW_UNBOUNDED = 233;
HiveParser.KW_PRECEDING = 234;
HiveParser.KW_FOLLOWING = 235;
HiveParser.KW_CURRENT = 236;
HiveParser.KW_CURRENT_DATE = 237;
HiveParser.KW_CURRENT_TIMESTAMP = 238;
HiveParser.KW_LESS = 239;
HiveParser.KW_MORE = 240;
HiveParser.KW_OVER = 241;
HiveParser.KW_GROUPING = 242;
HiveParser.KW_SETS = 243;
HiveParser.KW_TRUNCATE = 244;
HiveParser.KW_NOSCAN = 245;
HiveParser.KW_USER = 246;
HiveParser.KW_ROLE = 247;
HiveParser.KW_ROLES = 248;
HiveParser.KW_INNER = 249;
HiveParser.KW_EXCHANGE = 250;
HiveParser.KW_URI = 251;
HiveParser.KW_SERVER = 252;
HiveParser.KW_ADMIN = 253;
HiveParser.KW_OWNER = 254;
HiveParser.KW_PRINCIPALS = 255;
HiveParser.KW_COMPACT = 256;
HiveParser.KW_COMPACTIONS = 257;
HiveParser.KW_TRANSACTIONS = 258;
HiveParser.KW_REWRITE = 259;
HiveParser.KW_AUTHORIZATION = 260;
HiveParser.KW_REOPTIMIZATION = 261;
HiveParser.KW_CONF = 262;
HiveParser.KW_VALUES = 263;
HiveParser.KW_RELOAD = 264;
HiveParser.KW_YEAR = 265;
HiveParser.KW_QUERY = 266;
HiveParser.KW_QUARTER = 267;
HiveParser.KW_MONTH = 268;
HiveParser.KW_WEEK = 269;
HiveParser.KW_DAY = 270;
HiveParser.KW_DOW = 271;
HiveParser.KW_HOUR = 272;
HiveParser.KW_MINUTE = 273;
HiveParser.KW_SECOND = 274;
HiveParser.KW_START = 275;
HiveParser.KW_TRANSACTION = 276;
HiveParser.KW_COMMIT = 277;
HiveParser.KW_ROLLBACK = 278;
HiveParser.KW_WORK = 279;
HiveParser.KW_ONLY = 280;
HiveParser.KW_WRITE = 281;
HiveParser.KW_ISOLATION = 282;
HiveParser.KW_LEVEL = 283;
HiveParser.KW_SNAPSHOT = 284;
HiveParser.KW_AUTOCOMMIT = 285;
HiveParser.KW_CACHE = 286;
HiveParser.KW_PRIMARY = 287;
HiveParser.KW_FOREIGN = 288;
HiveParser.KW_REFERENCES = 289;
HiveParser.KW_CONSTRAINT = 290;
HiveParser.KW_ENFORCED = 291;
HiveParser.KW_VALIDATE = 292;
HiveParser.KW_NOVALIDATE = 293;
HiveParser.KW_RELY = 294;
HiveParser.KW_NORELY = 295;
HiveParser.KW_UNIQUE = 296;
HiveParser.KW_KEY = 297;
HiveParser.KW_ABORT = 298;
HiveParser.KW_EXTRACT = 299;
HiveParser.KW_FLOOR = 300;
HiveParser.KW_MERGE = 301;
HiveParser.KW_MATCHED = 302;
HiveParser.KW_REPL = 303;
HiveParser.KW_DUMP = 304;
HiveParser.KW_STATUS = 305;
HiveParser.KW_VECTORIZATION = 306;
HiveParser.KW_SUMMARY = 307;
HiveParser.KW_OPERATOR = 308;
HiveParser.KW_EXPRESSION = 309;
HiveParser.KW_DETAIL = 310;
HiveParser.KW_WAIT = 311;
HiveParser.KW_RESOURCE = 312;
HiveParser.KW_PLAN = 313;
HiveParser.KW_QUERY_PARALLELISM = 314;
HiveParser.KW_PLANS = 315;
HiveParser.KW_ACTIVATE = 316;
HiveParser.KW_DEFAULT = 317;
HiveParser.KW_CHECK = 318;
HiveParser.KW_POOL = 319;
HiveParser.KW_MOVE = 320;
HiveParser.KW_DO = 321;
HiveParser.KW_ALLOC_FRACTION = 322;
HiveParser.KW_SCHEDULING_POLICY = 323;
HiveParser.KW_PATH = 324;
HiveParser.KW_MAPPING = 325;
HiveParser.KW_WORKLOAD = 326;
HiveParser.KW_MANAGEMENT = 327;
HiveParser.KW_ACTIVE = 328;
HiveParser.KW_UNMANAGED = 329;
HiveParser.KW_APPLICATION = 330;
HiveParser.KW_SYNC = 331;
HiveParser.DOT = 332;
HiveParser.COLON = 333;
HiveParser.COMMA = 334;
HiveParser.SEMICOLON = 335;
HiveParser.LPAREN = 336;
HiveParser.RPAREN = 337;
HiveParser.LSQUARE = 338;
HiveParser.RSQUARE = 339;
HiveParser.LCURLY = 340;
HiveParser.RCURLY = 341;
HiveParser.EQUAL = 342;
HiveParser.EQUAL_NS = 343;
HiveParser.NOTEQUAL = 344;
HiveParser.LESSTHANOREQUALTO = 345;
HiveParser.LESSTHAN = 346;
HiveParser.GREATERTHANOREQUALTO = 347;
HiveParser.GREATERTHAN = 348;
HiveParser.DIVIDE = 349;
HiveParser.PLUS = 350;
HiveParser.MINUS = 351;
HiveParser.STAR = 352;
HiveParser.MOD = 353;
HiveParser.DIV = 354;
HiveParser.AMPERSAND = 355;
HiveParser.TILDE = 356;
HiveParser.BITWISEOR = 357;
HiveParser.CONCATENATE = 358;
HiveParser.BITWISEXOR = 359;
HiveParser.QUESTION = 360;
HiveParser.DOLLAR = 361;
HiveParser.StringLiteral = 362;
HiveParser.CharSetLiteral = 363;
HiveParser.IntegralLiteral = 364;
HiveParser.NumberLiteral = 365;
HiveParser.ByteLengthLiteral = 366;
HiveParser.Number = 367;
HiveParser.Identifier = 368;
HiveParser.QuotedIdentifier = 369;
HiveParser.CharSetName = 370;
HiveParser.WS = 371;
HiveParser.LINE_COMMENT = 372;
HiveParser.QUERY_HINT = 373;
HiveParser.SHOW_HINT = 374;
HiveParser.HIDDEN_HINT = 375;

HiveParser.RULE_statements = 0;
HiveParser.RULE_statementSeparator = 1;
HiveParser.RULE_statement = 2;
HiveParser.RULE_explainStatement = 3;
HiveParser.RULE_explainOption = 4;
HiveParser.RULE_vectorizationOnly = 5;
HiveParser.RULE_vectorizatonDetail = 6;
HiveParser.RULE_execStatement = 7;
HiveParser.RULE_loadStatement = 8;
HiveParser.RULE_replicationClause = 9;
HiveParser.RULE_exportStatement = 10;
HiveParser.RULE_importStatement = 11;
HiveParser.RULE_replDumpStatement = 12;
HiveParser.RULE_replLoadStatement = 13;
HiveParser.RULE_replConfigs = 14;
HiveParser.RULE_replConfigsList = 15;
HiveParser.RULE_replStatusStatement = 16;
HiveParser.RULE_ddlStatement = 17;
HiveParser.RULE_ifExists = 18;
HiveParser.RULE_restrictOrCascade = 19;
HiveParser.RULE_ifNotExists = 20;
HiveParser.RULE_rewriteEnabled = 21;
HiveParser.RULE_rewriteDisabled = 22;
HiveParser.RULE_storedAsDirs = 23;
HiveParser.RULE_orReplace = 24;
HiveParser.RULE_createDatabaseStatement = 25;
HiveParser.RULE_dbLocation = 26;
HiveParser.RULE_dbProperties = 27;
HiveParser.RULE_dbPropertiesList = 28;
HiveParser.RULE_switchDatabaseStatement = 29;
HiveParser.RULE_dropDatabaseStatement = 30;
HiveParser.RULE_databaseComment = 31;
HiveParser.RULE_createTableStatement = 32;
HiveParser.RULE_truncateTableStatement = 33;
HiveParser.RULE_dropTableStatement = 34;
HiveParser.RULE_alterStatement = 35;
HiveParser.RULE_alterTableStatementSuffix = 36;
HiveParser.RULE_alterTblPartitionStatementSuffix = 37;
HiveParser.RULE_alterStatementPartitionKeyType = 38;
HiveParser.RULE_alterViewStatementSuffix = 39;
HiveParser.RULE_alterMaterializedViewStatementSuffix = 40;
HiveParser.RULE_alterDatabaseStatementSuffix = 41;
HiveParser.RULE_alterDatabaseSuffixProperties = 42;
HiveParser.RULE_alterDatabaseSuffixSetOwner = 43;
HiveParser.RULE_alterDatabaseSuffixSetLocation = 44;
HiveParser.RULE_alterStatementSuffixRename = 45;
HiveParser.RULE_alterStatementSuffixAddCol = 46;
HiveParser.RULE_alterStatementSuffixAddConstraint = 47;
HiveParser.RULE_alterStatementSuffixDropConstraint = 48;
HiveParser.RULE_alterStatementSuffixRenameCol = 49;
HiveParser.RULE_alterStatementSuffixUpdateStatsCol = 50;
HiveParser.RULE_alterStatementSuffixUpdateStats = 51;
HiveParser.RULE_alterStatementChangeColPosition = 52;
HiveParser.RULE_alterStatementSuffixAddPartitions = 53;
HiveParser.RULE_alterStatementSuffixAddPartitionsElement = 54;
HiveParser.RULE_alterStatementSuffixTouch = 55;
HiveParser.RULE_alterStatementSuffixArchive = 56;
HiveParser.RULE_alterStatementSuffixUnArchive = 57;
HiveParser.RULE_partitionLocation = 58;
HiveParser.RULE_alterStatementSuffixDropPartitions = 59;
HiveParser.RULE_alterStatementSuffixProperties = 60;
HiveParser.RULE_alterViewSuffixProperties = 61;
HiveParser.RULE_alterMaterializedViewSuffixRewrite = 62;
HiveParser.RULE_alterMaterializedViewSuffixRebuild = 63;
HiveParser.RULE_alterStatementSuffixSerdeProperties = 64;
HiveParser.RULE_alterIndexStatementSuffix = 65;
HiveParser.RULE_alterStatementSuffixFileFormat = 66;
HiveParser.RULE_alterStatementSuffixClusterbySortby = 67;
HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation = 68;
HiveParser.RULE_skewedLocations = 69;
HiveParser.RULE_skewedLocationsList = 70;
HiveParser.RULE_skewedLocationMap = 71;
HiveParser.RULE_alterStatementSuffixLocation = 72;
HiveParser.RULE_alterStatementSuffixSkewedby = 73;
HiveParser.RULE_alterStatementSuffixExchangePartition = 74;
HiveParser.RULE_alterStatementSuffixRenamePart = 75;
HiveParser.RULE_alterStatementSuffixStatsPart = 76;
HiveParser.RULE_alterStatementSuffixMergeFiles = 77;
HiveParser.RULE_alterStatementSuffixBucketNum = 78;
HiveParser.RULE_createIndexStatement = 79;
HiveParser.RULE_locationPath = 80;
HiveParser.RULE_dropIndexStatement = 81;
HiveParser.RULE_tablePartitionPrefix = 82;
HiveParser.RULE_blocking = 83;
HiveParser.RULE_alterStatementSuffixCompact = 84;
HiveParser.RULE_alterStatementSuffixSetOwner = 85;
HiveParser.RULE_fileFormat = 86;
HiveParser.RULE_inputFileFormat = 87;
HiveParser.RULE_tabTypeExpr = 88;
HiveParser.RULE_partTypeExpr = 89;
HiveParser.RULE_tabPartColTypeExpr = 90;
HiveParser.RULE_descStatement = 91;
HiveParser.RULE_analyzeStatement = 92;
HiveParser.RULE_showStatement = 93;
HiveParser.RULE_lockStatement = 94;
HiveParser.RULE_lockDatabase = 95;
HiveParser.RULE_lockMode = 96;
HiveParser.RULE_unlockStatement = 97;
HiveParser.RULE_unlockDatabase = 98;
HiveParser.RULE_createRoleStatement = 99;
HiveParser.RULE_dropRoleStatement = 100;
HiveParser.RULE_grantPrivileges = 101;
HiveParser.RULE_revokePrivileges = 102;
HiveParser.RULE_grantRole = 103;
HiveParser.RULE_revokeRole = 104;
HiveParser.RULE_showRoleGrants = 105;
HiveParser.RULE_showRoles = 106;
HiveParser.RULE_showCurrentRole = 107;
HiveParser.RULE_setRole = 108;
HiveParser.RULE_showGrants = 109;
HiveParser.RULE_showRolePrincipals = 110;
HiveParser.RULE_privilegeIncludeColObject = 111;
HiveParser.RULE_privilegeObject = 112;
HiveParser.RULE_privObject = 113;
HiveParser.RULE_privObjectCols = 114;
HiveParser.RULE_privilegeList = 115;
HiveParser.RULE_privlegeDef = 116;
HiveParser.RULE_privilegeType = 117;
HiveParser.RULE_principalSpecification = 118;
HiveParser.RULE_principalName = 119;
HiveParser.RULE_withGrantOption = 120;
HiveParser.RULE_grantOptionFor = 121;
HiveParser.RULE_adminOptionFor = 122;
HiveParser.RULE_withAdminOption = 123;
HiveParser.RULE_metastoreCheck = 124;
HiveParser.RULE_resourceList = 125;
HiveParser.RULE_resource = 126;
HiveParser.RULE_resourceType = 127;
HiveParser.RULE_createFunctionStatement = 128;
HiveParser.RULE_dropFunctionStatement = 129;
HiveParser.RULE_reloadFunctionStatement = 130;
HiveParser.RULE_createMacroStatement = 131;
HiveParser.RULE_dropMacroStatement = 132;
HiveParser.RULE_createViewStatement = 133;
HiveParser.RULE_createMaterializedViewStatement = 134;
HiveParser.RULE_viewPartition = 135;
HiveParser.RULE_dropViewStatement = 136;
HiveParser.RULE_dropMaterializedViewStatement = 137;
HiveParser.RULE_showFunctionIdentifier = 138;
HiveParser.RULE_showStmtIdentifier = 139;
HiveParser.RULE_tableComment = 140;
HiveParser.RULE_tablePartition = 141;
HiveParser.RULE_tableBuckets = 142;
HiveParser.RULE_tableSkewed = 143;
HiveParser.RULE_rowFormat = 144;
HiveParser.RULE_recordReader = 145;
HiveParser.RULE_recordWriter = 146;
HiveParser.RULE_rowFormatSerde = 147;
HiveParser.RULE_rowFormatDelimited = 148;
HiveParser.RULE_tableRowFormat = 149;
HiveParser.RULE_tablePropertiesPrefixed = 150;
HiveParser.RULE_tableProperties = 151;
HiveParser.RULE_tablePropertiesList = 152;
HiveParser.RULE_keyValueProperty = 153;
HiveParser.RULE_keyProperty = 154;
HiveParser.RULE_tableRowFormatFieldIdentifier = 155;
HiveParser.RULE_tableRowFormatCollItemsIdentifier = 156;
HiveParser.RULE_tableRowFormatMapKeysIdentifier = 157;
HiveParser.RULE_tableRowFormatLinesIdentifier = 158;
HiveParser.RULE_tableRowNullFormat = 159;
HiveParser.RULE_tableFileFormat = 160;
HiveParser.RULE_tableLocation = 161;
HiveParser.RULE_columnNameTypeList = 162;
HiveParser.RULE_columnNameTypeOrConstraintList = 163;
HiveParser.RULE_columnNameColonTypeList = 164;
HiveParser.RULE_columnNameList = 165;
HiveParser.RULE_columnName = 166;
HiveParser.RULE_extColumnName = 167;
HiveParser.RULE_columnNameOrderList = 168;
HiveParser.RULE_columnParenthesesList = 169;
HiveParser.RULE_enableValidateSpecification = 170;
HiveParser.RULE_enableSpecification = 171;
HiveParser.RULE_validateSpecification = 172;
HiveParser.RULE_enforcedSpecification = 173;
HiveParser.RULE_relySpecification = 174;
HiveParser.RULE_createConstraint = 175;
HiveParser.RULE_alterConstraintWithName = 176;
HiveParser.RULE_pkConstraint = 177;
HiveParser.RULE_createForeignKey = 178;
HiveParser.RULE_alterForeignKeyWithName = 179;
HiveParser.RULE_skewedValueElement = 180;
HiveParser.RULE_skewedColumnValuePairList = 181;
HiveParser.RULE_skewedColumnValuePair = 182;
HiveParser.RULE_skewedColumnValues = 183;
HiveParser.RULE_skewedColumnValue = 184;
HiveParser.RULE_skewedValueLocationElement = 185;
HiveParser.RULE_orderSpecification = 186;
HiveParser.RULE_nullOrdering = 187;
HiveParser.RULE_columnNameOrder = 188;
HiveParser.RULE_columnNameCommentList = 189;
HiveParser.RULE_columnNameComment = 190;
HiveParser.RULE_columnRefOrder = 191;
HiveParser.RULE_columnNameType = 192;
HiveParser.RULE_columnNameTypeOrConstraint = 193;
HiveParser.RULE_tableConstraint = 194;
HiveParser.RULE_columnNameTypeConstraint = 195;
HiveParser.RULE_columnConstraint = 196;
HiveParser.RULE_foreignKeyConstraint = 197;
HiveParser.RULE_colConstraint = 198;
HiveParser.RULE_alterColumnConstraint = 199;
HiveParser.RULE_alterForeignKeyConstraint = 200;
HiveParser.RULE_alterColConstraint = 201;
HiveParser.RULE_tableConstraintPrimaryKey = 202;
HiveParser.RULE_constraintOptsCreate = 203;
HiveParser.RULE_constraintOptsAlter = 204;
HiveParser.RULE_columnNameColonType = 205;
HiveParser.RULE_colType = 206;
HiveParser.RULE_colTypeList = 207;
HiveParser.RULE_type_db_col = 208;
HiveParser.RULE_primitiveType = 209;
HiveParser.RULE_listType = 210;
HiveParser.RULE_structType = 211;
HiveParser.RULE_mapType = 212;
HiveParser.RULE_unionType = 213;
HiveParser.RULE_setOperator = 214;
HiveParser.RULE_queryStatementExpression = 215;
HiveParser.RULE_queryStatementExpressionBody = 216;
HiveParser.RULE_withClause = 217;
HiveParser.RULE_cteStatement = 218;
HiveParser.RULE_fromStatement = 219;
HiveParser.RULE_singleFromStatement = 220;
HiveParser.RULE_regularBody = 221;
HiveParser.RULE_atomSelectStatement = 222;
HiveParser.RULE_selectStatement = 223;
HiveParser.RULE_setOpSelectStatement = 224;
HiveParser.RULE_selectStatementWithCTE = 225;
HiveParser.RULE_body = 226;
HiveParser.RULE_insertClause = 227;
HiveParser.RULE_destination = 228;
HiveParser.RULE_limitClause = 229;
HiveParser.RULE_deleteStatement = 230;
HiveParser.RULE_columnAssignmentClause = 231;
HiveParser.RULE_setColumnsClause = 232;
HiveParser.RULE_updateStatement = 233;
HiveParser.RULE_sqlTransactionStatement = 234;
HiveParser.RULE_startTransactionStatement = 235;
HiveParser.RULE_transactionMode = 236;
HiveParser.RULE_transactionAccessMode = 237;
HiveParser.RULE_isolationLevel = 238;
HiveParser.RULE_levelOfIsolation = 239;
HiveParser.RULE_commitStatement = 240;
HiveParser.RULE_rollbackStatement = 241;
HiveParser.RULE_setAutoCommitStatement = 242;
HiveParser.RULE_abortTransactionStatement = 243;
HiveParser.RULE_mergeStatement = 244;
HiveParser.RULE_whenClauses = 245;
HiveParser.RULE_whenNotMatchedClause = 246;
HiveParser.RULE_whenMatchedAndClause = 247;
HiveParser.RULE_whenMatchedThenClause = 248;
HiveParser.RULE_updateOrDelete = 249;
HiveParser.RULE_killQueryStatement = 250;
HiveParser.RULE_selectClause = 251;
HiveParser.RULE_selectList = 252;
HiveParser.RULE_selectTrfmClause = 253;
HiveParser.RULE_selectItem = 254;
HiveParser.RULE_trfmClause = 255;
HiveParser.RULE_selectExpression = 256;
HiveParser.RULE_selectExpressionList = 257;
HiveParser.RULE_window_clause = 258;
HiveParser.RULE_window_defn = 259;
HiveParser.RULE_window_specification = 260;
HiveParser.RULE_window_frame = 261;
HiveParser.RULE_window_range_expression = 262;
HiveParser.RULE_window_value_expression = 263;
HiveParser.RULE_window_frame_start_boundary = 264;
HiveParser.RULE_window_frame_boundary = 265;
HiveParser.RULE_tableAllColumns = 266;
HiveParser.RULE_tableOrColumn = 267;
HiveParser.RULE_expressionList = 268;
HiveParser.RULE_aliasList = 269;
HiveParser.RULE_fromClause = 270;
HiveParser.RULE_fromSource = 271;
HiveParser.RULE_atomjoinSource = 272;
HiveParser.RULE_joinSource = 273;
HiveParser.RULE_joinSourcePart = 274;
HiveParser.RULE_uniqueJoinSource = 275;
HiveParser.RULE_uniqueJoinExpr = 276;
HiveParser.RULE_uniqueJoinToken = 277;
HiveParser.RULE_joinToken = 278;
HiveParser.RULE_lateralView = 279;
HiveParser.RULE_tableAlias = 280;
HiveParser.RULE_tableBucketSample = 281;
HiveParser.RULE_splitSample = 282;
HiveParser.RULE_tableSample = 283;
HiveParser.RULE_tableSource = 284;
HiveParser.RULE_uniqueJoinTableSource = 285;
HiveParser.RULE_tableName = 286;
HiveParser.RULE_viewName = 287;
HiveParser.RULE_subQuerySource = 288;
HiveParser.RULE_partitioningSpec = 289;
HiveParser.RULE_partitionTableFunctionSource = 290;
HiveParser.RULE_partitionedTableFunction = 291;
HiveParser.RULE_whereClause = 292;
HiveParser.RULE_searchCondition = 293;
HiveParser.RULE_valuesClause = 294;
HiveParser.RULE_valuesTableConstructor = 295;
HiveParser.RULE_valueRowConstructor = 296;
HiveParser.RULE_virtualTableSource = 297;
HiveParser.RULE_groupByClause = 298;
HiveParser.RULE_groupby_expression = 299;
HiveParser.RULE_groupByEmpty = 300;
HiveParser.RULE_rollupStandard = 301;
HiveParser.RULE_rollupOldSyntax = 302;
HiveParser.RULE_groupingSetExpression = 303;
HiveParser.RULE_groupingSetExpressionMultiple = 304;
HiveParser.RULE_groupingExpressionSingle = 305;
HiveParser.RULE_havingClause = 306;
HiveParser.RULE_havingCondition = 307;
HiveParser.RULE_expressionsInParenthesis = 308;
HiveParser.RULE_expressionsNotInParenthesis = 309;
HiveParser.RULE_expressionPart = 310;
HiveParser.RULE_expressions = 311;
HiveParser.RULE_columnRefOrderInParenthesis = 312;
HiveParser.RULE_columnRefOrderNotInParenthesis = 313;
HiveParser.RULE_orderByClause = 314;
HiveParser.RULE_clusterByClause = 315;
HiveParser.RULE_partitionByClause = 316;
HiveParser.RULE_distributeByClause = 317;
HiveParser.RULE_sortByClause = 318;
HiveParser.RULE_function_ = 319;
HiveParser.RULE_functionName = 320;
HiveParser.RULE_castExpression = 321;
HiveParser.RULE_caseExpression = 322;
HiveParser.RULE_whenExpression = 323;
HiveParser.RULE_floorExpression = 324;
HiveParser.RULE_floorDateQualifiers = 325;
HiveParser.RULE_extractExpression = 326;
HiveParser.RULE_timeQualifiers = 327;
HiveParser.RULE_constant = 328;
HiveParser.RULE_stringLiteralSequence = 329;
HiveParser.RULE_charSetStringLiteral = 330;
HiveParser.RULE_dateLiteral = 331;
HiveParser.RULE_timestampLiteral = 332;
HiveParser.RULE_timestampLocalTZLiteral = 333;
HiveParser.RULE_intervalValue = 334;
HiveParser.RULE_intervalLiteral = 335;
HiveParser.RULE_intervalExpression = 336;
HiveParser.RULE_intervalQualifiers = 337;
HiveParser.RULE_atomExpression = 338;
HiveParser.RULE_precedenceUnaryOperator = 339;
HiveParser.RULE_isCondition = 340;
HiveParser.RULE_precedenceBitwiseXorOperator = 341;
HiveParser.RULE_precedenceStarOperator = 342;
HiveParser.RULE_precedencePlusOperator = 343;
HiveParser.RULE_precedenceConcatenateOperator = 344;
HiveParser.RULE_precedenceAmpersandOperator = 345;
HiveParser.RULE_precedenceBitwiseOrOperator = 346;
HiveParser.RULE_precedenceRegexpOperator = 347;
HiveParser.RULE_precedenceComparisonOperator = 348;
HiveParser.RULE_precedenceNotOperator = 349;
HiveParser.RULE_precedenceLogicOperator = 350;
HiveParser.RULE_expression = 351;
HiveParser.RULE_precedenceSimilarExpressionIn = 352;
HiveParser.RULE_subQueryExpression = 353;
HiveParser.RULE_booleanValue = 354;
HiveParser.RULE_booleanValueTok = 355;
HiveParser.RULE_tableOrPartition = 356;
HiveParser.RULE_partitionSpec = 357;
HiveParser.RULE_partitionVal = 358;
HiveParser.RULE_dropPartitionSpec = 359;
HiveParser.RULE_dropPartitionVal = 360;
HiveParser.RULE_dropPartitionOperator = 361;
HiveParser.RULE_sysFuncNames = 362;
HiveParser.RULE_descFuncNames = 363;
HiveParser.RULE_identifier = 364;
HiveParser.RULE_functionIdentifier = 365;
HiveParser.RULE_principalIdentifier = 366;
HiveParser.RULE_nonReserved = 367;
HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName = 368;

class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_statements;
    }

	EOF() {
	    return this.getToken(HiveParser.EOF, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	statementSeparator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementSeparatorContext);
	    } else {
	        return this.getTypedRuleContext(StatementSeparatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementSeparatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_statementSeparator;
    }

	SEMICOLON() {
	    return this.getToken(HiveParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterStatementSeparator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitStatementSeparator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitStatementSeparator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_statement;
    }

	explainStatement() {
	    return this.getTypedRuleContext(ExplainStatementContext,0);
	};

	execStatement() {
	    return this.getTypedRuleContext(ExecStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_explainStatement;
    }

	KW_EXPLAIN() {
	    return this.getToken(HiveParser.KW_EXPLAIN, 0);
	};

	execStatement() {
	    return this.getTypedRuleContext(ExecStatementContext,0);
	};

	KW_REWRITE() {
	    return this.getToken(HiveParser.KW_REWRITE, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	explainOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExplainOptionContext);
	    } else {
	        return this.getTypedRuleContext(ExplainOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExplainStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExplainStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExplainStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_explainOption;
    }

	KW_EXTENDED() {
	    return this.getToken(HiveParser.KW_EXTENDED, 0);
	};

	KW_FORMATTED() {
	    return this.getToken(HiveParser.KW_FORMATTED, 0);
	};

	KW_DEPENDENCY() {
	    return this.getToken(HiveParser.KW_DEPENDENCY, 0);
	};

	KW_LOGICAL() {
	    return this.getToken(HiveParser.KW_LOGICAL, 0);
	};

	KW_AUTHORIZATION() {
	    return this.getToken(HiveParser.KW_AUTHORIZATION, 0);
	};

	KW_ANALYZE() {
	    return this.getToken(HiveParser.KW_ANALYZE, 0);
	};

	KW_REOPTIMIZATION() {
	    return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
	};

	KW_VECTORIZATION() {
	    return this.getToken(HiveParser.KW_VECTORIZATION, 0);
	};

	vectorizationOnly() {
	    return this.getTypedRuleContext(VectorizationOnlyContext,0);
	};

	vectorizatonDetail() {
	    return this.getTypedRuleContext(VectorizatonDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExplainOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExplainOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExplainOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VectorizationOnlyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_vectorizationOnly;
    }

	KW_ONLY() {
	    return this.getToken(HiveParser.KW_ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterVectorizationOnly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitVectorizationOnly(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitVectorizationOnly(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VectorizatonDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_vectorizatonDetail;
    }

	KW_SUMMARY() {
	    return this.getToken(HiveParser.KW_SUMMARY, 0);
	};

	KW_OPERATOR() {
	    return this.getToken(HiveParser.KW_OPERATOR, 0);
	};

	KW_EXPRESSION() {
	    return this.getToken(HiveParser.KW_EXPRESSION, 0);
	};

	KW_DETAIL() {
	    return this.getToken(HiveParser.KW_DETAIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterVectorizatonDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitVectorizatonDetail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitVectorizatonDetail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_execStatement;
    }

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	loadStatement() {
	    return this.getTypedRuleContext(LoadStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	replDumpStatement() {
	    return this.getTypedRuleContext(ReplDumpStatementContext,0);
	};

	replLoadStatement() {
	    return this.getTypedRuleContext(ReplLoadStatementContext,0);
	};

	replStatusStatement() {
	    return this.getTypedRuleContext(ReplStatusStatementContext,0);
	};

	ddlStatement() {
	    return this.getTypedRuleContext(DdlStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	sqlTransactionStatement() {
	    return this.getTypedRuleContext(SqlTransactionStatementContext,0);
	};

	mergeStatement() {
	    return this.getTypedRuleContext(MergeStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExecStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExecStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExecStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_loadStatement;
    }

	KW_LOAD() {
	    return this.getToken(HiveParser.KW_LOAD, 0);
	};

	KW_DATA() {
	    return this.getToken(HiveParser.KW_DATA, 0);
	};

	KW_INPATH() {
	    return this.getToken(HiveParser.KW_INPATH, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_INTO() {
	    return this.getToken(HiveParser.KW_INTO, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_LOCAL() {
	    return this.getToken(HiveParser.KW_LOCAL, 0);
	};

	KW_OVERWRITE() {
	    return this.getToken(HiveParser.KW_OVERWRITE, 0);
	};

	inputFileFormat() {
	    return this.getTypedRuleContext(InputFileFormatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLoadStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLoadStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplicationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_replicationClause;
    }

	KW_FOR() {
	    return this.getToken(HiveParser.KW_FOR, 0);
	};

	KW_REPLICATION() {
	    return this.getToken(HiveParser.KW_REPLICATION, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_METADATA() {
	    return this.getToken(HiveParser.KW_METADATA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterReplicationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitReplicationClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitReplicationClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_exportStatement;
    }

	KW_EXPORT() {
	    return this.getToken(HiveParser.KW_EXPORT, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	replicationClause() {
	    return this.getTypedRuleContext(ReplicationClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_importStatement;
        this.path = null; // Token
    }

	KW_IMPORT() {
	    return this.getToken(HiveParser.KW_IMPORT, 0);
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	KW_EXTERNAL() {
	    return this.getToken(HiveParser.KW_EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitImportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplDumpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_replDumpStatement;
    }

	KW_REPL() {
	    return this.getToken(HiveParser.KW_REPL, 0);
	};

	KW_DUMP() {
	    return this.getToken(HiveParser.KW_DUMP, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(HiveParser.DOT, 0);
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.Number);
	    } else {
	        return this.getToken(HiveParser.Number, i);
	    }
	};


	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	replConfigs() {
	    return this.getTypedRuleContext(ReplConfigsContext,0);
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	KW_LIMIT() {
	    return this.getToken(HiveParser.KW_LIMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterReplDumpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitReplDumpStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitReplDumpStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_replLoadStatement;
    }

	KW_REPL() {
	    return this.getToken(HiveParser.KW_REPL, 0);
	};

	KW_LOAD() {
	    return this.getToken(HiveParser.KW_LOAD, 0);
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	replConfigs() {
	    return this.getTypedRuleContext(ReplConfigsContext,0);
	};

	DOT() {
	    return this.getToken(HiveParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterReplLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitReplLoadStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitReplLoadStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplConfigsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_replConfigs;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	replConfigsList() {
	    return this.getTypedRuleContext(ReplConfigsListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterReplConfigs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitReplConfigs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitReplConfigs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplConfigsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_replConfigsList;
    }

	keyValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterReplConfigsList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitReplConfigsList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitReplConfigsList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplStatusStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_replStatusStatement;
    }

	KW_REPL() {
	    return this.getToken(HiveParser.KW_REPL, 0);
	};

	KW_STATUS() {
	    return this.getToken(HiveParser.KW_STATUS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(HiveParser.DOT, 0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	replConfigs() {
	    return this.getTypedRuleContext(ReplConfigsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterReplStatusStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitReplStatusStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitReplStatusStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DdlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_ddlStatement;
    }

	createDatabaseStatement() {
	    return this.getTypedRuleContext(CreateDatabaseStatementContext,0);
	};

	switchDatabaseStatement() {
	    return this.getTypedRuleContext(SwitchDatabaseStatementContext,0);
	};

	dropDatabaseStatement() {
	    return this.getTypedRuleContext(DropDatabaseStatementContext,0);
	};

	createTableStatement() {
	    return this.getTypedRuleContext(CreateTableStatementContext,0);
	};

	dropTableStatement() {
	    return this.getTypedRuleContext(DropTableStatementContext,0);
	};

	truncateTableStatement() {
	    return this.getTypedRuleContext(TruncateTableStatementContext,0);
	};

	alterStatement() {
	    return this.getTypedRuleContext(AlterStatementContext,0);
	};

	descStatement() {
	    return this.getTypedRuleContext(DescStatementContext,0);
	};

	showStatement() {
	    return this.getTypedRuleContext(ShowStatementContext,0);
	};

	metastoreCheck() {
	    return this.getTypedRuleContext(MetastoreCheckContext,0);
	};

	createViewStatement() {
	    return this.getTypedRuleContext(CreateViewStatementContext,0);
	};

	createMaterializedViewStatement() {
	    return this.getTypedRuleContext(CreateMaterializedViewStatementContext,0);
	};

	dropViewStatement() {
	    return this.getTypedRuleContext(DropViewStatementContext,0);
	};

	dropMaterializedViewStatement() {
	    return this.getTypedRuleContext(DropMaterializedViewStatementContext,0);
	};

	createFunctionStatement() {
	    return this.getTypedRuleContext(CreateFunctionStatementContext,0);
	};

	createMacroStatement() {
	    return this.getTypedRuleContext(CreateMacroStatementContext,0);
	};

	dropFunctionStatement() {
	    return this.getTypedRuleContext(DropFunctionStatementContext,0);
	};

	reloadFunctionStatement() {
	    return this.getTypedRuleContext(ReloadFunctionStatementContext,0);
	};

	dropMacroStatement() {
	    return this.getTypedRuleContext(DropMacroStatementContext,0);
	};

	analyzeStatement() {
	    return this.getTypedRuleContext(AnalyzeStatementContext,0);
	};

	lockStatement() {
	    return this.getTypedRuleContext(LockStatementContext,0);
	};

	unlockStatement() {
	    return this.getTypedRuleContext(UnlockStatementContext,0);
	};

	lockDatabase() {
	    return this.getTypedRuleContext(LockDatabaseContext,0);
	};

	unlockDatabase() {
	    return this.getTypedRuleContext(UnlockDatabaseContext,0);
	};

	createRoleStatement() {
	    return this.getTypedRuleContext(CreateRoleStatementContext,0);
	};

	dropRoleStatement() {
	    return this.getTypedRuleContext(DropRoleStatementContext,0);
	};

	grantPrivileges() {
	    return this.getTypedRuleContext(GrantPrivilegesContext,0);
	};

	revokePrivileges() {
	    return this.getTypedRuleContext(RevokePrivilegesContext,0);
	};

	showGrants() {
	    return this.getTypedRuleContext(ShowGrantsContext,0);
	};

	showRoleGrants() {
	    return this.getTypedRuleContext(ShowRoleGrantsContext,0);
	};

	showRolePrincipals() {
	    return this.getTypedRuleContext(ShowRolePrincipalsContext,0);
	};

	showRoles() {
	    return this.getTypedRuleContext(ShowRolesContext,0);
	};

	grantRole() {
	    return this.getTypedRuleContext(GrantRoleContext,0);
	};

	revokeRole() {
	    return this.getTypedRuleContext(RevokeRoleContext,0);
	};

	setRole() {
	    return this.getTypedRuleContext(SetRoleContext,0);
	};

	showCurrentRole() {
	    return this.getTypedRuleContext(ShowCurrentRoleContext,0);
	};

	abortTransactionStatement() {
	    return this.getTypedRuleContext(AbortTransactionStatementContext,0);
	};

	killQueryStatement() {
	    return this.getTypedRuleContext(KillQueryStatementContext,0);
	};

	createIndexStatement() {
	    return this.getTypedRuleContext(CreateIndexStatementContext,0);
	};

	dropIndexStatement() {
	    return this.getTypedRuleContext(DropIndexStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDdlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDdlStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDdlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_ifExists;
    }

	KW_IF() {
	    return this.getToken(HiveParser.KW_IF, 0);
	};

	KW_EXISTS() {
	    return this.getToken(HiveParser.KW_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIfExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIfExists(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIfExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestrictOrCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_restrictOrCascade;
    }

	KW_RESTRICT() {
	    return this.getToken(HiveParser.KW_RESTRICT, 0);
	};

	KW_CASCADE() {
	    return this.getToken(HiveParser.KW_CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRestrictOrCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRestrictOrCascade(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRestrictOrCascade(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfNotExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_ifNotExists;
    }

	KW_IF() {
	    return this.getToken(HiveParser.KW_IF, 0);
	};

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	KW_EXISTS() {
	    return this.getToken(HiveParser.KW_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIfNotExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIfNotExists(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIfNotExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RewriteEnabledContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rewriteEnabled;
    }

	KW_ENABLE() {
	    return this.getToken(HiveParser.KW_ENABLE, 0);
	};

	KW_REWRITE() {
	    return this.getToken(HiveParser.KW_REWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRewriteEnabled(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRewriteEnabled(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRewriteEnabled(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RewriteDisabledContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rewriteDisabled;
    }

	KW_DISABLE() {
	    return this.getToken(HiveParser.KW_DISABLE, 0);
	};

	KW_REWRITE() {
	    return this.getToken(HiveParser.KW_REWRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRewriteDisabled(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRewriteDisabled(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRewriteDisabled(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StoredAsDirsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_storedAsDirs;
    }

	KW_STORED() {
	    return this.getToken(HiveParser.KW_STORED, 0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	KW_DIRECTORIES() {
	    return this.getToken(HiveParser.KW_DIRECTORIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterStoredAsDirs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitStoredAsDirs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitStoredAsDirs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrReplaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_orReplace;
    }

	KW_OR() {
	    return this.getToken(HiveParser.KW_OR, 0);
	};

	KW_REPLACE() {
	    return this.getToken(HiveParser.KW_REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterOrReplace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitOrReplace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitOrReplace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDatabaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createDatabaseStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	databaseComment() {
	    return this.getTypedRuleContext(DatabaseCommentContext,0);
	};

	dbLocation() {
	    return this.getTypedRuleContext(DbLocationContext,0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_DBPROPERTIES() {
	    return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateDatabaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateDatabaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateDatabaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DbLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dbLocation;
    }

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDbLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDbLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDbLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DbPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dbProperties;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	dbPropertiesList() {
	    return this.getTypedRuleContext(DbPropertiesListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDbProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDbProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDbProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DbPropertiesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dbPropertiesList;
    }

	keyValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDbPropertiesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDbPropertiesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDbPropertiesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchDatabaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_switchDatabaseStatement;
    }

	KW_USE() {
	    return this.getToken(HiveParser.KW_USE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSwitchDatabaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSwitchDatabaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSwitchDatabaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropDatabaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropDatabaseStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropDatabaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropDatabaseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropDatabaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatabaseCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_databaseComment;
    }

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDatabaseComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDatabaseComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDatabaseComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createTableStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	KW_LIKE() {
	    return this.getToken(HiveParser.KW_LIKE, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(HiveParser.KW_TEMPORARY, 0);
	};

	KW_EXTERNAL() {
	    return this.getToken(HiveParser.KW_EXTERNAL, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameTypeOrConstraintList() {
	    return this.getTypedRuleContext(ColumnNameTypeOrConstraintListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	tablePartition() {
	    return this.getTypedRuleContext(TablePartitionContext,0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	selectStatementWithCTE() {
	    return this.getTypedRuleContext(SelectStatementWithCTEContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruncateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_truncateTableStatement;
    }

	KW_TRUNCATE() {
	    return this.getToken(HiveParser.KW_TRUNCATE, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tablePartitionPrefix() {
	    return this.getTypedRuleContext(TablePartitionPrefixContext,0);
	};

	KW_COLUMNS() {
	    return this.getToken(HiveParser.KW_COLUMNS, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTruncateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTruncateTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTruncateTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropTableStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	KW_PURGE() {
	    return this.getToken(HiveParser.KW_PURGE, 0);
	};

	replicationClause() {
	    return this.getTypedRuleContext(ReplicationClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropTableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatement;
    }

	KW_ALTER() {
	    return this.getToken(HiveParser.KW_ALTER, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	alterTableStatementSuffix() {
	    return this.getTypedRuleContext(AlterTableStatementSuffixContext,0);
	};

	KW_VIEW() {
	    return this.getToken(HiveParser.KW_VIEW, 0);
	};

	alterViewStatementSuffix() {
	    return this.getTypedRuleContext(AlterViewStatementSuffixContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	};

	alterMaterializedViewStatementSuffix() {
	    return this.getTypedRuleContext(AlterMaterializedViewStatementSuffixContext,0);
	};

	alterDatabaseStatementSuffix() {
	    return this.getTypedRuleContext(AlterDatabaseStatementSuffixContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	KW_INDEX() {
	    return this.getToken(HiveParser.KW_INDEX, 0);
	};

	alterIndexStatementSuffix() {
	    return this.getTypedRuleContext(AlterIndexStatementSuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTableStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterTableStatementSuffix;
    }

	alterStatementSuffixRename() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameContext,0);
	};

	alterStatementSuffixDropPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext,0);
	};

	alterStatementSuffixAddPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext,0);
	};

	alterStatementSuffixTouch() {
	    return this.getTypedRuleContext(AlterStatementSuffixTouchContext,0);
	};

	alterStatementSuffixArchive() {
	    return this.getTypedRuleContext(AlterStatementSuffixArchiveContext,0);
	};

	alterStatementSuffixUnArchive() {
	    return this.getTypedRuleContext(AlterStatementSuffixUnArchiveContext,0);
	};

	alterStatementSuffixProperties() {
	    return this.getTypedRuleContext(AlterStatementSuffixPropertiesContext,0);
	};

	alterStatementSuffixSkewedby() {
	    return this.getTypedRuleContext(AlterStatementSuffixSkewedbyContext,0);
	};

	alterStatementSuffixExchangePartition() {
	    return this.getTypedRuleContext(AlterStatementSuffixExchangePartitionContext,0);
	};

	alterStatementPartitionKeyType() {
	    return this.getTypedRuleContext(AlterStatementPartitionKeyTypeContext,0);
	};

	alterStatementSuffixDropConstraint() {
	    return this.getTypedRuleContext(AlterStatementSuffixDropConstraintContext,0);
	};

	alterStatementSuffixAddConstraint() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddConstraintContext,0);
	};

	alterTblPartitionStatementSuffix() {
	    return this.getTypedRuleContext(AlterTblPartitionStatementSuffixContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	alterStatementSuffixSetOwner() {
	    return this.getTypedRuleContext(AlterStatementSuffixSetOwnerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterTableStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterTableStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterTableStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTblPartitionStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterTblPartitionStatementSuffix;
    }

	alterStatementSuffixFileFormat() {
	    return this.getTypedRuleContext(AlterStatementSuffixFileFormatContext,0);
	};

	alterStatementSuffixLocation() {
	    return this.getTypedRuleContext(AlterStatementSuffixLocationContext,0);
	};

	alterStatementSuffixMergeFiles() {
	    return this.getTypedRuleContext(AlterStatementSuffixMergeFilesContext,0);
	};

	alterStatementSuffixSerdeProperties() {
	    return this.getTypedRuleContext(AlterStatementSuffixSerdePropertiesContext,0);
	};

	alterStatementSuffixRenamePart() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenamePartContext,0);
	};

	alterStatementSuffixBucketNum() {
	    return this.getTypedRuleContext(AlterStatementSuffixBucketNumContext,0);
	};

	alterTblPartitionStatementSuffixSkewedLocation() {
	    return this.getTypedRuleContext(AlterTblPartitionStatementSuffixSkewedLocationContext,0);
	};

	alterStatementSuffixClusterbySortby() {
	    return this.getTypedRuleContext(AlterStatementSuffixClusterbySortbyContext,0);
	};

	alterStatementSuffixCompact() {
	    return this.getTypedRuleContext(AlterStatementSuffixCompactContext,0);
	};

	alterStatementSuffixUpdateStatsCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsColContext,0);
	};

	alterStatementSuffixUpdateStats() {
	    return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsContext,0);
	};

	alterStatementSuffixRenameCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameColContext,0);
	};

	alterStatementSuffixAddCol() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddColContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterTblPartitionStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterTblPartitionStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterTblPartitionStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementPartitionKeyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementPartitionKeyType;
    }

	KW_PARTITION() {
	    return this.getToken(HiveParser.KW_PARTITION, 0);
	};

	KW_COLUMN() {
	    return this.getToken(HiveParser.KW_COLUMN, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameType() {
	    return this.getTypedRuleContext(ColumnNameTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementPartitionKeyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementPartitionKeyType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementPartitionKeyType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterViewStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterViewStatementSuffix;
    }

	alterViewSuffixProperties() {
	    return this.getTypedRuleContext(AlterViewSuffixPropertiesContext,0);
	};

	alterStatementSuffixRename() {
	    return this.getTypedRuleContext(AlterStatementSuffixRenameContext,0);
	};

	alterStatementSuffixAddPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext,0);
	};

	alterStatementSuffixDropPartitions() {
	    return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext,0);
	};

	selectStatementWithCTE() {
	    return this.getTypedRuleContext(SelectStatementWithCTEContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterViewStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterViewStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterViewStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterMaterializedViewStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterMaterializedViewStatementSuffix;
    }

	alterMaterializedViewSuffixRewrite() {
	    return this.getTypedRuleContext(AlterMaterializedViewSuffixRewriteContext,0);
	};

	alterMaterializedViewSuffixRebuild() {
	    return this.getTypedRuleContext(AlterMaterializedViewSuffixRebuildContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterMaterializedViewStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterMaterializedViewStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterMaterializedViewStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterDatabaseStatementSuffix;
    }

	alterDatabaseSuffixProperties() {
	    return this.getTypedRuleContext(AlterDatabaseSuffixPropertiesContext,0);
	};

	alterDatabaseSuffixSetOwner() {
	    return this.getTypedRuleContext(AlterDatabaseSuffixSetOwnerContext,0);
	};

	alterDatabaseSuffixSetLocation() {
	    return this.getTypedRuleContext(AlterDatabaseSuffixSetLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterDatabaseStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterDatabaseStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterDatabaseStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixProperties;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_DBPROPERTIES() {
	    return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
	};

	dbProperties() {
	    return this.getTypedRuleContext(DbPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterDatabaseSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterDatabaseSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterDatabaseSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseSuffixSetOwnerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixSetOwner;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_OWNER() {
	    return this.getToken(HiveParser.KW_OWNER, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterDatabaseSuffixSetOwner(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterDatabaseSuffixSetOwner(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterDatabaseSuffixSetOwner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseSuffixSetLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixSetLocation;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterDatabaseSuffixSetLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterDatabaseSuffixSetLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterDatabaseSuffixSetLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixRenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixRename;
    }

	KW_RENAME() {
	    return this.getToken(HiveParser.KW_RENAME, 0);
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixRename(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixRename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddColContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddCol;
    }

	KW_COLUMNS() {
	    return this.getToken(HiveParser.KW_COLUMNS, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_ADD() {
	    return this.getToken(HiveParser.KW_ADD, 0);
	};

	KW_REPLACE() {
	    return this.getToken(HiveParser.KW_REPLACE, 0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixAddCol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixAddCol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixAddCol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddConstraint;
    }

	KW_ADD() {
	    return this.getToken(HiveParser.KW_ADD, 0);
	};

	alterForeignKeyWithName() {
	    return this.getTypedRuleContext(AlterForeignKeyWithNameContext,0);
	};

	alterConstraintWithName() {
	    return this.getTypedRuleContext(AlterConstraintWithNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixAddConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixAddConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixAddConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixDropConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixDropConstraint;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixDropConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixDropConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixDropConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixRenameColContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixRenameCol;
    }

	KW_CHANGE() {
	    return this.getToken(HiveParser.KW_CHANGE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	KW_COLUMN() {
	    return this.getToken(HiveParser.KW_COLUMN, 0);
	};

	alterColumnConstraint() {
	    return this.getTypedRuleContext(AlterColumnConstraintContext,0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	alterStatementChangeColPosition() {
	    return this.getTypedRuleContext(AlterStatementChangeColPositionContext,0);
	};

	restrictOrCascade() {
	    return this.getTypedRuleContext(RestrictOrCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixRenameCol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixRenameCol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixRenameCol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixUpdateStatsColContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateStatsCol;
    }

	KW_UPDATE() {
	    return this.getToken(HiveParser.KW_UPDATE, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(HiveParser.KW_STATISTICS, 0);
	};

	KW_FOR() {
	    return this.getToken(HiveParser.KW_FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	KW_COLUMN() {
	    return this.getToken(HiveParser.KW_COLUMN, 0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixUpdateStatsCol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixUpdateStatsCol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixUpdateStatsCol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixUpdateStatsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateStats;
    }

	KW_UPDATE() {
	    return this.getToken(HiveParser.KW_UPDATE, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(HiveParser.KW_STATISTICS, 0);
	};

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixUpdateStats(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixUpdateStats(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixUpdateStats(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementChangeColPositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementChangeColPosition;
        this.first = null; // Token
    }

	KW_FIRST() {
	    return this.getToken(HiveParser.KW_FIRST, 0);
	};

	KW_AFTER() {
	    return this.getToken(HiveParser.KW_AFTER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementChangeColPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementChangeColPosition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementChangeColPosition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddPartitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddPartitions;
    }

	KW_ADD() {
	    return this.getToken(HiveParser.KW_ADD, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	alterStatementSuffixAddPartitionsElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterStatementSuffixAddPartitionsElementContext);
	    } else {
	        return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixAddPartitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixAddPartitions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixAddPartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixAddPartitionsElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddPartitionsElement;
    }

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	partitionLocation() {
	    return this.getTypedRuleContext(PartitionLocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixAddPartitionsElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixAddPartitionsElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixAddPartitionsElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixTouchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixTouch;
    }

	KW_TOUCH() {
	    return this.getToken(HiveParser.KW_TOUCH, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixTouch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixTouch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixTouch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixArchiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixArchive;
    }

	KW_ARCHIVE() {
	    return this.getToken(HiveParser.KW_ARCHIVE, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixArchive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixArchive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixArchive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixUnArchiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixUnArchive;
    }

	KW_UNARCHIVE() {
	    return this.getToken(HiveParser.KW_UNARCHIVE, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixUnArchive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixUnArchive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixUnArchive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partitionLocation;
    }

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartitionLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartitionLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartitionLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixDropPartitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixDropPartitions;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	dropPartitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropPartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(DropPartitionSpecContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	KW_PURGE() {
	    return this.getToken(HiveParser.KW_PURGE, 0);
	};

	replicationClause() {
	    return this.getTypedRuleContext(ReplicationClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixDropPartitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixDropPartitions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixDropPartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixProperties;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	KW_UNSET() {
	    return this.getToken(HiveParser.KW_UNSET, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterViewSuffixPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterViewSuffixProperties;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	KW_UNSET() {
	    return this.getToken(HiveParser.KW_UNSET, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterViewSuffixProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterViewSuffixProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterViewSuffixProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterMaterializedViewSuffixRewriteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterMaterializedViewSuffixRewrite;
    }

	rewriteEnabled() {
	    return this.getTypedRuleContext(RewriteEnabledContext,0);
	};

	rewriteDisabled() {
	    return this.getTypedRuleContext(RewriteDisabledContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterMaterializedViewSuffixRewrite(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterMaterializedViewSuffixRewrite(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterMaterializedViewSuffixRewrite(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterMaterializedViewSuffixRebuildContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterMaterializedViewSuffixRebuild;
    }

	KW_REBUILD() {
	    return this.getToken(HiveParser.KW_REBUILD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterMaterializedViewSuffixRebuild(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterMaterializedViewSuffixRebuild(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterMaterializedViewSuffixRebuild(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixSerdePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixSerdeProperties;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_SERDE() {
	    return this.getToken(HiveParser.KW_SERDE, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixSerdeProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixSerdeProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixSerdeProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterIndexStatementSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterIndexStatementSuffix;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_REBUILD() {
	    return this.getToken(HiveParser.KW_REBUILD, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterIndexStatementSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterIndexStatementSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterIndexStatementSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixFileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixFileFormat;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_FILEFORMAT() {
	    return this.getToken(HiveParser.KW_FILEFORMAT, 0);
	};

	fileFormat() {
	    return this.getTypedRuleContext(FileFormatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixClusterbySortbyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixClusterbySortby;
    }

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	KW_CLUSTERED() {
	    return this.getToken(HiveParser.KW_CLUSTERED, 0);
	};

	KW_SORTED() {
	    return this.getToken(HiveParser.KW_SORTED, 0);
	};

	tableBuckets() {
	    return this.getTypedRuleContext(TableBucketsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixClusterbySortby(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixClusterbySortby(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixClusterbySortby(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTblPartitionStatementSuffixSkewedLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_SKEWED() {
	    return this.getToken(HiveParser.KW_SKEWED, 0);
	};

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	skewedLocations() {
	    return this.getTypedRuleContext(SkewedLocationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedLocationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedLocations;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	skewedLocationsList() {
	    return this.getTypedRuleContext(SkewedLocationsListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedLocations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedLocations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedLocations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedLocationsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedLocationsList;
    }

	skewedLocationMap = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkewedLocationMapContext);
	    } else {
	        return this.getTypedRuleContext(SkewedLocationMapContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedLocationsList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedLocationsList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedLocationsList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedLocationMapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedLocationMap;
    }

	skewedValueLocationElement() {
	    return this.getTypedRuleContext(SkewedValueLocationElementContext,0);
	};

	EQUAL() {
	    return this.getToken(HiveParser.EQUAL, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedLocationMap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedLocationMap(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedLocationMap(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixLocation;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixSkewedbyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixSkewedby;
    }

	tableSkewed() {
	    return this.getTypedRuleContext(TableSkewedContext,0);
	};

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	KW_SKEWED() {
	    return this.getToken(HiveParser.KW_SKEWED, 0);
	};

	storedAsDirs() {
	    return this.getTypedRuleContext(StoredAsDirsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixSkewedby(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixSkewedby(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixSkewedby(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixExchangePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixExchangePartition;
    }

	KW_EXCHANGE() {
	    return this.getToken(HiveParser.KW_EXCHANGE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixExchangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixExchangePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixExchangePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixRenamePartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixRenamePart;
    }

	KW_RENAME() {
	    return this.getToken(HiveParser.KW_RENAME, 0);
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixRenamePart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixRenamePart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixRenamePart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixStatsPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixStatsPart;
    }

	KW_UPDATE() {
	    return this.getToken(HiveParser.KW_UPDATE, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(HiveParser.KW_STATISTICS, 0);
	};

	KW_FOR() {
	    return this.getToken(HiveParser.KW_FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	KW_COLUMN() {
	    return this.getToken(HiveParser.KW_COLUMN, 0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixStatsPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixStatsPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixStatsPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixMergeFilesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixMergeFiles;
    }

	KW_CONCATENATE() {
	    return this.getToken(HiveParser.KW_CONCATENATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixMergeFiles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixMergeFiles(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixMergeFiles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixBucketNumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixBucketNum;
    }

	KW_INTO() {
	    return this.getToken(HiveParser.KW_INTO, 0);
	};

	Number() {
	    return this.getToken(HiveParser.Number, 0);
	};

	KW_BUCKETS() {
	    return this.getToken(HiveParser.KW_BUCKETS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixBucketNum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixBucketNum(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixBucketNum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createIndexStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_INDEX() {
	    return this.getToken(HiveParser.KW_INDEX, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	KW_TABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_TABLE);
	    } else {
	        return this.getToken(HiveParser.KW_TABLE, i);
	    }
	};


	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	columnParenthesesList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnParenthesesListContext);
	    } else {
	        return this.getTypedRuleContext(ColumnParenthesesListContext,i);
	    }
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_DEFERRED() {
	    return this.getToken(HiveParser.KW_DEFERRED, 0);
	};

	KW_REBUILD() {
	    return this.getToken(HiveParser.KW_REBUILD, 0);
	};

	KW_IDXPROPERTIES() {
	    return this.getToken(HiveParser.KW_IDXPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	KW_IN() {
	    return this.getToken(HiveParser.KW_IN, 0);
	};

	KW_PARTITIONED() {
	    return this.getToken(HiveParser.KW_PARTITIONED, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	locationPath() {
	    return this.getTypedRuleContext(LocationPathContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocationPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_locationPath;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.DOT);
	    } else {
	        return this.getToken(HiveParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLocationPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLocationPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLocationPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropIndexStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_INDEX() {
	    return this.getToken(HiveParser.KW_INDEX, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropIndexStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropIndexStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePartitionPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tablePartitionPrefix;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTablePartitionPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTablePartitionPrefix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTablePartitionPrefix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_blocking;
    }

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	KW_WAIT() {
	    return this.getToken(HiveParser.KW_WAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterBlocking(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitBlocking(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitBlocking(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixCompactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixCompact;
    }

	KW_COMPACT() {
	    return this.getToken(HiveParser.KW_COMPACT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	blocking() {
	    return this.getTypedRuleContext(BlockingContext,0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_OVERWRITE() {
	    return this.getToken(HiveParser.KW_OVERWRITE, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixCompact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixCompact(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixCompact(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementSuffixSetOwnerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterStatementSuffixSetOwner;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_OWNER() {
	    return this.getToken(HiveParser.KW_OWNER, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterStatementSuffixSetOwner(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterStatementSuffixSetOwner(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterStatementSuffixSetOwner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_fileFormat;
    }

	KW_INPUTFORMAT() {
	    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.StringLiteral);
	    } else {
	        return this.getToken(HiveParser.StringLiteral, i);
	    }
	};


	KW_OUTPUTFORMAT() {
	    return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
	};

	KW_SERDE() {
	    return this.getToken(HiveParser.KW_SERDE, 0);
	};

	KW_INPUTDRIVER() {
	    return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
	};

	KW_OUTPUTDRIVER() {
	    return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InputFileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_inputFileFormat;
    }

	KW_INPUTFORMAT() {
	    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.StringLiteral);
	    } else {
	        return this.getToken(HiveParser.StringLiteral, i);
	    }
	};


	KW_SERDE() {
	    return this.getToken(HiveParser.KW_SERDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterInputFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitInputFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitInputFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TabTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tabTypeExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.DOT);
	    } else {
	        return this.getToken(HiveParser.DOT, i);
	    }
	};


	KW_ELEM_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_ELEM_TYPE);
	    } else {
	        return this.getToken(HiveParser.KW_ELEM_TYPE, i);
	    }
	};


	KW_KEY_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_KEY_TYPE);
	    } else {
	        return this.getToken(HiveParser.KW_KEY_TYPE, i);
	    }
	};


	KW_VALUE_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_VALUE_TYPE);
	    } else {
	        return this.getToken(HiveParser.KW_VALUE_TYPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTabTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTabTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTabTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partTypeExpr;
    }

	tabTypeExpr() {
	    return this.getTypedRuleContext(TabTypeExprContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TabPartColTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tabPartColTypeExpr;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	extColumnName() {
	    return this.getTypedRuleContext(ExtColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTabPartColTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTabPartColTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTabPartColTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_descStatement;
    }

	KW_DESCRIBE() {
	    return this.getToken(HiveParser.KW_DESCRIBE, 0);
	};

	KW_DESC() {
	    return this.getToken(HiveParser.KW_DESC, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_FUNCTION() {
	    return this.getToken(HiveParser.KW_FUNCTION, 0);
	};

	descFuncNames() {
	    return this.getTypedRuleContext(DescFuncNamesContext,0);
	};

	tabPartColTypeExpr() {
	    return this.getTypedRuleContext(TabPartColTypeExprContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	KW_EXTENDED() {
	    return this.getToken(HiveParser.KW_EXTENDED, 0);
	};

	KW_FORMATTED() {
	    return this.getToken(HiveParser.KW_FORMATTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDescStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDescStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDescStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnalyzeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_analyzeStatement;
    }

	KW_ANALYZE() {
	    return this.getToken(HiveParser.KW_ANALYZE, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_COMPUTE() {
	    return this.getToken(HiveParser.KW_COMPUTE, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(HiveParser.KW_STATISTICS, 0);
	};

	KW_CACHE() {
	    return this.getToken(HiveParser.KW_CACHE, 0);
	};

	KW_METADATA() {
	    return this.getToken(HiveParser.KW_METADATA, 0);
	};

	KW_NOSCAN() {
	    return this.getToken(HiveParser.KW_NOSCAN, 0);
	};

	KW_FOR() {
	    return this.getToken(HiveParser.KW_FOR, 0);
	};

	KW_COLUMNS() {
	    return this.getToken(HiveParser.KW_COLUMNS, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAnalyzeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAnalyzeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAnalyzeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showStatement;
    }

	KW_SHOW() {
	    return this.getToken(HiveParser.KW_SHOW, 0);
	};

	KW_DATABASES() {
	    return this.getToken(HiveParser.KW_DATABASES, 0);
	};

	KW_SCHEMAS() {
	    return this.getToken(HiveParser.KW_SCHEMAS, 0);
	};

	KW_LIKE() {
	    return this.getToken(HiveParser.KW_LIKE, 0);
	};

	showStmtIdentifier() {
	    return this.getTypedRuleContext(ShowStmtIdentifierContext,0);
	};

	KW_TABLES() {
	    return this.getToken(HiveParser.KW_TABLES, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_FROM);
	    } else {
	        return this.getToken(HiveParser.KW_FROM, i);
	    }
	};


	KW_IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_IN);
	    } else {
	        return this.getToken(HiveParser.KW_IN, i);
	    }
	};


	KW_VIEWS() {
	    return this.getToken(HiveParser.KW_VIEWS, 0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	};

	KW_COLUMNS() {
	    return this.getToken(HiveParser.KW_COLUMNS, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_FUNCTIONS() {
	    return this.getToken(HiveParser.KW_FUNCTIONS, 0);
	};

	showFunctionIdentifier() {
	    return this.getTypedRuleContext(ShowFunctionIdentifierContext,0);
	};

	KW_PARTITIONS() {
	    return this.getToken(HiveParser.KW_PARTITIONS, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	KW_EXTENDED() {
	    return this.getToken(HiveParser.KW_EXTENDED, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_LOCKS() {
	    return this.getToken(HiveParser.KW_LOCKS, 0);
	};

	partTypeExpr() {
	    return this.getTypedRuleContext(PartTypeExprContext,0);
	};

	KW_COMPACTIONS() {
	    return this.getToken(HiveParser.KW_COMPACTIONS, 0);
	};

	KW_TRANSACTIONS() {
	    return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
	};

	KW_CONF() {
	    return this.getToken(HiveParser.KW_CONF, 0);
	};

	KW_RESOURCE() {
	    return this.getToken(HiveParser.KW_RESOURCE, 0);
	};

	KW_PLANS() {
	    return this.getToken(HiveParser.KW_PLANS, 0);
	};

	KW_PLAN() {
	    return this.getToken(HiveParser.KW_PLAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_lockStatement;
    }

	KW_LOCK() {
	    return this.getToken(HiveParser.KW_LOCK, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	lockMode() {
	    return this.getTypedRuleContext(LockModeContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_lockDatabase;
    }

	KW_LOCK() {
	    return this.getToken(HiveParser.KW_LOCK, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	lockMode() {
	    return this.getTypedRuleContext(LockModeContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLockDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLockDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLockDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_lockMode;
    }

	KW_SHARED() {
	    return this.getToken(HiveParser.KW_SHARED, 0);
	};

	KW_EXCLUSIVE() {
	    return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLockMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLockMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLockMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_unlockStatement;
    }

	KW_UNLOCK() {
	    return this.getToken(HiveParser.KW_UNLOCK, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUnlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUnlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUnlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlockDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_unlockDatabase;
    }

	KW_UNLOCK() {
	    return this.getToken(HiveParser.KW_UNLOCK, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUnlockDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUnlockDatabase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUnlockDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createRoleStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateRoleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateRoleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropRoleStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropRoleStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropRoleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantPrivilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_grantPrivileges;
    }

	KW_GRANT() {
	    return this.getToken(HiveParser.KW_GRANT, 0);
	};

	privilegeList() {
	    return this.getTypedRuleContext(PrivilegeListContext,0);
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	privilegeObject() {
	    return this.getTypedRuleContext(PrivilegeObjectContext,0);
	};

	withGrantOption() {
	    return this.getTypedRuleContext(WithGrantOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGrantPrivileges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGrantPrivileges(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGrantPrivileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokePrivilegesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_revokePrivileges;
    }

	KW_REVOKE() {
	    return this.getToken(HiveParser.KW_REVOKE, 0);
	};

	privilegeList() {
	    return this.getTypedRuleContext(PrivilegeListContext,0);
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	grantOptionFor() {
	    return this.getTypedRuleContext(GrantOptionForContext,0);
	};

	privilegeObject() {
	    return this.getTypedRuleContext(PrivilegeObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRevokePrivileges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRevokePrivileges(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRevokePrivileges(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_grantRole;
    }

	KW_GRANT() {
	    return this.getToken(HiveParser.KW_GRANT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	withAdminOption() {
	    return this.getTypedRuleContext(WithAdminOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGrantRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGrantRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGrantRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_revokeRole;
    }

	KW_REVOKE() {
	    return this.getToken(HiveParser.KW_REVOKE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	principalSpecification() {
	    return this.getTypedRuleContext(PrincipalSpecificationContext,0);
	};

	adminOptionFor() {
	    return this.getTypedRuleContext(AdminOptionForContext,0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRevokeRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRevokeRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRevokeRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowRoleGrantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showRoleGrants;
    }

	KW_SHOW() {
	    return this.getToken(HiveParser.KW_SHOW, 0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	KW_GRANT() {
	    return this.getToken(HiveParser.KW_GRANT, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowRoleGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowRoleGrants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowRoleGrants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowRolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showRoles;
    }

	KW_SHOW() {
	    return this.getToken(HiveParser.KW_SHOW, 0);
	};

	KW_ROLES() {
	    return this.getToken(HiveParser.KW_ROLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowRoles(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowRoles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowCurrentRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showCurrentRole;
    }

	KW_SHOW() {
	    return this.getToken(HiveParser.KW_SHOW, 0);
	};

	KW_CURRENT() {
	    return this.getToken(HiveParser.KW_CURRENT, 0);
	};

	KW_ROLES() {
	    return this.getToken(HiveParser.KW_ROLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowCurrentRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowCurrentRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowCurrentRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_setRole;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	KW_ALL() {
	    return this.getToken(HiveParser.KW_ALL, 0);
	};

	KW_NONE() {
	    return this.getToken(HiveParser.KW_NONE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSetRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSetRole(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSetRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowGrantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showGrants;
    }

	KW_SHOW() {
	    return this.getToken(HiveParser.KW_SHOW, 0);
	};

	KW_GRANT() {
	    return this.getToken(HiveParser.KW_GRANT, 0);
	};

	principalName() {
	    return this.getTypedRuleContext(PrincipalNameContext,0);
	};

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	privilegeIncludeColObject() {
	    return this.getTypedRuleContext(PrivilegeIncludeColObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowGrants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowGrants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowRolePrincipalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showRolePrincipals;
    }

	KW_SHOW() {
	    return this.getToken(HiveParser.KW_SHOW, 0);
	};

	KW_PRINCIPALS() {
	    return this.getToken(HiveParser.KW_PRINCIPALS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowRolePrincipals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowRolePrincipals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowRolePrincipals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeIncludeColObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_privilegeIncludeColObject;
    }

	KW_ALL() {
	    return this.getToken(HiveParser.KW_ALL, 0);
	};

	privObjectCols() {
	    return this.getTypedRuleContext(PrivObjectColsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrivilegeIncludeColObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrivilegeIncludeColObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrivilegeIncludeColObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_privilegeObject;
    }

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	privObject() {
	    return this.getTypedRuleContext(PrivObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrivilegeObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrivilegeObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrivilegeObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_privObject;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_URI() {
	    return this.getToken(HiveParser.KW_URI, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_SERVER() {
	    return this.getToken(HiveParser.KW_SERVER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrivObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrivObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrivObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivObjectColsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_privObjectCols;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_DATABASE() {
	    return this.getToken(HiveParser.KW_DATABASE, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_URI() {
	    return this.getToken(HiveParser.KW_URI, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_SERVER() {
	    return this.getToken(HiveParser.KW_SERVER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrivObjectCols(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrivObjectCols(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrivObjectCols(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_privilegeList;
    }

	privlegeDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivlegeDefContext);
	    } else {
	        return this.getTypedRuleContext(PrivlegeDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrivilegeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrivilegeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrivilegeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivlegeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_privlegeDef;
    }

	privilegeType() {
	    return this.getTypedRuleContext(PrivilegeTypeContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrivlegeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrivlegeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrivlegeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_privilegeType;
    }

	KW_ALL() {
	    return this.getToken(HiveParser.KW_ALL, 0);
	};

	KW_ALTER() {
	    return this.getToken(HiveParser.KW_ALTER, 0);
	};

	KW_UPDATE() {
	    return this.getToken(HiveParser.KW_UPDATE, 0);
	};

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_LOCK() {
	    return this.getToken(HiveParser.KW_LOCK, 0);
	};

	KW_SELECT() {
	    return this.getToken(HiveParser.KW_SELECT, 0);
	};

	KW_SHOW_DATABASE() {
	    return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
	};

	KW_INSERT() {
	    return this.getToken(HiveParser.KW_INSERT, 0);
	};

	KW_DELETE() {
	    return this.getToken(HiveParser.KW_DELETE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrivilegeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrivilegeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrivilegeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrincipalSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_principalSpecification;
    }

	principalName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrincipalNameContext);
	    } else {
	        return this.getTypedRuleContext(PrincipalNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrincipalSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrincipalSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrincipalSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrincipalNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_principalName;
    }

	KW_USER() {
	    return this.getToken(HiveParser.KW_USER, 0);
	};

	principalIdentifier() {
	    return this.getTypedRuleContext(PrincipalIdentifierContext,0);
	};

	KW_GROUP() {
	    return this.getToken(HiveParser.KW_GROUP, 0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrincipalName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrincipalName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrincipalName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithGrantOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_withGrantOption;
    }

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_GRANT() {
	    return this.getToken(HiveParser.KW_GRANT, 0);
	};

	KW_OPTION() {
	    return this.getToken(HiveParser.KW_OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWithGrantOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWithGrantOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWithGrantOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantOptionForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_grantOptionFor;
    }

	KW_GRANT() {
	    return this.getToken(HiveParser.KW_GRANT, 0);
	};

	KW_OPTION() {
	    return this.getToken(HiveParser.KW_OPTION, 0);
	};

	KW_FOR() {
	    return this.getToken(HiveParser.KW_FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGrantOptionFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGrantOptionFor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGrantOptionFor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdminOptionForContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_adminOptionFor;
    }

	KW_ADMIN() {
	    return this.getToken(HiveParser.KW_ADMIN, 0);
	};

	KW_OPTION() {
	    return this.getToken(HiveParser.KW_OPTION, 0);
	};

	KW_FOR() {
	    return this.getToken(HiveParser.KW_FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAdminOptionFor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAdminOptionFor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAdminOptionFor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithAdminOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_withAdminOption;
    }

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_ADMIN() {
	    return this.getToken(HiveParser.KW_ADMIN, 0);
	};

	KW_OPTION() {
	    return this.getToken(HiveParser.KW_OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWithAdminOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWithAdminOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWithAdminOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MetastoreCheckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_metastoreCheck;
    }

	KW_MSCK() {
	    return this.getToken(HiveParser.KW_MSCK, 0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_REPAIR() {
	    return this.getToken(HiveParser.KW_REPAIR, 0);
	};

	KW_PARTITIONS() {
	    return this.getToken(HiveParser.KW_PARTITIONS, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	KW_ADD() {
	    return this.getToken(HiveParser.KW_ADD, 0);
	};

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_SYNC() {
	    return this.getToken(HiveParser.KW_SYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterMetastoreCheck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitMetastoreCheck(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitMetastoreCheck(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_resourceList;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterResourceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitResourceList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitResourceList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_resource;
    }

	resourceType() {
	    return this.getTypedRuleContext(ResourceTypeContext,0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_resourceType;
    }

	KW_JAR() {
	    return this.getToken(HiveParser.KW_JAR, 0);
	};

	KW_FILE() {
	    return this.getToken(HiveParser.KW_FILE, 0);
	};

	KW_ARCHIVE() {
	    return this.getToken(HiveParser.KW_ARCHIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterResourceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitResourceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitResourceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createFunctionStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(HiveParser.KW_FUNCTION, 0);
	};

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(HiveParser.KW_TEMPORARY, 0);
	};

	KW_USING() {
	    return this.getToken(HiveParser.KW_USING, 0);
	};

	resourceList() {
	    return this.getTypedRuleContext(ResourceListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropFunctionStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(HiveParser.KW_FUNCTION, 0);
	};

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	KW_TEMPORARY() {
	    return this.getToken(HiveParser.KW_TEMPORARY, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReloadFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_reloadFunctionStatement;
    }

	KW_RELOAD() {
	    return this.getToken(HiveParser.KW_RELOAD, 0);
	};

	KW_FUNCTION() {
	    return this.getToken(HiveParser.KW_FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterReloadFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitReloadFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitReloadFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateMacroStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createMacroStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(HiveParser.KW_TEMPORARY, 0);
	};

	KW_MACRO() {
	    return this.getToken(HiveParser.KW_MACRO, 0);
	};

	Identifier() {
	    return this.getToken(HiveParser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateMacroStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateMacroStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateMacroStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropMacroStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropMacroStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(HiveParser.KW_TEMPORARY, 0);
	};

	KW_MACRO() {
	    return this.getToken(HiveParser.KW_MACRO, 0);
	};

	Identifier() {
	    return this.getToken(HiveParser.Identifier, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropMacroStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropMacroStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropMacroStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createViewStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_VIEW() {
	    return this.getToken(HiveParser.KW_VIEW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	selectStatementWithCTE() {
	    return this.getTypedRuleContext(SelectStatementWithCTEContext,0);
	};

	orReplace() {
	    return this.getTypedRuleContext(OrReplaceContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameCommentList() {
	    return this.getTypedRuleContext(ColumnNameCommentListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	viewPartition() {
	    return this.getTypedRuleContext(ViewPartitionContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createMaterializedViewStatement;
    }

	KW_CREATE() {
	    return this.getToken(HiveParser.KW_CREATE, 0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	};

	KW_VIEW() {
	    return this.getToken(HiveParser.KW_VIEW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	selectStatementWithCTE() {
	    return this.getTypedRuleContext(SelectStatementWithCTEContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	rewriteDisabled() {
	    return this.getTypedRuleContext(RewriteDisabledContext,0);
	};

	tableComment() {
	    return this.getTypedRuleContext(TableCommentContext,0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	tableLocation() {
	    return this.getTypedRuleContext(TableLocationContext,0);
	};

	tablePropertiesPrefixed() {
	    return this.getTypedRuleContext(TablePropertiesPrefixedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateMaterializedViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateMaterializedViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_viewPartition;
    }

	KW_PARTITIONED() {
	    return this.getToken(HiveParser.KW_PARTITIONED, 0);
	};

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterViewPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitViewPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitViewPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropViewStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_VIEW() {
	    return this.getToken(HiveParser.KW_VIEW, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropMaterializedViewStatement;
    }

	KW_DROP() {
	    return this.getToken(HiveParser.KW_DROP, 0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	};

	KW_VIEW() {
	    return this.getToken(HiveParser.KW_VIEW, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropMaterializedViewStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropMaterializedViewStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowFunctionIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showFunctionIdentifier;
    }

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowFunctionIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowFunctionIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowFunctionIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStmtIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_showStmtIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterShowStmtIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitShowStmtIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitShowStmtIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableComment;
    }

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tablePartition;
    }

	KW_PARTITIONED() {
	    return this.getToken(HiveParser.KW_PARTITIONED, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameTypeConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameTypeConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameTypeConstraintContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTablePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTablePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTablePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableBucketsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableBuckets;
    }

	KW_CLUSTERED() {
	    return this.getToken(HiveParser.KW_CLUSTERED, 0);
	};

	KW_BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_BY);
	    } else {
	        return this.getToken(HiveParser.KW_BY, i);
	    }
	};


	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.LPAREN);
	    } else {
	        return this.getToken(HiveParser.LPAREN, i);
	    }
	};


	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.RPAREN);
	    } else {
	        return this.getToken(HiveParser.RPAREN, i);
	    }
	};


	KW_INTO() {
	    return this.getToken(HiveParser.KW_INTO, 0);
	};

	Number() {
	    return this.getToken(HiveParser.Number, 0);
	};

	KW_BUCKETS() {
	    return this.getToken(HiveParser.KW_BUCKETS, 0);
	};

	KW_SORTED() {
	    return this.getToken(HiveParser.KW_SORTED, 0);
	};

	columnNameOrderList() {
	    return this.getTypedRuleContext(ColumnNameOrderListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableBuckets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableBuckets(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableBuckets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSkewedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableSkewed;
    }

	KW_SKEWED() {
	    return this.getToken(HiveParser.KW_SKEWED, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.LPAREN);
	    } else {
	        return this.getToken(HiveParser.LPAREN, i);
	    }
	};


	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.RPAREN);
	    } else {
	        return this.getToken(HiveParser.RPAREN, i);
	    }
	};


	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	skewedValueElement() {
	    return this.getTypedRuleContext(SkewedValueElementContext,0);
	};

	storedAsDirs() {
	    return this.getTypedRuleContext(StoredAsDirsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableSkewed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableSkewed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableSkewed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rowFormat;
    }

	rowFormatSerde() {
	    return this.getTypedRuleContext(RowFormatSerdeContext,0);
	};

	rowFormatDelimited() {
	    return this.getTypedRuleContext(RowFormatDelimitedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRowFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRowFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordReaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_recordReader;
    }

	KW_RECORDREADER() {
	    return this.getToken(HiveParser.KW_RECORDREADER, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRecordReader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRecordReader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRecordReader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordWriterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_recordWriter;
    }

	KW_RECORDWRITER() {
	    return this.getToken(HiveParser.KW_RECORDWRITER, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRecordWriter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRecordWriter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRecordWriter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatSerdeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rowFormatSerde;
    }

	KW_ROW() {
	    return this.getToken(HiveParser.KW_ROW, 0);
	};

	KW_FORMAT() {
	    return this.getToken(HiveParser.KW_FORMAT, 0);
	};

	KW_SERDE() {
	    return this.getToken(HiveParser.KW_SERDE, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRowFormatSerde(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRowFormatSerde(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRowFormatSerde(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatDelimitedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rowFormatDelimited;
    }

	KW_ROW() {
	    return this.getToken(HiveParser.KW_ROW, 0);
	};

	KW_FORMAT() {
	    return this.getToken(HiveParser.KW_FORMAT, 0);
	};

	KW_DELIMITED() {
	    return this.getToken(HiveParser.KW_DELIMITED, 0);
	};

	tableRowFormatFieldIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatFieldIdentifierContext,0);
	};

	tableRowFormatCollItemsIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatCollItemsIdentifierContext,0);
	};

	tableRowFormatMapKeysIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatMapKeysIdentifierContext,0);
	};

	tableRowFormatLinesIdentifier() {
	    return this.getTypedRuleContext(TableRowFormatLinesIdentifierContext,0);
	};

	tableRowNullFormat() {
	    return this.getTypedRuleContext(TableRowNullFormatContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRowFormatDelimited(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRowFormatDelimited(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRowFormatDelimited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableRowFormat;
    }

	rowFormatDelimited() {
	    return this.getTypedRuleContext(RowFormatDelimitedContext,0);
	};

	rowFormatSerde() {
	    return this.getTypedRuleContext(RowFormatSerdeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableRowFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableRowFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertiesPrefixedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tablePropertiesPrefixed;
    }

	KW_TBLPROPERTIES() {
	    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTablePropertiesPrefixed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTablePropertiesPrefixed(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTablePropertiesPrefixed(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableProperties;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	tablePropertiesList() {
	    return this.getTypedRuleContext(TablePropertiesListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableProperties(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertiesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tablePropertiesList;
    }

	keyValueProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyValuePropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyValuePropertyContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	keyProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyPropertyContext);
	    } else {
	        return this.getTypedRuleContext(KeyPropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTablePropertiesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTablePropertiesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTablePropertiesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyValuePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_keyValueProperty;
    }

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.StringLiteral);
	    } else {
	        return this.getToken(HiveParser.StringLiteral, i);
	    }
	};


	EQUAL() {
	    return this.getToken(HiveParser.EQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterKeyValueProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitKeyValueProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitKeyValueProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_keyProperty;
    }

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterKeyProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitKeyProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitKeyProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatFieldIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableRowFormatFieldIdentifier;
    }

	KW_FIELDS() {
	    return this.getToken(HiveParser.KW_FIELDS, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(HiveParser.KW_TERMINATED, 0);
	};

	KW_BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_BY);
	    } else {
	        return this.getToken(HiveParser.KW_BY, i);
	    }
	};


	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.StringLiteral);
	    } else {
	        return this.getToken(HiveParser.StringLiteral, i);
	    }
	};


	KW_ESCAPED() {
	    return this.getToken(HiveParser.KW_ESCAPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableRowFormatFieldIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableRowFormatFieldIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableRowFormatFieldIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatCollItemsIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableRowFormatCollItemsIdentifier;
    }

	KW_COLLECTION() {
	    return this.getToken(HiveParser.KW_COLLECTION, 0);
	};

	KW_ITEMS() {
	    return this.getToken(HiveParser.KW_ITEMS, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(HiveParser.KW_TERMINATED, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableRowFormatCollItemsIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableRowFormatCollItemsIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableRowFormatCollItemsIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatMapKeysIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableRowFormatMapKeysIdentifier;
    }

	KW_MAP() {
	    return this.getToken(HiveParser.KW_MAP, 0);
	};

	KW_KEYS() {
	    return this.getToken(HiveParser.KW_KEYS, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(HiveParser.KW_TERMINATED, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableRowFormatMapKeysIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableRowFormatMapKeysIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableRowFormatMapKeysIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowFormatLinesIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableRowFormatLinesIdentifier;
    }

	KW_LINES() {
	    return this.getToken(HiveParser.KW_LINES, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(HiveParser.KW_TERMINATED, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableRowFormatLinesIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableRowFormatLinesIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableRowFormatLinesIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRowNullFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableRowNullFormat;
    }

	KW_NULL() {
	    return this.getToken(HiveParser.KW_NULL, 0);
	};

	KW_DEFINED() {
	    return this.getToken(HiveParser.KW_DEFINED, 0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableRowNullFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableRowNullFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableRowNullFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableFileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableFileFormat;
    }

	KW_STORED() {
	    return this.getToken(HiveParser.KW_STORED, 0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	KW_INPUTFORMAT() {
	    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.StringLiteral);
	    } else {
	        return this.getToken(HiveParser.StringLiteral, i);
	    }
	};


	KW_OUTPUTFORMAT() {
	    return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
	};

	KW_INPUTDRIVER() {
	    return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
	};

	KW_OUTPUTDRIVER() {
	    return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableFileFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableLocation;
    }

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableLocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableLocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameTypeList;
    }

	columnNameType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeOrConstraintListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameTypeOrConstraintList;
    }

	columnNameTypeOrConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameTypeOrConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameTypeOrConstraintContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameTypeOrConstraintList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameTypeOrConstraintList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameTypeOrConstraintList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameColonTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameColonTypeList;
    }

	columnNameColonType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameColonTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameColonTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameColonTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameColonTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameColonTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameList;
    }

	columnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExtColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_extColumnName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.DOT);
	    } else {
	        return this.getToken(HiveParser.DOT, i);
	    }
	};


	KW_ELEM_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_ELEM_TYPE);
	    } else {
	        return this.getToken(HiveParser.KW_ELEM_TYPE, i);
	    }
	};


	KW_KEY_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_KEY_TYPE);
	    } else {
	        return this.getToken(HiveParser.KW_KEY_TYPE, i);
	    }
	};


	KW_VALUE_TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_VALUE_TYPE);
	    } else {
	        return this.getToken(HiveParser.KW_VALUE_TYPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExtColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExtColumnName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExtColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameOrderListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameOrderList;
    }

	columnNameOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameOrderContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameOrderContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameOrderList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameOrderList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameOrderList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnParenthesesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnParenthesesList;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnParenthesesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnParenthesesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnParenthesesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnableValidateSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_enableValidateSpecification;
    }

	enableSpecification() {
	    return this.getTypedRuleContext(EnableSpecificationContext,0);
	};

	validateSpecification() {
	    return this.getTypedRuleContext(ValidateSpecificationContext,0);
	};

	enforcedSpecification() {
	    return this.getTypedRuleContext(EnforcedSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterEnableValidateSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitEnableValidateSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitEnableValidateSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnableSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_enableSpecification;
    }

	KW_ENABLE() {
	    return this.getToken(HiveParser.KW_ENABLE, 0);
	};

	KW_DISABLE() {
	    return this.getToken(HiveParser.KW_DISABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterEnableSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitEnableSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitEnableSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValidateSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_validateSpecification;
    }

	KW_VALIDATE() {
	    return this.getToken(HiveParser.KW_VALIDATE, 0);
	};

	KW_NOVALIDATE() {
	    return this.getToken(HiveParser.KW_NOVALIDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterValidateSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitValidateSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitValidateSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnforcedSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_enforcedSpecification;
    }

	KW_ENFORCED() {
	    return this.getToken(HiveParser.KW_ENFORCED, 0);
	};

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterEnforcedSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitEnforcedSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitEnforcedSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_relySpecification;
    }

	KW_RELY() {
	    return this.getToken(HiveParser.KW_RELY, 0);
	};

	KW_NORELY() {
	    return this.getToken(HiveParser.KW_NORELY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRelySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRelySpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRelySpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createConstraint;
    }

	pkConstraint() {
	    return this.getTypedRuleContext(PkConstraintContext,0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constraintOptsCreate() {
	    return this.getTypedRuleContext(ConstraintOptsCreateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterConstraintWithNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterConstraintWithName;
    }

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	pkConstraint() {
	    return this.getTypedRuleContext(PkConstraintContext,0);
	};

	constraintOptsAlter() {
	    return this.getTypedRuleContext(ConstraintOptsAlterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterConstraintWithName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterConstraintWithName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterConstraintWithName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PkConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_pkConstraint;
        this.pkCols = null; // ColumnParenthesesListContext
    }

	tableConstraintPrimaryKey() {
	    return this.getTypedRuleContext(TableConstraintPrimaryKeyContext,0);
	};

	columnParenthesesList() {
	    return this.getTypedRuleContext(ColumnParenthesesListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPkConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPkConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPkConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateForeignKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_createForeignKey;
    }

	KW_FOREIGN() {
	    return this.getToken(HiveParser.KW_FOREIGN, 0);
	};

	KW_KEY() {
	    return this.getToken(HiveParser.KW_KEY, 0);
	};

	columnParenthesesList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnParenthesesListContext);
	    } else {
	        return this.getTypedRuleContext(ColumnParenthesesListContext,i);
	    }
	};

	KW_REFERENCES() {
	    return this.getToken(HiveParser.KW_REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constraintOptsCreate() {
	    return this.getTypedRuleContext(ConstraintOptsCreateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCreateForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCreateForeignKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCreateForeignKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterForeignKeyWithNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterForeignKeyWithName;
    }

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_FOREIGN() {
	    return this.getToken(HiveParser.KW_FOREIGN, 0);
	};

	KW_KEY() {
	    return this.getToken(HiveParser.KW_KEY, 0);
	};

	columnParenthesesList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnParenthesesListContext);
	    } else {
	        return this.getTypedRuleContext(ColumnParenthesesListContext,i);
	    }
	};

	KW_REFERENCES() {
	    return this.getToken(HiveParser.KW_REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	constraintOptsAlter() {
	    return this.getTypedRuleContext(ConstraintOptsAlterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterForeignKeyWithName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterForeignKeyWithName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterForeignKeyWithName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedValueElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedValueElement;
    }

	skewedColumnValues() {
	    return this.getTypedRuleContext(SkewedColumnValuesContext,0);
	};

	skewedColumnValuePairList() {
	    return this.getTypedRuleContext(SkewedColumnValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedValueElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedValueElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedValueElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedColumnValuePairList;
    }

	skewedColumnValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkewedColumnValuePairContext);
	    } else {
	        return this.getTypedRuleContext(SkewedColumnValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedColumnValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedColumnValuePairList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedColumnValuePairList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedColumnValuePair;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	skewedColumnValues() {
	    return this.getTypedRuleContext(SkewedColumnValuesContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedColumnValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedColumnValuePair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedColumnValuePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedColumnValues;
    }

	skewedColumnValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkewedColumnValueContext);
	    } else {
	        return this.getTypedRuleContext(SkewedColumnValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedColumnValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedColumnValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedColumnValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedColumnValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedColumnValue;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedColumnValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedColumnValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedColumnValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewedValueLocationElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_skewedValueLocationElement;
    }

	skewedColumnValue() {
	    return this.getTypedRuleContext(SkewedColumnValueContext,0);
	};

	skewedColumnValuePair() {
	    return this.getTypedRuleContext(SkewedColumnValuePairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSkewedValueLocationElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSkewedValueLocationElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSkewedValueLocationElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_orderSpecification;
    }

	KW_ASC() {
	    return this.getToken(HiveParser.KW_ASC, 0);
	};

	KW_DESC() {
	    return this.getToken(HiveParser.KW_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterOrderSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitOrderSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitOrderSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullOrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_nullOrdering;
    }

	KW_NULLS() {
	    return this.getToken(HiveParser.KW_NULLS, 0);
	};

	KW_FIRST() {
	    return this.getToken(HiveParser.KW_FIRST, 0);
	};

	KW_LAST() {
	    return this.getToken(HiveParser.KW_LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterNullOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitNullOrdering(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitNullOrdering(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameOrder;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	orderSpecification() {
	    return this.getTypedRuleContext(OrderSpecificationContext,0);
	};

	nullOrdering() {
	    return this.getTypedRuleContext(NullOrderingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameCommentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameCommentList;
    }

	columnNameComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameCommentContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameCommentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameCommentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameCommentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameCommentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameComment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnRefOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnRefOrder;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	orderSpecification() {
	    return this.getTypedRuleContext(OrderSpecificationContext,0);
	};

	nullOrdering() {
	    return this.getTypedRuleContext(NullOrderingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnRefOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnRefOrder(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnRefOrder(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameType;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeOrConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameTypeOrConstraint;
    }

	tableConstraint() {
	    return this.getTypedRuleContext(TableConstraintContext,0);
	};

	columnNameTypeConstraint() {
	    return this.getTypedRuleContext(ColumnNameTypeConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameTypeOrConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameTypeOrConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameTypeOrConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableConstraint;
    }

	createForeignKey() {
	    return this.getTypedRuleContext(CreateForeignKeyContext,0);
	};

	createConstraint() {
	    return this.getTypedRuleContext(CreateConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameTypeConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameTypeConstraint;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	columnConstraint() {
	    return this.getTypedRuleContext(ColumnConstraintContext,0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameTypeConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameTypeConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameTypeConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnConstraint;
    }

	foreignKeyConstraint() {
	    return this.getTypedRuleContext(ForeignKeyConstraintContext,0);
	};

	colConstraint() {
	    return this.getTypedRuleContext(ColConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForeignKeyConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_foreignKeyConstraint;
    }

	KW_REFERENCES() {
	    return this.getToken(HiveParser.KW_REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constraintOptsCreate() {
	    return this.getTypedRuleContext(ConstraintOptsCreateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterForeignKeyConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitForeignKeyConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitForeignKeyConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_colConstraint;
    }

	tableConstraintPrimaryKey() {
	    return this.getTypedRuleContext(TableConstraintPrimaryKeyContext,0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constraintOptsCreate() {
	    return this.getTypedRuleContext(ConstraintOptsCreateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterColumnConstraint;
    }

	alterForeignKeyConstraint() {
	    return this.getTypedRuleContext(AlterForeignKeyConstraintContext,0);
	};

	alterColConstraint() {
	    return this.getTypedRuleContext(AlterColConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterColumnConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterForeignKeyConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterForeignKeyConstraint;
    }

	KW_REFERENCES() {
	    return this.getToken(HiveParser.KW_REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constraintOptsAlter() {
	    return this.getTypedRuleContext(ConstraintOptsAlterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterForeignKeyConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterForeignKeyConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterForeignKeyConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterColConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_alterColConstraint;
    }

	tableConstraintPrimaryKey() {
	    return this.getTypedRuleContext(TableConstraintPrimaryKeyContext,0);
	};

	KW_CONSTRAINT() {
	    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	constraintOptsAlter() {
	    return this.getTypedRuleContext(ConstraintOptsAlterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAlterColConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAlterColConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAlterColConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintPrimaryKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableConstraintPrimaryKey;
    }

	KW_PRIMARY() {
	    return this.getToken(HiveParser.KW_PRIMARY, 0);
	};

	KW_KEY() {
	    return this.getToken(HiveParser.KW_KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableConstraintPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableConstraintPrimaryKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableConstraintPrimaryKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintOptsCreateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_constraintOptsCreate;
    }

	enableValidateSpecification() {
	    return this.getTypedRuleContext(EnableValidateSpecificationContext,0);
	};

	relySpecification() {
	    return this.getTypedRuleContext(RelySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterConstraintOptsCreate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitConstraintOptsCreate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitConstraintOptsCreate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintOptsAlterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_constraintOptsAlter;
    }

	enableValidateSpecification() {
	    return this.getTypedRuleContext(EnableValidateSpecificationContext,0);
	};

	relySpecification() {
	    return this.getTypedRuleContext(RelySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterConstraintOptsAlter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitConstraintOptsAlter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitConstraintOptsAlter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameColonTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnNameColonType;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(HiveParser.COLON, 0);
	};

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnNameColonType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnNameColonType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnNameColonType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_colType;
    }

	type_db_col() {
	    return this.getTypedRuleContext(Type_db_colContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_colTypeList;
    }

	colType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_db_colContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_type_db_col;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	listType() {
	    return this.getTypedRuleContext(ListTypeContext,0);
	};

	structType() {
	    return this.getTypedRuleContext(StructTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	unionType() {
	    return this.getTypedRuleContext(UnionTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterType_db_col(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitType_db_col(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitType_db_col(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_primitiveType;
    }

	KW_TINYINT() {
	    return this.getToken(HiveParser.KW_TINYINT, 0);
	};

	KW_SMALLINT() {
	    return this.getToken(HiveParser.KW_SMALLINT, 0);
	};

	KW_INT() {
	    return this.getToken(HiveParser.KW_INT, 0);
	};

	KW_BIGINT() {
	    return this.getToken(HiveParser.KW_BIGINT, 0);
	};

	KW_BOOLEAN() {
	    return this.getToken(HiveParser.KW_BOOLEAN, 0);
	};

	KW_FLOAT() {
	    return this.getToken(HiveParser.KW_FLOAT, 0);
	};

	KW_DOUBLE() {
	    return this.getToken(HiveParser.KW_DOUBLE, 0);
	};

	KW_PRECISION() {
	    return this.getToken(HiveParser.KW_PRECISION, 0);
	};

	KW_DATE() {
	    return this.getToken(HiveParser.KW_DATE, 0);
	};

	KW_DATETIME() {
	    return this.getToken(HiveParser.KW_DATETIME, 0);
	};

	KW_TIMESTAMP() {
	    return this.getToken(HiveParser.KW_TIMESTAMP, 0);
	};

	KW_TIMESTAMPLOCALTZ() {
	    return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_LOCAL() {
	    return this.getToken(HiveParser.KW_LOCAL, 0);
	};

	KW_TIME() {
	    return this.getToken(HiveParser.KW_TIME, 0);
	};

	KW_ZONE() {
	    return this.getToken(HiveParser.KW_ZONE, 0);
	};

	KW_STRING() {
	    return this.getToken(HiveParser.KW_STRING, 0);
	};

	KW_BINARY() {
	    return this.getToken(HiveParser.KW_BINARY, 0);
	};

	KW_DECIMAL() {
	    return this.getToken(HiveParser.KW_DECIMAL, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.Number);
	    } else {
	        return this.getToken(HiveParser.Number, i);
	    }
	};


	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	COMMA() {
	    return this.getToken(HiveParser.COMMA, 0);
	};

	KW_VARCHAR() {
	    return this.getToken(HiveParser.KW_VARCHAR, 0);
	};

	KW_CHAR() {
	    return this.getToken(HiveParser.KW_CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_listType;
    }

	KW_ARRAY() {
	    return this.getToken(HiveParser.KW_ARRAY, 0);
	};

	LESSTHAN() {
	    return this.getToken(HiveParser.LESSTHAN, 0);
	};

	type_db_col() {
	    return this.getTypedRuleContext(Type_db_colContext,0);
	};

	GREATERTHAN() {
	    return this.getToken(HiveParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitListType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitListType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_structType;
    }

	KW_STRUCT() {
	    return this.getToken(HiveParser.KW_STRUCT, 0);
	};

	LESSTHAN() {
	    return this.getToken(HiveParser.LESSTHAN, 0);
	};

	columnNameColonTypeList() {
	    return this.getTypedRuleContext(ColumnNameColonTypeListContext,0);
	};

	GREATERTHAN() {
	    return this.getToken(HiveParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterStructType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitStructType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitStructType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MapTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_mapType;
    }

	KW_MAP() {
	    return this.getToken(HiveParser.KW_MAP, 0);
	};

	LESSTHAN() {
	    return this.getToken(HiveParser.LESSTHAN, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	COMMA() {
	    return this.getToken(HiveParser.COMMA, 0);
	};

	type_db_col() {
	    return this.getTypedRuleContext(Type_db_colContext,0);
	};

	GREATERTHAN() {
	    return this.getToken(HiveParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterMapType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitMapType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitMapType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_unionType;
    }

	KW_UNIONTYPE() {
	    return this.getToken(HiveParser.KW_UNIONTYPE, 0);
	};

	LESSTHAN() {
	    return this.getToken(HiveParser.LESSTHAN, 0);
	};

	colTypeList() {
	    return this.getTypedRuleContext(ColTypeListContext,0);
	};

	GREATERTHAN() {
	    return this.getToken(HiveParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUnionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUnionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_setOperator;
    }

	KW_UNION() {
	    return this.getToken(HiveParser.KW_UNION, 0);
	};

	KW_ALL() {
	    return this.getToken(HiveParser.KW_ALL, 0);
	};

	KW_DISTINCT() {
	    return this.getToken(HiveParser.KW_DISTINCT, 0);
	};

	KW_INTERSECT() {
	    return this.getToken(HiveParser.KW_INTERSECT, 0);
	};

	KW_EXCEPT() {
	    return this.getToken(HiveParser.KW_EXCEPT, 0);
	};

	KW_MINUS() {
	    return this.getToken(HiveParser.KW_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSetOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSetOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSetOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryStatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_queryStatementExpression;
    }

	queryStatementExpressionBody() {
	    return this.getTypedRuleContext(QueryStatementExpressionBodyContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterQueryStatementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitQueryStatementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitQueryStatementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryStatementExpressionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_queryStatementExpressionBody;
    }

	fromStatement() {
	    return this.getTypedRuleContext(FromStatementContext,0);
	};

	regularBody() {
	    return this.getTypedRuleContext(RegularBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterQueryStatementExpressionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitQueryStatementExpressionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitQueryStatementExpressionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_withClause;
    }

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	cteStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CteStatementContext);
	    } else {
	        return this.getTypedRuleContext(CteStatementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWithClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWithClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_cteStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCteStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_fromStatement;
    }

	singleFromStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleFromStatementContext);
	    } else {
	        return this.getTypedRuleContext(SingleFromStatementContext,i);
	    }
	};

	setOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetOperatorContext);
	    } else {
	        return this.getTypedRuleContext(SetOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFromStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFromStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFromStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleFromStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_singleFromStatement;
    }

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BodyContext);
	    } else {
	        return this.getTypedRuleContext(BodyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSingleFromStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSingleFromStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSingleFromStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_regularBody;
    }

	insertClause() {
	    return this.getTypedRuleContext(InsertClauseContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRegularBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRegularBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRegularBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_atomSelectStatement;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAtomSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAtomSelectStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAtomSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectStatement;
    }

	atomSelectStatement() {
	    return this.getTypedRuleContext(AtomSelectStatementContext,0);
	};

	setOpSelectStatement() {
	    return this.getTypedRuleContext(SetOpSelectStatementContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetOpSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_setOpSelectStatement;
    }

	setOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetOperatorContext);
	    } else {
	        return this.getTypedRuleContext(SetOperatorContext,i);
	    }
	};

	atomSelectStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtomSelectStatementContext);
	    } else {
	        return this.getTypedRuleContext(AtomSelectStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSetOpSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSetOpSelectStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSetOpSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementWithCTEContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectStatementWithCTE;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectStatementWithCTE(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectStatementWithCTE(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectStatementWithCTE(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_body;
    }

	insertClause() {
	    return this.getTypedRuleContext(InsertClauseContext,0);
	};

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	lateralView() {
	    return this.getTypedRuleContext(LateralViewContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	window_clause() {
	    return this.getTypedRuleContext(Window_clauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_insertClause;
    }

	KW_INSERT() {
	    return this.getToken(HiveParser.KW_INSERT, 0);
	};

	KW_OVERWRITE() {
	    return this.getToken(HiveParser.KW_OVERWRITE, 0);
	};

	destination() {
	    return this.getTypedRuleContext(DestinationContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	KW_INTO() {
	    return this.getToken(HiveParser.KW_INTO, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnNameList() {
	    return this.getTypedRuleContext(ColumnNameListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterInsertClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitInsertClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitInsertClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestinationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_destination;
    }

	KW_DIRECTORY() {
	    return this.getToken(HiveParser.KW_DIRECTORY, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_LOCAL() {
	    return this.getToken(HiveParser.KW_LOCAL, 0);
	};

	tableRowFormat() {
	    return this.getTypedRuleContext(TableRowFormatContext,0);
	};

	tableFileFormat() {
	    return this.getTypedRuleContext(TableFileFormatContext,0);
	};

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	tableOrPartition() {
	    return this.getTypedRuleContext(TableOrPartitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDestination(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDestination(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDestination(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_limitClause;
    }

	KW_LIMIT() {
	    return this.getToken(HiveParser.KW_LIMIT, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.Number);
	    } else {
	        return this.getToken(HiveParser.Number, i);
	    }
	};


	COMMA() {
	    return this.getToken(HiveParser.COMMA, 0);
	};

	KW_OFFSET() {
	    return this.getToken(HiveParser.KW_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_deleteStatement;
    }

	KW_DELETE() {
	    return this.getToken(HiveParser.KW_DELETE, 0);
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDeleteStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDeleteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnAssignmentClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnAssignmentClause;
    }

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	EQUAL() {
	    return this.getToken(HiveParser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnAssignmentClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnAssignmentClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnAssignmentClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetColumnsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_setColumnsClause;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	columnAssignmentClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnAssignmentClauseContext);
	    } else {
	        return this.getTypedRuleContext(ColumnAssignmentClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSetColumnsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSetColumnsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSetColumnsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_updateStatement;
    }

	KW_UPDATE() {
	    return this.getToken(HiveParser.KW_UPDATE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	setColumnsClause() {
	    return this.getTypedRuleContext(SetColumnsClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUpdateStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUpdateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_sqlTransactionStatement;
    }

	startTransactionStatement() {
	    return this.getTypedRuleContext(StartTransactionStatementContext,0);
	};

	commitStatement() {
	    return this.getTypedRuleContext(CommitStatementContext,0);
	};

	rollbackStatement() {
	    return this.getTypedRuleContext(RollbackStatementContext,0);
	};

	setAutoCommitStatement() {
	    return this.getTypedRuleContext(SetAutoCommitStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSqlTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSqlTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSqlTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_startTransactionStatement;
    }

	KW_START() {
	    return this.getToken(HiveParser.KW_START, 0);
	};

	KW_TRANSACTION() {
	    return this.getToken(HiveParser.KW_TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterStartTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitStartTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitStartTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_transactionMode;
    }

	isolationLevel() {
	    return this.getTypedRuleContext(IsolationLevelContext,0);
	};

	transactionAccessMode() {
	    return this.getTypedRuleContext(TransactionAccessModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTransactionMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_transactionAccessMode;
    }

	KW_READ() {
	    return this.getToken(HiveParser.KW_READ, 0);
	};

	KW_ONLY() {
	    return this.getToken(HiveParser.KW_ONLY, 0);
	};

	KW_WRITE() {
	    return this.getToken(HiveParser.KW_WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTransactionAccessMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsolationLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_isolationLevel;
    }

	KW_ISOLATION() {
	    return this.getToken(HiveParser.KW_ISOLATION, 0);
	};

	KW_LEVEL() {
	    return this.getToken(HiveParser.KW_LEVEL, 0);
	};

	levelOfIsolation() {
	    return this.getTypedRuleContext(LevelOfIsolationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIsolationLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIsolationLevel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIsolationLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LevelOfIsolationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_levelOfIsolation;
    }

	KW_SNAPSHOT() {
	    return this.getToken(HiveParser.KW_SNAPSHOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLevelOfIsolation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLevelOfIsolation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLevelOfIsolation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_commitStatement;
    }

	KW_COMMIT() {
	    return this.getToken(HiveParser.KW_COMMIT, 0);
	};

	KW_WORK() {
	    return this.getToken(HiveParser.KW_WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCommitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCommitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCommitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollbackStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rollbackStatement;
    }

	KW_ROLLBACK() {
	    return this.getToken(HiveParser.KW_ROLLBACK, 0);
	};

	KW_WORK() {
	    return this.getToken(HiveParser.KW_WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRollbackStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRollbackStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRollbackStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetAutoCommitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_setAutoCommitStatement;
    }

	KW_SET() {
	    return this.getToken(HiveParser.KW_SET, 0);
	};

	KW_AUTOCOMMIT() {
	    return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
	};

	booleanValueTok() {
	    return this.getTypedRuleContext(BooleanValueTokContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSetAutoCommitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSetAutoCommitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSetAutoCommitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbortTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_abortTransactionStatement;
    }

	KW_ABORT() {
	    return this.getToken(HiveParser.KW_ABORT, 0);
	};

	KW_TRANSACTIONS() {
	    return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.Number);
	    } else {
	        return this.getToken(HiveParser.Number, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAbortTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAbortTransactionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAbortTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MergeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_mergeStatement;
    }

	KW_MERGE() {
	    return this.getToken(HiveParser.KW_MERGE, 0);
	};

	KW_INTO() {
	    return this.getToken(HiveParser.KW_INTO, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	KW_USING() {
	    return this.getToken(HiveParser.KW_USING, 0);
	};

	joinSourcePart() {
	    return this.getTypedRuleContext(JoinSourcePartContext,0);
	};

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	whenClauses() {
	    return this.getTypedRuleContext(WhenClausesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterMergeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitMergeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitMergeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_whenClauses;
    }

	whenMatchedAndClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenMatchedAndClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenMatchedAndClauseContext,i);
	    }
	};

	whenMatchedThenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenMatchedThenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenMatchedThenClauseContext,i);
	    }
	};

	whenNotMatchedClause() {
	    return this.getTypedRuleContext(WhenNotMatchedClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWhenClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWhenClauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWhenClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenNotMatchedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_whenNotMatchedClause;
    }

	KW_WHEN() {
	    return this.getToken(HiveParser.KW_WHEN, 0);
	};

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	KW_MATCHED() {
	    return this.getToken(HiveParser.KW_MATCHED, 0);
	};

	KW_THEN() {
	    return this.getToken(HiveParser.KW_THEN, 0);
	};

	KW_INSERT() {
	    return this.getToken(HiveParser.KW_INSERT, 0);
	};

	KW_VALUES() {
	    return this.getToken(HiveParser.KW_VALUES, 0);
	};

	valueRowConstructor() {
	    return this.getTypedRuleContext(ValueRowConstructorContext,0);
	};

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWhenNotMatchedClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWhenNotMatchedClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWhenNotMatchedClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenMatchedAndClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_whenMatchedAndClause;
    }

	KW_WHEN() {
	    return this.getToken(HiveParser.KW_WHEN, 0);
	};

	KW_MATCHED() {
	    return this.getToken(HiveParser.KW_MATCHED, 0);
	};

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KW_THEN() {
	    return this.getToken(HiveParser.KW_THEN, 0);
	};

	updateOrDelete() {
	    return this.getTypedRuleContext(UpdateOrDeleteContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWhenMatchedAndClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWhenMatchedAndClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWhenMatchedAndClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenMatchedThenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_whenMatchedThenClause;
    }

	KW_WHEN() {
	    return this.getToken(HiveParser.KW_WHEN, 0);
	};

	KW_MATCHED() {
	    return this.getToken(HiveParser.KW_MATCHED, 0);
	};

	KW_THEN() {
	    return this.getToken(HiveParser.KW_THEN, 0);
	};

	updateOrDelete() {
	    return this.getTypedRuleContext(UpdateOrDeleteContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWhenMatchedThenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWhenMatchedThenClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWhenMatchedThenClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateOrDeleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_updateOrDelete;
    }

	KW_UPDATE() {
	    return this.getToken(HiveParser.KW_UPDATE, 0);
	};

	setColumnsClause() {
	    return this.getTypedRuleContext(SetColumnsClauseContext,0);
	};

	KW_DELETE() {
	    return this.getToken(HiveParser.KW_DELETE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUpdateOrDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUpdateOrDelete(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUpdateOrDelete(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KillQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_killQueryStatement;
    }

	KW_KILL() {
	    return this.getToken(HiveParser.KW_KILL, 0);
	};

	KW_QUERY() {
	    return this.getToken(HiveParser.KW_QUERY, 0);
	};

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.StringLiteral);
	    } else {
	        return this.getToken(HiveParser.StringLiteral, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterKillQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitKillQueryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitKillQueryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectClause;
    }

	KW_SELECT() {
	    return this.getToken(HiveParser.KW_SELECT, 0);
	};

	QUERY_HINT() {
	    return this.getToken(HiveParser.QUERY_HINT, 0);
	};

	selectList() {
	    return this.getTypedRuleContext(SelectListContext,0);
	};

	KW_TRANSFORM() {
	    return this.getToken(HiveParser.KW_TRANSFORM, 0);
	};

	selectTrfmClause() {
	    return this.getTypedRuleContext(SelectTrfmClauseContext,0);
	};

	KW_ALL() {
	    return this.getToken(HiveParser.KW_ALL, 0);
	};

	KW_DISTINCT() {
	    return this.getToken(HiveParser.KW_DISTINCT, 0);
	};

	trfmClause() {
	    return this.getTypedRuleContext(TrfmClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectTrfmClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectTrfmClause;
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.LPAREN);
	    } else {
	        return this.getToken(HiveParser.LPAREN, i);
	    }
	};


	selectExpressionList() {
	    return this.getTypedRuleContext(SelectExpressionListContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.RPAREN);
	    } else {
	        return this.getToken(HiveParser.RPAREN, i);
	    }
	};


	KW_USING() {
	    return this.getToken(HiveParser.KW_USING, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	rowFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowFormatContext);
	    } else {
	        return this.getTypedRuleContext(RowFormatContext,i);
	    }
	};

	recordWriter() {
	    return this.getTypedRuleContext(RecordWriterContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	recordReader() {
	    return this.getTypedRuleContext(RecordReaderContext,0);
	};

	aliasList() {
	    return this.getTypedRuleContext(AliasListContext,0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectTrfmClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectTrfmClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectTrfmClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectItem;
    }

	tableAllColumns() {
	    return this.getTypedRuleContext(TableAllColumnsContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrfmClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_trfmClause;
    }

	KW_USING() {
	    return this.getToken(HiveParser.KW_USING, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_MAP() {
	    return this.getToken(HiveParser.KW_MAP, 0);
	};

	selectExpressionList() {
	    return this.getTypedRuleContext(SelectExpressionListContext,0);
	};

	KW_REDUCE() {
	    return this.getToken(HiveParser.KW_REDUCE, 0);
	};

	rowFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowFormatContext);
	    } else {
	        return this.getTypedRuleContext(RowFormatContext,i);
	    }
	};

	recordWriter() {
	    return this.getTypedRuleContext(RecordWriterContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	recordReader() {
	    return this.getTypedRuleContext(RecordReaderContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	aliasList() {
	    return this.getTypedRuleContext(AliasListContext,0);
	};

	columnNameTypeList() {
	    return this.getTypedRuleContext(ColumnNameTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTrfmClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTrfmClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTrfmClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectExpression;
    }

	tableAllColumns() {
	    return this.getTypedRuleContext(TableAllColumnsContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_selectExpressionList;
    }

	selectExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SelectExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSelectExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSelectExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSelectExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_clause;
    }

	KW_WINDOW() {
	    return this.getToken(HiveParser.KW_WINDOW, 0);
	};

	window_defn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_defnContext);
	    } else {
	        return this.getTypedRuleContext(Window_defnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_defn;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_defn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_defn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_specification;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	partitioningSpec() {
	    return this.getTypedRuleContext(PartitioningSpecContext,0);
	};

	window_frame() {
	    return this.getTypedRuleContext(Window_frameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_specification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_specification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_frameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_frame;
    }

	window_range_expression() {
	    return this.getTypedRuleContext(Window_range_expressionContext,0);
	};

	window_value_expression() {
	    return this.getTypedRuleContext(Window_value_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_frame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_frame(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_frame(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_range_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_range_expression;
    }

	KW_ROWS() {
	    return this.getToken(HiveParser.KW_ROWS, 0);
	};

	window_frame_start_boundary() {
	    return this.getTypedRuleContext(Window_frame_start_boundaryContext,0);
	};

	KW_BETWEEN() {
	    return this.getToken(HiveParser.KW_BETWEEN, 0);
	};

	window_frame_boundary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_frame_boundaryContext);
	    } else {
	        return this.getTypedRuleContext(Window_frame_boundaryContext,i);
	    }
	};

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_range_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_range_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_range_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_value_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_value_expression;
    }

	KW_RANGE() {
	    return this.getToken(HiveParser.KW_RANGE, 0);
	};

	window_frame_start_boundary() {
	    return this.getTypedRuleContext(Window_frame_start_boundaryContext,0);
	};

	KW_BETWEEN() {
	    return this.getToken(HiveParser.KW_BETWEEN, 0);
	};

	window_frame_boundary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_frame_boundaryContext);
	    } else {
	        return this.getTypedRuleContext(Window_frame_boundaryContext,i);
	    }
	};

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_value_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_value_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_value_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_frame_start_boundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_frame_start_boundary;
    }

	KW_UNBOUNDED() {
	    return this.getToken(HiveParser.KW_UNBOUNDED, 0);
	};

	KW_PRECEDING() {
	    return this.getToken(HiveParser.KW_PRECEDING, 0);
	};

	KW_CURRENT() {
	    return this.getToken(HiveParser.KW_CURRENT, 0);
	};

	KW_ROW() {
	    return this.getToken(HiveParser.KW_ROW, 0);
	};

	Number() {
	    return this.getToken(HiveParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_frame_start_boundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_frame_start_boundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_frame_start_boundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Window_frame_boundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_window_frame_boundary;
    }

	KW_UNBOUNDED() {
	    return this.getToken(HiveParser.KW_UNBOUNDED, 0);
	};

	KW_PRECEDING() {
	    return this.getToken(HiveParser.KW_PRECEDING, 0);
	};

	KW_FOLLOWING() {
	    return this.getToken(HiveParser.KW_FOLLOWING, 0);
	};

	KW_CURRENT() {
	    return this.getToken(HiveParser.KW_CURRENT, 0);
	};

	KW_ROW() {
	    return this.getToken(HiveParser.KW_ROW, 0);
	};

	Number() {
	    return this.getToken(HiveParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWindow_frame_boundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWindow_frame_boundary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWindow_frame_boundary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAllColumnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableAllColumns;
    }

	STAR() {
	    return this.getToken(HiveParser.STAR, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	DOT() {
	    return this.getToken(HiveParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableAllColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableAllColumns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableAllColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableOrColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableOrColumn;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableOrColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableOrColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableOrColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_aliasList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAliasList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAliasList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAliasList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_fromClause;
    }

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	fromSource() {
	    return this.getTypedRuleContext(FromSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFromClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_fromSource;
    }

	uniqueJoinToken() {
	    return this.getTypedRuleContext(UniqueJoinTokenContext,0);
	};

	uniqueJoinSource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniqueJoinSourceContext);
	    } else {
	        return this.getTypedRuleContext(UniqueJoinSourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	joinSource() {
	    return this.getTypedRuleContext(JoinSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFromSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFromSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFromSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomjoinSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_atomjoinSource;
    }

	tableSource() {
	    return this.getTypedRuleContext(TableSourceContext,0);
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	virtualTableSource() {
	    return this.getTypedRuleContext(VirtualTableSourceContext,0);
	};

	subQuerySource() {
	    return this.getTypedRuleContext(SubQuerySourceContext,0);
	};

	partitionedTableFunction() {
	    return this.getTypedRuleContext(PartitionedTableFunctionContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	joinSource() {
	    return this.getTypedRuleContext(JoinSourceContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAtomjoinSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAtomjoinSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAtomjoinSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_joinSource;
    }

	atomjoinSource() {
	    return this.getTypedRuleContext(AtomjoinSourceContext,0);
	};

	joinToken = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinTokenContext);
	    } else {
	        return this.getTypedRuleContext(JoinTokenContext,i);
	    }
	};

	joinSourcePart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinSourcePartContext);
	    } else {
	        return this.getTypedRuleContext(JoinSourcePartContext,i);
	    }
	};

	KW_ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_ON);
	    } else {
	        return this.getToken(HiveParser.KW_ON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KW_USING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_USING);
	    } else {
	        return this.getToken(HiveParser.KW_USING, i);
	    }
	};


	columnParenthesesList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnParenthesesListContext);
	    } else {
	        return this.getTypedRuleContext(ColumnParenthesesListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterJoinSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitJoinSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitJoinSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinSourcePartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_joinSourcePart;
    }

	tableSource() {
	    return this.getTypedRuleContext(TableSourceContext,0);
	};

	virtualTableSource() {
	    return this.getTypedRuleContext(VirtualTableSourceContext,0);
	};

	subQuerySource() {
	    return this.getTypedRuleContext(SubQuerySourceContext,0);
	};

	partitionedTableFunction() {
	    return this.getTypedRuleContext(PartitionedTableFunctionContext,0);
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterJoinSourcePart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitJoinSourcePart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitJoinSourcePart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueJoinSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_uniqueJoinSource;
    }

	uniqueJoinTableSource() {
	    return this.getTypedRuleContext(UniqueJoinTableSourceContext,0);
	};

	uniqueJoinExpr() {
	    return this.getTypedRuleContext(UniqueJoinExprContext,0);
	};

	KW_PRESERVE() {
	    return this.getToken(HiveParser.KW_PRESERVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUniqueJoinSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUniqueJoinSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUniqueJoinSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueJoinExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_uniqueJoinExpr;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUniqueJoinExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUniqueJoinExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUniqueJoinExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueJoinTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_uniqueJoinToken;
    }

	KW_UNIQUEJOIN() {
	    return this.getToken(HiveParser.KW_UNIQUEJOIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUniqueJoinToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUniqueJoinToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUniqueJoinToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_joinToken;
    }

	KW_JOIN() {
	    return this.getToken(HiveParser.KW_JOIN, 0);
	};

	KW_INNER() {
	    return this.getToken(HiveParser.KW_INNER, 0);
	};

	COMMA() {
	    return this.getToken(HiveParser.COMMA, 0);
	};

	KW_CROSS() {
	    return this.getToken(HiveParser.KW_CROSS, 0);
	};

	KW_LEFT() {
	    return this.getToken(HiveParser.KW_LEFT, 0);
	};

	KW_OUTER() {
	    return this.getToken(HiveParser.KW_OUTER, 0);
	};

	KW_RIGHT() {
	    return this.getToken(HiveParser.KW_RIGHT, 0);
	};

	KW_FULL() {
	    return this.getToken(HiveParser.KW_FULL, 0);
	};

	KW_SEMI() {
	    return this.getToken(HiveParser.KW_SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterJoinToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitJoinToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitJoinToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LateralViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_lateralView;
    }

	KW_LATERAL() {
	    return this.getToken(HiveParser.KW_LATERAL, 0);
	};

	KW_VIEW() {
	    return this.getToken(HiveParser.KW_VIEW, 0);
	};

	KW_OUTER() {
	    return this.getToken(HiveParser.KW_OUTER, 0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.LPAREN);
	    } else {
	        return this.getToken(HiveParser.LPAREN, i);
	    }
	};


	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.RPAREN);
	    } else {
	        return this.getToken(HiveParser.RPAREN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterLateralView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitLateralView(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitLateralView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableBucketSampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableBucketSample;
    }

	KW_TABLESAMPLE() {
	    return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	KW_BUCKET() {
	    return this.getToken(HiveParser.KW_BUCKET, 0);
	};

	Number = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.Number);
	    } else {
	        return this.getToken(HiveParser.Number, i);
	    }
	};


	KW_OUT() {
	    return this.getToken(HiveParser.KW_OUT, 0);
	};

	KW_OF() {
	    return this.getToken(HiveParser.KW_OF, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableBucketSample(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableBucketSample(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableBucketSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SplitSampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_splitSample;
    }

	KW_TABLESAMPLE() {
	    return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	Number() {
	    return this.getToken(HiveParser.Number, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_PERCENT() {
	    return this.getToken(HiveParser.KW_PERCENT, 0);
	};

	KW_ROWS() {
	    return this.getToken(HiveParser.KW_ROWS, 0);
	};

	ByteLengthLiteral() {
	    return this.getToken(HiveParser.ByteLengthLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSplitSample(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSplitSample(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSplitSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableSample;
    }

	tableBucketSample() {
	    return this.getTypedRuleContext(TableBucketSampleContext,0);
	};

	splitSample() {
	    return this.getTypedRuleContext(SplitSampleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableSample(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableSample(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableSource;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	tableProperties() {
	    return this.getTypedRuleContext(TablePropertiesContext,0);
	};

	tableSample() {
	    return this.getTypedRuleContext(TableSampleContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueJoinTableSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_uniqueJoinTableSource;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	tableSample() {
	    return this.getTypedRuleContext(TableSampleContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterUniqueJoinTableSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitUniqueJoinTableSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitUniqueJoinTableSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(HiveParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_viewName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(HiveParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterViewName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitViewName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitViewName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubQuerySourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_subQuerySource;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	queryStatementExpression() {
	    return this.getTypedRuleContext(QueryStatementExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSubQuerySource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSubQuerySource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSubQuerySource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitioningSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partitioningSpec;
    }

	partitionByClause() {
	    return this.getTypedRuleContext(PartitionByClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	distributeByClause() {
	    return this.getTypedRuleContext(DistributeByClauseContext,0);
	};

	sortByClause() {
	    return this.getTypedRuleContext(SortByClauseContext,0);
	};

	clusterByClause() {
	    return this.getTypedRuleContext(ClusterByClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartitioningSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartitioningSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartitioningSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionTableFunctionSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partitionTableFunctionSource;
    }

	subQuerySource() {
	    return this.getTypedRuleContext(SubQuerySourceContext,0);
	};

	tableSource() {
	    return this.getTypedRuleContext(TableSourceContext,0);
	};

	partitionedTableFunction() {
	    return this.getTypedRuleContext(PartitionedTableFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartitionTableFunctionSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartitionTableFunctionSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartitionTableFunctionSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionedTableFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partitionedTableFunction;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.LPAREN);
	    } else {
	        return this.getToken(HiveParser.LPAREN, i);
	    }
	};


	KW_ON() {
	    return this.getToken(HiveParser.KW_ON, 0);
	};

	partitionTableFunctionSource() {
	    return this.getTypedRuleContext(PartitionTableFunctionSourceContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.RPAREN);
	    } else {
	        return this.getToken(HiveParser.RPAREN, i);
	    }
	};


	partitioningSpec() {
	    return this.getTypedRuleContext(PartitioningSpecContext,0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.Identifier);
	    } else {
	        return this.getToken(HiveParser.Identifier, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartitionedTableFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartitionedTableFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartitionedTableFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_whereClause;
    }

	KW_WHERE() {
	    return this.getToken(HiveParser.KW_WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SearchConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_searchCondition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSearchCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSearchCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSearchCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_valuesClause;
    }

	KW_VALUES() {
	    return this.getToken(HiveParser.KW_VALUES, 0);
	};

	valuesTableConstructor() {
	    return this.getTypedRuleContext(ValuesTableConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterValuesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitValuesClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitValuesClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesTableConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_valuesTableConstructor;
    }

	valueRowConstructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueRowConstructorContext);
	    } else {
	        return this.getTypedRuleContext(ValueRowConstructorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterValuesTableConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitValuesTableConstructor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitValuesTableConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueRowConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_valueRowConstructor;
    }

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterValueRowConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitValueRowConstructor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitValueRowConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VirtualTableSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_virtualTableSource;
    }

	KW_TABLE() {
	    return this.getToken(HiveParser.KW_TABLE, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.LPAREN);
	    } else {
	        return this.getToken(HiveParser.LPAREN, i);
	    }
	};


	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.RPAREN);
	    } else {
	        return this.getToken(HiveParser.RPAREN, i);
	    }
	};


	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterVirtualTableSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitVirtualTableSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitVirtualTableSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_groupByClause;
    }

	KW_GROUP() {
	    return this.getToken(HiveParser.KW_GROUP, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	groupby_expression() {
	    return this.getTypedRuleContext(Groupby_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Groupby_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_groupby_expression;
    }

	rollupStandard() {
	    return this.getTypedRuleContext(RollupStandardContext,0);
	};

	rollupOldSyntax() {
	    return this.getTypedRuleContext(RollupOldSyntaxContext,0);
	};

	groupByEmpty() {
	    return this.getTypedRuleContext(GroupByEmptyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGroupby_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGroupby_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGroupby_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_groupByEmpty;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGroupByEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGroupByEmpty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGroupByEmpty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollupStandardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rollupStandard;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_ROLLUP() {
	    return this.getToken(HiveParser.KW_ROLLUP, 0);
	};

	KW_CUBE() {
	    return this.getToken(HiveParser.KW_CUBE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRollupStandard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRollupStandard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRollupStandard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RollupOldSyntaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_rollupOldSyntax;
    }

	expressionsNotInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsNotInParenthesisContext,0);
	};

	KW_WITH() {
	    return this.getToken(HiveParser.KW_WITH, 0);
	};

	KW_ROLLUP() {
	    return this.getToken(HiveParser.KW_ROLLUP, 0);
	};

	KW_CUBE() {
	    return this.getToken(HiveParser.KW_CUBE, 0);
	};

	KW_GROUPING() {
	    return this.getToken(HiveParser.KW_GROUPING, 0);
	};

	KW_SETS() {
	    return this.getToken(HiveParser.KW_SETS, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	groupingSetExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetExpressionContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterRollupOldSyntax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitRollupOldSyntax(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitRollupOldSyntax(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingSetExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_groupingSetExpression;
    }

	groupingSetExpressionMultiple() {
	    return this.getTypedRuleContext(GroupingSetExpressionMultipleContext,0);
	};

	groupingExpressionSingle() {
	    return this.getTypedRuleContext(GroupingExpressionSingleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGroupingSetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGroupingSetExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGroupingSetExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingSetExpressionMultipleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_groupingSetExpressionMultiple;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGroupingSetExpressionMultiple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGroupingSetExpressionMultiple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGroupingSetExpressionMultiple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingExpressionSingleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_groupingExpressionSingle;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterGroupingExpressionSingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitGroupingExpressionSingle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitGroupingExpressionSingle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_havingClause;
    }

	KW_HAVING() {
	    return this.getToken(HiveParser.KW_HAVING, 0);
	};

	havingCondition() {
	    return this.getTypedRuleContext(HavingConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitHavingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_havingCondition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterHavingCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitHavingCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitHavingCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsInParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_expressionsInParenthesis;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	expressionsNotInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsNotInParenthesisContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExpressionsInParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExpressionsInParenthesis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExpressionsInParenthesis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsNotInParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_expressionsNotInParenthesis;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionPart() {
	    return this.getTypedRuleContext(ExpressionPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExpressionsNotInParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExpressionsNotInParenthesis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExpressionsNotInParenthesis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_expressionPart;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExpressionPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExpressionPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExpressionPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_expressions;
    }

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	expressionsNotInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsNotInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExpressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExpressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnRefOrderInParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnRefOrderInParenthesis;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	columnRefOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnRefOrderContext);
	    } else {
	        return this.getTypedRuleContext(ColumnRefOrderContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnRefOrderInParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnRefOrderInParenthesis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnRefOrderInParenthesis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnRefOrderNotInParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_columnRefOrderNotInParenthesis;
    }

	columnRefOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnRefOrderContext);
	    } else {
	        return this.getTypedRuleContext(ColumnRefOrderContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterColumnRefOrderNotInParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitColumnRefOrderNotInParenthesis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitColumnRefOrderNotInParenthesis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_orderByClause;
    }

	KW_ORDER() {
	    return this.getToken(HiveParser.KW_ORDER, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	columnRefOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnRefOrderContext);
	    } else {
	        return this.getTypedRuleContext(ColumnRefOrderContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClusterByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_clusterByClause;
    }

	KW_CLUSTER() {
	    return this.getToken(HiveParser.KW_CLUSTER, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterClusterByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitClusterByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitClusterByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partitionByClause;
    }

	KW_PARTITION() {
	    return this.getToken(HiveParser.KW_PARTITION, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartitionByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartitionByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartitionByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DistributeByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_distributeByClause;
    }

	KW_DISTRIBUTE() {
	    return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDistributeByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDistributeByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDistributeByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_sortByClause;
    }

	KW_SORT() {
	    return this.getToken(HiveParser.KW_SORT, 0);
	};

	KW_BY() {
	    return this.getToken(HiveParser.KW_BY, 0);
	};

	columnRefOrderInParenthesis() {
	    return this.getTypedRuleContext(ColumnRefOrderInParenthesisContext,0);
	};

	columnRefOrderNotInParenthesis() {
	    return this.getTypedRuleContext(ColumnRefOrderNotInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSortByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSortByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSortByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_function_;
    }

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	STAR() {
	    return this.getToken(HiveParser.STAR, 0);
	};

	KW_OVER() {
	    return this.getToken(HiveParser.KW_OVER, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	selectExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SelectExpressionContext,i);
	    }
	};

	KW_DISTINCT() {
	    return this.getToken(HiveParser.KW_DISTINCT, 0);
	};

	KW_ALL() {
	    return this.getToken(HiveParser.KW_ALL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFunction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFunction_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFunction_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_functionName;
    }

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	sql11ReservedKeywordsUsedAsFunctionName() {
	    return this.getTypedRuleContext(Sql11ReservedKeywordsUsedAsFunctionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFunctionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_castExpression;
    }

	KW_CAST() {
	    return this.getToken(HiveParser.KW_CAST, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KW_AS() {
	    return this.getToken(HiveParser.KW_AS, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_caseExpression;
    }

	KW_CASE() {
	    return this.getToken(HiveParser.KW_CASE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KW_END() {
	    return this.getToken(HiveParser.KW_END, 0);
	};

	KW_WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_WHEN);
	    } else {
	        return this.getToken(HiveParser.KW_WHEN, i);
	    }
	};


	KW_THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_THEN);
	    } else {
	        return this.getToken(HiveParser.KW_THEN, i);
	    }
	};


	KW_ELSE() {
	    return this.getToken(HiveParser.KW_ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_whenExpression;
    }

	KW_CASE() {
	    return this.getToken(HiveParser.KW_CASE, 0);
	};

	KW_END() {
	    return this.getToken(HiveParser.KW_END, 0);
	};

	KW_WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_WHEN);
	    } else {
	        return this.getToken(HiveParser.KW_WHEN, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KW_THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.KW_THEN);
	    } else {
	        return this.getToken(HiveParser.KW_THEN, i);
	    }
	};


	KW_ELSE() {
	    return this.getToken(HiveParser.KW_ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterWhenExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitWhenExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitWhenExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_floorExpression;
    }

	KW_FLOOR() {
	    return this.getToken(HiveParser.KW_FLOOR, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	floorDateQualifiers() {
	    return this.getTypedRuleContext(FloorDateQualifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFloorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFloorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFloorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloorDateQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_floorDateQualifiers;
    }

	KW_YEAR() {
	    return this.getToken(HiveParser.KW_YEAR, 0);
	};

	KW_QUARTER() {
	    return this.getToken(HiveParser.KW_QUARTER, 0);
	};

	KW_MONTH() {
	    return this.getToken(HiveParser.KW_MONTH, 0);
	};

	KW_WEEK() {
	    return this.getToken(HiveParser.KW_WEEK, 0);
	};

	KW_DAY() {
	    return this.getToken(HiveParser.KW_DAY, 0);
	};

	KW_HOUR() {
	    return this.getToken(HiveParser.KW_HOUR, 0);
	};

	KW_MINUTE() {
	    return this.getToken(HiveParser.KW_MINUTE, 0);
	};

	KW_SECOND() {
	    return this.getToken(HiveParser.KW_SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFloorDateQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFloorDateQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFloorDateQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_extractExpression;
    }

	KW_EXTRACT() {
	    return this.getToken(HiveParser.KW_EXTRACT, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	timeQualifiers() {
	    return this.getTypedRuleContext(TimeQualifiersContext,0);
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExtractExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExtractExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_timeQualifiers;
    }

	KW_YEAR() {
	    return this.getToken(HiveParser.KW_YEAR, 0);
	};

	KW_QUARTER() {
	    return this.getToken(HiveParser.KW_QUARTER, 0);
	};

	KW_MONTH() {
	    return this.getToken(HiveParser.KW_MONTH, 0);
	};

	KW_WEEK() {
	    return this.getToken(HiveParser.KW_WEEK, 0);
	};

	KW_DAY() {
	    return this.getToken(HiveParser.KW_DAY, 0);
	};

	KW_DOW() {
	    return this.getToken(HiveParser.KW_DOW, 0);
	};

	KW_HOUR() {
	    return this.getToken(HiveParser.KW_HOUR, 0);
	};

	KW_MINUTE() {
	    return this.getToken(HiveParser.KW_MINUTE, 0);
	};

	KW_SECOND() {
	    return this.getToken(HiveParser.KW_SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTimeQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTimeQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTimeQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_constant;
    }

	intervalLiteral() {
	    return this.getTypedRuleContext(IntervalLiteralContext,0);
	};

	Number() {
	    return this.getToken(HiveParser.Number, 0);
	};

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timestampLiteral() {
	    return this.getTypedRuleContext(TimestampLiteralContext,0);
	};

	timestampLocalTZLiteral() {
	    return this.getTypedRuleContext(TimestampLocalTZLiteralContext,0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	stringLiteralSequence() {
	    return this.getTypedRuleContext(StringLiteralSequenceContext,0);
	};

	IntegralLiteral() {
	    return this.getToken(HiveParser.IntegralLiteral, 0);
	};

	NumberLiteral() {
	    return this.getToken(HiveParser.NumberLiteral, 0);
	};

	charSetStringLiteral() {
	    return this.getTypedRuleContext(CharSetStringLiteralContext,0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	KW_NULL() {
	    return this.getToken(HiveParser.KW_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringLiteralSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_stringLiteralSequence;
    }

	StringLiteral = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.StringLiteral);
	    } else {
	        return this.getToken(HiveParser.StringLiteral, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterStringLiteralSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitStringLiteralSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitStringLiteralSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharSetStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_charSetStringLiteral;
    }

	CharSetName() {
	    return this.getToken(HiveParser.CharSetName, 0);
	};

	CharSetLiteral() {
	    return this.getToken(HiveParser.CharSetLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterCharSetStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitCharSetStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitCharSetStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dateLiteral;
    }

	KW_DATE() {
	    return this.getToken(HiveParser.KW_DATE, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_CURRENT_DATE() {
	    return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDateLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDateLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimestampLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_timestampLiteral;
    }

	KW_TIMESTAMP() {
	    return this.getToken(HiveParser.KW_TIMESTAMP, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	KW_CURRENT_TIMESTAMP() {
	    return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTimestampLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTimestampLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTimestampLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimestampLocalTZLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_timestampLocalTZLiteral;
    }

	KW_TIMESTAMPLOCALTZ() {
	    return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTimestampLocalTZLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTimestampLocalTZLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTimestampLocalTZLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_intervalValue;
    }

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	Number() {
	    return this.getToken(HiveParser.Number, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_intervalLiteral;
    }

	intervalValue() {
	    return this.getTypedRuleContext(IntervalValueContext,0);
	};

	intervalQualifiers() {
	    return this.getTypedRuleContext(IntervalQualifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIntervalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIntervalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_intervalExpression;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	intervalValue() {
	    return this.getTypedRuleContext(IntervalValueContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	intervalQualifiers() {
	    return this.getTypedRuleContext(IntervalQualifiersContext,0);
	};

	KW_INTERVAL() {
	    return this.getToken(HiveParser.KW_INTERVAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIntervalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIntervalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIntervalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_intervalQualifiers;
    }

	KW_YEAR() {
	    return this.getToken(HiveParser.KW_YEAR, 0);
	};

	KW_TO() {
	    return this.getToken(HiveParser.KW_TO, 0);
	};

	KW_MONTH() {
	    return this.getToken(HiveParser.KW_MONTH, 0);
	};

	KW_DAY() {
	    return this.getToken(HiveParser.KW_DAY, 0);
	};

	KW_SECOND() {
	    return this.getToken(HiveParser.KW_SECOND, 0);
	};

	KW_HOUR() {
	    return this.getToken(HiveParser.KW_HOUR, 0);
	};

	KW_MINUTE() {
	    return this.getToken(HiveParser.KW_MINUTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIntervalQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIntervalQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIntervalQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_atomExpression;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	intervalExpression() {
	    return this.getTypedRuleContext(IntervalExpressionContext,0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	extractExpression() {
	    return this.getTypedRuleContext(ExtractExpressionContext,0);
	};

	floorExpression() {
	    return this.getTypedRuleContext(FloorExpressionContext,0);
	};

	caseExpression() {
	    return this.getTypedRuleContext(CaseExpressionContext,0);
	};

	whenExpression() {
	    return this.getTypedRuleContext(WhenExpressionContext,0);
	};

	subQueryExpression() {
	    return this.getTypedRuleContext(SubQueryExpressionContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	tableOrColumn() {
	    return this.getTypedRuleContext(TableOrColumnContext,0);
	};

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterAtomExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitAtomExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitAtomExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceUnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceUnaryOperator;
    }

	PLUS() {
	    return this.getToken(HiveParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(HiveParser.MINUS, 0);
	};

	TILDE() {
	    return this.getToken(HiveParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceUnaryOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceUnaryOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_isCondition;
    }

	KW_NULL() {
	    return this.getToken(HiveParser.KW_NULL, 0);
	};

	KW_TRUE() {
	    return this.getToken(HiveParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(HiveParser.KW_FALSE, 0);
	};

	KW_DISTINCT() {
	    return this.getToken(HiveParser.KW_DISTINCT, 0);
	};

	KW_FROM() {
	    return this.getToken(HiveParser.KW_FROM, 0);
	};

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIsCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIsCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIsCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceBitwiseXorOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceBitwiseXorOperator;
    }

	BITWISEXOR() {
	    return this.getToken(HiveParser.BITWISEXOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceBitwiseXorOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceBitwiseXorOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceBitwiseXorOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceStarOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceStarOperator;
    }

	STAR() {
	    return this.getToken(HiveParser.STAR, 0);
	};

	DIVIDE() {
	    return this.getToken(HiveParser.DIVIDE, 0);
	};

	MOD() {
	    return this.getToken(HiveParser.MOD, 0);
	};

	DIV() {
	    return this.getToken(HiveParser.DIV, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceStarOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceStarOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceStarOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedencePlusOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedencePlusOperator;
    }

	PLUS() {
	    return this.getToken(HiveParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(HiveParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedencePlusOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedencePlusOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedencePlusOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceConcatenateOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceConcatenateOperator;
    }

	CONCATENATE() {
	    return this.getToken(HiveParser.CONCATENATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceConcatenateOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceConcatenateOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceConcatenateOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceAmpersandOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceAmpersandOperator;
    }

	AMPERSAND() {
	    return this.getToken(HiveParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceAmpersandOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceAmpersandOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceAmpersandOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceBitwiseOrOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceBitwiseOrOperator;
    }

	BITWISEOR() {
	    return this.getToken(HiveParser.BITWISEOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceBitwiseOrOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceBitwiseOrOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceBitwiseOrOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceRegexpOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceRegexpOperator;
    }

	KW_LIKE() {
	    return this.getToken(HiveParser.KW_LIKE, 0);
	};

	KW_RLIKE() {
	    return this.getToken(HiveParser.KW_RLIKE, 0);
	};

	KW_REGEXP() {
	    return this.getToken(HiveParser.KW_REGEXP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceRegexpOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceRegexpOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceRegexpOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceComparisonOperator;
    }

	LESSTHANOREQUALTO() {
	    return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
	};

	LESSTHAN() {
	    return this.getToken(HiveParser.LESSTHAN, 0);
	};

	GREATERTHANOREQUALTO() {
	    return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
	};

	GREATERTHAN() {
	    return this.getToken(HiveParser.GREATERTHAN, 0);
	};

	EQUAL() {
	    return this.getToken(HiveParser.EQUAL, 0);
	};

	EQUAL_NS() {
	    return this.getToken(HiveParser.EQUAL_NS, 0);
	};

	NOTEQUAL() {
	    return this.getToken(HiveParser.NOTEQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceComparisonOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceComparisonOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceNotOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceNotOperator;
    }

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceNotOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceNotOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceNotOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceLogicOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceLogicOperator;
    }

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	KW_OR() {
	    return this.getToken(HiveParser.KW_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceLogicOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceLogicOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceLogicOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_expression;
    }

	atomExpression() {
	    return this.getTypedRuleContext(AtomExpressionContext,0);
	};

	LSQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.LSQUARE);
	    } else {
	        return this.getToken(HiveParser.LSQUARE, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RSQUARE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.RSQUARE);
	    } else {
	        return this.getToken(HiveParser.RSQUARE, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.DOT);
	    } else {
	        return this.getToken(HiveParser.DOT, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	precedenceUnaryOperator() {
	    return this.getTypedRuleContext(PrecedenceUnaryOperatorContext,0);
	};

	KW_EXISTS() {
	    return this.getToken(HiveParser.KW_EXISTS, 0);
	};

	subQueryExpression() {
	    return this.getTypedRuleContext(SubQueryExpressionContext,0);
	};

	precedenceNotOperator() {
	    return this.getTypedRuleContext(PrecedenceNotOperatorContext,0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	precedenceBitwiseXorOperator() {
	    return this.getTypedRuleContext(PrecedenceBitwiseXorOperatorContext,0);
	};

	precedenceStarOperator() {
	    return this.getTypedRuleContext(PrecedenceStarOperatorContext,0);
	};

	precedencePlusOperator() {
	    return this.getTypedRuleContext(PrecedencePlusOperatorContext,0);
	};

	precedenceConcatenateOperator() {
	    return this.getTypedRuleContext(PrecedenceConcatenateOperatorContext,0);
	};

	precedenceAmpersandOperator() {
	    return this.getTypedRuleContext(PrecedenceAmpersandOperatorContext,0);
	};

	precedenceBitwiseOrOperator() {
	    return this.getTypedRuleContext(PrecedenceBitwiseOrOperatorContext,0);
	};

	precedenceComparisonOperator() {
	    return this.getTypedRuleContext(PrecedenceComparisonOperatorContext,0);
	};

	precedenceRegexpOperator() {
	    return this.getTypedRuleContext(PrecedenceRegexpOperatorContext,0);
	};

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	KW_BETWEEN() {
	    return this.getToken(HiveParser.KW_BETWEEN, 0);
	};

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	precedenceLogicOperator() {
	    return this.getTypedRuleContext(PrecedenceLogicOperatorContext,0);
	};

	KW_IS() {
	    return this.getToken(HiveParser.KW_IS, 0);
	};

	isCondition() {
	    return this.getTypedRuleContext(IsConditionContext,0);
	};

	KW_LIKE() {
	    return this.getToken(HiveParser.KW_LIKE, 0);
	};

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	KW_ANY() {
	    return this.getToken(HiveParser.KW_ANY, 0);
	};

	KW_ALL() {
	    return this.getToken(HiveParser.KW_ALL, 0);
	};

	KW_IN() {
	    return this.getToken(HiveParser.KW_IN, 0);
	};

	precedenceSimilarExpressionIn() {
	    return this.getTypedRuleContext(PrecedenceSimilarExpressionInContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecedenceSimilarExpressionInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionIn;
    }

	subQueryExpression() {
	    return this.getTypedRuleContext(SubQueryExpressionContext,0);
	};

	expressionsInParenthesis() {
	    return this.getTypedRuleContext(ExpressionsInParenthesisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrecedenceSimilarExpressionIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrecedenceSimilarExpressionIn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrecedenceSimilarExpressionIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_subQueryExpression;
    }

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSubQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSubQueryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSubQueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_booleanValue;
    }

	KW_TRUE() {
	    return this.getToken(HiveParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(HiveParser.KW_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterBooleanValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitBooleanValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitBooleanValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanValueTokContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_booleanValueTok;
    }

	KW_TRUE() {
	    return this.getToken(HiveParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(HiveParser.KW_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterBooleanValueTok(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitBooleanValueTok(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitBooleanValueTok(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableOrPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_tableOrPartition;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterTableOrPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitTableOrPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitTableOrPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partitionSpec;
    }

	KW_PARTITION() {
	    return this.getToken(HiveParser.KW_PARTITION, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	partitionVal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionValContext);
	    } else {
	        return this.getTypedRuleContext(PartitionValContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartitionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartitionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartitionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_partitionVal;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL() {
	    return this.getToken(HiveParser.EQUAL, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPartitionVal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPartitionVal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPartitionVal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPartitionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropPartitionSpec;
    }

	KW_PARTITION() {
	    return this.getToken(HiveParser.KW_PARTITION, 0);
	};

	LPAREN() {
	    return this.getToken(HiveParser.LPAREN, 0);
	};

	dropPartitionVal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropPartitionValContext);
	    } else {
	        return this.getTypedRuleContext(DropPartitionValContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(HiveParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(HiveParser.COMMA);
	    } else {
	        return this.getToken(HiveParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropPartitionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropPartitionSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropPartitionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPartitionValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropPartitionVal;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dropPartitionOperator() {
	    return this.getTypedRuleContext(DropPartitionOperatorContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropPartitionVal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropPartitionVal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropPartitionVal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropPartitionOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_dropPartitionOperator;
    }

	EQUAL() {
	    return this.getToken(HiveParser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(HiveParser.NOTEQUAL, 0);
	};

	LESSTHANOREQUALTO() {
	    return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
	};

	LESSTHAN() {
	    return this.getToken(HiveParser.LESSTHAN, 0);
	};

	GREATERTHANOREQUALTO() {
	    return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
	};

	GREATERTHAN() {
	    return this.getToken(HiveParser.GREATERTHAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDropPartitionOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDropPartitionOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDropPartitionOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SysFuncNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_sysFuncNames;
    }

	KW_AND() {
	    return this.getToken(HiveParser.KW_AND, 0);
	};

	KW_OR() {
	    return this.getToken(HiveParser.KW_OR, 0);
	};

	KW_NOT() {
	    return this.getToken(HiveParser.KW_NOT, 0);
	};

	KW_LIKE() {
	    return this.getToken(HiveParser.KW_LIKE, 0);
	};

	KW_IF() {
	    return this.getToken(HiveParser.KW_IF, 0);
	};

	KW_CASE() {
	    return this.getToken(HiveParser.KW_CASE, 0);
	};

	KW_WHEN() {
	    return this.getToken(HiveParser.KW_WHEN, 0);
	};

	KW_FLOOR() {
	    return this.getToken(HiveParser.KW_FLOOR, 0);
	};

	KW_TINYINT() {
	    return this.getToken(HiveParser.KW_TINYINT, 0);
	};

	KW_SMALLINT() {
	    return this.getToken(HiveParser.KW_SMALLINT, 0);
	};

	KW_INT() {
	    return this.getToken(HiveParser.KW_INT, 0);
	};

	KW_BIGINT() {
	    return this.getToken(HiveParser.KW_BIGINT, 0);
	};

	KW_FLOAT() {
	    return this.getToken(HiveParser.KW_FLOAT, 0);
	};

	KW_DOUBLE() {
	    return this.getToken(HiveParser.KW_DOUBLE, 0);
	};

	KW_BOOLEAN() {
	    return this.getToken(HiveParser.KW_BOOLEAN, 0);
	};

	KW_STRING() {
	    return this.getToken(HiveParser.KW_STRING, 0);
	};

	KW_BINARY() {
	    return this.getToken(HiveParser.KW_BINARY, 0);
	};

	KW_ARRAY() {
	    return this.getToken(HiveParser.KW_ARRAY, 0);
	};

	KW_MAP() {
	    return this.getToken(HiveParser.KW_MAP, 0);
	};

	KW_STRUCT() {
	    return this.getToken(HiveParser.KW_STRUCT, 0);
	};

	KW_UNIONTYPE() {
	    return this.getToken(HiveParser.KW_UNIONTYPE, 0);
	};

	EQUAL() {
	    return this.getToken(HiveParser.EQUAL, 0);
	};

	EQUAL_NS() {
	    return this.getToken(HiveParser.EQUAL_NS, 0);
	};

	NOTEQUAL() {
	    return this.getToken(HiveParser.NOTEQUAL, 0);
	};

	LESSTHANOREQUALTO() {
	    return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
	};

	LESSTHAN() {
	    return this.getToken(HiveParser.LESSTHAN, 0);
	};

	GREATERTHANOREQUALTO() {
	    return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
	};

	GREATERTHAN() {
	    return this.getToken(HiveParser.GREATERTHAN, 0);
	};

	DIVIDE() {
	    return this.getToken(HiveParser.DIVIDE, 0);
	};

	PLUS() {
	    return this.getToken(HiveParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(HiveParser.MINUS, 0);
	};

	STAR() {
	    return this.getToken(HiveParser.STAR, 0);
	};

	MOD() {
	    return this.getToken(HiveParser.MOD, 0);
	};

	DIV() {
	    return this.getToken(HiveParser.DIV, 0);
	};

	AMPERSAND() {
	    return this.getToken(HiveParser.AMPERSAND, 0);
	};

	TILDE() {
	    return this.getToken(HiveParser.TILDE, 0);
	};

	BITWISEOR() {
	    return this.getToken(HiveParser.BITWISEOR, 0);
	};

	BITWISEXOR() {
	    return this.getToken(HiveParser.BITWISEXOR, 0);
	};

	KW_RLIKE() {
	    return this.getToken(HiveParser.KW_RLIKE, 0);
	};

	KW_REGEXP() {
	    return this.getToken(HiveParser.KW_REGEXP, 0);
	};

	KW_IN() {
	    return this.getToken(HiveParser.KW_IN, 0);
	};

	KW_BETWEEN() {
	    return this.getToken(HiveParser.KW_BETWEEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSysFuncNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSysFuncNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSysFuncNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescFuncNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_descFuncNames;
    }

	sysFuncNames() {
	    return this.getTypedRuleContext(SysFuncNamesContext,0);
	};

	StringLiteral() {
	    return this.getToken(HiveParser.StringLiteral, 0);
	};

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterDescFuncNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitDescFuncNames(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitDescFuncNames(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(HiveParser.Identifier, 0);
	};

	nonReserved() {
	    return this.getTypedRuleContext(NonReservedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_functionIdentifier;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(HiveParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterFunctionIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitFunctionIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitFunctionIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrincipalIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_principalIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	QuotedIdentifier() {
	    return this.getToken(HiveParser.QuotedIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterPrincipalIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitPrincipalIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitPrincipalIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_nonReserved;
    }

	KW_ABORT() {
	    return this.getToken(HiveParser.KW_ABORT, 0);
	};

	KW_ADD() {
	    return this.getToken(HiveParser.KW_ADD, 0);
	};

	KW_ADMIN() {
	    return this.getToken(HiveParser.KW_ADMIN, 0);
	};

	KW_AFTER() {
	    return this.getToken(HiveParser.KW_AFTER, 0);
	};

	KW_ANALYZE() {
	    return this.getToken(HiveParser.KW_ANALYZE, 0);
	};

	KW_ARCHIVE() {
	    return this.getToken(HiveParser.KW_ARCHIVE, 0);
	};

	KW_ASC() {
	    return this.getToken(HiveParser.KW_ASC, 0);
	};

	KW_BEFORE() {
	    return this.getToken(HiveParser.KW_BEFORE, 0);
	};

	KW_BUCKET() {
	    return this.getToken(HiveParser.KW_BUCKET, 0);
	};

	KW_BUCKETS() {
	    return this.getToken(HiveParser.KW_BUCKETS, 0);
	};

	KW_CASCADE() {
	    return this.getToken(HiveParser.KW_CASCADE, 0);
	};

	KW_CHANGE() {
	    return this.getToken(HiveParser.KW_CHANGE, 0);
	};

	KW_CHECK() {
	    return this.getToken(HiveParser.KW_CHECK, 0);
	};

	KW_CLUSTER() {
	    return this.getToken(HiveParser.KW_CLUSTER, 0);
	};

	KW_CLUSTERED() {
	    return this.getToken(HiveParser.KW_CLUSTERED, 0);
	};

	KW_CLUSTERSTATUS() {
	    return this.getToken(HiveParser.KW_CLUSTERSTATUS, 0);
	};

	KW_COLLECTION() {
	    return this.getToken(HiveParser.KW_COLLECTION, 0);
	};

	KW_COLUMNS() {
	    return this.getToken(HiveParser.KW_COLUMNS, 0);
	};

	KW_COMMENT() {
	    return this.getToken(HiveParser.KW_COMMENT, 0);
	};

	KW_COMPACT() {
	    return this.getToken(HiveParser.KW_COMPACT, 0);
	};

	KW_COMPACTIONS() {
	    return this.getToken(HiveParser.KW_COMPACTIONS, 0);
	};

	KW_COMPUTE() {
	    return this.getToken(HiveParser.KW_COMPUTE, 0);
	};

	KW_CONCATENATE() {
	    return this.getToken(HiveParser.KW_CONCATENATE, 0);
	};

	KW_CONTINUE() {
	    return this.getToken(HiveParser.KW_CONTINUE, 0);
	};

	KW_DATA() {
	    return this.getToken(HiveParser.KW_DATA, 0);
	};

	KW_DAY() {
	    return this.getToken(HiveParser.KW_DAY, 0);
	};

	KW_DATABASES() {
	    return this.getToken(HiveParser.KW_DATABASES, 0);
	};

	KW_DATETIME() {
	    return this.getToken(HiveParser.KW_DATETIME, 0);
	};

	KW_DBPROPERTIES() {
	    return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
	};

	KW_DEFERRED() {
	    return this.getToken(HiveParser.KW_DEFERRED, 0);
	};

	KW_DEFINED() {
	    return this.getToken(HiveParser.KW_DEFINED, 0);
	};

	KW_DELIMITED() {
	    return this.getToken(HiveParser.KW_DELIMITED, 0);
	};

	KW_DEPENDENCY() {
	    return this.getToken(HiveParser.KW_DEPENDENCY, 0);
	};

	KW_DESC() {
	    return this.getToken(HiveParser.KW_DESC, 0);
	};

	KW_DIRECTORIES() {
	    return this.getToken(HiveParser.KW_DIRECTORIES, 0);
	};

	KW_DIRECTORY() {
	    return this.getToken(HiveParser.KW_DIRECTORY, 0);
	};

	KW_DISABLE() {
	    return this.getToken(HiveParser.KW_DISABLE, 0);
	};

	KW_DISTRIBUTE() {
	    return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
	};

	KW_DOW() {
	    return this.getToken(HiveParser.KW_DOW, 0);
	};

	KW_ELEM_TYPE() {
	    return this.getToken(HiveParser.KW_ELEM_TYPE, 0);
	};

	KW_ENABLE() {
	    return this.getToken(HiveParser.KW_ENABLE, 0);
	};

	KW_ENFORCED() {
	    return this.getToken(HiveParser.KW_ENFORCED, 0);
	};

	KW_ESCAPED() {
	    return this.getToken(HiveParser.KW_ESCAPED, 0);
	};

	KW_EXCLUSIVE() {
	    return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
	};

	KW_EXPLAIN() {
	    return this.getToken(HiveParser.KW_EXPLAIN, 0);
	};

	KW_EXPORT() {
	    return this.getToken(HiveParser.KW_EXPORT, 0);
	};

	KW_FIELDS() {
	    return this.getToken(HiveParser.KW_FIELDS, 0);
	};

	KW_FILE() {
	    return this.getToken(HiveParser.KW_FILE, 0);
	};

	KW_FILEFORMAT() {
	    return this.getToken(HiveParser.KW_FILEFORMAT, 0);
	};

	KW_FIRST() {
	    return this.getToken(HiveParser.KW_FIRST, 0);
	};

	KW_FORMAT() {
	    return this.getToken(HiveParser.KW_FORMAT, 0);
	};

	KW_FORMATTED() {
	    return this.getToken(HiveParser.KW_FORMATTED, 0);
	};

	KW_FUNCTIONS() {
	    return this.getToken(HiveParser.KW_FUNCTIONS, 0);
	};

	KW_HOUR() {
	    return this.getToken(HiveParser.KW_HOUR, 0);
	};

	KW_IDXPROPERTIES() {
	    return this.getToken(HiveParser.KW_IDXPROPERTIES, 0);
	};

	KW_INDEX() {
	    return this.getToken(HiveParser.KW_INDEX, 0);
	};

	KW_INDEXES() {
	    return this.getToken(HiveParser.KW_INDEXES, 0);
	};

	KW_INPATH() {
	    return this.getToken(HiveParser.KW_INPATH, 0);
	};

	KW_INPUTDRIVER() {
	    return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
	};

	KW_INPUTFORMAT() {
	    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	};

	KW_ITEMS() {
	    return this.getToken(HiveParser.KW_ITEMS, 0);
	};

	KW_JAR() {
	    return this.getToken(HiveParser.KW_JAR, 0);
	};

	KW_KILL() {
	    return this.getToken(HiveParser.KW_KILL, 0);
	};

	KW_KEYS() {
	    return this.getToken(HiveParser.KW_KEYS, 0);
	};

	KW_KEY_TYPE() {
	    return this.getToken(HiveParser.KW_KEY_TYPE, 0);
	};

	KW_LAST() {
	    return this.getToken(HiveParser.KW_LAST, 0);
	};

	KW_LIMIT() {
	    return this.getToken(HiveParser.KW_LIMIT, 0);
	};

	KW_OFFSET() {
	    return this.getToken(HiveParser.KW_OFFSET, 0);
	};

	KW_LINES() {
	    return this.getToken(HiveParser.KW_LINES, 0);
	};

	KW_LOAD() {
	    return this.getToken(HiveParser.KW_LOAD, 0);
	};

	KW_LOCATION() {
	    return this.getToken(HiveParser.KW_LOCATION, 0);
	};

	KW_LOCK() {
	    return this.getToken(HiveParser.KW_LOCK, 0);
	};

	KW_LOCKS() {
	    return this.getToken(HiveParser.KW_LOCKS, 0);
	};

	KW_LOGICAL() {
	    return this.getToken(HiveParser.KW_LOGICAL, 0);
	};

	KW_LONG() {
	    return this.getToken(HiveParser.KW_LONG, 0);
	};

	KW_MAPJOIN() {
	    return this.getToken(HiveParser.KW_MAPJOIN, 0);
	};

	KW_MATERIALIZED() {
	    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	};

	KW_METADATA() {
	    return this.getToken(HiveParser.KW_METADATA, 0);
	};

	KW_MINUTE() {
	    return this.getToken(HiveParser.KW_MINUTE, 0);
	};

	KW_MONTH() {
	    return this.getToken(HiveParser.KW_MONTH, 0);
	};

	KW_MSCK() {
	    return this.getToken(HiveParser.KW_MSCK, 0);
	};

	KW_NOSCAN() {
	    return this.getToken(HiveParser.KW_NOSCAN, 0);
	};

	KW_NULLS() {
	    return this.getToken(HiveParser.KW_NULLS, 0);
	};

	KW_OPTION() {
	    return this.getToken(HiveParser.KW_OPTION, 0);
	};

	KW_OUTPUTDRIVER() {
	    return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
	};

	KW_OUTPUTFORMAT() {
	    return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
	};

	KW_OVERWRITE() {
	    return this.getToken(HiveParser.KW_OVERWRITE, 0);
	};

	KW_OWNER() {
	    return this.getToken(HiveParser.KW_OWNER, 0);
	};

	KW_PARTITIONED() {
	    return this.getToken(HiveParser.KW_PARTITIONED, 0);
	};

	KW_PARTITIONS() {
	    return this.getToken(HiveParser.KW_PARTITIONS, 0);
	};

	KW_PLUS() {
	    return this.getToken(HiveParser.KW_PLUS, 0);
	};

	KW_PRINCIPALS() {
	    return this.getToken(HiveParser.KW_PRINCIPALS, 0);
	};

	KW_PURGE() {
	    return this.getToken(HiveParser.KW_PURGE, 0);
	};

	KW_QUERY() {
	    return this.getToken(HiveParser.KW_QUERY, 0);
	};

	KW_QUARTER() {
	    return this.getToken(HiveParser.KW_QUARTER, 0);
	};

	KW_READ() {
	    return this.getToken(HiveParser.KW_READ, 0);
	};

	KW_REBUILD() {
	    return this.getToken(HiveParser.KW_REBUILD, 0);
	};

	KW_RECORDREADER() {
	    return this.getToken(HiveParser.KW_RECORDREADER, 0);
	};

	KW_RECORDWRITER() {
	    return this.getToken(HiveParser.KW_RECORDWRITER, 0);
	};

	KW_RELOAD() {
	    return this.getToken(HiveParser.KW_RELOAD, 0);
	};

	KW_RENAME() {
	    return this.getToken(HiveParser.KW_RENAME, 0);
	};

	KW_REPAIR() {
	    return this.getToken(HiveParser.KW_REPAIR, 0);
	};

	KW_REPLACE() {
	    return this.getToken(HiveParser.KW_REPLACE, 0);
	};

	KW_REPLICATION() {
	    return this.getToken(HiveParser.KW_REPLICATION, 0);
	};

	KW_RESTRICT() {
	    return this.getToken(HiveParser.KW_RESTRICT, 0);
	};

	KW_REWRITE() {
	    return this.getToken(HiveParser.KW_REWRITE, 0);
	};

	KW_ROLE() {
	    return this.getToken(HiveParser.KW_ROLE, 0);
	};

	KW_ROLES() {
	    return this.getToken(HiveParser.KW_ROLES, 0);
	};

	KW_SCHEMA() {
	    return this.getToken(HiveParser.KW_SCHEMA, 0);
	};

	KW_SCHEMAS() {
	    return this.getToken(HiveParser.KW_SCHEMAS, 0);
	};

	KW_SECOND() {
	    return this.getToken(HiveParser.KW_SECOND, 0);
	};

	KW_SEMI() {
	    return this.getToken(HiveParser.KW_SEMI, 0);
	};

	KW_SERDE() {
	    return this.getToken(HiveParser.KW_SERDE, 0);
	};

	KW_SERDEPROPERTIES() {
	    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	};

	KW_SERVER() {
	    return this.getToken(HiveParser.KW_SERVER, 0);
	};

	KW_SETS() {
	    return this.getToken(HiveParser.KW_SETS, 0);
	};

	KW_SHARED() {
	    return this.getToken(HiveParser.KW_SHARED, 0);
	};

	KW_SHOW() {
	    return this.getToken(HiveParser.KW_SHOW, 0);
	};

	KW_SHOW_DATABASE() {
	    return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
	};

	KW_SKEWED() {
	    return this.getToken(HiveParser.KW_SKEWED, 0);
	};

	KW_SORT() {
	    return this.getToken(HiveParser.KW_SORT, 0);
	};

	KW_SORTED() {
	    return this.getToken(HiveParser.KW_SORTED, 0);
	};

	KW_SSL() {
	    return this.getToken(HiveParser.KW_SSL, 0);
	};

	KW_STATISTICS() {
	    return this.getToken(HiveParser.KW_STATISTICS, 0);
	};

	KW_STORED() {
	    return this.getToken(HiveParser.KW_STORED, 0);
	};

	KW_STREAMTABLE() {
	    return this.getToken(HiveParser.KW_STREAMTABLE, 0);
	};

	KW_STRING() {
	    return this.getToken(HiveParser.KW_STRING, 0);
	};

	KW_STRUCT() {
	    return this.getToken(HiveParser.KW_STRUCT, 0);
	};

	KW_TABLES() {
	    return this.getToken(HiveParser.KW_TABLES, 0);
	};

	KW_TBLPROPERTIES() {
	    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	};

	KW_TEMPORARY() {
	    return this.getToken(HiveParser.KW_TEMPORARY, 0);
	};

	KW_TERMINATED() {
	    return this.getToken(HiveParser.KW_TERMINATED, 0);
	};

	KW_TINYINT() {
	    return this.getToken(HiveParser.KW_TINYINT, 0);
	};

	KW_TOUCH() {
	    return this.getToken(HiveParser.KW_TOUCH, 0);
	};

	KW_TRANSACTIONS() {
	    return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
	};

	KW_UNARCHIVE() {
	    return this.getToken(HiveParser.KW_UNARCHIVE, 0);
	};

	KW_UNDO() {
	    return this.getToken(HiveParser.KW_UNDO, 0);
	};

	KW_UNIONTYPE() {
	    return this.getToken(HiveParser.KW_UNIONTYPE, 0);
	};

	KW_UNLOCK() {
	    return this.getToken(HiveParser.KW_UNLOCK, 0);
	};

	KW_UNSET() {
	    return this.getToken(HiveParser.KW_UNSET, 0);
	};

	KW_UNSIGNED() {
	    return this.getToken(HiveParser.KW_UNSIGNED, 0);
	};

	KW_URI() {
	    return this.getToken(HiveParser.KW_URI, 0);
	};

	KW_USE() {
	    return this.getToken(HiveParser.KW_USE, 0);
	};

	KW_UTC() {
	    return this.getToken(HiveParser.KW_UTC, 0);
	};

	KW_UTCTIMESTAMP() {
	    return this.getToken(HiveParser.KW_UTCTIMESTAMP, 0);
	};

	KW_VALUE_TYPE() {
	    return this.getToken(HiveParser.KW_VALUE_TYPE, 0);
	};

	KW_VIEW() {
	    return this.getToken(HiveParser.KW_VIEW, 0);
	};

	KW_WEEK() {
	    return this.getToken(HiveParser.KW_WEEK, 0);
	};

	KW_WHILE() {
	    return this.getToken(HiveParser.KW_WHILE, 0);
	};

	KW_YEAR() {
	    return this.getToken(HiveParser.KW_YEAR, 0);
	};

	KW_WORK() {
	    return this.getToken(HiveParser.KW_WORK, 0);
	};

	KW_TRANSACTION() {
	    return this.getToken(HiveParser.KW_TRANSACTION, 0);
	};

	KW_WRITE() {
	    return this.getToken(HiveParser.KW_WRITE, 0);
	};

	KW_ISOLATION() {
	    return this.getToken(HiveParser.KW_ISOLATION, 0);
	};

	KW_LEVEL() {
	    return this.getToken(HiveParser.KW_LEVEL, 0);
	};

	KW_SNAPSHOT() {
	    return this.getToken(HiveParser.KW_SNAPSHOT, 0);
	};

	KW_AUTOCOMMIT() {
	    return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
	};

	KW_RELY() {
	    return this.getToken(HiveParser.KW_RELY, 0);
	};

	KW_NORELY() {
	    return this.getToken(HiveParser.KW_NORELY, 0);
	};

	KW_VALIDATE() {
	    return this.getToken(HiveParser.KW_VALIDATE, 0);
	};

	KW_NOVALIDATE() {
	    return this.getToken(HiveParser.KW_NOVALIDATE, 0);
	};

	KW_KEY() {
	    return this.getToken(HiveParser.KW_KEY, 0);
	};

	KW_MATCHED() {
	    return this.getToken(HiveParser.KW_MATCHED, 0);
	};

	KW_REPL() {
	    return this.getToken(HiveParser.KW_REPL, 0);
	};

	KW_DUMP() {
	    return this.getToken(HiveParser.KW_DUMP, 0);
	};

	KW_STATUS() {
	    return this.getToken(HiveParser.KW_STATUS, 0);
	};

	KW_CACHE() {
	    return this.getToken(HiveParser.KW_CACHE, 0);
	};

	KW_VIEWS() {
	    return this.getToken(HiveParser.KW_VIEWS, 0);
	};

	KW_VECTORIZATION() {
	    return this.getToken(HiveParser.KW_VECTORIZATION, 0);
	};

	KW_SUMMARY() {
	    return this.getToken(HiveParser.KW_SUMMARY, 0);
	};

	KW_OPERATOR() {
	    return this.getToken(HiveParser.KW_OPERATOR, 0);
	};

	KW_EXPRESSION() {
	    return this.getToken(HiveParser.KW_EXPRESSION, 0);
	};

	KW_DETAIL() {
	    return this.getToken(HiveParser.KW_DETAIL, 0);
	};

	KW_WAIT() {
	    return this.getToken(HiveParser.KW_WAIT, 0);
	};

	KW_ZONE() {
	    return this.getToken(HiveParser.KW_ZONE, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(HiveParser.KW_DEFAULT, 0);
	};

	KW_REOPTIMIZATION() {
	    return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
	};

	KW_RESOURCE() {
	    return this.getToken(HiveParser.KW_RESOURCE, 0);
	};

	KW_PLAN() {
	    return this.getToken(HiveParser.KW_PLAN, 0);
	};

	KW_PLANS() {
	    return this.getToken(HiveParser.KW_PLANS, 0);
	};

	KW_QUERY_PARALLELISM() {
	    return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
	};

	KW_ACTIVATE() {
	    return this.getToken(HiveParser.KW_ACTIVATE, 0);
	};

	KW_MOVE() {
	    return this.getToken(HiveParser.KW_MOVE, 0);
	};

	KW_DO() {
	    return this.getToken(HiveParser.KW_DO, 0);
	};

	KW_POOL() {
	    return this.getToken(HiveParser.KW_POOL, 0);
	};

	KW_ALLOC_FRACTION() {
	    return this.getToken(HiveParser.KW_ALLOC_FRACTION, 0);
	};

	KW_SCHEDULING_POLICY() {
	    return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
	};

	KW_PATH() {
	    return this.getToken(HiveParser.KW_PATH, 0);
	};

	KW_MAPPING() {
	    return this.getToken(HiveParser.KW_MAPPING, 0);
	};

	KW_WORKLOAD() {
	    return this.getToken(HiveParser.KW_WORKLOAD, 0);
	};

	KW_MANAGEMENT() {
	    return this.getToken(HiveParser.KW_MANAGEMENT, 0);
	};

	KW_ACTIVE() {
	    return this.getToken(HiveParser.KW_ACTIVE, 0);
	};

	KW_UNMANAGED() {
	    return this.getToken(HiveParser.KW_UNMANAGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitNonReserved(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitNonReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sql11ReservedKeywordsUsedAsFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName;
    }

	KW_IF() {
	    return this.getToken(HiveParser.KW_IF, 0);
	};

	KW_ARRAY() {
	    return this.getToken(HiveParser.KW_ARRAY, 0);
	};

	KW_MAP() {
	    return this.getToken(HiveParser.KW_MAP, 0);
	};

	KW_BIGINT() {
	    return this.getToken(HiveParser.KW_BIGINT, 0);
	};

	KW_BINARY() {
	    return this.getToken(HiveParser.KW_BINARY, 0);
	};

	KW_BOOLEAN() {
	    return this.getToken(HiveParser.KW_BOOLEAN, 0);
	};

	KW_CURRENT_DATE() {
	    return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
	};

	KW_CURRENT_TIMESTAMP() {
	    return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
	};

	KW_DATE() {
	    return this.getToken(HiveParser.KW_DATE, 0);
	};

	KW_DOUBLE() {
	    return this.getToken(HiveParser.KW_DOUBLE, 0);
	};

	KW_FLOAT() {
	    return this.getToken(HiveParser.KW_FLOAT, 0);
	};

	KW_GROUPING() {
	    return this.getToken(HiveParser.KW_GROUPING, 0);
	};

	KW_INT() {
	    return this.getToken(HiveParser.KW_INT, 0);
	};

	KW_SMALLINT() {
	    return this.getToken(HiveParser.KW_SMALLINT, 0);
	};

	KW_TIMESTAMP() {
	    return this.getToken(HiveParser.KW_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.enterSql11ReservedKeywordsUsedAsFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof HiveParserListener ) {
	        listener.exitSql11ReservedKeywordsUsedAsFunctionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof HiveParserVisitor ) {
	        return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




HiveParser.StatementsContext = StatementsContext; 
HiveParser.StatementSeparatorContext = StatementSeparatorContext; 
HiveParser.StatementContext = StatementContext; 
HiveParser.ExplainStatementContext = ExplainStatementContext; 
HiveParser.ExplainOptionContext = ExplainOptionContext; 
HiveParser.VectorizationOnlyContext = VectorizationOnlyContext; 
HiveParser.VectorizatonDetailContext = VectorizatonDetailContext; 
HiveParser.ExecStatementContext = ExecStatementContext; 
HiveParser.LoadStatementContext = LoadStatementContext; 
HiveParser.ReplicationClauseContext = ReplicationClauseContext; 
HiveParser.ExportStatementContext = ExportStatementContext; 
HiveParser.ImportStatementContext = ImportStatementContext; 
HiveParser.ReplDumpStatementContext = ReplDumpStatementContext; 
HiveParser.ReplLoadStatementContext = ReplLoadStatementContext; 
HiveParser.ReplConfigsContext = ReplConfigsContext; 
HiveParser.ReplConfigsListContext = ReplConfigsListContext; 
HiveParser.ReplStatusStatementContext = ReplStatusStatementContext; 
HiveParser.DdlStatementContext = DdlStatementContext; 
HiveParser.IfExistsContext = IfExistsContext; 
HiveParser.RestrictOrCascadeContext = RestrictOrCascadeContext; 
HiveParser.IfNotExistsContext = IfNotExistsContext; 
HiveParser.RewriteEnabledContext = RewriteEnabledContext; 
HiveParser.RewriteDisabledContext = RewriteDisabledContext; 
HiveParser.StoredAsDirsContext = StoredAsDirsContext; 
HiveParser.OrReplaceContext = OrReplaceContext; 
HiveParser.CreateDatabaseStatementContext = CreateDatabaseStatementContext; 
HiveParser.DbLocationContext = DbLocationContext; 
HiveParser.DbPropertiesContext = DbPropertiesContext; 
HiveParser.DbPropertiesListContext = DbPropertiesListContext; 
HiveParser.SwitchDatabaseStatementContext = SwitchDatabaseStatementContext; 
HiveParser.DropDatabaseStatementContext = DropDatabaseStatementContext; 
HiveParser.DatabaseCommentContext = DatabaseCommentContext; 
HiveParser.CreateTableStatementContext = CreateTableStatementContext; 
HiveParser.TruncateTableStatementContext = TruncateTableStatementContext; 
HiveParser.DropTableStatementContext = DropTableStatementContext; 
HiveParser.AlterStatementContext = AlterStatementContext; 
HiveParser.AlterTableStatementSuffixContext = AlterTableStatementSuffixContext; 
HiveParser.AlterTblPartitionStatementSuffixContext = AlterTblPartitionStatementSuffixContext; 
HiveParser.AlterStatementPartitionKeyTypeContext = AlterStatementPartitionKeyTypeContext; 
HiveParser.AlterViewStatementSuffixContext = AlterViewStatementSuffixContext; 
HiveParser.AlterMaterializedViewStatementSuffixContext = AlterMaterializedViewStatementSuffixContext; 
HiveParser.AlterDatabaseStatementSuffixContext = AlterDatabaseStatementSuffixContext; 
HiveParser.AlterDatabaseSuffixPropertiesContext = AlterDatabaseSuffixPropertiesContext; 
HiveParser.AlterDatabaseSuffixSetOwnerContext = AlterDatabaseSuffixSetOwnerContext; 
HiveParser.AlterDatabaseSuffixSetLocationContext = AlterDatabaseSuffixSetLocationContext; 
HiveParser.AlterStatementSuffixRenameContext = AlterStatementSuffixRenameContext; 
HiveParser.AlterStatementSuffixAddColContext = AlterStatementSuffixAddColContext; 
HiveParser.AlterStatementSuffixAddConstraintContext = AlterStatementSuffixAddConstraintContext; 
HiveParser.AlterStatementSuffixDropConstraintContext = AlterStatementSuffixDropConstraintContext; 
HiveParser.AlterStatementSuffixRenameColContext = AlterStatementSuffixRenameColContext; 
HiveParser.AlterStatementSuffixUpdateStatsColContext = AlterStatementSuffixUpdateStatsColContext; 
HiveParser.AlterStatementSuffixUpdateStatsContext = AlterStatementSuffixUpdateStatsContext; 
HiveParser.AlterStatementChangeColPositionContext = AlterStatementChangeColPositionContext; 
HiveParser.AlterStatementSuffixAddPartitionsContext = AlterStatementSuffixAddPartitionsContext; 
HiveParser.AlterStatementSuffixAddPartitionsElementContext = AlterStatementSuffixAddPartitionsElementContext; 
HiveParser.AlterStatementSuffixTouchContext = AlterStatementSuffixTouchContext; 
HiveParser.AlterStatementSuffixArchiveContext = AlterStatementSuffixArchiveContext; 
HiveParser.AlterStatementSuffixUnArchiveContext = AlterStatementSuffixUnArchiveContext; 
HiveParser.PartitionLocationContext = PartitionLocationContext; 
HiveParser.AlterStatementSuffixDropPartitionsContext = AlterStatementSuffixDropPartitionsContext; 
HiveParser.AlterStatementSuffixPropertiesContext = AlterStatementSuffixPropertiesContext; 
HiveParser.AlterViewSuffixPropertiesContext = AlterViewSuffixPropertiesContext; 
HiveParser.AlterMaterializedViewSuffixRewriteContext = AlterMaterializedViewSuffixRewriteContext; 
HiveParser.AlterMaterializedViewSuffixRebuildContext = AlterMaterializedViewSuffixRebuildContext; 
HiveParser.AlterStatementSuffixSerdePropertiesContext = AlterStatementSuffixSerdePropertiesContext; 
HiveParser.AlterIndexStatementSuffixContext = AlterIndexStatementSuffixContext; 
HiveParser.AlterStatementSuffixFileFormatContext = AlterStatementSuffixFileFormatContext; 
HiveParser.AlterStatementSuffixClusterbySortbyContext = AlterStatementSuffixClusterbySortbyContext; 
HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext = AlterTblPartitionStatementSuffixSkewedLocationContext; 
HiveParser.SkewedLocationsContext = SkewedLocationsContext; 
HiveParser.SkewedLocationsListContext = SkewedLocationsListContext; 
HiveParser.SkewedLocationMapContext = SkewedLocationMapContext; 
HiveParser.AlterStatementSuffixLocationContext = AlterStatementSuffixLocationContext; 
HiveParser.AlterStatementSuffixSkewedbyContext = AlterStatementSuffixSkewedbyContext; 
HiveParser.AlterStatementSuffixExchangePartitionContext = AlterStatementSuffixExchangePartitionContext; 
HiveParser.AlterStatementSuffixRenamePartContext = AlterStatementSuffixRenamePartContext; 
HiveParser.AlterStatementSuffixStatsPartContext = AlterStatementSuffixStatsPartContext; 
HiveParser.AlterStatementSuffixMergeFilesContext = AlterStatementSuffixMergeFilesContext; 
HiveParser.AlterStatementSuffixBucketNumContext = AlterStatementSuffixBucketNumContext; 
HiveParser.CreateIndexStatementContext = CreateIndexStatementContext; 
HiveParser.LocationPathContext = LocationPathContext; 
HiveParser.DropIndexStatementContext = DropIndexStatementContext; 
HiveParser.TablePartitionPrefixContext = TablePartitionPrefixContext; 
HiveParser.BlockingContext = BlockingContext; 
HiveParser.AlterStatementSuffixCompactContext = AlterStatementSuffixCompactContext; 
HiveParser.AlterStatementSuffixSetOwnerContext = AlterStatementSuffixSetOwnerContext; 
HiveParser.FileFormatContext = FileFormatContext; 
HiveParser.InputFileFormatContext = InputFileFormatContext; 
HiveParser.TabTypeExprContext = TabTypeExprContext; 
HiveParser.PartTypeExprContext = PartTypeExprContext; 
HiveParser.TabPartColTypeExprContext = TabPartColTypeExprContext; 
HiveParser.DescStatementContext = DescStatementContext; 
HiveParser.AnalyzeStatementContext = AnalyzeStatementContext; 
HiveParser.ShowStatementContext = ShowStatementContext; 
HiveParser.LockStatementContext = LockStatementContext; 
HiveParser.LockDatabaseContext = LockDatabaseContext; 
HiveParser.LockModeContext = LockModeContext; 
HiveParser.UnlockStatementContext = UnlockStatementContext; 
HiveParser.UnlockDatabaseContext = UnlockDatabaseContext; 
HiveParser.CreateRoleStatementContext = CreateRoleStatementContext; 
HiveParser.DropRoleStatementContext = DropRoleStatementContext; 
HiveParser.GrantPrivilegesContext = GrantPrivilegesContext; 
HiveParser.RevokePrivilegesContext = RevokePrivilegesContext; 
HiveParser.GrantRoleContext = GrantRoleContext; 
HiveParser.RevokeRoleContext = RevokeRoleContext; 
HiveParser.ShowRoleGrantsContext = ShowRoleGrantsContext; 
HiveParser.ShowRolesContext = ShowRolesContext; 
HiveParser.ShowCurrentRoleContext = ShowCurrentRoleContext; 
HiveParser.SetRoleContext = SetRoleContext; 
HiveParser.ShowGrantsContext = ShowGrantsContext; 
HiveParser.ShowRolePrincipalsContext = ShowRolePrincipalsContext; 
HiveParser.PrivilegeIncludeColObjectContext = PrivilegeIncludeColObjectContext; 
HiveParser.PrivilegeObjectContext = PrivilegeObjectContext; 
HiveParser.PrivObjectContext = PrivObjectContext; 
HiveParser.PrivObjectColsContext = PrivObjectColsContext; 
HiveParser.PrivilegeListContext = PrivilegeListContext; 
HiveParser.PrivlegeDefContext = PrivlegeDefContext; 
HiveParser.PrivilegeTypeContext = PrivilegeTypeContext; 
HiveParser.PrincipalSpecificationContext = PrincipalSpecificationContext; 
HiveParser.PrincipalNameContext = PrincipalNameContext; 
HiveParser.WithGrantOptionContext = WithGrantOptionContext; 
HiveParser.GrantOptionForContext = GrantOptionForContext; 
HiveParser.AdminOptionForContext = AdminOptionForContext; 
HiveParser.WithAdminOptionContext = WithAdminOptionContext; 
HiveParser.MetastoreCheckContext = MetastoreCheckContext; 
HiveParser.ResourceListContext = ResourceListContext; 
HiveParser.ResourceContext = ResourceContext; 
HiveParser.ResourceTypeContext = ResourceTypeContext; 
HiveParser.CreateFunctionStatementContext = CreateFunctionStatementContext; 
HiveParser.DropFunctionStatementContext = DropFunctionStatementContext; 
HiveParser.ReloadFunctionStatementContext = ReloadFunctionStatementContext; 
HiveParser.CreateMacroStatementContext = CreateMacroStatementContext; 
HiveParser.DropMacroStatementContext = DropMacroStatementContext; 
HiveParser.CreateViewStatementContext = CreateViewStatementContext; 
HiveParser.CreateMaterializedViewStatementContext = CreateMaterializedViewStatementContext; 
HiveParser.ViewPartitionContext = ViewPartitionContext; 
HiveParser.DropViewStatementContext = DropViewStatementContext; 
HiveParser.DropMaterializedViewStatementContext = DropMaterializedViewStatementContext; 
HiveParser.ShowFunctionIdentifierContext = ShowFunctionIdentifierContext; 
HiveParser.ShowStmtIdentifierContext = ShowStmtIdentifierContext; 
HiveParser.TableCommentContext = TableCommentContext; 
HiveParser.TablePartitionContext = TablePartitionContext; 
HiveParser.TableBucketsContext = TableBucketsContext; 
HiveParser.TableSkewedContext = TableSkewedContext; 
HiveParser.RowFormatContext = RowFormatContext; 
HiveParser.RecordReaderContext = RecordReaderContext; 
HiveParser.RecordWriterContext = RecordWriterContext; 
HiveParser.RowFormatSerdeContext = RowFormatSerdeContext; 
HiveParser.RowFormatDelimitedContext = RowFormatDelimitedContext; 
HiveParser.TableRowFormatContext = TableRowFormatContext; 
HiveParser.TablePropertiesPrefixedContext = TablePropertiesPrefixedContext; 
HiveParser.TablePropertiesContext = TablePropertiesContext; 
HiveParser.TablePropertiesListContext = TablePropertiesListContext; 
HiveParser.KeyValuePropertyContext = KeyValuePropertyContext; 
HiveParser.KeyPropertyContext = KeyPropertyContext; 
HiveParser.TableRowFormatFieldIdentifierContext = TableRowFormatFieldIdentifierContext; 
HiveParser.TableRowFormatCollItemsIdentifierContext = TableRowFormatCollItemsIdentifierContext; 
HiveParser.TableRowFormatMapKeysIdentifierContext = TableRowFormatMapKeysIdentifierContext; 
HiveParser.TableRowFormatLinesIdentifierContext = TableRowFormatLinesIdentifierContext; 
HiveParser.TableRowNullFormatContext = TableRowNullFormatContext; 
HiveParser.TableFileFormatContext = TableFileFormatContext; 
HiveParser.TableLocationContext = TableLocationContext; 
HiveParser.ColumnNameTypeListContext = ColumnNameTypeListContext; 
HiveParser.ColumnNameTypeOrConstraintListContext = ColumnNameTypeOrConstraintListContext; 
HiveParser.ColumnNameColonTypeListContext = ColumnNameColonTypeListContext; 
HiveParser.ColumnNameListContext = ColumnNameListContext; 
HiveParser.ColumnNameContext = ColumnNameContext; 
HiveParser.ExtColumnNameContext = ExtColumnNameContext; 
HiveParser.ColumnNameOrderListContext = ColumnNameOrderListContext; 
HiveParser.ColumnParenthesesListContext = ColumnParenthesesListContext; 
HiveParser.EnableValidateSpecificationContext = EnableValidateSpecificationContext; 
HiveParser.EnableSpecificationContext = EnableSpecificationContext; 
HiveParser.ValidateSpecificationContext = ValidateSpecificationContext; 
HiveParser.EnforcedSpecificationContext = EnforcedSpecificationContext; 
HiveParser.RelySpecificationContext = RelySpecificationContext; 
HiveParser.CreateConstraintContext = CreateConstraintContext; 
HiveParser.AlterConstraintWithNameContext = AlterConstraintWithNameContext; 
HiveParser.PkConstraintContext = PkConstraintContext; 
HiveParser.CreateForeignKeyContext = CreateForeignKeyContext; 
HiveParser.AlterForeignKeyWithNameContext = AlterForeignKeyWithNameContext; 
HiveParser.SkewedValueElementContext = SkewedValueElementContext; 
HiveParser.SkewedColumnValuePairListContext = SkewedColumnValuePairListContext; 
HiveParser.SkewedColumnValuePairContext = SkewedColumnValuePairContext; 
HiveParser.SkewedColumnValuesContext = SkewedColumnValuesContext; 
HiveParser.SkewedColumnValueContext = SkewedColumnValueContext; 
HiveParser.SkewedValueLocationElementContext = SkewedValueLocationElementContext; 
HiveParser.OrderSpecificationContext = OrderSpecificationContext; 
HiveParser.NullOrderingContext = NullOrderingContext; 
HiveParser.ColumnNameOrderContext = ColumnNameOrderContext; 
HiveParser.ColumnNameCommentListContext = ColumnNameCommentListContext; 
HiveParser.ColumnNameCommentContext = ColumnNameCommentContext; 
HiveParser.ColumnRefOrderContext = ColumnRefOrderContext; 
HiveParser.ColumnNameTypeContext = ColumnNameTypeContext; 
HiveParser.ColumnNameTypeOrConstraintContext = ColumnNameTypeOrConstraintContext; 
HiveParser.TableConstraintContext = TableConstraintContext; 
HiveParser.ColumnNameTypeConstraintContext = ColumnNameTypeConstraintContext; 
HiveParser.ColumnConstraintContext = ColumnConstraintContext; 
HiveParser.ForeignKeyConstraintContext = ForeignKeyConstraintContext; 
HiveParser.ColConstraintContext = ColConstraintContext; 
HiveParser.AlterColumnConstraintContext = AlterColumnConstraintContext; 
HiveParser.AlterForeignKeyConstraintContext = AlterForeignKeyConstraintContext; 
HiveParser.AlterColConstraintContext = AlterColConstraintContext; 
HiveParser.TableConstraintPrimaryKeyContext = TableConstraintPrimaryKeyContext; 
HiveParser.ConstraintOptsCreateContext = ConstraintOptsCreateContext; 
HiveParser.ConstraintOptsAlterContext = ConstraintOptsAlterContext; 
HiveParser.ColumnNameColonTypeContext = ColumnNameColonTypeContext; 
HiveParser.ColTypeContext = ColTypeContext; 
HiveParser.ColTypeListContext = ColTypeListContext; 
HiveParser.Type_db_colContext = Type_db_colContext; 
HiveParser.PrimitiveTypeContext = PrimitiveTypeContext; 
HiveParser.ListTypeContext = ListTypeContext; 
HiveParser.StructTypeContext = StructTypeContext; 
HiveParser.MapTypeContext = MapTypeContext; 
HiveParser.UnionTypeContext = UnionTypeContext; 
HiveParser.SetOperatorContext = SetOperatorContext; 
HiveParser.QueryStatementExpressionContext = QueryStatementExpressionContext; 
HiveParser.QueryStatementExpressionBodyContext = QueryStatementExpressionBodyContext; 
HiveParser.WithClauseContext = WithClauseContext; 
HiveParser.CteStatementContext = CteStatementContext; 
HiveParser.FromStatementContext = FromStatementContext; 
HiveParser.SingleFromStatementContext = SingleFromStatementContext; 
HiveParser.RegularBodyContext = RegularBodyContext; 
HiveParser.AtomSelectStatementContext = AtomSelectStatementContext; 
HiveParser.SelectStatementContext = SelectStatementContext; 
HiveParser.SetOpSelectStatementContext = SetOpSelectStatementContext; 
HiveParser.SelectStatementWithCTEContext = SelectStatementWithCTEContext; 
HiveParser.BodyContext = BodyContext; 
HiveParser.InsertClauseContext = InsertClauseContext; 
HiveParser.DestinationContext = DestinationContext; 
HiveParser.LimitClauseContext = LimitClauseContext; 
HiveParser.DeleteStatementContext = DeleteStatementContext; 
HiveParser.ColumnAssignmentClauseContext = ColumnAssignmentClauseContext; 
HiveParser.SetColumnsClauseContext = SetColumnsClauseContext; 
HiveParser.UpdateStatementContext = UpdateStatementContext; 
HiveParser.SqlTransactionStatementContext = SqlTransactionStatementContext; 
HiveParser.StartTransactionStatementContext = StartTransactionStatementContext; 
HiveParser.TransactionModeContext = TransactionModeContext; 
HiveParser.TransactionAccessModeContext = TransactionAccessModeContext; 
HiveParser.IsolationLevelContext = IsolationLevelContext; 
HiveParser.LevelOfIsolationContext = LevelOfIsolationContext; 
HiveParser.CommitStatementContext = CommitStatementContext; 
HiveParser.RollbackStatementContext = RollbackStatementContext; 
HiveParser.SetAutoCommitStatementContext = SetAutoCommitStatementContext; 
HiveParser.AbortTransactionStatementContext = AbortTransactionStatementContext; 
HiveParser.MergeStatementContext = MergeStatementContext; 
HiveParser.WhenClausesContext = WhenClausesContext; 
HiveParser.WhenNotMatchedClauseContext = WhenNotMatchedClauseContext; 
HiveParser.WhenMatchedAndClauseContext = WhenMatchedAndClauseContext; 
HiveParser.WhenMatchedThenClauseContext = WhenMatchedThenClauseContext; 
HiveParser.UpdateOrDeleteContext = UpdateOrDeleteContext; 
HiveParser.KillQueryStatementContext = KillQueryStatementContext; 
HiveParser.SelectClauseContext = SelectClauseContext; 
HiveParser.SelectListContext = SelectListContext; 
HiveParser.SelectTrfmClauseContext = SelectTrfmClauseContext; 
HiveParser.SelectItemContext = SelectItemContext; 
HiveParser.TrfmClauseContext = TrfmClauseContext; 
HiveParser.SelectExpressionContext = SelectExpressionContext; 
HiveParser.SelectExpressionListContext = SelectExpressionListContext; 
HiveParser.Window_clauseContext = Window_clauseContext; 
HiveParser.Window_defnContext = Window_defnContext; 
HiveParser.Window_specificationContext = Window_specificationContext; 
HiveParser.Window_frameContext = Window_frameContext; 
HiveParser.Window_range_expressionContext = Window_range_expressionContext; 
HiveParser.Window_value_expressionContext = Window_value_expressionContext; 
HiveParser.Window_frame_start_boundaryContext = Window_frame_start_boundaryContext; 
HiveParser.Window_frame_boundaryContext = Window_frame_boundaryContext; 
HiveParser.TableAllColumnsContext = TableAllColumnsContext; 
HiveParser.TableOrColumnContext = TableOrColumnContext; 
HiveParser.ExpressionListContext = ExpressionListContext; 
HiveParser.AliasListContext = AliasListContext; 
HiveParser.FromClauseContext = FromClauseContext; 
HiveParser.FromSourceContext = FromSourceContext; 
HiveParser.AtomjoinSourceContext = AtomjoinSourceContext; 
HiveParser.JoinSourceContext = JoinSourceContext; 
HiveParser.JoinSourcePartContext = JoinSourcePartContext; 
HiveParser.UniqueJoinSourceContext = UniqueJoinSourceContext; 
HiveParser.UniqueJoinExprContext = UniqueJoinExprContext; 
HiveParser.UniqueJoinTokenContext = UniqueJoinTokenContext; 
HiveParser.JoinTokenContext = JoinTokenContext; 
HiveParser.LateralViewContext = LateralViewContext; 
HiveParser.TableAliasContext = TableAliasContext; 
HiveParser.TableBucketSampleContext = TableBucketSampleContext; 
HiveParser.SplitSampleContext = SplitSampleContext; 
HiveParser.TableSampleContext = TableSampleContext; 
HiveParser.TableSourceContext = TableSourceContext; 
HiveParser.UniqueJoinTableSourceContext = UniqueJoinTableSourceContext; 
HiveParser.TableNameContext = TableNameContext; 
HiveParser.ViewNameContext = ViewNameContext; 
HiveParser.SubQuerySourceContext = SubQuerySourceContext; 
HiveParser.PartitioningSpecContext = PartitioningSpecContext; 
HiveParser.PartitionTableFunctionSourceContext = PartitionTableFunctionSourceContext; 
HiveParser.PartitionedTableFunctionContext = PartitionedTableFunctionContext; 
HiveParser.WhereClauseContext = WhereClauseContext; 
HiveParser.SearchConditionContext = SearchConditionContext; 
HiveParser.ValuesClauseContext = ValuesClauseContext; 
HiveParser.ValuesTableConstructorContext = ValuesTableConstructorContext; 
HiveParser.ValueRowConstructorContext = ValueRowConstructorContext; 
HiveParser.VirtualTableSourceContext = VirtualTableSourceContext; 
HiveParser.GroupByClauseContext = GroupByClauseContext; 
HiveParser.Groupby_expressionContext = Groupby_expressionContext; 
HiveParser.GroupByEmptyContext = GroupByEmptyContext; 
HiveParser.RollupStandardContext = RollupStandardContext; 
HiveParser.RollupOldSyntaxContext = RollupOldSyntaxContext; 
HiveParser.GroupingSetExpressionContext = GroupingSetExpressionContext; 
HiveParser.GroupingSetExpressionMultipleContext = GroupingSetExpressionMultipleContext; 
HiveParser.GroupingExpressionSingleContext = GroupingExpressionSingleContext; 
HiveParser.HavingClauseContext = HavingClauseContext; 
HiveParser.HavingConditionContext = HavingConditionContext; 
HiveParser.ExpressionsInParenthesisContext = ExpressionsInParenthesisContext; 
HiveParser.ExpressionsNotInParenthesisContext = ExpressionsNotInParenthesisContext; 
HiveParser.ExpressionPartContext = ExpressionPartContext; 
HiveParser.ExpressionsContext = ExpressionsContext; 
HiveParser.ColumnRefOrderInParenthesisContext = ColumnRefOrderInParenthesisContext; 
HiveParser.ColumnRefOrderNotInParenthesisContext = ColumnRefOrderNotInParenthesisContext; 
HiveParser.OrderByClauseContext = OrderByClauseContext; 
HiveParser.ClusterByClauseContext = ClusterByClauseContext; 
HiveParser.PartitionByClauseContext = PartitionByClauseContext; 
HiveParser.DistributeByClauseContext = DistributeByClauseContext; 
HiveParser.SortByClauseContext = SortByClauseContext; 
HiveParser.Function_Context = Function_Context; 
HiveParser.FunctionNameContext = FunctionNameContext; 
HiveParser.CastExpressionContext = CastExpressionContext; 
HiveParser.CaseExpressionContext = CaseExpressionContext; 
HiveParser.WhenExpressionContext = WhenExpressionContext; 
HiveParser.FloorExpressionContext = FloorExpressionContext; 
HiveParser.FloorDateQualifiersContext = FloorDateQualifiersContext; 
HiveParser.ExtractExpressionContext = ExtractExpressionContext; 
HiveParser.TimeQualifiersContext = TimeQualifiersContext; 
HiveParser.ConstantContext = ConstantContext; 
HiveParser.StringLiteralSequenceContext = StringLiteralSequenceContext; 
HiveParser.CharSetStringLiteralContext = CharSetStringLiteralContext; 
HiveParser.DateLiteralContext = DateLiteralContext; 
HiveParser.TimestampLiteralContext = TimestampLiteralContext; 
HiveParser.TimestampLocalTZLiteralContext = TimestampLocalTZLiteralContext; 
HiveParser.IntervalValueContext = IntervalValueContext; 
HiveParser.IntervalLiteralContext = IntervalLiteralContext; 
HiveParser.IntervalExpressionContext = IntervalExpressionContext; 
HiveParser.IntervalQualifiersContext = IntervalQualifiersContext; 
HiveParser.AtomExpressionContext = AtomExpressionContext; 
HiveParser.PrecedenceUnaryOperatorContext = PrecedenceUnaryOperatorContext; 
HiveParser.IsConditionContext = IsConditionContext; 
HiveParser.PrecedenceBitwiseXorOperatorContext = PrecedenceBitwiseXorOperatorContext; 
HiveParser.PrecedenceStarOperatorContext = PrecedenceStarOperatorContext; 
HiveParser.PrecedencePlusOperatorContext = PrecedencePlusOperatorContext; 
HiveParser.PrecedenceConcatenateOperatorContext = PrecedenceConcatenateOperatorContext; 
HiveParser.PrecedenceAmpersandOperatorContext = PrecedenceAmpersandOperatorContext; 
HiveParser.PrecedenceBitwiseOrOperatorContext = PrecedenceBitwiseOrOperatorContext; 
HiveParser.PrecedenceRegexpOperatorContext = PrecedenceRegexpOperatorContext; 
HiveParser.PrecedenceComparisonOperatorContext = PrecedenceComparisonOperatorContext; 
HiveParser.PrecedenceNotOperatorContext = PrecedenceNotOperatorContext; 
HiveParser.PrecedenceLogicOperatorContext = PrecedenceLogicOperatorContext; 
HiveParser.ExpressionContext = ExpressionContext; 
HiveParser.PrecedenceSimilarExpressionInContext = PrecedenceSimilarExpressionInContext; 
HiveParser.SubQueryExpressionContext = SubQueryExpressionContext; 
HiveParser.BooleanValueContext = BooleanValueContext; 
HiveParser.BooleanValueTokContext = BooleanValueTokContext; 
HiveParser.TableOrPartitionContext = TableOrPartitionContext; 
HiveParser.PartitionSpecContext = PartitionSpecContext; 
HiveParser.PartitionValContext = PartitionValContext; 
HiveParser.DropPartitionSpecContext = DropPartitionSpecContext; 
HiveParser.DropPartitionValContext = DropPartitionValContext; 
HiveParser.DropPartitionOperatorContext = DropPartitionOperatorContext; 
HiveParser.SysFuncNamesContext = SysFuncNamesContext; 
HiveParser.DescFuncNamesContext = DescFuncNamesContext; 
HiveParser.IdentifierContext = IdentifierContext; 
HiveParser.FunctionIdentifierContext = FunctionIdentifierContext; 
HiveParser.PrincipalIdentifierContext = PrincipalIdentifierContext; 
HiveParser.NonReservedContext = NonReservedContext; 
HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext = Sql11ReservedKeywordsUsedAsFunctionNameContext; 
