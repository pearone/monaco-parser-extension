// Generated from HiveParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { HiveParserListener } from "./HiveParserListener";
import { HiveParserVisitor } from "./HiveParserVisitor";


export class HiveParser extends Parser {
	public static readonly KW_TRUE = 1;
	public static readonly KW_FALSE = 2;
	public static readonly KW_ALL = 3;
	public static readonly KW_NONE = 4;
	public static readonly KW_AND = 5;
	public static readonly KW_OR = 6;
	public static readonly KW_NOT = 7;
	public static readonly KW_LIKE = 8;
	public static readonly KW_ANY = 9;
	public static readonly KW_IF = 10;
	public static readonly KW_EXISTS = 11;
	public static readonly KW_ASC = 12;
	public static readonly KW_DESC = 13;
	public static readonly KW_NULLS = 14;
	public static readonly KW_LAST = 15;
	public static readonly KW_ORDER = 16;
	public static readonly KW_GROUP = 17;
	public static readonly KW_BY = 18;
	public static readonly KW_HAVING = 19;
	public static readonly KW_WHERE = 20;
	public static readonly KW_FROM = 21;
	public static readonly KW_AS = 22;
	public static readonly KW_SELECT = 23;
	public static readonly KW_DISTINCT = 24;
	public static readonly KW_INSERT = 25;
	public static readonly KW_OVERWRITE = 26;
	public static readonly KW_OUTER = 27;
	public static readonly KW_UNIQUEJOIN = 28;
	public static readonly KW_PRESERVE = 29;
	public static readonly KW_JOIN = 30;
	public static readonly KW_LEFT = 31;
	public static readonly KW_RIGHT = 32;
	public static readonly KW_FULL = 33;
	public static readonly KW_ON = 34;
	public static readonly KW_PARTITION = 35;
	public static readonly KW_PARTITIONS = 36;
	public static readonly KW_TABLE = 37;
	public static readonly KW_TABLES = 38;
	public static readonly KW_COLUMNS = 39;
	public static readonly KW_INDEX = 40;
	public static readonly KW_INDEXES = 41;
	public static readonly KW_REBUILD = 42;
	public static readonly KW_FUNCTIONS = 43;
	public static readonly KW_SHOW = 44;
	public static readonly KW_MSCK = 45;
	public static readonly KW_REPAIR = 46;
	public static readonly KW_DIRECTORY = 47;
	public static readonly KW_LOCAL = 48;
	public static readonly KW_TRANSFORM = 49;
	public static readonly KW_USING = 50;
	public static readonly KW_CLUSTER = 51;
	public static readonly KW_DISTRIBUTE = 52;
	public static readonly KW_SORT = 53;
	public static readonly KW_UNION = 54;
	public static readonly KW_EXCEPT = 55;
	public static readonly KW_LOAD = 56;
	public static readonly KW_EXPORT = 57;
	public static readonly KW_IMPORT = 58;
	public static readonly KW_REPLICATION = 59;
	public static readonly KW_METADATA = 60;
	public static readonly KW_DATA = 61;
	public static readonly KW_INPATH = 62;
	public static readonly KW_IS = 63;
	public static readonly KW_NULL = 64;
	public static readonly KW_CREATE = 65;
	public static readonly KW_EXTERNAL = 66;
	public static readonly KW_ALTER = 67;
	public static readonly KW_CHANGE = 68;
	public static readonly KW_COLUMN = 69;
	public static readonly KW_FIRST = 70;
	public static readonly KW_AFTER = 71;
	public static readonly KW_DESCRIBE = 72;
	public static readonly KW_DROP = 73;
	public static readonly KW_RENAME = 74;
	public static readonly KW_TO = 75;
	public static readonly KW_COMMENT = 76;
	public static readonly KW_BOOLEAN = 77;
	public static readonly KW_TINYINT = 78;
	public static readonly KW_SMALLINT = 79;
	public static readonly KW_INT = 80;
	public static readonly KW_BIGINT = 81;
	public static readonly KW_FLOAT = 82;
	public static readonly KW_DOUBLE = 83;
	public static readonly KW_PRECISION = 84;
	public static readonly KW_DATE = 85;
	public static readonly KW_DATETIME = 86;
	public static readonly KW_TIMESTAMP = 87;
	public static readonly KW_TIMESTAMPLOCALTZ = 88;
	public static readonly KW_TIME = 89;
	public static readonly KW_ZONE = 90;
	public static readonly KW_INTERVAL = 91;
	public static readonly KW_DECIMAL = 92;
	public static readonly KW_STRING = 93;
	public static readonly KW_CHAR = 94;
	public static readonly KW_VARCHAR = 95;
	public static readonly KW_ARRAY = 96;
	public static readonly KW_STRUCT = 97;
	public static readonly KW_MAP = 98;
	public static readonly KW_UNIONTYPE = 99;
	public static readonly KW_REDUCE = 100;
	public static readonly KW_PARTITIONED = 101;
	public static readonly KW_CLUSTERED = 102;
	public static readonly KW_SORTED = 103;
	public static readonly KW_INTO = 104;
	public static readonly KW_BUCKETS = 105;
	public static readonly KW_ROW = 106;
	public static readonly KW_ROWS = 107;
	public static readonly KW_FORMAT = 108;
	public static readonly KW_DELIMITED = 109;
	public static readonly KW_FIELDS = 110;
	public static readonly KW_TERMINATED = 111;
	public static readonly KW_ESCAPED = 112;
	public static readonly KW_COLLECTION = 113;
	public static readonly KW_ITEMS = 114;
	public static readonly KW_KEYS = 115;
	public static readonly KW_KEY_TYPE = 116;
	public static readonly KW_KILL = 117;
	public static readonly KW_LINES = 118;
	public static readonly KW_STORED = 119;
	public static readonly KW_FILEFORMAT = 120;
	public static readonly KW_INPUTFORMAT = 121;
	public static readonly KW_OUTPUTFORMAT = 122;
	public static readonly KW_INPUTDRIVER = 123;
	public static readonly KW_OUTPUTDRIVER = 124;
	public static readonly KW_ENABLE = 125;
	public static readonly KW_DISABLE = 126;
	public static readonly KW_LOCATION = 127;
	public static readonly KW_TABLESAMPLE = 128;
	public static readonly KW_BUCKET = 129;
	public static readonly KW_OUT = 130;
	public static readonly KW_OF = 131;
	public static readonly KW_PERCENT = 132;
	public static readonly KW_CAST = 133;
	public static readonly KW_ADD = 134;
	public static readonly KW_REPLACE = 135;
	public static readonly KW_RLIKE = 136;
	public static readonly KW_REGEXP = 137;
	public static readonly KW_TEMPORARY = 138;
	public static readonly KW_FUNCTION = 139;
	public static readonly KW_MACRO = 140;
	public static readonly KW_FILE = 141;
	public static readonly KW_JAR = 142;
	public static readonly KW_EXPLAIN = 143;
	public static readonly KW_EXTENDED = 144;
	public static readonly KW_FORMATTED = 145;
	public static readonly KW_DEPENDENCY = 146;
	public static readonly KW_LOGICAL = 147;
	public static readonly KW_SERDE = 148;
	public static readonly KW_WITH = 149;
	public static readonly KW_DEFERRED = 150;
	public static readonly KW_SERDEPROPERTIES = 151;
	public static readonly KW_DBPROPERTIES = 152;
	public static readonly KW_LIMIT = 153;
	public static readonly KW_OFFSET = 154;
	public static readonly KW_SET = 155;
	public static readonly KW_UNSET = 156;
	public static readonly KW_TBLPROPERTIES = 157;
	public static readonly KW_IDXPROPERTIES = 158;
	public static readonly KW_VALUE_TYPE = 159;
	public static readonly KW_ELEM_TYPE = 160;
	public static readonly KW_DEFINED = 161;
	public static readonly KW_CASE = 162;
	public static readonly KW_WHEN = 163;
	public static readonly KW_THEN = 164;
	public static readonly KW_ELSE = 165;
	public static readonly KW_END = 166;
	public static readonly KW_MAPJOIN = 167;
	public static readonly KW_STREAMTABLE = 168;
	public static readonly KW_CLUSTERSTATUS = 169;
	public static readonly KW_UTC = 170;
	public static readonly KW_UTCTIMESTAMP = 171;
	public static readonly KW_LONG = 172;
	public static readonly KW_DELETE = 173;
	public static readonly KW_PLUS = 174;
	public static readonly KW_MINUS = 175;
	public static readonly KW_FETCH = 176;
	public static readonly KW_INTERSECT = 177;
	public static readonly KW_VIEW = 178;
	public static readonly KW_VIEWS = 179;
	public static readonly KW_IN = 180;
	public static readonly KW_DATABASE = 181;
	public static readonly KW_DATABASES = 182;
	public static readonly KW_MATERIALIZED = 183;
	public static readonly KW_SCHEMA = 184;
	public static readonly KW_SCHEMAS = 185;
	public static readonly KW_GRANT = 186;
	public static readonly KW_REVOKE = 187;
	public static readonly KW_SSL = 188;
	public static readonly KW_UNDO = 189;
	public static readonly KW_LOCK = 190;
	public static readonly KW_LOCKS = 191;
	public static readonly KW_UNLOCK = 192;
	public static readonly KW_SHARED = 193;
	public static readonly KW_EXCLUSIVE = 194;
	public static readonly KW_PROCEDURE = 195;
	public static readonly KW_UNSIGNED = 196;
	public static readonly KW_WHILE = 197;
	public static readonly KW_READ = 198;
	public static readonly KW_READS = 199;
	public static readonly KW_PURGE = 200;
	public static readonly KW_RANGE = 201;
	public static readonly KW_ANALYZE = 202;
	public static readonly KW_BEFORE = 203;
	public static readonly KW_BETWEEN = 204;
	public static readonly KW_BOTH = 205;
	public static readonly KW_BINARY = 206;
	public static readonly KW_CROSS = 207;
	public static readonly KW_CONTINUE = 208;
	public static readonly KW_CURSOR = 209;
	public static readonly KW_TRIGGER = 210;
	public static readonly KW_RECORDREADER = 211;
	public static readonly KW_RECORDWRITER = 212;
	public static readonly KW_SEMI = 213;
	public static readonly KW_LATERAL = 214;
	public static readonly KW_TOUCH = 215;
	public static readonly KW_ARCHIVE = 216;
	public static readonly KW_UNARCHIVE = 217;
	public static readonly KW_COMPUTE = 218;
	public static readonly KW_STATISTICS = 219;
	public static readonly KW_USE = 220;
	public static readonly KW_OPTION = 221;
	public static readonly KW_CONCATENATE = 222;
	public static readonly KW_SHOW_DATABASE = 223;
	public static readonly KW_UPDATE = 224;
	public static readonly KW_RESTRICT = 225;
	public static readonly KW_CASCADE = 226;
	public static readonly KW_SKEWED = 227;
	public static readonly KW_ROLLUP = 228;
	public static readonly KW_CUBE = 229;
	public static readonly KW_DIRECTORIES = 230;
	public static readonly KW_FOR = 231;
	public static readonly KW_WINDOW = 232;
	public static readonly KW_UNBOUNDED = 233;
	public static readonly KW_PRECEDING = 234;
	public static readonly KW_FOLLOWING = 235;
	public static readonly KW_CURRENT = 236;
	public static readonly KW_CURRENT_DATE = 237;
	public static readonly KW_CURRENT_TIMESTAMP = 238;
	public static readonly KW_LESS = 239;
	public static readonly KW_MORE = 240;
	public static readonly KW_OVER = 241;
	public static readonly KW_GROUPING = 242;
	public static readonly KW_SETS = 243;
	public static readonly KW_TRUNCATE = 244;
	public static readonly KW_NOSCAN = 245;
	public static readonly KW_USER = 246;
	public static readonly KW_ROLE = 247;
	public static readonly KW_ROLES = 248;
	public static readonly KW_INNER = 249;
	public static readonly KW_EXCHANGE = 250;
	public static readonly KW_URI = 251;
	public static readonly KW_SERVER = 252;
	public static readonly KW_ADMIN = 253;
	public static readonly KW_OWNER = 254;
	public static readonly KW_PRINCIPALS = 255;
	public static readonly KW_COMPACT = 256;
	public static readonly KW_COMPACTIONS = 257;
	public static readonly KW_TRANSACTIONS = 258;
	public static readonly KW_REWRITE = 259;
	public static readonly KW_AUTHORIZATION = 260;
	public static readonly KW_REOPTIMIZATION = 261;
	public static readonly KW_CONF = 262;
	public static readonly KW_VALUES = 263;
	public static readonly KW_RELOAD = 264;
	public static readonly KW_YEAR = 265;
	public static readonly KW_QUERY = 266;
	public static readonly KW_QUARTER = 267;
	public static readonly KW_MONTH = 268;
	public static readonly KW_WEEK = 269;
	public static readonly KW_DAY = 270;
	public static readonly KW_DOW = 271;
	public static readonly KW_HOUR = 272;
	public static readonly KW_MINUTE = 273;
	public static readonly KW_SECOND = 274;
	public static readonly KW_START = 275;
	public static readonly KW_TRANSACTION = 276;
	public static readonly KW_COMMIT = 277;
	public static readonly KW_ROLLBACK = 278;
	public static readonly KW_WORK = 279;
	public static readonly KW_ONLY = 280;
	public static readonly KW_WRITE = 281;
	public static readonly KW_ISOLATION = 282;
	public static readonly KW_LEVEL = 283;
	public static readonly KW_SNAPSHOT = 284;
	public static readonly KW_AUTOCOMMIT = 285;
	public static readonly KW_CACHE = 286;
	public static readonly KW_PRIMARY = 287;
	public static readonly KW_FOREIGN = 288;
	public static readonly KW_REFERENCES = 289;
	public static readonly KW_CONSTRAINT = 290;
	public static readonly KW_ENFORCED = 291;
	public static readonly KW_VALIDATE = 292;
	public static readonly KW_NOVALIDATE = 293;
	public static readonly KW_RELY = 294;
	public static readonly KW_NORELY = 295;
	public static readonly KW_UNIQUE = 296;
	public static readonly KW_KEY = 297;
	public static readonly KW_ABORT = 298;
	public static readonly KW_EXTRACT = 299;
	public static readonly KW_FLOOR = 300;
	public static readonly KW_MERGE = 301;
	public static readonly KW_MATCHED = 302;
	public static readonly KW_REPL = 303;
	public static readonly KW_DUMP = 304;
	public static readonly KW_STATUS = 305;
	public static readonly KW_VECTORIZATION = 306;
	public static readonly KW_SUMMARY = 307;
	public static readonly KW_OPERATOR = 308;
	public static readonly KW_EXPRESSION = 309;
	public static readonly KW_DETAIL = 310;
	public static readonly KW_WAIT = 311;
	public static readonly KW_RESOURCE = 312;
	public static readonly KW_PLAN = 313;
	public static readonly KW_QUERY_PARALLELISM = 314;
	public static readonly KW_PLANS = 315;
	public static readonly KW_ACTIVATE = 316;
	public static readonly KW_DEFAULT = 317;
	public static readonly KW_CHECK = 318;
	public static readonly KW_POOL = 319;
	public static readonly KW_MOVE = 320;
	public static readonly KW_DO = 321;
	public static readonly KW_ALLOC_FRACTION = 322;
	public static readonly KW_SCHEDULING_POLICY = 323;
	public static readonly KW_PATH = 324;
	public static readonly KW_MAPPING = 325;
	public static readonly KW_WORKLOAD = 326;
	public static readonly KW_MANAGEMENT = 327;
	public static readonly KW_ACTIVE = 328;
	public static readonly KW_UNMANAGED = 329;
	public static readonly KW_APPLICATION = 330;
	public static readonly KW_SYNC = 331;
	public static readonly DOT = 332;
	public static readonly COLON = 333;
	public static readonly COMMA = 334;
	public static readonly SEMICOLON = 335;
	public static readonly LPAREN = 336;
	public static readonly RPAREN = 337;
	public static readonly LSQUARE = 338;
	public static readonly RSQUARE = 339;
	public static readonly LCURLY = 340;
	public static readonly RCURLY = 341;
	public static readonly EQUAL = 342;
	public static readonly EQUAL_NS = 343;
	public static readonly NOTEQUAL = 344;
	public static readonly LESSTHANOREQUALTO = 345;
	public static readonly LESSTHAN = 346;
	public static readonly GREATERTHANOREQUALTO = 347;
	public static readonly GREATERTHAN = 348;
	public static readonly DIVIDE = 349;
	public static readonly PLUS = 350;
	public static readonly MINUS = 351;
	public static readonly STAR = 352;
	public static readonly MOD = 353;
	public static readonly DIV = 354;
	public static readonly AMPERSAND = 355;
	public static readonly TILDE = 356;
	public static readonly BITWISEOR = 357;
	public static readonly CONCATENATE = 358;
	public static readonly BITWISEXOR = 359;
	public static readonly QUESTION = 360;
	public static readonly DOLLAR = 361;
	public static readonly StringLiteral = 362;
	public static readonly CharSetLiteral = 363;
	public static readonly IntegralLiteral = 364;
	public static readonly NumberLiteral = 365;
	public static readonly ByteLengthLiteral = 366;
	public static readonly Number = 367;
	public static readonly Identifier = 368;
	public static readonly QuotedIdentifier = 369;
	public static readonly CharSetName = 370;
	public static readonly WS = 371;
	public static readonly LINE_COMMENT = 372;
	public static readonly QUERY_HINT = 373;
	public static readonly SHOW_HINT = 374;
	public static readonly HIDDEN_HINT = 375;
	public static readonly RULE_statements = 0;
	public static readonly RULE_statementSeparator = 1;
	public static readonly RULE_statement = 2;
	public static readonly RULE_explainStatement = 3;
	public static readonly RULE_explainOption = 4;
	public static readonly RULE_vectorizationOnly = 5;
	public static readonly RULE_vectorizatonDetail = 6;
	public static readonly RULE_execStatement = 7;
	public static readonly RULE_loadStatement = 8;
	public static readonly RULE_replicationClause = 9;
	public static readonly RULE_exportStatement = 10;
	public static readonly RULE_importStatement = 11;
	public static readonly RULE_replDumpStatement = 12;
	public static readonly RULE_replLoadStatement = 13;
	public static readonly RULE_replConfigs = 14;
	public static readonly RULE_replConfigsList = 15;
	public static readonly RULE_replStatusStatement = 16;
	public static readonly RULE_ddlStatement = 17;
	public static readonly RULE_ifExists = 18;
	public static readonly RULE_restrictOrCascade = 19;
	public static readonly RULE_ifNotExists = 20;
	public static readonly RULE_rewriteEnabled = 21;
	public static readonly RULE_rewriteDisabled = 22;
	public static readonly RULE_storedAsDirs = 23;
	public static readonly RULE_orReplace = 24;
	public static readonly RULE_createDatabaseStatement = 25;
	public static readonly RULE_dbLocation = 26;
	public static readonly RULE_dbProperties = 27;
	public static readonly RULE_dbPropertiesList = 28;
	public static readonly RULE_switchDatabaseStatement = 29;
	public static readonly RULE_dropDatabaseStatement = 30;
	public static readonly RULE_databaseComment = 31;
	public static readonly RULE_createTableStatement = 32;
	public static readonly RULE_truncateTableStatement = 33;
	public static readonly RULE_dropTableStatement = 34;
	public static readonly RULE_alterStatement = 35;
	public static readonly RULE_alterTableStatementSuffix = 36;
	public static readonly RULE_alterTblPartitionStatementSuffix = 37;
	public static readonly RULE_alterStatementPartitionKeyType = 38;
	public static readonly RULE_alterViewStatementSuffix = 39;
	public static readonly RULE_alterMaterializedViewStatementSuffix = 40;
	public static readonly RULE_alterDatabaseStatementSuffix = 41;
	public static readonly RULE_alterDatabaseSuffixProperties = 42;
	public static readonly RULE_alterDatabaseSuffixSetOwner = 43;
	public static readonly RULE_alterDatabaseSuffixSetLocation = 44;
	public static readonly RULE_alterStatementSuffixRename = 45;
	public static readonly RULE_alterStatementSuffixAddCol = 46;
	public static readonly RULE_alterStatementSuffixAddConstraint = 47;
	public static readonly RULE_alterStatementSuffixDropConstraint = 48;
	public static readonly RULE_alterStatementSuffixRenameCol = 49;
	public static readonly RULE_alterStatementSuffixUpdateStatsCol = 50;
	public static readonly RULE_alterStatementSuffixUpdateStats = 51;
	public static readonly RULE_alterStatementChangeColPosition = 52;
	public static readonly RULE_alterStatementSuffixAddPartitions = 53;
	public static readonly RULE_alterStatementSuffixAddPartitionsElement = 54;
	public static readonly RULE_alterStatementSuffixTouch = 55;
	public static readonly RULE_alterStatementSuffixArchive = 56;
	public static readonly RULE_alterStatementSuffixUnArchive = 57;
	public static readonly RULE_partitionLocation = 58;
	public static readonly RULE_alterStatementSuffixDropPartitions = 59;
	public static readonly RULE_alterStatementSuffixProperties = 60;
	public static readonly RULE_alterViewSuffixProperties = 61;
	public static readonly RULE_alterMaterializedViewSuffixRewrite = 62;
	public static readonly RULE_alterMaterializedViewSuffixRebuild = 63;
	public static readonly RULE_alterStatementSuffixSerdeProperties = 64;
	public static readonly RULE_alterIndexStatementSuffix = 65;
	public static readonly RULE_alterStatementSuffixFileFormat = 66;
	public static readonly RULE_alterStatementSuffixClusterbySortby = 67;
	public static readonly RULE_alterTblPartitionStatementSuffixSkewedLocation = 68;
	public static readonly RULE_skewedLocations = 69;
	public static readonly RULE_skewedLocationsList = 70;
	public static readonly RULE_skewedLocationMap = 71;
	public static readonly RULE_alterStatementSuffixLocation = 72;
	public static readonly RULE_alterStatementSuffixSkewedby = 73;
	public static readonly RULE_alterStatementSuffixExchangePartition = 74;
	public static readonly RULE_alterStatementSuffixRenamePart = 75;
	public static readonly RULE_alterStatementSuffixStatsPart = 76;
	public static readonly RULE_alterStatementSuffixMergeFiles = 77;
	public static readonly RULE_alterStatementSuffixBucketNum = 78;
	public static readonly RULE_createIndexStatement = 79;
	public static readonly RULE_locationPath = 80;
	public static readonly RULE_dropIndexStatement = 81;
	public static readonly RULE_tablePartitionPrefix = 82;
	public static readonly RULE_blocking = 83;
	public static readonly RULE_alterStatementSuffixCompact = 84;
	public static readonly RULE_alterStatementSuffixSetOwner = 85;
	public static readonly RULE_fileFormat = 86;
	public static readonly RULE_inputFileFormat = 87;
	public static readonly RULE_tabTypeExpr = 88;
	public static readonly RULE_partTypeExpr = 89;
	public static readonly RULE_tabPartColTypeExpr = 90;
	public static readonly RULE_descStatement = 91;
	public static readonly RULE_analyzeStatement = 92;
	public static readonly RULE_showStatement = 93;
	public static readonly RULE_lockStatement = 94;
	public static readonly RULE_lockDatabase = 95;
	public static readonly RULE_lockMode = 96;
	public static readonly RULE_unlockStatement = 97;
	public static readonly RULE_unlockDatabase = 98;
	public static readonly RULE_createRoleStatement = 99;
	public static readonly RULE_dropRoleStatement = 100;
	public static readonly RULE_grantPrivileges = 101;
	public static readonly RULE_revokePrivileges = 102;
	public static readonly RULE_grantRole = 103;
	public static readonly RULE_revokeRole = 104;
	public static readonly RULE_showRoleGrants = 105;
	public static readonly RULE_showRoles = 106;
	public static readonly RULE_showCurrentRole = 107;
	public static readonly RULE_setRole = 108;
	public static readonly RULE_showGrants = 109;
	public static readonly RULE_showRolePrincipals = 110;
	public static readonly RULE_privilegeIncludeColObject = 111;
	public static readonly RULE_privilegeObject = 112;
	public static readonly RULE_privObject = 113;
	public static readonly RULE_privObjectCols = 114;
	public static readonly RULE_privilegeList = 115;
	public static readonly RULE_privlegeDef = 116;
	public static readonly RULE_privilegeType = 117;
	public static readonly RULE_principalSpecification = 118;
	public static readonly RULE_principalName = 119;
	public static readonly RULE_withGrantOption = 120;
	public static readonly RULE_grantOptionFor = 121;
	public static readonly RULE_adminOptionFor = 122;
	public static readonly RULE_withAdminOption = 123;
	public static readonly RULE_metastoreCheck = 124;
	public static readonly RULE_resourceList = 125;
	public static readonly RULE_resource = 126;
	public static readonly RULE_resourceType = 127;
	public static readonly RULE_createFunctionStatement = 128;
	public static readonly RULE_dropFunctionStatement = 129;
	public static readonly RULE_reloadFunctionStatement = 130;
	public static readonly RULE_createMacroStatement = 131;
	public static readonly RULE_dropMacroStatement = 132;
	public static readonly RULE_createViewStatement = 133;
	public static readonly RULE_createMaterializedViewStatement = 134;
	public static readonly RULE_viewPartition = 135;
	public static readonly RULE_dropViewStatement = 136;
	public static readonly RULE_dropMaterializedViewStatement = 137;
	public static readonly RULE_showFunctionIdentifier = 138;
	public static readonly RULE_showStmtIdentifier = 139;
	public static readonly RULE_tableComment = 140;
	public static readonly RULE_tablePartition = 141;
	public static readonly RULE_tableBuckets = 142;
	public static readonly RULE_tableSkewed = 143;
	public static readonly RULE_rowFormat = 144;
	public static readonly RULE_recordReader = 145;
	public static readonly RULE_recordWriter = 146;
	public static readonly RULE_rowFormatSerde = 147;
	public static readonly RULE_rowFormatDelimited = 148;
	public static readonly RULE_tableRowFormat = 149;
	public static readonly RULE_tablePropertiesPrefixed = 150;
	public static readonly RULE_tableProperties = 151;
	public static readonly RULE_tablePropertiesList = 152;
	public static readonly RULE_keyValueProperty = 153;
	public static readonly RULE_keyProperty = 154;
	public static readonly RULE_tableRowFormatFieldIdentifier = 155;
	public static readonly RULE_tableRowFormatCollItemsIdentifier = 156;
	public static readonly RULE_tableRowFormatMapKeysIdentifier = 157;
	public static readonly RULE_tableRowFormatLinesIdentifier = 158;
	public static readonly RULE_tableRowNullFormat = 159;
	public static readonly RULE_tableFileFormat = 160;
	public static readonly RULE_tableLocation = 161;
	public static readonly RULE_columnNameTypeList = 162;
	public static readonly RULE_columnNameTypeOrConstraintList = 163;
	public static readonly RULE_columnNameColonTypeList = 164;
	public static readonly RULE_columnNameList = 165;
	public static readonly RULE_columnName = 166;
	public static readonly RULE_extColumnName = 167;
	public static readonly RULE_columnNameOrderList = 168;
	public static readonly RULE_columnParenthesesList = 169;
	public static readonly RULE_enableValidateSpecification = 170;
	public static readonly RULE_enableSpecification = 171;
	public static readonly RULE_validateSpecification = 172;
	public static readonly RULE_enforcedSpecification = 173;
	public static readonly RULE_relySpecification = 174;
	public static readonly RULE_createConstraint = 175;
	public static readonly RULE_alterConstraintWithName = 176;
	public static readonly RULE_pkConstraint = 177;
	public static readonly RULE_createForeignKey = 178;
	public static readonly RULE_alterForeignKeyWithName = 179;
	public static readonly RULE_skewedValueElement = 180;
	public static readonly RULE_skewedColumnValuePairList = 181;
	public static readonly RULE_skewedColumnValuePair = 182;
	public static readonly RULE_skewedColumnValues = 183;
	public static readonly RULE_skewedColumnValue = 184;
	public static readonly RULE_skewedValueLocationElement = 185;
	public static readonly RULE_orderSpecification = 186;
	public static readonly RULE_nullOrdering = 187;
	public static readonly RULE_columnNameOrder = 188;
	public static readonly RULE_columnNameCommentList = 189;
	public static readonly RULE_columnNameComment = 190;
	public static readonly RULE_columnRefOrder = 191;
	public static readonly RULE_columnNameType = 192;
	public static readonly RULE_columnNameTypeOrConstraint = 193;
	public static readonly RULE_tableConstraint = 194;
	public static readonly RULE_columnNameTypeConstraint = 195;
	public static readonly RULE_columnConstraint = 196;
	public static readonly RULE_foreignKeyConstraint = 197;
	public static readonly RULE_colConstraint = 198;
	public static readonly RULE_alterColumnConstraint = 199;
	public static readonly RULE_alterForeignKeyConstraint = 200;
	public static readonly RULE_alterColConstraint = 201;
	public static readonly RULE_tableConstraintPrimaryKey = 202;
	public static readonly RULE_constraintOptsCreate = 203;
	public static readonly RULE_constraintOptsAlter = 204;
	public static readonly RULE_columnNameColonType = 205;
	public static readonly RULE_colType = 206;
	public static readonly RULE_colTypeList = 207;
	public static readonly RULE_type_db_col = 208;
	public static readonly RULE_primitiveType = 209;
	public static readonly RULE_listType = 210;
	public static readonly RULE_structType = 211;
	public static readonly RULE_mapType = 212;
	public static readonly RULE_unionType = 213;
	public static readonly RULE_setOperator = 214;
	public static readonly RULE_queryStatementExpression = 215;
	public static readonly RULE_queryStatementExpressionBody = 216;
	public static readonly RULE_withClause = 217;
	public static readonly RULE_cteStatement = 218;
	public static readonly RULE_fromStatement = 219;
	public static readonly RULE_singleFromStatement = 220;
	public static readonly RULE_regularBody = 221;
	public static readonly RULE_atomSelectStatement = 222;
	public static readonly RULE_selectStatement = 223;
	public static readonly RULE_setOpSelectStatement = 224;
	public static readonly RULE_selectStatementWithCTE = 225;
	public static readonly RULE_body = 226;
	public static readonly RULE_insertClause = 227;
	public static readonly RULE_destination = 228;
	public static readonly RULE_limitClause = 229;
	public static readonly RULE_deleteStatement = 230;
	public static readonly RULE_columnAssignmentClause = 231;
	public static readonly RULE_setColumnsClause = 232;
	public static readonly RULE_updateStatement = 233;
	public static readonly RULE_sqlTransactionStatement = 234;
	public static readonly RULE_startTransactionStatement = 235;
	public static readonly RULE_transactionMode = 236;
	public static readonly RULE_transactionAccessMode = 237;
	public static readonly RULE_isolationLevel = 238;
	public static readonly RULE_levelOfIsolation = 239;
	public static readonly RULE_commitStatement = 240;
	public static readonly RULE_rollbackStatement = 241;
	public static readonly RULE_setAutoCommitStatement = 242;
	public static readonly RULE_abortTransactionStatement = 243;
	public static readonly RULE_mergeStatement = 244;
	public static readonly RULE_whenClauses = 245;
	public static readonly RULE_whenNotMatchedClause = 246;
	public static readonly RULE_whenMatchedAndClause = 247;
	public static readonly RULE_whenMatchedThenClause = 248;
	public static readonly RULE_updateOrDelete = 249;
	public static readonly RULE_killQueryStatement = 250;
	public static readonly RULE_selectClause = 251;
	public static readonly RULE_selectList = 252;
	public static readonly RULE_selectTrfmClause = 253;
	public static readonly RULE_selectItem = 254;
	public static readonly RULE_trfmClause = 255;
	public static readonly RULE_selectExpression = 256;
	public static readonly RULE_selectExpressionList = 257;
	public static readonly RULE_window_clause = 258;
	public static readonly RULE_window_defn = 259;
	public static readonly RULE_window_specification = 260;
	public static readonly RULE_window_frame = 261;
	public static readonly RULE_window_range_expression = 262;
	public static readonly RULE_window_value_expression = 263;
	public static readonly RULE_window_frame_start_boundary = 264;
	public static readonly RULE_window_frame_boundary = 265;
	public static readonly RULE_tableAllColumns = 266;
	public static readonly RULE_tableOrColumn = 267;
	public static readonly RULE_expressionList = 268;
	public static readonly RULE_aliasList = 269;
	public static readonly RULE_fromClause = 270;
	public static readonly RULE_fromSource = 271;
	public static readonly RULE_atomjoinSource = 272;
	public static readonly RULE_joinSource = 273;
	public static readonly RULE_joinSourcePart = 274;
	public static readonly RULE_uniqueJoinSource = 275;
	public static readonly RULE_uniqueJoinExpr = 276;
	public static readonly RULE_uniqueJoinToken = 277;
	public static readonly RULE_joinToken = 278;
	public static readonly RULE_lateralView = 279;
	public static readonly RULE_tableAlias = 280;
	public static readonly RULE_tableBucketSample = 281;
	public static readonly RULE_splitSample = 282;
	public static readonly RULE_tableSample = 283;
	public static readonly RULE_tableSource = 284;
	public static readonly RULE_uniqueJoinTableSource = 285;
	public static readonly RULE_tableName = 286;
	public static readonly RULE_viewName = 287;
	public static readonly RULE_subQuerySource = 288;
	public static readonly RULE_partitioningSpec = 289;
	public static readonly RULE_partitionTableFunctionSource = 290;
	public static readonly RULE_partitionedTableFunction = 291;
	public static readonly RULE_whereClause = 292;
	public static readonly RULE_searchCondition = 293;
	public static readonly RULE_valuesClause = 294;
	public static readonly RULE_valuesTableConstructor = 295;
	public static readonly RULE_valueRowConstructor = 296;
	public static readonly RULE_virtualTableSource = 297;
	public static readonly RULE_groupByClause = 298;
	public static readonly RULE_groupby_expression = 299;
	public static readonly RULE_groupByEmpty = 300;
	public static readonly RULE_rollupStandard = 301;
	public static readonly RULE_rollupOldSyntax = 302;
	public static readonly RULE_groupingSetExpression = 303;
	public static readonly RULE_groupingSetExpressionMultiple = 304;
	public static readonly RULE_groupingExpressionSingle = 305;
	public static readonly RULE_havingClause = 306;
	public static readonly RULE_havingCondition = 307;
	public static readonly RULE_expressionsInParenthesis = 308;
	public static readonly RULE_expressionsNotInParenthesis = 309;
	public static readonly RULE_expressionPart = 310;
	public static readonly RULE_expressions = 311;
	public static readonly RULE_columnRefOrderInParenthesis = 312;
	public static readonly RULE_columnRefOrderNotInParenthesis = 313;
	public static readonly RULE_orderByClause = 314;
	public static readonly RULE_clusterByClause = 315;
	public static readonly RULE_partitionByClause = 316;
	public static readonly RULE_distributeByClause = 317;
	public static readonly RULE_sortByClause = 318;
	public static readonly RULE_function_ = 319;
	public static readonly RULE_functionName = 320;
	public static readonly RULE_castExpression = 321;
	public static readonly RULE_caseExpression = 322;
	public static readonly RULE_whenExpression = 323;
	public static readonly RULE_floorExpression = 324;
	public static readonly RULE_floorDateQualifiers = 325;
	public static readonly RULE_extractExpression = 326;
	public static readonly RULE_timeQualifiers = 327;
	public static readonly RULE_constant = 328;
	public static readonly RULE_stringLiteralSequence = 329;
	public static readonly RULE_charSetStringLiteral = 330;
	public static readonly RULE_dateLiteral = 331;
	public static readonly RULE_timestampLiteral = 332;
	public static readonly RULE_timestampLocalTZLiteral = 333;
	public static readonly RULE_intervalValue = 334;
	public static readonly RULE_intervalLiteral = 335;
	public static readonly RULE_intervalExpression = 336;
	public static readonly RULE_intervalQualifiers = 337;
	public static readonly RULE_atomExpression = 338;
	public static readonly RULE_precedenceUnaryOperator = 339;
	public static readonly RULE_isCondition = 340;
	public static readonly RULE_precedenceBitwiseXorOperator = 341;
	public static readonly RULE_precedenceStarOperator = 342;
	public static readonly RULE_precedencePlusOperator = 343;
	public static readonly RULE_precedenceConcatenateOperator = 344;
	public static readonly RULE_precedenceAmpersandOperator = 345;
	public static readonly RULE_precedenceBitwiseOrOperator = 346;
	public static readonly RULE_precedenceRegexpOperator = 347;
	public static readonly RULE_precedenceComparisonOperator = 348;
	public static readonly RULE_precedenceNotOperator = 349;
	public static readonly RULE_precedenceLogicOperator = 350;
	public static readonly RULE_expression = 351;
	public static readonly RULE_precedenceSimilarExpressionIn = 352;
	public static readonly RULE_subQueryExpression = 353;
	public static readonly RULE_booleanValue = 354;
	public static readonly RULE_booleanValueTok = 355;
	public static readonly RULE_tableOrPartition = 356;
	public static readonly RULE_partitionSpec = 357;
	public static readonly RULE_partitionVal = 358;
	public static readonly RULE_dropPartitionSpec = 359;
	public static readonly RULE_dropPartitionVal = 360;
	public static readonly RULE_dropPartitionOperator = 361;
	public static readonly RULE_sysFuncNames = 362;
	public static readonly RULE_descFuncNames = 363;
	public static readonly RULE_identifier = 364;
	public static readonly RULE_functionIdentifier = 365;
	public static readonly RULE_principalIdentifier = 366;
	public static readonly RULE_nonReserved = 367;
	public static readonly RULE_sql11ReservedKeywordsUsedAsFunctionName = 368;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"statements", "statementSeparator", "statement", "explainStatement", "explainOption", 
		"vectorizationOnly", "vectorizatonDetail", "execStatement", "loadStatement", 
		"replicationClause", "exportStatement", "importStatement", "replDumpStatement", 
		"replLoadStatement", "replConfigs", "replConfigsList", "replStatusStatement", 
		"ddlStatement", "ifExists", "restrictOrCascade", "ifNotExists", "rewriteEnabled", 
		"rewriteDisabled", "storedAsDirs", "orReplace", "createDatabaseStatement", 
		"dbLocation", "dbProperties", "dbPropertiesList", "switchDatabaseStatement", 
		"dropDatabaseStatement", "databaseComment", "createTableStatement", "truncateTableStatement", 
		"dropTableStatement", "alterStatement", "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
		"alterStatementPartitionKeyType", "alterViewStatementSuffix", "alterMaterializedViewStatementSuffix", 
		"alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner", 
		"alterDatabaseSuffixSetLocation", "alterStatementSuffixRename", "alterStatementSuffixAddCol", 
		"alterStatementSuffixAddConstraint", "alterStatementSuffixDropConstraint", 
		"alterStatementSuffixRenameCol", "alterStatementSuffixUpdateStatsCol", 
		"alterStatementSuffixUpdateStats", "alterStatementChangeColPosition", 
		"alterStatementSuffixAddPartitions", "alterStatementSuffixAddPartitionsElement", 
		"alterStatementSuffixTouch", "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
		"partitionLocation", "alterStatementSuffixDropPartitions", "alterStatementSuffixProperties", 
		"alterViewSuffixProperties", "alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild", 
		"alterStatementSuffixSerdeProperties", "alterIndexStatementSuffix", "alterStatementSuffixFileFormat", 
		"alterStatementSuffixClusterbySortby", "alterTblPartitionStatementSuffixSkewedLocation", 
		"skewedLocations", "skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation", 
		"alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition", 
		"alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", "alterStatementSuffixMergeFiles", 
		"alterStatementSuffixBucketNum", "createIndexStatement", "locationPath", 
		"dropIndexStatement", "tablePartitionPrefix", "blocking", "alterStatementSuffixCompact", 
		"alterStatementSuffixSetOwner", "fileFormat", "inputFileFormat", "tabTypeExpr", 
		"partTypeExpr", "tabPartColTypeExpr", "descStatement", "analyzeStatement", 
		"showStatement", "lockStatement", "lockDatabase", "lockMode", "unlockStatement", 
		"unlockDatabase", "createRoleStatement", "dropRoleStatement", "grantPrivileges", 
		"revokePrivileges", "grantRole", "revokeRole", "showRoleGrants", "showRoles", 
		"showCurrentRole", "setRole", "showGrants", "showRolePrincipals", "privilegeIncludeColObject", 
		"privilegeObject", "privObject", "privObjectCols", "privilegeList", "privlegeDef", 
		"privilegeType", "principalSpecification", "principalName", "withGrantOption", 
		"grantOptionFor", "adminOptionFor", "withAdminOption", "metastoreCheck", 
		"resourceList", "resource", "resourceType", "createFunctionStatement", 
		"dropFunctionStatement", "reloadFunctionStatement", "createMacroStatement", 
		"dropMacroStatement", "createViewStatement", "createMaterializedViewStatement", 
		"viewPartition", "dropViewStatement", "dropMaterializedViewStatement", 
		"showFunctionIdentifier", "showStmtIdentifier", "tableComment", "tablePartition", 
		"tableBuckets", "tableSkewed", "rowFormat", "recordReader", "recordWriter", 
		"rowFormatSerde", "rowFormatDelimited", "tableRowFormat", "tablePropertiesPrefixed", 
		"tableProperties", "tablePropertiesList", "keyValueProperty", "keyProperty", 
		"tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
		"tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", "tableRowNullFormat", 
		"tableFileFormat", "tableLocation", "columnNameTypeList", "columnNameTypeOrConstraintList", 
		"columnNameColonTypeList", "columnNameList", "columnName", "extColumnName", 
		"columnNameOrderList", "columnParenthesesList", "enableValidateSpecification", 
		"enableSpecification", "validateSpecification", "enforcedSpecification", 
		"relySpecification", "createConstraint", "alterConstraintWithName", "pkConstraint", 
		"createForeignKey", "alterForeignKeyWithName", "skewedValueElement", "skewedColumnValuePairList", 
		"skewedColumnValuePair", "skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
		"orderSpecification", "nullOrdering", "columnNameOrder", "columnNameCommentList", 
		"columnNameComment", "columnRefOrder", "columnNameType", "columnNameTypeOrConstraint", 
		"tableConstraint", "columnNameTypeConstraint", "columnConstraint", "foreignKeyConstraint", 
		"colConstraint", "alterColumnConstraint", "alterForeignKeyConstraint", 
		"alterColConstraint", "tableConstraintPrimaryKey", "constraintOptsCreate", 
		"constraintOptsAlter", "columnNameColonType", "colType", "colTypeList", 
		"type_db_col", "primitiveType", "listType", "structType", "mapType", "unionType", 
		"setOperator", "queryStatementExpression", "queryStatementExpressionBody", 
		"withClause", "cteStatement", "fromStatement", "singleFromStatement", 
		"regularBody", "atomSelectStatement", "selectStatement", "setOpSelectStatement", 
		"selectStatementWithCTE", "body", "insertClause", "destination", "limitClause", 
		"deleteStatement", "columnAssignmentClause", "setColumnsClause", "updateStatement", 
		"sqlTransactionStatement", "startTransactionStatement", "transactionMode", 
		"transactionAccessMode", "isolationLevel", "levelOfIsolation", "commitStatement", 
		"rollbackStatement", "setAutoCommitStatement", "abortTransactionStatement", 
		"mergeStatement", "whenClauses", "whenNotMatchedClause", "whenMatchedAndClause", 
		"whenMatchedThenClause", "updateOrDelete", "killQueryStatement", "selectClause", 
		"selectList", "selectTrfmClause", "selectItem", "trfmClause", "selectExpression", 
		"selectExpressionList", "window_clause", "window_defn", "window_specification", 
		"window_frame", "window_range_expression", "window_value_expression", 
		"window_frame_start_boundary", "window_frame_boundary", "tableAllColumns", 
		"tableOrColumn", "expressionList", "aliasList", "fromClause", "fromSource", 
		"atomjoinSource", "joinSource", "joinSourcePart", "uniqueJoinSource", 
		"uniqueJoinExpr", "uniqueJoinToken", "joinToken", "lateralView", "tableAlias", 
		"tableBucketSample", "splitSample", "tableSample", "tableSource", "uniqueJoinTableSource", 
		"tableName", "viewName", "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
		"partitionedTableFunction", "whereClause", "searchCondition", "valuesClause", 
		"valuesTableConstructor", "valueRowConstructor", "virtualTableSource", 
		"groupByClause", "groupby_expression", "groupByEmpty", "rollupStandard", 
		"rollupOldSyntax", "groupingSetExpression", "groupingSetExpressionMultiple", 
		"groupingExpressionSingle", "havingClause", "havingCondition", "expressionsInParenthesis", 
		"expressionsNotInParenthesis", "expressionPart", "expressions", "columnRefOrderInParenthesis", 
		"columnRefOrderNotInParenthesis", "orderByClause", "clusterByClause", 
		"partitionByClause", "distributeByClause", "sortByClause", "function_", 
		"functionName", "castExpression", "caseExpression", "whenExpression", 
		"floorExpression", "floorDateQualifiers", "extractExpression", "timeQualifiers", 
		"constant", "stringLiteralSequence", "charSetStringLiteral", "dateLiteral", 
		"timestampLiteral", "timestampLocalTZLiteral", "intervalValue", "intervalLiteral", 
		"intervalExpression", "intervalQualifiers", "atomExpression", "precedenceUnaryOperator", 
		"isCondition", "precedenceBitwiseXorOperator", "precedenceStarOperator", 
		"precedencePlusOperator", "precedenceConcatenateOperator", "precedenceAmpersandOperator", 
		"precedenceBitwiseOrOperator", "precedenceRegexpOperator", "precedenceComparisonOperator", 
		"precedenceNotOperator", "precedenceLogicOperator", "expression", "precedenceSimilarExpressionIn", 
		"subQueryExpression", "booleanValue", "booleanValueTok", "tableOrPartition", 
		"partitionSpec", "partitionVal", "dropPartitionSpec", "dropPartitionVal", 
		"dropPartitionOperator", "sysFuncNames", "descFuncNames", "identifier", 
		"functionIdentifier", "principalIdentifier", "nonReserved", "sql11ReservedKeywordsUsedAsFunctionName",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'TRUE'", "'FALSE'", "'ALL'", "'NONE'", "'AND'", "'OR'", undefined, 
		"'LIKE'", "'ANY'", "'IF'", "'EXISTS'", "'ASC'", "'DESC'", "'NULLS'", "'LAST'", 
		"'ORDER'", "'GROUP'", "'BY'", "'HAVING'", "'WHERE'", "'FROM'", "'AS'", 
		"'SELECT'", "'DISTINCT'", "'INSERT'", "'OVERWRITE'", "'OUTER'", "'UNIQUEJOIN'", 
		"'PRESERVE'", "'JOIN'", "'LEFT'", "'RIGHT'", "'FULL'", "'ON'", "'PARTITION'", 
		"'PARTITIONS'", "'TABLE'", "'TABLES'", "'COLUMNS'", "'INDEX'", "'INDEXES'", 
		"'REBUILD'", "'FUNCTIONS'", "'SHOW'", "'MSCK'", "'REPAIR'", "'DIRECTORY'", 
		"'LOCAL'", "'TRANSFORM'", "'USING'", "'CLUSTER'", "'DISTRIBUTE'", "'SORT'", 
		"'UNION'", "'EXCEPT'", "'LOAD'", "'EXPORT'", "'IMPORT'", "'REPLICATION'", 
		"'METADATA'", "'DATA'", "'INPATH'", "'IS'", "'NULL'", "'CREATE'", "'EXTERNAL'", 
		"'ALTER'", "'CHANGE'", "'COLUMN'", "'FIRST'", "'AFTER'", "'DESCRIBE'", 
		"'DROP'", "'RENAME'", "'TO'", "'COMMENT'", "'BOOLEAN'", "'TINYINT'", "'SMALLINT'", 
		undefined, "'BIGINT'", "'FLOAT'", "'DOUBLE'", "'PRECISION'", "'DATE'", 
		"'DATETIME'", "'TIMESTAMP'", "'TIMESTAMPLOCALTZ'", "'TIME'", "'ZONE'", 
		"'INTERVAL'", undefined, "'STRING'", "'CHAR'", "'VARCHAR'", "'ARRAY'", 
		"'STRUCT'", "'MAP'", "'UNIONTYPE'", "'REDUCE'", "'PARTITIONED'", "'CLUSTERED'", 
		"'SORTED'", "'INTO'", "'BUCKETS'", "'ROW'", "'ROWS'", "'FORMAT'", "'DELIMITED'", 
		"'FIELDS'", "'TERMINATED'", "'ESCAPED'", "'COLLECTION'", "'ITEMS'", "'KEYS'", 
		"'$KEY$'", "'KILL'", "'LINES'", "'STORED'", "'FILEFORMAT'", "'INPUTFORMAT'", 
		"'OUTPUTFORMAT'", "'INPUTDRIVER'", "'OUTPUTDRIVER'", "'ENABLE'", "'DISABLE'", 
		"'LOCATION'", "'TABLESAMPLE'", "'BUCKET'", "'OUT'", "'OF'", "'PERCENT'", 
		"'CAST'", "'ADD'", "'REPLACE'", "'RLIKE'", "'REGEXP'", "'TEMPORARY'", 
		"'FUNCTION'", "'MACRO'", "'FILE'", "'JAR'", "'EXPLAIN'", "'EXTENDED'", 
		"'FORMATTED'", "'DEPENDENCY'", "'LOGICAL'", "'SERDE'", "'WITH'", "'DEFERRED'", 
		"'SERDEPROPERTIES'", "'DBPROPERTIES'", "'LIMIT'", "'OFFSET'", "'SET'", 
		"'UNSET'", "'TBLPROPERTIES'", "'IDXPROPERTIES'", "'$VALUE$'", "'$ELEM$'", 
		"'DEFINED'", "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'MAPJOIN'", 
		"'STREAMTABLE'", "'CLUSTERSTATUS'", "'UTC'", "'UTC_TMESTAMP'", "'LONG'", 
		"'DELETE'", "'PLUS'", "'MINUS'", "'FETCH'", "'INTERSECT'", "'VIEW'", "'VIEWS'", 
		"'IN'", "'DATABASE'", "'DATABASES'", "'MATERIALIZED'", "'SCHEMA'", "'SCHEMAS'", 
		"'GRANT'", "'REVOKE'", "'SSL'", "'UNDO'", "'LOCK'", "'LOCKS'", "'UNLOCK'", 
		"'SHARED'", "'EXCLUSIVE'", "'PROCEDURE'", "'UNSIGNED'", "'WHILE'", "'READ'", 
		"'READS'", "'PURGE'", "'RANGE'", "'ANALYZE'", "'BEFORE'", "'BETWEEN'", 
		"'BOTH'", "'BINARY'", "'CROSS'", "'CONTINUE'", "'CURSOR'", "'TRIGGER'", 
		"'RECORDREADER'", "'RECORDWRITER'", "'SEMI'", "'LATERAL'", "'TOUCH'", 
		"'ARCHIVE'", "'UNARCHIVE'", "'COMPUTE'", "'STATISTICS'", "'USE'", "'OPTION'", 
		"'CONCATENATE'", "'SHOW_DATABASE'", "'UPDATE'", "'RESTRICT'", "'CASCADE'", 
		"'SKEWED'", "'ROLLUP'", "'CUBE'", "'DIRECTORIES'", "'FOR'", "'WINDOW'", 
		"'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", "'CURRENT_DATE'", 
		"'CURRENT_TIMESTAMP'", "'LESS'", "'MORE'", "'OVER'", "'GROUPING'", "'SETS'", 
		"'TRUNCATE'", "'NOSCAN'", "'USER'", "'ROLE'", "'ROLES'", "'INNER'", "'EXCHANGE'", 
		"'URI'", "'SERVER'", "'ADMIN'", "'OWNER'", "'PRINCIPALS'", "'COMPACT'", 
		"'COMPACTIONS'", "'TRANSACTIONS'", "'REWRITE'", "'AUTHORIZATION'", "'REOPTIMIZATION'", 
		"'CONF'", "'VALUES'", "'RELOAD'", undefined, "'QUERY'", "'QUARTER'", undefined, 
		undefined, undefined, "'DAYOFWEEK'", undefined, undefined, undefined, 
		"'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", "'WORK'", "'ONLY'", 
		"'WRITE'", "'ISOLATION'", "'LEVEL'", "'SNAPSHOT'", "'AUTOCOMMIT'", "'CACHE'", 
		"'PRIMARY'", "'FOREIGN'", "'REFERENCES'", "'CONSTRAINT'", "'ENFORCED'", 
		"'VALIDATE'", "'NOVALIDATE'", "'RELY'", "'NORELY'", "'UNIQUE'", "'KEY'", 
		"'ABORT'", "'EXTRACT'", "'FLOOR'", "'MERGE'", "'MATCHED'", "'REPL'", "'DUMP'", 
		"'STATUS'", "'VECTORIZATION'", "'SUMMARY'", "'OPERATOR'", "'EXPRESSION'", 
		"'DETAIL'", "'WAIT'", "'RESOURCE'", "'PLAN'", "'QUERY_PARALLELISM'", "'PLANS'", 
		"'ACTIVATE'", "'DEFAULT'", "'CHECK'", "'POOL'", "'MOVE'", "'DO'", "'ALLOC_FRACTION'", 
		"'SCHEDULING_POLICY'", "'PATH'", "'MAPPING'", "'WORKLOAD'", "'MANAGEMENT'", 
		"'ACTIVE'", "'UNMANAGED'", "'APPLICATION'", "'SYNC'", "'.'", "':'", "','", 
		"';'", "'('", "')'", "'['", "']'", "'{'", "'}'", undefined, "'<=>'", undefined, 
		"'<='", "'<'", "'>='", "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", 
		"'&'", "'~'", "'|'", "'||'", "'^'", "'?'", "'$'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_NONE", "KW_AND", "KW_OR", 
		"KW_NOT", "KW_LIKE", "KW_ANY", "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", 
		"KW_NULLS", "KW_LAST", "KW_ORDER", "KW_GROUP", "KW_BY", "KW_HAVING", "KW_WHERE", 
		"KW_FROM", "KW_AS", "KW_SELECT", "KW_DISTINCT", "KW_INSERT", "KW_OVERWRITE", 
		"KW_OUTER", "KW_UNIQUEJOIN", "KW_PRESERVE", "KW_JOIN", "KW_LEFT", "KW_RIGHT", 
		"KW_FULL", "KW_ON", "KW_PARTITION", "KW_PARTITIONS", "KW_TABLE", "KW_TABLES", 
		"KW_COLUMNS", "KW_INDEX", "KW_INDEXES", "KW_REBUILD", "KW_FUNCTIONS", 
		"KW_SHOW", "KW_MSCK", "KW_REPAIR", "KW_DIRECTORY", "KW_LOCAL", "KW_TRANSFORM", 
		"KW_USING", "KW_CLUSTER", "KW_DISTRIBUTE", "KW_SORT", "KW_UNION", "KW_EXCEPT", 
		"KW_LOAD", "KW_EXPORT", "KW_IMPORT", "KW_REPLICATION", "KW_METADATA", 
		"KW_DATA", "KW_INPATH", "KW_IS", "KW_NULL", "KW_CREATE", "KW_EXTERNAL", 
		"KW_ALTER", "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_AFTER", "KW_DESCRIBE", 
		"KW_DROP", "KW_RENAME", "KW_TO", "KW_COMMENT", "KW_BOOLEAN", "KW_TINYINT", 
		"KW_SMALLINT", "KW_INT", "KW_BIGINT", "KW_FLOAT", "KW_DOUBLE", "KW_PRECISION", 
		"KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", "KW_TIME", 
		"KW_ZONE", "KW_INTERVAL", "KW_DECIMAL", "KW_STRING", "KW_CHAR", "KW_VARCHAR", 
		"KW_ARRAY", "KW_STRUCT", "KW_MAP", "KW_UNIONTYPE", "KW_REDUCE", "KW_PARTITIONED", 
		"KW_CLUSTERED", "KW_SORTED", "KW_INTO", "KW_BUCKETS", "KW_ROW", "KW_ROWS", 
		"KW_FORMAT", "KW_DELIMITED", "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", 
		"KW_COLLECTION", "KW_ITEMS", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LINES", 
		"KW_STORED", "KW_FILEFORMAT", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "KW_INPUTDRIVER", 
		"KW_OUTPUTDRIVER", "KW_ENABLE", "KW_DISABLE", "KW_LOCATION", "KW_TABLESAMPLE", 
		"KW_BUCKET", "KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", "KW_ADD", "KW_REPLACE", 
		"KW_RLIKE", "KW_REGEXP", "KW_TEMPORARY", "KW_FUNCTION", "KW_MACRO", "KW_FILE", 
		"KW_JAR", "KW_EXPLAIN", "KW_EXTENDED", "KW_FORMATTED", "KW_DEPENDENCY", 
		"KW_LOGICAL", "KW_SERDE", "KW_WITH", "KW_DEFERRED", "KW_SERDEPROPERTIES", 
		"KW_DBPROPERTIES", "KW_LIMIT", "KW_OFFSET", "KW_SET", "KW_UNSET", "KW_TBLPROPERTIES", 
		"KW_IDXPROPERTIES", "KW_VALUE_TYPE", "KW_ELEM_TYPE", "KW_DEFINED", "KW_CASE", 
		"KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "KW_MAPJOIN", "KW_STREAMTABLE", 
		"KW_CLUSTERSTATUS", "KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", 
		"KW_PLUS", "KW_MINUS", "KW_FETCH", "KW_INTERSECT", "KW_VIEW", "KW_VIEWS", 
		"KW_IN", "KW_DATABASE", "KW_DATABASES", "KW_MATERIALIZED", "KW_SCHEMA", 
		"KW_SCHEMAS", "KW_GRANT", "KW_REVOKE", "KW_SSL", "KW_UNDO", "KW_LOCK", 
		"KW_LOCKS", "KW_UNLOCK", "KW_SHARED", "KW_EXCLUSIVE", "KW_PROCEDURE", 
		"KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS", "KW_PURGE", "KW_RANGE", 
		"KW_ANALYZE", "KW_BEFORE", "KW_BETWEEN", "KW_BOTH", "KW_BINARY", "KW_CROSS", 
		"KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", "KW_RECORDREADER", "KW_RECORDWRITER", 
		"KW_SEMI", "KW_LATERAL", "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_COMPUTE", 
		"KW_STATISTICS", "KW_USE", "KW_OPTION", "KW_CONCATENATE", "KW_SHOW_DATABASE", 
		"KW_UPDATE", "KW_RESTRICT", "KW_CASCADE", "KW_SKEWED", "KW_ROLLUP", "KW_CUBE", 
		"KW_DIRECTORIES", "KW_FOR", "KW_WINDOW", "KW_UNBOUNDED", "KW_PRECEDING", 
		"KW_FOLLOWING", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", 
		"KW_LESS", "KW_MORE", "KW_OVER", "KW_GROUPING", "KW_SETS", "KW_TRUNCATE", 
		"KW_NOSCAN", "KW_USER", "KW_ROLE", "KW_ROLES", "KW_INNER", "KW_EXCHANGE", 
		"KW_URI", "KW_SERVER", "KW_ADMIN", "KW_OWNER", "KW_PRINCIPALS", "KW_COMPACT", 
		"KW_COMPACTIONS", "KW_TRANSACTIONS", "KW_REWRITE", "KW_AUTHORIZATION", 
		"KW_REOPTIMIZATION", "KW_CONF", "KW_VALUES", "KW_RELOAD", "KW_YEAR", "KW_QUERY", 
		"KW_QUARTER", "KW_MONTH", "KW_WEEK", "KW_DAY", "KW_DOW", "KW_HOUR", "KW_MINUTE", 
		"KW_SECOND", "KW_START", "KW_TRANSACTION", "KW_COMMIT", "KW_ROLLBACK", 
		"KW_WORK", "KW_ONLY", "KW_WRITE", "KW_ISOLATION", "KW_LEVEL", "KW_SNAPSHOT", 
		"KW_AUTOCOMMIT", "KW_CACHE", "KW_PRIMARY", "KW_FOREIGN", "KW_REFERENCES", 
		"KW_CONSTRAINT", "KW_ENFORCED", "KW_VALIDATE", "KW_NOVALIDATE", "KW_RELY", 
		"KW_NORELY", "KW_UNIQUE", "KW_KEY", "KW_ABORT", "KW_EXTRACT", "KW_FLOOR", 
		"KW_MERGE", "KW_MATCHED", "KW_REPL", "KW_DUMP", "KW_STATUS", "KW_VECTORIZATION", 
		"KW_SUMMARY", "KW_OPERATOR", "KW_EXPRESSION", "KW_DETAIL", "KW_WAIT", 
		"KW_RESOURCE", "KW_PLAN", "KW_QUERY_PARALLELISM", "KW_PLANS", "KW_ACTIVATE", 
		"KW_DEFAULT", "KW_CHECK", "KW_POOL", "KW_MOVE", "KW_DO", "KW_ALLOC_FRACTION", 
		"KW_SCHEDULING_POLICY", "KW_PATH", "KW_MAPPING", "KW_WORKLOAD", "KW_MANAGEMENT", 
		"KW_ACTIVE", "KW_UNMANAGED", "KW_APPLICATION", "KW_SYNC", "DOT", "COLON", 
		"COMMA", "SEMICOLON", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", 
		"RCURLY", "EQUAL", "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", 
		"GREATERTHANOREQUALTO", "GREATERTHAN", "DIVIDE", "PLUS", "MINUS", "STAR", 
		"MOD", "DIV", "AMPERSAND", "TILDE", "BITWISEOR", "CONCATENATE", "BITWISEXOR", 
		"QUESTION", "DOLLAR", "StringLiteral", "CharSetLiteral", "IntegralLiteral", 
		"NumberLiteral", "ByteLengthLiteral", "Number", "Identifier", "QuotedIdentifier", 
		"CharSetName", "WS", "LINE_COMMENT", "QUERY_HINT", "SHOW_HINT", "HIDDEN_HINT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(HiveParser._LITERAL_NAMES, HiveParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return HiveParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "HiveParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return HiveParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return HiveParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(HiveParser._ATN, this);
	}
	// @RuleVersion(0)
	public statements(): StatementsContext {
		let _localctx: StatementsContext = new StatementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, HiveParser.RULE_statements);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 743;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_FROM) | (1 << HiveParser.KW_SELECT) | (1 << HiveParser.KW_INSERT))) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & ((1 << (HiveParser.KW_SHOW - 44)) | (1 << (HiveParser.KW_MSCK - 44)) | (1 << (HiveParser.KW_LOAD - 44)) | (1 << (HiveParser.KW_EXPORT - 44)) | (1 << (HiveParser.KW_IMPORT - 44)) | (1 << (HiveParser.KW_CREATE - 44)) | (1 << (HiveParser.KW_ALTER - 44)) | (1 << (HiveParser.KW_DESCRIBE - 44)) | (1 << (HiveParser.KW_DROP - 44)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (HiveParser.KW_MAP - 98)) | (1 << (HiveParser.KW_REDUCE - 98)) | (1 << (HiveParser.KW_KILL - 98)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (HiveParser.KW_EXPLAIN - 143)) | (1 << (HiveParser.KW_WITH - 143)) | (1 << (HiveParser.KW_SET - 143)) | (1 << (HiveParser.KW_DELETE - 143)))) !== 0) || ((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & ((1 << (HiveParser.KW_GRANT - 186)) | (1 << (HiveParser.KW_REVOKE - 186)) | (1 << (HiveParser.KW_LOCK - 186)) | (1 << (HiveParser.KW_UNLOCK - 186)) | (1 << (HiveParser.KW_ANALYZE - 186)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (HiveParser.KW_USE - 220)) | (1 << (HiveParser.KW_UPDATE - 220)) | (1 << (HiveParser.KW_TRUNCATE - 220)))) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & ((1 << (HiveParser.KW_RELOAD - 264)) | (1 << (HiveParser.KW_START - 264)) | (1 << (HiveParser.KW_COMMIT - 264)) | (1 << (HiveParser.KW_ROLLBACK - 264)))) !== 0) || ((((_la - 298)) & ~0x1F) === 0 && ((1 << (_la - 298)) & ((1 << (HiveParser.KW_ABORT - 298)) | (1 << (HiveParser.KW_MERGE - 298)) | (1 << (HiveParser.KW_REPL - 298)))) !== 0) || _la === HiveParser.LPAREN) {
				{
				{
				this.state = 738;
				this.statement();
				this.state = 739;
				this.statementSeparator();
				}
				}
				this.state = 745;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 746;
			this.match(HiveParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statementSeparator(): StatementSeparatorContext {
		let _localctx: StatementSeparatorContext = new StatementSeparatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, HiveParser.RULE_statementSeparator);
		try {
			this.state = 750;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.SEMICOLON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 748;
				this.match(HiveParser.SEMICOLON);
				}
				break;
			case HiveParser.EOF:
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, HiveParser.RULE_statement);
		try {
			this.state = 754;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_EXPLAIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 752;
				this.explainStatement();
				}
				break;
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 753;
				this.execStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainStatement(): ExplainStatementContext {
		let _localctx: ExplainStatementContext = new ExplainStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, HiveParser.RULE_explainStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 756;
			this.match(HiveParser.KW_EXPLAIN);
			this.state = 766;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_EXTENDED:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_AUTHORIZATION:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.LPAREN:
				{
				this.state = 760;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 3, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 757;
						this.explainOption();
						}
						}
					}
					this.state = 762;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 3, this._ctx);
				}
				this.state = 763;
				this.execStatement();
				}
				break;
			case HiveParser.KW_REWRITE:
				{
				this.state = 764;
				this.match(HiveParser.KW_REWRITE);
				this.state = 765;
				this.queryStatementExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainOption(): ExplainOptionContext {
		let _localctx: ExplainOptionContext = new ExplainOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, HiveParser.RULE_explainOption);
		let _la: number;
		try {
			this.state = 782;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_EXTENDED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 768;
				this.match(HiveParser.KW_EXTENDED);
				}
				break;
			case HiveParser.KW_FORMATTED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 769;
				this.match(HiveParser.KW_FORMATTED);
				}
				break;
			case HiveParser.KW_DEPENDENCY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 770;
				this.match(HiveParser.KW_DEPENDENCY);
				}
				break;
			case HiveParser.KW_LOGICAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 771;
				this.match(HiveParser.KW_LOGICAL);
				}
				break;
			case HiveParser.KW_AUTHORIZATION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 772;
				this.match(HiveParser.KW_AUTHORIZATION);
				}
				break;
			case HiveParser.KW_ANALYZE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 773;
				this.match(HiveParser.KW_ANALYZE);
				}
				break;
			case HiveParser.KW_REOPTIMIZATION:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 774;
				this.match(HiveParser.KW_REOPTIMIZATION);
				}
				break;
			case HiveParser.KW_VECTORIZATION:
				this.enterOuterAlt(_localctx, 8);
				{
				{
				this.state = 775;
				this.match(HiveParser.KW_VECTORIZATION);
				this.state = 777;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ONLY) {
					{
					this.state = 776;
					this.vectorizationOnly();
					}
				}

				this.state = 780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 307)) & ~0x1F) === 0 && ((1 << (_la - 307)) & ((1 << (HiveParser.KW_SUMMARY - 307)) | (1 << (HiveParser.KW_OPERATOR - 307)) | (1 << (HiveParser.KW_EXPRESSION - 307)) | (1 << (HiveParser.KW_DETAIL - 307)))) !== 0)) {
					{
					this.state = 779;
					this.vectorizatonDetail();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vectorizationOnly(): VectorizationOnlyContext {
		let _localctx: VectorizationOnlyContext = new VectorizationOnlyContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, HiveParser.RULE_vectorizationOnly);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 784;
			this.match(HiveParser.KW_ONLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vectorizatonDetail(): VectorizatonDetailContext {
		let _localctx: VectorizatonDetailContext = new VectorizatonDetailContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, HiveParser.RULE_vectorizatonDetail);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 786;
			_la = this._input.LA(1);
			if (!(((((_la - 307)) & ~0x1F) === 0 && ((1 << (_la - 307)) & ((1 << (HiveParser.KW_SUMMARY - 307)) | (1 << (HiveParser.KW_OPERATOR - 307)) | (1 << (HiveParser.KW_EXPRESSION - 307)) | (1 << (HiveParser.KW_DETAIL - 307)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execStatement(): ExecStatementContext {
		let _localctx: ExecStatementContext = new ExecStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, HiveParser.RULE_execStatement);
		try {
			this.state = 800;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 8, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 788;
				this.queryStatementExpression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 789;
				this.loadStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 790;
				this.exportStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 791;
				this.importStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 792;
				this.replDumpStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 793;
				this.replLoadStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 794;
				this.replStatusStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 795;
				this.ddlStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 796;
				this.deleteStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 797;
				this.updateStatement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 798;
				this.sqlTransactionStatement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 799;
				this.mergeStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadStatement(): LoadStatementContext {
		let _localctx: LoadStatementContext = new LoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, HiveParser.RULE_loadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 802;
			this.match(HiveParser.KW_LOAD);
			this.state = 803;
			this.match(HiveParser.KW_DATA);
			this.state = 805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LOCAL) {
				{
				this.state = 804;
				this.match(HiveParser.KW_LOCAL);
				}
			}

			this.state = 807;
			this.match(HiveParser.KW_INPATH);
			this.state = 808;
			this.match(HiveParser.StringLiteral);
			this.state = 810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_OVERWRITE) {
				{
				this.state = 809;
				this.match(HiveParser.KW_OVERWRITE);
				}
			}

			this.state = 812;
			this.match(HiveParser.KW_INTO);
			this.state = 813;
			this.match(HiveParser.KW_TABLE);
			this.state = 814;
			this.tableOrPartition();
			this.state = 816;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_INPUTFORMAT) {
				{
				this.state = 815;
				this.inputFileFormat();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationClause(): ReplicationClauseContext {
		let _localctx: ReplicationClauseContext = new ReplicationClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, HiveParser.RULE_replicationClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 818;
			this.match(HiveParser.KW_FOR);
			this.state = 820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_METADATA) {
				{
				this.state = 819;
				this.match(HiveParser.KW_METADATA);
				}
			}

			this.state = 822;
			this.match(HiveParser.KW_REPLICATION);
			this.state = 823;
			this.match(HiveParser.LPAREN);
			this.state = 824;
			this.match(HiveParser.StringLiteral);
			this.state = 825;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exportStatement(): ExportStatementContext {
		let _localctx: ExportStatementContext = new ExportStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, HiveParser.RULE_exportStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 827;
			this.match(HiveParser.KW_EXPORT);
			this.state = 828;
			this.match(HiveParser.KW_TABLE);
			this.state = 829;
			this.tableOrPartition();
			this.state = 830;
			this.match(HiveParser.KW_TO);
			this.state = 831;
			this.match(HiveParser.StringLiteral);
			this.state = 833;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_FOR) {
				{
				this.state = 832;
				this.replicationClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public importStatement(): ImportStatementContext {
		let _localctx: ImportStatementContext = new ImportStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, HiveParser.RULE_importStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 835;
			this.match(HiveParser.KW_IMPORT);
			this.state = 841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TABLE || _la === HiveParser.KW_EXTERNAL) {
				{
				this.state = 837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_EXTERNAL) {
					{
					this.state = 836;
					this.match(HiveParser.KW_EXTERNAL);
					}
				}

				this.state = 839;
				this.match(HiveParser.KW_TABLE);
				this.state = 840;
				this.tableOrPartition();
				}
			}

			this.state = 843;
			this.match(HiveParser.KW_FROM);
			{
			this.state = 844;
			_localctx._path = this.match(HiveParser.StringLiteral);
			}
			this.state = 846;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LOCATION) {
				{
				this.state = 845;
				this.tableLocation();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replDumpStatement(): ReplDumpStatementContext {
		let _localctx: ReplDumpStatementContext = new ReplDumpStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, HiveParser.RULE_replDumpStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 848;
			this.match(HiveParser.KW_REPL);
			this.state = 849;
			this.match(HiveParser.KW_DUMP);
			this.state = 850;
			this.identifier();
			this.state = 853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.DOT) {
				{
				this.state = 851;
				this.match(HiveParser.DOT);
				this.state = 852;
				this.identifier();
				}
			}

			this.state = 865;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 20, this._ctx) ) {
			case 1:
				{
				this.state = 855;
				this.match(HiveParser.KW_FROM);
				this.state = 856;
				this.match(HiveParser.Number);
				this.state = 859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TO) {
					{
					this.state = 857;
					this.match(HiveParser.KW_TO);
					this.state = 858;
					this.match(HiveParser.Number);
					}
				}

				this.state = 863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LIMIT) {
					{
					this.state = 861;
					this.match(HiveParser.KW_LIMIT);
					this.state = 862;
					this.match(HiveParser.Number);
					}
				}

				}
				break;
			}
			this.state = 869;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 21, this._ctx) ) {
			case 1:
				{
				this.state = 867;
				this.match(HiveParser.KW_WITH);
				this.state = 868;
				this.replConfigs();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replLoadStatement(): ReplLoadStatementContext {
		let _localctx: ReplLoadStatementContext = new ReplLoadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, HiveParser.RULE_replLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 871;
			this.match(HiveParser.KW_REPL);
			this.state = 872;
			this.match(HiveParser.KW_LOAD);
			this.state = 878;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la === HiveParser.Identifier) {
				{
				this.state = 873;
				this.identifier();
				this.state = 876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.DOT) {
					{
					this.state = 874;
					this.match(HiveParser.DOT);
					this.state = 875;
					this.identifier();
					}
				}

				}
			}

			this.state = 880;
			this.match(HiveParser.KW_FROM);
			this.state = 881;
			this.match(HiveParser.StringLiteral);
			this.state = 884;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				{
				this.state = 882;
				this.match(HiveParser.KW_WITH);
				this.state = 883;
				this.replConfigs();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replConfigs(): ReplConfigsContext {
		let _localctx: ReplConfigsContext = new ReplConfigsContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, HiveParser.RULE_replConfigs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 886;
			this.match(HiveParser.LPAREN);
			this.state = 887;
			this.replConfigsList();
			this.state = 888;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replConfigsList(): ReplConfigsListContext {
		let _localctx: ReplConfigsListContext = new ReplConfigsListContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, HiveParser.RULE_replConfigsList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 890;
			this.keyValueProperty();
			this.state = 895;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 891;
				this.match(HiveParser.COMMA);
				this.state = 892;
				this.keyValueProperty();
				}
				}
				this.state = 897;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replStatusStatement(): ReplStatusStatementContext {
		let _localctx: ReplStatusStatementContext = new ReplStatusStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, HiveParser.RULE_replStatusStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 898;
			this.match(HiveParser.KW_REPL);
			this.state = 899;
			this.match(HiveParser.KW_STATUS);
			this.state = 900;
			this.identifier();
			this.state = 903;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.DOT) {
				{
				this.state = 901;
				this.match(HiveParser.DOT);
				this.state = 902;
				this.identifier();
				}
			}

			this.state = 907;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 27, this._ctx) ) {
			case 1:
				{
				this.state = 905;
				this.match(HiveParser.KW_WITH);
				this.state = 906;
				this.replConfigs();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ddlStatement(): DdlStatementContext {
		let _localctx: DdlStatementContext = new DdlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, HiveParser.RULE_ddlStatement);
		try {
			this.state = 949;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 28, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 909;
				this.createDatabaseStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 910;
				this.switchDatabaseStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 911;
				this.dropDatabaseStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 912;
				this.createTableStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 913;
				this.dropTableStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 914;
				this.truncateTableStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 915;
				this.alterStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 916;
				this.descStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 917;
				this.showStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 918;
				this.metastoreCheck();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 919;
				this.createViewStatement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 920;
				this.createMaterializedViewStatement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 921;
				this.dropViewStatement();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 922;
				this.dropMaterializedViewStatement();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 923;
				this.createFunctionStatement();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 924;
				this.createMacroStatement();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 925;
				this.dropFunctionStatement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 926;
				this.reloadFunctionStatement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 927;
				this.dropMacroStatement();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 928;
				this.analyzeStatement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 929;
				this.lockStatement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 930;
				this.unlockStatement();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 931;
				this.lockDatabase();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 932;
				this.unlockDatabase();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 933;
				this.createRoleStatement();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 934;
				this.dropRoleStatement();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 935;
				this.grantPrivileges();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 936;
				this.revokePrivileges();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 937;
				this.showGrants();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 938;
				this.showRoleGrants();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 939;
				this.showRolePrincipals();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 940;
				this.showRoles();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 941;
				this.grantRole();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 942;
				this.revokeRole();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 943;
				this.setRole();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 944;
				this.showCurrentRole();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 945;
				this.abortTransactionStatement();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 946;
				this.killQueryStatement();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 947;
				this.createIndexStatement();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 948;
				this.dropIndexStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let _localctx: IfExistsContext = new IfExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, HiveParser.RULE_ifExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 951;
			this.match(HiveParser.KW_IF);
			this.state = 952;
			this.match(HiveParser.KW_EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public restrictOrCascade(): RestrictOrCascadeContext {
		let _localctx: RestrictOrCascadeContext = new RestrictOrCascadeContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, HiveParser.RULE_restrictOrCascade);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 954;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let _localctx: IfNotExistsContext = new IfNotExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, HiveParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 956;
			this.match(HiveParser.KW_IF);
			this.state = 957;
			this.match(HiveParser.KW_NOT);
			this.state = 958;
			this.match(HiveParser.KW_EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rewriteEnabled(): RewriteEnabledContext {
		let _localctx: RewriteEnabledContext = new RewriteEnabledContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, HiveParser.RULE_rewriteEnabled);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 960;
			this.match(HiveParser.KW_ENABLE);
			this.state = 961;
			this.match(HiveParser.KW_REWRITE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rewriteDisabled(): RewriteDisabledContext {
		let _localctx: RewriteDisabledContext = new RewriteDisabledContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, HiveParser.RULE_rewriteDisabled);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 963;
			this.match(HiveParser.KW_DISABLE);
			this.state = 964;
			this.match(HiveParser.KW_REWRITE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public storedAsDirs(): StoredAsDirsContext {
		let _localctx: StoredAsDirsContext = new StoredAsDirsContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, HiveParser.RULE_storedAsDirs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 966;
			this.match(HiveParser.KW_STORED);
			this.state = 967;
			this.match(HiveParser.KW_AS);
			this.state = 968;
			this.match(HiveParser.KW_DIRECTORIES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orReplace(): OrReplaceContext {
		let _localctx: OrReplaceContext = new OrReplaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, HiveParser.RULE_orReplace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 970;
			this.match(HiveParser.KW_OR);
			this.state = 971;
			this.match(HiveParser.KW_REPLACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabaseStatement(): CreateDatabaseStatementContext {
		let _localctx: CreateDatabaseStatementContext = new CreateDatabaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, HiveParser.RULE_createDatabaseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 973;
			this.match(HiveParser.KW_CREATE);
			this.state = 974;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 975;
				this.ifNotExists();
				}
			}

			this.state = 978;
			this.identifier();
			this.state = 980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 979;
				this.databaseComment();
				}
			}

			this.state = 983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LOCATION) {
				{
				this.state = 982;
				this.dbLocation();
				}
			}

			this.state = 988;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 32, this._ctx) ) {
			case 1:
				{
				this.state = 985;
				this.match(HiveParser.KW_WITH);
				this.state = 986;
				this.match(HiveParser.KW_DBPROPERTIES);
				this.state = 987;
				this.dbProperties();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dbLocation(): DbLocationContext {
		let _localctx: DbLocationContext = new DbLocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, HiveParser.RULE_dbLocation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 990;
			this.match(HiveParser.KW_LOCATION);
			this.state = 991;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dbProperties(): DbPropertiesContext {
		let _localctx: DbPropertiesContext = new DbPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, HiveParser.RULE_dbProperties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 993;
			this.match(HiveParser.LPAREN);
			this.state = 994;
			this.dbPropertiesList();
			this.state = 995;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dbPropertiesList(): DbPropertiesListContext {
		let _localctx: DbPropertiesListContext = new DbPropertiesListContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, HiveParser.RULE_dbPropertiesList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 997;
			this.keyValueProperty();
			this.state = 1002;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 998;
				this.match(HiveParser.COMMA);
				this.state = 999;
				this.keyValueProperty();
				}
				}
				this.state = 1004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switchDatabaseStatement(): SwitchDatabaseStatementContext {
		let _localctx: SwitchDatabaseStatementContext = new SwitchDatabaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, HiveParser.RULE_switchDatabaseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1005;
			this.match(HiveParser.KW_USE);
			this.state = 1006;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropDatabaseStatement(): DropDatabaseStatementContext {
		let _localctx: DropDatabaseStatementContext = new DropDatabaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, HiveParser.RULE_dropDatabaseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1008;
			this.match(HiveParser.KW_DROP);
			this.state = 1009;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1011;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 1010;
				this.ifExists();
				}
			}

			this.state = 1013;
			this.identifier();
			this.state = 1015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
				{
				this.state = 1014;
				this.restrictOrCascade();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public databaseComment(): DatabaseCommentContext {
		let _localctx: DatabaseCommentContext = new DatabaseCommentContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, HiveParser.RULE_databaseComment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1017;
			this.match(HiveParser.KW_COMMENT);
			this.state = 1018;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTableStatement(): CreateTableStatementContext {
		let _localctx: CreateTableStatementContext = new CreateTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, HiveParser.RULE_createTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1020;
			this.match(HiveParser.KW_CREATE);
			this.state = 1022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TEMPORARY) {
				{
				this.state = 1021;
				this.match(HiveParser.KW_TEMPORARY);
				}
			}

			this.state = 1025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_EXTERNAL) {
				{
				this.state = 1024;
				this.match(HiveParser.KW_EXTERNAL);
				}
			}

			this.state = 1027;
			this.match(HiveParser.KW_TABLE);
			this.state = 1029;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 1028;
				this.ifNotExists();
				}
			}

			this.state = 1031;
			this.tableName();
			this.state = 1080;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_LIKE:
				{
				this.state = 1032;
				this.match(HiveParser.KW_LIKE);
				this.state = 1033;
				this.tableName();
				this.state = 1035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROW) {
					{
					this.state = 1034;
					this.tableRowFormat();
					}
				}

				this.state = 1038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_STORED) {
					{
					this.state = 1037;
					this.tableFileFormat();
					}
				}

				this.state = 1041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LOCATION) {
					{
					this.state = 1040;
					this.tableLocation();
					}
				}

				this.state = 1044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TBLPROPERTIES) {
					{
					this.state = 1043;
					this.tablePropertiesPrefixed();
					}
				}

				}
				break;
			case HiveParser.EOF:
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_AS:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_ROW:
			case HiveParser.KW_KILL:
			case HiveParser.KW_STORED:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.SEMICOLON:
			case HiveParser.LPAREN:
				{
				this.state = 1050;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 43, this._ctx) ) {
				case 1:
					{
					this.state = 1046;
					this.match(HiveParser.LPAREN);
					this.state = 1047;
					this.columnNameTypeOrConstraintList();
					this.state = 1048;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				this.state = 1053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_COMMENT) {
					{
					this.state = 1052;
					this.tableComment();
					}
				}

				this.state = 1056;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITIONED) {
					{
					this.state = 1055;
					this.tablePartition();
					}
				}

				this.state = 1059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_CLUSTERED) {
					{
					this.state = 1058;
					this.tableBuckets();
					}
				}

				this.state = 1062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_SKEWED) {
					{
					this.state = 1061;
					this.tableSkewed();
					}
				}

				this.state = 1065;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROW) {
					{
					this.state = 1064;
					this.tableRowFormat();
					}
				}

				this.state = 1068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_STORED) {
					{
					this.state = 1067;
					this.tableFileFormat();
					}
				}

				this.state = 1071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LOCATION) {
					{
					this.state = 1070;
					this.tableLocation();
					}
				}

				this.state = 1074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TBLPROPERTIES) {
					{
					this.state = 1073;
					this.tablePropertiesPrefixed();
					}
				}

				this.state = 1078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 1076;
					this.match(HiveParser.KW_AS);
					this.state = 1077;
					this.selectStatementWithCTE();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncateTableStatement(): TruncateTableStatementContext {
		let _localctx: TruncateTableStatementContext = new TruncateTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, HiveParser.RULE_truncateTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1082;
			this.match(HiveParser.KW_TRUNCATE);
			this.state = 1083;
			this.match(HiveParser.KW_TABLE);
			this.state = 1084;
			this.tablePartitionPrefix();
			this.state = 1090;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COLUMNS) {
				{
				this.state = 1085;
				this.match(HiveParser.KW_COLUMNS);
				this.state = 1086;
				this.match(HiveParser.LPAREN);
				this.state = 1087;
				this.columnNameList();
				this.state = 1088;
				this.match(HiveParser.RPAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTableStatement(): DropTableStatementContext {
		let _localctx: DropTableStatementContext = new DropTableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, HiveParser.RULE_dropTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1092;
			this.match(HiveParser.KW_DROP);
			this.state = 1093;
			this.match(HiveParser.KW_TABLE);
			this.state = 1095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 1094;
				this.ifExists();
				}
			}

			this.state = 1097;
			this.tableName();
			this.state = 1099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PURGE) {
				{
				this.state = 1098;
				this.match(HiveParser.KW_PURGE);
				}
			}

			this.state = 1102;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_FOR) {
				{
				this.state = 1101;
				this.replicationClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatement(): AlterStatementContext {
		let _localctx: AlterStatementContext = new AlterStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, HiveParser.RULE_alterStatement);
		let _la: number;
		try {
			this.state = 1129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 59, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1104;
				this.match(HiveParser.KW_ALTER);
				this.state = 1105;
				this.match(HiveParser.KW_TABLE);
				this.state = 1106;
				this.tableName();
				this.state = 1107;
				this.alterTableStatementSuffix();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1109;
				this.match(HiveParser.KW_ALTER);
				this.state = 1110;
				this.match(HiveParser.KW_VIEW);
				this.state = 1111;
				this.tableName();
				this.state = 1113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 1112;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 1115;
				this.alterViewStatementSuffix();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1117;
				this.match(HiveParser.KW_ALTER);
				this.state = 1118;
				this.match(HiveParser.KW_MATERIALIZED);
				this.state = 1119;
				this.match(HiveParser.KW_VIEW);
				this.state = 1120;
				this.tableName();
				this.state = 1121;
				this.alterMaterializedViewStatementSuffix();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1123;
				this.match(HiveParser.KW_ALTER);
				this.state = 1124;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1125;
				this.alterDatabaseStatementSuffix();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1126;
				this.match(HiveParser.KW_ALTER);
				this.state = 1127;
				this.match(HiveParser.KW_INDEX);
				this.state = 1128;
				this.alterIndexStatementSuffix();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTableStatementSuffix(): AlterTableStatementSuffixContext {
		let _localctx: AlterTableStatementSuffixContext = new AlterTableStatementSuffixContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, HiveParser.RULE_alterTableStatementSuffix);
		let _la: number;
		try {
			this.state = 1148;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1131;
				this.alterStatementSuffixRename();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1132;
				this.alterStatementSuffixDropPartitions();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1133;
				this.alterStatementSuffixAddPartitions();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1134;
				this.alterStatementSuffixTouch();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1135;
				this.alterStatementSuffixArchive();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1136;
				this.alterStatementSuffixUnArchive();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1137;
				this.alterStatementSuffixProperties();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1138;
				this.alterStatementSuffixSkewedby();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1139;
				this.alterStatementSuffixExchangePartition();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1140;
				this.alterStatementPartitionKeyType();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1141;
				this.alterStatementSuffixDropConstraint();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1142;
				this.alterStatementSuffixAddConstraint();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					{
					this.state = 1143;
					this.partitionSpec();
					}
				}

				this.state = 1146;
				this.alterTblPartitionStatementSuffix();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1147;
				this.alterStatementSuffixSetOwner();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext {
		let _localctx: AlterTblPartitionStatementSuffixContext = new AlterTblPartitionStatementSuffixContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, HiveParser.RULE_alterTblPartitionStatementSuffix);
		try {
			this.state = 1163;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 62, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1150;
				this.alterStatementSuffixFileFormat();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1151;
				this.alterStatementSuffixLocation();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1152;
				this.alterStatementSuffixMergeFiles();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1153;
				this.alterStatementSuffixSerdeProperties();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1154;
				this.alterStatementSuffixRenamePart();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1155;
				this.alterStatementSuffixBucketNum();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1156;
				this.alterTblPartitionStatementSuffixSkewedLocation();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1157;
				this.alterStatementSuffixClusterbySortby();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1158;
				this.alterStatementSuffixCompact();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1159;
				this.alterStatementSuffixUpdateStatsCol();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1160;
				this.alterStatementSuffixUpdateStats();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1161;
				this.alterStatementSuffixRenameCol();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1162;
				this.alterStatementSuffixAddCol();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementPartitionKeyType(): AlterStatementPartitionKeyTypeContext {
		let _localctx: AlterStatementPartitionKeyTypeContext = new AlterStatementPartitionKeyTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, HiveParser.RULE_alterStatementPartitionKeyType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1165;
			this.match(HiveParser.KW_PARTITION);
			this.state = 1166;
			this.match(HiveParser.KW_COLUMN);
			this.state = 1167;
			this.match(HiveParser.LPAREN);
			this.state = 1168;
			this.columnNameType();
			this.state = 1169;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterViewStatementSuffix(): AlterViewStatementSuffixContext {
		let _localctx: AlterViewStatementSuffixContext = new AlterViewStatementSuffixContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, HiveParser.RULE_alterViewStatementSuffix);
		try {
			this.state = 1176;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_SET:
			case HiveParser.KW_UNSET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1171;
				this.alterViewSuffixProperties();
				}
				break;
			case HiveParser.KW_RENAME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1172;
				this.alterStatementSuffixRename();
				}
				break;
			case HiveParser.KW_ADD:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1173;
				this.alterStatementSuffixAddPartitions();
				}
				break;
			case HiveParser.KW_DROP:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1174;
				this.alterStatementSuffixDropPartitions();
				}
				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_WITH:
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1175;
				this.selectStatementWithCTE();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterMaterializedViewStatementSuffix(): AlterMaterializedViewStatementSuffixContext {
		let _localctx: AlterMaterializedViewStatementSuffixContext = new AlterMaterializedViewStatementSuffixContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, HiveParser.RULE_alterMaterializedViewStatementSuffix);
		try {
			this.state = 1180;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1178;
				this.alterMaterializedViewSuffixRewrite();
				}
				break;
			case HiveParser.KW_REBUILD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1179;
				this.alterMaterializedViewSuffixRebuild();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext {
		let _localctx: AlterDatabaseStatementSuffixContext = new AlterDatabaseStatementSuffixContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, HiveParser.RULE_alterDatabaseStatementSuffix);
		try {
			this.state = 1185;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1182;
				this.alterDatabaseSuffixProperties();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1183;
				this.alterDatabaseSuffixSetOwner();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1184;
				this.alterDatabaseSuffixSetLocation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseSuffixProperties(): AlterDatabaseSuffixPropertiesContext {
		let _localctx: AlterDatabaseSuffixPropertiesContext = new AlterDatabaseSuffixPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, HiveParser.RULE_alterDatabaseSuffixProperties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1187;
			this.identifier();
			this.state = 1188;
			this.match(HiveParser.KW_SET);
			this.state = 1189;
			this.match(HiveParser.KW_DBPROPERTIES);
			this.state = 1190;
			this.dbProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseSuffixSetOwner(): AlterDatabaseSuffixSetOwnerContext {
		let _localctx: AlterDatabaseSuffixSetOwnerContext = new AlterDatabaseSuffixSetOwnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, HiveParser.RULE_alterDatabaseSuffixSetOwner);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1192;
			this.identifier();
			this.state = 1193;
			this.match(HiveParser.KW_SET);
			this.state = 1194;
			this.match(HiveParser.KW_OWNER);
			this.state = 1195;
			this.principalName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseSuffixSetLocation(): AlterDatabaseSuffixSetLocationContext {
		let _localctx: AlterDatabaseSuffixSetLocationContext = new AlterDatabaseSuffixSetLocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, HiveParser.RULE_alterDatabaseSuffixSetLocation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1197;
			this.identifier();
			this.state = 1198;
			this.match(HiveParser.KW_SET);
			this.state = 1199;
			this.match(HiveParser.KW_LOCATION);
			this.state = 1200;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixRename(): AlterStatementSuffixRenameContext {
		let _localctx: AlterStatementSuffixRenameContext = new AlterStatementSuffixRenameContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, HiveParser.RULE_alterStatementSuffixRename);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1202;
			this.match(HiveParser.KW_RENAME);
			this.state = 1203;
			this.match(HiveParser.KW_TO);
			this.state = 1204;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddCol(): AlterStatementSuffixAddColContext {
		let _localctx: AlterStatementSuffixAddColContext = new AlterStatementSuffixAddColContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, HiveParser.RULE_alterStatementSuffixAddCol);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1206;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_ADD || _la === HiveParser.KW_REPLACE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1207;
			this.match(HiveParser.KW_COLUMNS);
			this.state = 1208;
			this.match(HiveParser.LPAREN);
			this.state = 1209;
			this.columnNameTypeList();
			this.state = 1210;
			this.match(HiveParser.RPAREN);
			this.state = 1212;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
				{
				this.state = 1211;
				this.restrictOrCascade();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddConstraint(): AlterStatementSuffixAddConstraintContext {
		let _localctx: AlterStatementSuffixAddConstraintContext = new AlterStatementSuffixAddConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, HiveParser.RULE_alterStatementSuffixAddConstraint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1214;
			this.match(HiveParser.KW_ADD);
			this.state = 1217;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
			case 1:
				{
				this.state = 1215;
				this.alterForeignKeyWithName();
				}
				break;

			case 2:
				{
				this.state = 1216;
				this.alterConstraintWithName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixDropConstraint(): AlterStatementSuffixDropConstraintContext {
		let _localctx: AlterStatementSuffixDropConstraintContext = new AlterStatementSuffixDropConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, HiveParser.RULE_alterStatementSuffixDropConstraint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1219;
			this.match(HiveParser.KW_DROP);
			this.state = 1220;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 1221;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixRenameCol(): AlterStatementSuffixRenameColContext {
		let _localctx: AlterStatementSuffixRenameColContext = new AlterStatementSuffixRenameColContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, HiveParser.RULE_alterStatementSuffixRenameCol);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1223;
			this.match(HiveParser.KW_CHANGE);
			this.state = 1225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COLUMN) {
				{
				this.state = 1224;
				this.match(HiveParser.KW_COLUMN);
				}
			}

			this.state = 1227;
			this.identifier();
			this.state = 1228;
			this.identifier();
			this.state = 1229;
			this.colType();
			this.state = 1231;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & ((1 << (HiveParser.KW_PRIMARY - 287)) | (1 << (HiveParser.KW_REFERENCES - 287)) | (1 << (HiveParser.KW_CONSTRAINT - 287)))) !== 0)) {
				{
				this.state = 1230;
				this.alterColumnConstraint();
				}
			}

			this.state = 1235;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 1233;
				this.match(HiveParser.KW_COMMENT);
				this.state = 1234;
				this.match(HiveParser.StringLiteral);
				}
			}

			this.state = 1238;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_FIRST || _la === HiveParser.KW_AFTER) {
				{
				this.state = 1237;
				this.alterStatementChangeColPosition();
				}
			}

			this.state = 1241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
				{
				this.state = 1240;
				this.restrictOrCascade();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixUpdateStatsCol(): AlterStatementSuffixUpdateStatsColContext {
		let _localctx: AlterStatementSuffixUpdateStatsColContext = new AlterStatementSuffixUpdateStatsColContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, HiveParser.RULE_alterStatementSuffixUpdateStatsCol);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1243;
			this.match(HiveParser.KW_UPDATE);
			this.state = 1244;
			this.match(HiveParser.KW_STATISTICS);
			this.state = 1245;
			this.match(HiveParser.KW_FOR);
			this.state = 1247;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COLUMN) {
				{
				this.state = 1246;
				this.match(HiveParser.KW_COLUMN);
				}
			}

			this.state = 1249;
			this.identifier();
			this.state = 1250;
			this.match(HiveParser.KW_SET);
			this.state = 1251;
			this.tableProperties();
			this.state = 1254;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 1252;
				this.match(HiveParser.KW_COMMENT);
				this.state = 1253;
				this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixUpdateStats(): AlterStatementSuffixUpdateStatsContext {
		let _localctx: AlterStatementSuffixUpdateStatsContext = new AlterStatementSuffixUpdateStatsContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, HiveParser.RULE_alterStatementSuffixUpdateStats);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1256;
			this.match(HiveParser.KW_UPDATE);
			this.state = 1257;
			this.match(HiveParser.KW_STATISTICS);
			this.state = 1258;
			this.match(HiveParser.KW_SET);
			this.state = 1259;
			this.tableProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementChangeColPosition(): AlterStatementChangeColPositionContext {
		let _localctx: AlterStatementChangeColPositionContext = new AlterStatementChangeColPositionContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, HiveParser.RULE_alterStatementChangeColPosition);
		try {
			this.state = 1264;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_FIRST:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1261;
				_localctx._first = this.match(HiveParser.KW_FIRST);
				}
				break;
			case HiveParser.KW_AFTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1262;
				this.match(HiveParser.KW_AFTER);
				this.state = 1263;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext {
		let _localctx: AlterStatementSuffixAddPartitionsContext = new AlterStatementSuffixAddPartitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, HiveParser.RULE_alterStatementSuffixAddPartitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1266;
			this.match(HiveParser.KW_ADD);
			this.state = 1268;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 1267;
				this.ifNotExists();
				}
			}

			this.state = 1271;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1270;
				this.alterStatementSuffixAddPartitionsElement();
				}
				}
				this.state = 1273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveParser.KW_PARTITION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddPartitionsElement(): AlterStatementSuffixAddPartitionsElementContext {
		let _localctx: AlterStatementSuffixAddPartitionsElementContext = new AlterStatementSuffixAddPartitionsElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, HiveParser.RULE_alterStatementSuffixAddPartitionsElement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1275;
			this.partitionSpec();
			this.state = 1277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LOCATION) {
				{
				this.state = 1276;
				this.partitionLocation();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixTouch(): AlterStatementSuffixTouchContext {
		let _localctx: AlterStatementSuffixTouchContext = new AlterStatementSuffixTouchContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, HiveParser.RULE_alterStatementSuffixTouch);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1279;
			this.match(HiveParser.KW_TOUCH);
			this.state = 1283;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.KW_PARTITION) {
				{
				{
				this.state = 1280;
				this.partitionSpec();
				}
				}
				this.state = 1285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixArchive(): AlterStatementSuffixArchiveContext {
		let _localctx: AlterStatementSuffixArchiveContext = new AlterStatementSuffixArchiveContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, HiveParser.RULE_alterStatementSuffixArchive);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1286;
			this.match(HiveParser.KW_ARCHIVE);
			this.state = 1290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.KW_PARTITION) {
				{
				{
				this.state = 1287;
				this.partitionSpec();
				}
				}
				this.state = 1292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixUnArchive(): AlterStatementSuffixUnArchiveContext {
		let _localctx: AlterStatementSuffixUnArchiveContext = new AlterStatementSuffixUnArchiveContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, HiveParser.RULE_alterStatementSuffixUnArchive);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1293;
			this.match(HiveParser.KW_UNARCHIVE);
			this.state = 1297;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.KW_PARTITION) {
				{
				{
				this.state = 1294;
				this.partitionSpec();
				}
				}
				this.state = 1299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionLocation(): PartitionLocationContext {
		let _localctx: PartitionLocationContext = new PartitionLocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, HiveParser.RULE_partitionLocation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1300;
			this.match(HiveParser.KW_LOCATION);
			this.state = 1301;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext {
		let _localctx: AlterStatementSuffixDropPartitionsContext = new AlterStatementSuffixDropPartitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, HiveParser.RULE_alterStatementSuffixDropPartitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1303;
			this.match(HiveParser.KW_DROP);
			this.state = 1305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 1304;
				this.ifExists();
				}
			}

			this.state = 1307;
			this.dropPartitionSpec();
			this.state = 1312;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 1308;
				this.match(HiveParser.COMMA);
				this.state = 1309;
				this.dropPartitionSpec();
				}
				}
				this.state = 1314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1316;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PURGE) {
				{
				this.state = 1315;
				this.match(HiveParser.KW_PURGE);
				}
			}

			this.state = 1319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_FOR) {
				{
				this.state = 1318;
				this.replicationClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixProperties(): AlterStatementSuffixPropertiesContext {
		let _localctx: AlterStatementSuffixPropertiesContext = new AlterStatementSuffixPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, HiveParser.RULE_alterStatementSuffixProperties);
		let _la: number;
		try {
			this.state = 1330;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1321;
				this.match(HiveParser.KW_SET);
				this.state = 1322;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1323;
				this.tableProperties();
				}
				break;
			case HiveParser.KW_UNSET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1324;
				this.match(HiveParser.KW_UNSET);
				this.state = 1325;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_IF) {
					{
					this.state = 1326;
					this.ifExists();
					}
				}

				this.state = 1329;
				this.tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterViewSuffixProperties(): AlterViewSuffixPropertiesContext {
		let _localctx: AlterViewSuffixPropertiesContext = new AlterViewSuffixPropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, HiveParser.RULE_alterViewSuffixProperties);
		let _la: number;
		try {
			this.state = 1341;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1332;
				this.match(HiveParser.KW_SET);
				this.state = 1333;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1334;
				this.tableProperties();
				}
				break;
			case HiveParser.KW_UNSET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1335;
				this.match(HiveParser.KW_UNSET);
				this.state = 1336;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_IF) {
					{
					this.state = 1337;
					this.ifExists();
					}
				}

				this.state = 1340;
				this.tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterMaterializedViewSuffixRewrite(): AlterMaterializedViewSuffixRewriteContext {
		let _localctx: AlterMaterializedViewSuffixRewriteContext = new AlterMaterializedViewSuffixRewriteContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, HiveParser.RULE_alterMaterializedViewSuffixRewrite);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1345;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ENABLE:
				{
				this.state = 1343;
				this.rewriteEnabled();
				}
				break;
			case HiveParser.KW_DISABLE:
				{
				this.state = 1344;
				this.rewriteDisabled();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterMaterializedViewSuffixRebuild(): AlterMaterializedViewSuffixRebuildContext {
		let _localctx: AlterMaterializedViewSuffixRebuildContext = new AlterMaterializedViewSuffixRebuildContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, HiveParser.RULE_alterMaterializedViewSuffixRebuild);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1347;
			this.match(HiveParser.KW_REBUILD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixSerdeProperties(): AlterStatementSuffixSerdePropertiesContext {
		let _localctx: AlterStatementSuffixSerdePropertiesContext = new AlterStatementSuffixSerdePropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, HiveParser.RULE_alterStatementSuffixSerdeProperties);
		try {
			this.state = 1360;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 92, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1349;
				this.match(HiveParser.KW_SET);
				this.state = 1350;
				this.match(HiveParser.KW_SERDE);
				this.state = 1351;
				this.match(HiveParser.StringLiteral);
				this.state = 1355;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 91, this._ctx) ) {
				case 1:
					{
					this.state = 1352;
					this.match(HiveParser.KW_WITH);
					this.state = 1353;
					this.match(HiveParser.KW_SERDEPROPERTIES);
					this.state = 1354;
					this.tableProperties();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1357;
				this.match(HiveParser.KW_SET);
				this.state = 1358;
				this.match(HiveParser.KW_SERDEPROPERTIES);
				this.state = 1359;
				this.tableProperties();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterIndexStatementSuffix(): AlterIndexStatementSuffixContext {
		let _localctx: AlterIndexStatementSuffixContext = new AlterIndexStatementSuffixContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, HiveParser.RULE_alterIndexStatementSuffix);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1362;
			this.identifier();
			this.state = 1363;
			this.match(HiveParser.KW_ON);
			this.state = 1364;
			this.tableName();
			this.state = 1366;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITION) {
				{
				this.state = 1365;
				this.partitionSpec();
				}
			}

			this.state = 1368;
			this.match(HiveParser.KW_REBUILD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixFileFormat(): AlterStatementSuffixFileFormatContext {
		let _localctx: AlterStatementSuffixFileFormatContext = new AlterStatementSuffixFileFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, HiveParser.RULE_alterStatementSuffixFileFormat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1370;
			this.match(HiveParser.KW_SET);
			this.state = 1371;
			this.match(HiveParser.KW_FILEFORMAT);
			this.state = 1372;
			this.fileFormat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixClusterbySortby(): AlterStatementSuffixClusterbySortbyContext {
		let _localctx: AlterStatementSuffixClusterbySortbyContext = new AlterStatementSuffixClusterbySortbyContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, HiveParser.RULE_alterStatementSuffixClusterbySortby);
		try {
			this.state = 1379;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1374;
				this.match(HiveParser.KW_NOT);
				this.state = 1375;
				this.match(HiveParser.KW_CLUSTERED);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1376;
				this.match(HiveParser.KW_NOT);
				this.state = 1377;
				this.match(HiveParser.KW_SORTED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1378;
				this.tableBuckets();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTblPartitionStatementSuffixSkewedLocation(): AlterTblPartitionStatementSuffixSkewedLocationContext {
		let _localctx: AlterTblPartitionStatementSuffixSkewedLocationContext = new AlterTblPartitionStatementSuffixSkewedLocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1381;
			this.match(HiveParser.KW_SET);
			this.state = 1382;
			this.match(HiveParser.KW_SKEWED);
			this.state = 1383;
			this.match(HiveParser.KW_LOCATION);
			this.state = 1384;
			this.skewedLocations();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedLocations(): SkewedLocationsContext {
		let _localctx: SkewedLocationsContext = new SkewedLocationsContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, HiveParser.RULE_skewedLocations);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1386;
			this.match(HiveParser.LPAREN);
			this.state = 1387;
			this.skewedLocationsList();
			this.state = 1388;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedLocationsList(): SkewedLocationsListContext {
		let _localctx: SkewedLocationsListContext = new SkewedLocationsListContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, HiveParser.RULE_skewedLocationsList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1390;
			this.skewedLocationMap();
			this.state = 1395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 1391;
				this.match(HiveParser.COMMA);
				this.state = 1392;
				this.skewedLocationMap();
				}
				}
				this.state = 1397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedLocationMap(): SkewedLocationMapContext {
		let _localctx: SkewedLocationMapContext = new SkewedLocationMapContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, HiveParser.RULE_skewedLocationMap);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1398;
			this.skewedValueLocationElement();
			this.state = 1399;
			this.match(HiveParser.EQUAL);
			this.state = 1400;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixLocation(): AlterStatementSuffixLocationContext {
		let _localctx: AlterStatementSuffixLocationContext = new AlterStatementSuffixLocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, HiveParser.RULE_alterStatementSuffixLocation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1402;
			this.match(HiveParser.KW_SET);
			this.state = 1403;
			this.match(HiveParser.KW_LOCATION);
			this.state = 1404;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixSkewedby(): AlterStatementSuffixSkewedbyContext {
		let _localctx: AlterStatementSuffixSkewedbyContext = new AlterStatementSuffixSkewedbyContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, HiveParser.RULE_alterStatementSuffixSkewedby);
		try {
			this.state = 1411;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 96, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1406;
				this.tableSkewed();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1407;
				this.match(HiveParser.KW_NOT);
				this.state = 1408;
				this.match(HiveParser.KW_SKEWED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1409;
				this.match(HiveParser.KW_NOT);
				this.state = 1410;
				this.storedAsDirs();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixExchangePartition(): AlterStatementSuffixExchangePartitionContext {
		let _localctx: AlterStatementSuffixExchangePartitionContext = new AlterStatementSuffixExchangePartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, HiveParser.RULE_alterStatementSuffixExchangePartition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1413;
			this.match(HiveParser.KW_EXCHANGE);
			this.state = 1414;
			this.partitionSpec();
			this.state = 1415;
			this.match(HiveParser.KW_WITH);
			this.state = 1416;
			this.match(HiveParser.KW_TABLE);
			this.state = 1417;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixRenamePart(): AlterStatementSuffixRenamePartContext {
		let _localctx: AlterStatementSuffixRenamePartContext = new AlterStatementSuffixRenamePartContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, HiveParser.RULE_alterStatementSuffixRenamePart);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1419;
			this.match(HiveParser.KW_RENAME);
			this.state = 1420;
			this.match(HiveParser.KW_TO);
			this.state = 1421;
			this.partitionSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixStatsPart(): AlterStatementSuffixStatsPartContext {
		let _localctx: AlterStatementSuffixStatsPartContext = new AlterStatementSuffixStatsPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, HiveParser.RULE_alterStatementSuffixStatsPart);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1423;
			this.match(HiveParser.KW_UPDATE);
			this.state = 1424;
			this.match(HiveParser.KW_STATISTICS);
			this.state = 1425;
			this.match(HiveParser.KW_FOR);
			this.state = 1427;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COLUMN) {
				{
				this.state = 1426;
				this.match(HiveParser.KW_COLUMN);
				}
			}

			this.state = 1429;
			this.identifier();
			this.state = 1430;
			this.match(HiveParser.KW_SET);
			this.state = 1431;
			this.tableProperties();
			this.state = 1434;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 1432;
				this.match(HiveParser.KW_COMMENT);
				this.state = 1433;
				this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixMergeFiles(): AlterStatementSuffixMergeFilesContext {
		let _localctx: AlterStatementSuffixMergeFilesContext = new AlterStatementSuffixMergeFilesContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, HiveParser.RULE_alterStatementSuffixMergeFiles);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1436;
			this.match(HiveParser.KW_CONCATENATE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixBucketNum(): AlterStatementSuffixBucketNumContext {
		let _localctx: AlterStatementSuffixBucketNumContext = new AlterStatementSuffixBucketNumContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, HiveParser.RULE_alterStatementSuffixBucketNum);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1438;
			this.match(HiveParser.KW_INTO);
			this.state = 1439;
			this.match(HiveParser.Number);
			this.state = 1440;
			this.match(HiveParser.KW_BUCKETS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndexStatement(): CreateIndexStatementContext {
		let _localctx: CreateIndexStatementContext = new CreateIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, HiveParser.RULE_createIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1442;
			this.match(HiveParser.KW_CREATE);
			this.state = 1443;
			this.match(HiveParser.KW_INDEX);
			this.state = 1444;
			this.identifier();
			this.state = 1445;
			this.match(HiveParser.KW_ON);
			this.state = 1446;
			this.match(HiveParser.KW_TABLE);
			this.state = 1447;
			this.tableName();
			this.state = 1448;
			this.columnParenthesesList();
			this.state = 1449;
			this.match(HiveParser.KW_AS);
			this.state = 1450;
			this.match(HiveParser.StringLiteral);
			this.state = 1454;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 99, this._ctx) ) {
			case 1:
				{
				this.state = 1451;
				this.match(HiveParser.KW_WITH);
				this.state = 1452;
				this.match(HiveParser.KW_DEFERRED);
				this.state = 1453;
				this.match(HiveParser.KW_REBUILD);
				}
				break;
			}
			this.state = 1458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IDXPROPERTIES) {
				{
				this.state = 1456;
				this.match(HiveParser.KW_IDXPROPERTIES);
				this.state = 1457;
				this.tableProperties();
				}
			}

			this.state = 1463;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IN) {
				{
				this.state = 1460;
				this.match(HiveParser.KW_IN);
				this.state = 1461;
				this.match(HiveParser.KW_TABLE);
				this.state = 1462;
				this.tableName();
				}
			}

			this.state = 1468;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITIONED) {
				{
				this.state = 1465;
				this.match(HiveParser.KW_PARTITIONED);
				this.state = 1466;
				this.match(HiveParser.KW_BY);
				this.state = 1467;
				this.columnParenthesesList();
				}
			}

			this.state = 1474;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ROW || _la === HiveParser.KW_STORED) {
				{
				this.state = 1471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROW) {
					{
					this.state = 1470;
					this.tableRowFormat();
					}
				}

				this.state = 1473;
				this.tableFileFormat();
				}
			}

			this.state = 1478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LOCATION) {
				{
				this.state = 1476;
				this.match(HiveParser.KW_LOCATION);
				this.state = 1477;
				this.locationPath();
				}
			}

			this.state = 1481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TBLPROPERTIES) {
				{
				this.state = 1480;
				this.tablePropertiesPrefixed();
				}
			}

			this.state = 1484;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 1483;
				this.tableComment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public locationPath(): LocationPathContext {
		let _localctx: LocationPathContext = new LocationPathContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, HiveParser.RULE_locationPath);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1486;
			this.identifier();
			this.state = 1491;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.DOT) {
				{
				{
				this.state = 1487;
				this.match(HiveParser.DOT);
				this.state = 1488;
				this.identifier();
				}
				}
				this.state = 1493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndexStatement(): DropIndexStatementContext {
		let _localctx: DropIndexStatementContext = new DropIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, HiveParser.RULE_dropIndexStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1494;
			this.match(HiveParser.KW_DROP);
			this.state = 1495;
			this.match(HiveParser.KW_INDEX);
			this.state = 1496;
			this.identifier();
			this.state = 1497;
			this.match(HiveParser.KW_ON);
			this.state = 1498;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablePartitionPrefix(): TablePartitionPrefixContext {
		let _localctx: TablePartitionPrefixContext = new TablePartitionPrefixContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, HiveParser.RULE_tablePartitionPrefix);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1500;
			this.tableName();
			this.state = 1502;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITION) {
				{
				this.state = 1501;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocking(): BlockingContext {
		let _localctx: BlockingContext = new BlockingContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, HiveParser.RULE_blocking);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1504;
			this.match(HiveParser.KW_AND);
			this.state = 1505;
			this.match(HiveParser.KW_WAIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixCompact(): AlterStatementSuffixCompactContext {
		let _localctx: AlterStatementSuffixCompactContext = new AlterStatementSuffixCompactContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, HiveParser.RULE_alterStatementSuffixCompact);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1507;
			this.match(HiveParser.KW_COMPACT);
			this.state = 1508;
			this.match(HiveParser.StringLiteral);
			this.state = 1510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AND) {
				{
				this.state = 1509;
				this.blocking();
				}
			}

			this.state = 1516;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 111, this._ctx) ) {
			case 1:
				{
				this.state = 1512;
				this.match(HiveParser.KW_WITH);
				this.state = 1513;
				this.match(HiveParser.KW_OVERWRITE);
				this.state = 1514;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1515;
				this.tableProperties();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixSetOwner(): AlterStatementSuffixSetOwnerContext {
		let _localctx: AlterStatementSuffixSetOwnerContext = new AlterStatementSuffixSetOwnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, HiveParser.RULE_alterStatementSuffixSetOwner);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1518;
			this.match(HiveParser.KW_SET);
			this.state = 1519;
			this.match(HiveParser.KW_OWNER);
			this.state = 1520;
			this.principalName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileFormat(): FileFormatContext {
		let _localctx: FileFormatContext = new FileFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, HiveParser.RULE_fileFormat);
		let _la: number;
		try {
			this.state = 1535;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 113, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1522;
				this.match(HiveParser.KW_INPUTFORMAT);
				this.state = 1523;
				this.match(HiveParser.StringLiteral);
				this.state = 1524;
				this.match(HiveParser.KW_OUTPUTFORMAT);
				this.state = 1525;
				this.match(HiveParser.StringLiteral);
				this.state = 1526;
				this.match(HiveParser.KW_SERDE);
				this.state = 1527;
				this.match(HiveParser.StringLiteral);
				this.state = 1532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_INPUTDRIVER) {
					{
					this.state = 1528;
					this.match(HiveParser.KW_INPUTDRIVER);
					this.state = 1529;
					this.match(HiveParser.StringLiteral);
					this.state = 1530;
					this.match(HiveParser.KW_OUTPUTDRIVER);
					this.state = 1531;
					this.match(HiveParser.StringLiteral);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1534;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inputFileFormat(): InputFileFormatContext {
		let _localctx: InputFileFormatContext = new InputFileFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, HiveParser.RULE_inputFileFormat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1537;
			this.match(HiveParser.KW_INPUTFORMAT);
			this.state = 1538;
			this.match(HiveParser.StringLiteral);
			this.state = 1539;
			this.match(HiveParser.KW_SERDE);
			this.state = 1540;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tabTypeExpr(): TabTypeExprContext {
		let _localctx: TabTypeExprContext = new TabTypeExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, HiveParser.RULE_tabTypeExpr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1542;
			this.identifier();
			this.state = 1545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.DOT) {
				{
				this.state = 1543;
				this.match(HiveParser.DOT);
				this.state = 1544;
				this.identifier();
				}
			}

			this.state = 1560;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 117, this._ctx) ) {
			case 1:
				{
				this.state = 1547;
				this.identifier();
				this.state = 1557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.DOT) {
					{
					{
					this.state = 1548;
					this.match(HiveParser.DOT);
					this.state = 1553;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
					case 1:
						{
						this.state = 1549;
						this.match(HiveParser.KW_ELEM_TYPE);
						}
						break;

					case 2:
						{
						this.state = 1550;
						this.match(HiveParser.KW_KEY_TYPE);
						}
						break;

					case 3:
						{
						this.state = 1551;
						this.match(HiveParser.KW_VALUE_TYPE);
						}
						break;

					case 4:
						{
						this.state = 1552;
						this.identifier();
						}
						break;
					}
					}
					}
					this.state = 1559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partTypeExpr(): PartTypeExprContext {
		let _localctx: PartTypeExprContext = new PartTypeExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, HiveParser.RULE_partTypeExpr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1562;
			this.tabTypeExpr();
			this.state = 1564;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITION) {
				{
				this.state = 1563;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tabPartColTypeExpr(): TabPartColTypeExprContext {
		let _localctx: TabPartColTypeExprContext = new TabPartColTypeExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, HiveParser.RULE_tabPartColTypeExpr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1566;
			this.tableName();
			this.state = 1568;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITION) {
				{
				this.state = 1567;
				this.partitionSpec();
				}
			}

			this.state = 1571;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				{
				this.state = 1570;
				this.extColumnName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public descStatement(): DescStatementContext {
		let _localctx: DescStatementContext = new DescStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, HiveParser.RULE_descStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1573;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_DESC || _la === HiveParser.KW_DESCRIBE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 123, this._ctx) ) {
			case 1:
				{
				this.state = 1574;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_EXTENDED) {
					{
					this.state = 1575;
					this.match(HiveParser.KW_EXTENDED);
					}
				}

				this.state = 1578;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 1579;
				this.match(HiveParser.KW_FUNCTION);
				this.state = 1581;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_EXTENDED) {
					{
					this.state = 1580;
					this.match(HiveParser.KW_EXTENDED);
					}
				}

				this.state = 1583;
				this.descFuncNames();
				}
				break;

			case 3:
				{
				{
				this.state = 1584;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_EXTENDED || _la === HiveParser.KW_FORMATTED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1585;
				this.tabPartColTypeExpr();
				}
				}
				break;

			case 4:
				{
				this.state = 1586;
				this.tabPartColTypeExpr();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzeStatement(): AnalyzeStatementContext {
		let _localctx: AnalyzeStatementContext = new AnalyzeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, HiveParser.RULE_analyzeStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1589;
			this.match(HiveParser.KW_ANALYZE);
			this.state = 1590;
			this.match(HiveParser.KW_TABLE);
			{
			this.state = 1591;
			this.tableOrPartition();
			}
			this.state = 1604;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_COMPUTE:
				{
				this.state = 1592;
				this.match(HiveParser.KW_COMPUTE);
				this.state = 1593;
				this.match(HiveParser.KW_STATISTICS);
				this.state = 1600;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.KW_NOSCAN:
					{
					this.state = 1594;
					this.match(HiveParser.KW_NOSCAN);
					}
					break;
				case HiveParser.KW_FOR:
					{
					{
					this.state = 1595;
					this.match(HiveParser.KW_FOR);
					this.state = 1596;
					this.match(HiveParser.KW_COLUMNS);
					this.state = 1598;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 124, this._ctx) ) {
					case 1:
						{
						this.state = 1597;
						this.columnNameList();
						}
						break;
					}
					}
					}
					break;
				case HiveParser.EOF:
				case HiveParser.KW_DESC:
				case HiveParser.KW_FROM:
				case HiveParser.KW_SELECT:
				case HiveParser.KW_INSERT:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_IMPORT:
				case HiveParser.KW_CREATE:
				case HiveParser.KW_ALTER:
				case HiveParser.KW_DESCRIBE:
				case HiveParser.KW_DROP:
				case HiveParser.KW_MAP:
				case HiveParser.KW_REDUCE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_WITH:
				case HiveParser.KW_SET:
				case HiveParser.KW_DELETE:
				case HiveParser.KW_GRANT:
				case HiveParser.KW_REVOKE:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_USE:
				case HiveParser.KW_UPDATE:
				case HiveParser.KW_TRUNCATE:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_START:
				case HiveParser.KW_COMMIT:
				case HiveParser.KW_ROLLBACK:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_MERGE:
				case HiveParser.KW_REPL:
				case HiveParser.SEMICOLON:
				case HiveParser.LPAREN:
					break;
				default:
					break;
				}
				}
				break;
			case HiveParser.KW_CACHE:
				{
				this.state = 1602;
				this.match(HiveParser.KW_CACHE);
				this.state = 1603;
				this.match(HiveParser.KW_METADATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let _localctx: ShowStatementContext = new ShowStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, HiveParser.RULE_showStatement);
		let _la: number;
		try {
			this.state = 1729;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 147, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1606;
				this.match(HiveParser.KW_SHOW);
				this.state = 1607;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASES || _la === HiveParser.KW_SCHEMAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LIKE) {
					{
					this.state = 1608;
					this.match(HiveParser.KW_LIKE);
					this.state = 1609;
					this.showStmtIdentifier();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1612;
				this.match(HiveParser.KW_SHOW);
				this.state = 1613;
				this.match(HiveParser.KW_TABLES);
				this.state = 1616;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 128, this._ctx) ) {
				case 1:
					{
					this.state = 1614;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1615;
					this.identifier();
					}
					break;
				}
				this.state = 1621;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 129, this._ctx) ) {
				case 1:
					{
					this.state = 1618;
					this.match(HiveParser.KW_LIKE);
					this.state = 1619;
					this.showStmtIdentifier();
					}
					break;

				case 2:
					{
					this.state = 1620;
					this.showStmtIdentifier();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1623;
				this.match(HiveParser.KW_SHOW);
				this.state = 1624;
				this.match(HiveParser.KW_VIEWS);
				this.state = 1627;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 130, this._ctx) ) {
				case 1:
					{
					this.state = 1625;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1626;
					this.identifier();
					}
					break;
				}
				this.state = 1632;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 131, this._ctx) ) {
				case 1:
					{
					this.state = 1629;
					this.match(HiveParser.KW_LIKE);
					this.state = 1630;
					this.showStmtIdentifier();
					}
					break;

				case 2:
					{
					this.state = 1631;
					this.showStmtIdentifier();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1634;
				this.match(HiveParser.KW_SHOW);
				this.state = 1635;
				this.match(HiveParser.KW_MATERIALIZED);
				this.state = 1636;
				this.match(HiveParser.KW_VIEWS);
				this.state = 1639;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 132, this._ctx) ) {
				case 1:
					{
					this.state = 1637;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1638;
					this.identifier();
					}
					break;
				}
				this.state = 1644;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 133, this._ctx) ) {
				case 1:
					{
					this.state = 1641;
					this.match(HiveParser.KW_LIKE);
					this.state = 1642;
					this.showStmtIdentifier();
					}
					break;

				case 2:
					{
					this.state = 1643;
					this.showStmtIdentifier();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1646;
				this.match(HiveParser.KW_SHOW);
				this.state = 1647;
				this.match(HiveParser.KW_COLUMNS);
				this.state = 1648;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1649;
				this.tableName();
				this.state = 1652;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 134, this._ctx) ) {
				case 1:
					{
					this.state = 1650;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1651;
					this.identifier();
					}
					break;
				}
				this.state = 1657;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 135, this._ctx) ) {
				case 1:
					{
					this.state = 1654;
					this.match(HiveParser.KW_LIKE);
					this.state = 1655;
					this.showStmtIdentifier();
					}
					break;

				case 2:
					{
					this.state = 1656;
					this.showStmtIdentifier();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1659;
				this.match(HiveParser.KW_SHOW);
				this.state = 1660;
				this.match(HiveParser.KW_FUNCTIONS);
				this.state = 1664;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
				case 1:
					{
					this.state = 1661;
					this.match(HiveParser.KW_LIKE);
					this.state = 1662;
					this.showFunctionIdentifier();
					}
					break;

				case 2:
					{
					this.state = 1663;
					this.showFunctionIdentifier();
					}
					break;
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1666;
				this.match(HiveParser.KW_SHOW);
				this.state = 1667;
				this.match(HiveParser.KW_PARTITIONS);
				this.state = 1668;
				this.tableName();
				this.state = 1670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					{
					this.state = 1669;
					this.partitionSpec();
					}
				}

				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1672;
				this.match(HiveParser.KW_SHOW);
				this.state = 1673;
				this.match(HiveParser.KW_CREATE);
				this.state = 1678;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.KW_DATABASE:
				case HiveParser.KW_SCHEMA:
					{
					this.state = 1674;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1675;
					this.identifier();
					}
					break;
				case HiveParser.KW_TABLE:
					{
					this.state = 1676;
					this.match(HiveParser.KW_TABLE);
					this.state = 1677;
					this.tableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1680;
				this.match(HiveParser.KW_SHOW);
				this.state = 1681;
				this.match(HiveParser.KW_TABLE);
				this.state = 1682;
				this.match(HiveParser.KW_EXTENDED);
				this.state = 1685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
					{
					this.state = 1683;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1684;
					this.identifier();
					}
				}

				this.state = 1687;
				this.match(HiveParser.KW_LIKE);
				this.state = 1688;
				this.showStmtIdentifier();
				this.state = 1690;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					{
					this.state = 1689;
					this.partitionSpec();
					}
				}

				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1692;
				this.match(HiveParser.KW_SHOW);
				this.state = 1693;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1694;
				this.tableName();
				this.state = 1698;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 141, this._ctx) ) {
				case 1:
					{
					this.state = 1695;
					this.match(HiveParser.LPAREN);
					this.state = 1696;
					this.match(HiveParser.StringLiteral);
					this.state = 1697;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1700;
				this.match(HiveParser.KW_SHOW);
				this.state = 1701;
				this.match(HiveParser.KW_LOCKS);
				this.state = 1713;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 145, this._ctx) ) {
				case 1:
					{
					this.state = 1702;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1703;
					this.identifier();
					this.state = 1705;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveParser.KW_EXTENDED) {
						{
						this.state = 1704;
						this.match(HiveParser.KW_EXTENDED);
						}
					}

					}
					break;

				case 2:
					{
					this.state = 1708;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
					case 1:
						{
						this.state = 1707;
						this.partTypeExpr();
						}
						break;
					}
					this.state = 1711;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveParser.KW_EXTENDED) {
						{
						this.state = 1710;
						this.match(HiveParser.KW_EXTENDED);
						}
					}

					}
					break;
				}
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1715;
				this.match(HiveParser.KW_SHOW);
				this.state = 1716;
				this.match(HiveParser.KW_COMPACTIONS);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1717;
				this.match(HiveParser.KW_SHOW);
				this.state = 1718;
				this.match(HiveParser.KW_TRANSACTIONS);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1719;
				this.match(HiveParser.KW_SHOW);
				this.state = 1720;
				this.match(HiveParser.KW_CONF);
				this.state = 1721;
				this.match(HiveParser.StringLiteral);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1722;
				this.match(HiveParser.KW_SHOW);
				this.state = 1723;
				this.match(HiveParser.KW_RESOURCE);
				this.state = 1727;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.KW_PLAN:
					{
					{
					this.state = 1724;
					this.match(HiveParser.KW_PLAN);
					this.state = 1725;
					this.identifier();
					}
					}
					break;
				case HiveParser.KW_PLANS:
					{
					this.state = 1726;
					this.match(HiveParser.KW_PLANS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockStatement(): LockStatementContext {
		let _localctx: LockStatementContext = new LockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, HiveParser.RULE_lockStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1731;
			this.match(HiveParser.KW_LOCK);
			this.state = 1732;
			this.match(HiveParser.KW_TABLE);
			this.state = 1733;
			this.tableName();
			this.state = 1735;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITION) {
				{
				this.state = 1734;
				this.partitionSpec();
				}
			}

			this.state = 1737;
			this.lockMode();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockDatabase(): LockDatabaseContext {
		let _localctx: LockDatabaseContext = new LockDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, HiveParser.RULE_lockDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1739;
			this.match(HiveParser.KW_LOCK);
			this.state = 1740;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1741;
			this.identifier();
			this.state = 1742;
			this.lockMode();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockMode(): LockModeContext {
		let _localctx: LockModeContext = new LockModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, HiveParser.RULE_lockMode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1744;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_SHARED || _la === HiveParser.KW_EXCLUSIVE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlockStatement(): UnlockStatementContext {
		let _localctx: UnlockStatementContext = new UnlockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, HiveParser.RULE_unlockStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1746;
			this.match(HiveParser.KW_UNLOCK);
			this.state = 1747;
			this.match(HiveParser.KW_TABLE);
			this.state = 1748;
			this.tableName();
			this.state = 1750;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITION) {
				{
				this.state = 1749;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlockDatabase(): UnlockDatabaseContext {
		let _localctx: UnlockDatabaseContext = new UnlockDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, HiveParser.RULE_unlockDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1752;
			this.match(HiveParser.KW_UNLOCK);
			this.state = 1753;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1754;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRoleStatement(): CreateRoleStatementContext {
		let _localctx: CreateRoleStatementContext = new CreateRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, HiveParser.RULE_createRoleStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1756;
			this.match(HiveParser.KW_CREATE);
			this.state = 1757;
			this.match(HiveParser.KW_ROLE);
			this.state = 1758;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRoleStatement(): DropRoleStatementContext {
		let _localctx: DropRoleStatementContext = new DropRoleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, HiveParser.RULE_dropRoleStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1760;
			this.match(HiveParser.KW_DROP);
			this.state = 1761;
			this.match(HiveParser.KW_ROLE);
			this.state = 1762;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantPrivileges(): GrantPrivilegesContext {
		let _localctx: GrantPrivilegesContext = new GrantPrivilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, HiveParser.RULE_grantPrivileges);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1764;
			this.match(HiveParser.KW_GRANT);
			this.state = 1765;
			this.privilegeList();
			this.state = 1767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ON) {
				{
				this.state = 1766;
				this.privilegeObject();
				}
			}

			this.state = 1769;
			this.match(HiveParser.KW_TO);
			this.state = 1770;
			this.principalSpecification();
			this.state = 1772;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 151, this._ctx) ) {
			case 1:
				{
				this.state = 1771;
				this.withGrantOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokePrivileges(): RevokePrivilegesContext {
		let _localctx: RevokePrivilegesContext = new RevokePrivilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, HiveParser.RULE_revokePrivileges);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1774;
			this.match(HiveParser.KW_REVOKE);
			this.state = 1776;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_GRANT) {
				{
				this.state = 1775;
				this.grantOptionFor();
				}
			}

			this.state = 1778;
			this.privilegeList();
			this.state = 1780;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ON) {
				{
				this.state = 1779;
				this.privilegeObject();
				}
			}

			this.state = 1782;
			this.match(HiveParser.KW_FROM);
			this.state = 1783;
			this.principalSpecification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantRole(): GrantRoleContext {
		let _localctx: GrantRoleContext = new GrantRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, HiveParser.RULE_grantRole);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1785;
			this.match(HiveParser.KW_GRANT);
			this.state = 1787;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				{
				this.state = 1786;
				this.match(HiveParser.KW_ROLE);
				}
				break;
			}
			this.state = 1789;
			this.identifier();
			this.state = 1794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 1790;
				this.match(HiveParser.COMMA);
				this.state = 1791;
				this.identifier();
				}
				}
				this.state = 1796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1797;
			this.match(HiveParser.KW_TO);
			this.state = 1798;
			this.principalSpecification();
			this.state = 1800;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 1799;
				this.withAdminOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeRole(): RevokeRoleContext {
		let _localctx: RevokeRoleContext = new RevokeRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, HiveParser.RULE_revokeRole);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1802;
			this.match(HiveParser.KW_REVOKE);
			this.state = 1804;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
			case 1:
				{
				this.state = 1803;
				this.adminOptionFor();
				}
				break;
			}
			this.state = 1807;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 158, this._ctx) ) {
			case 1:
				{
				this.state = 1806;
				this.match(HiveParser.KW_ROLE);
				}
				break;
			}
			this.state = 1809;
			this.identifier();
			this.state = 1814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 1810;
				this.match(HiveParser.COMMA);
				this.state = 1811;
				this.identifier();
				}
				}
				this.state = 1816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1817;
			this.match(HiveParser.KW_FROM);
			this.state = 1818;
			this.principalSpecification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRoleGrants(): ShowRoleGrantsContext {
		let _localctx: ShowRoleGrantsContext = new ShowRoleGrantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, HiveParser.RULE_showRoleGrants);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1820;
			this.match(HiveParser.KW_SHOW);
			this.state = 1821;
			this.match(HiveParser.KW_ROLE);
			this.state = 1822;
			this.match(HiveParser.KW_GRANT);
			this.state = 1823;
			this.principalName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRoles(): ShowRolesContext {
		let _localctx: ShowRolesContext = new ShowRolesContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, HiveParser.RULE_showRoles);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1825;
			this.match(HiveParser.KW_SHOW);
			this.state = 1826;
			this.match(HiveParser.KW_ROLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCurrentRole(): ShowCurrentRoleContext {
		let _localctx: ShowCurrentRoleContext = new ShowCurrentRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, HiveParser.RULE_showCurrentRole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1828;
			this.match(HiveParser.KW_SHOW);
			this.state = 1829;
			this.match(HiveParser.KW_CURRENT);
			this.state = 1830;
			this.match(HiveParser.KW_ROLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setRole(): SetRoleContext {
		let _localctx: SetRoleContext = new SetRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, HiveParser.RULE_setRole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1832;
			this.match(HiveParser.KW_SET);
			this.state = 1833;
			this.match(HiveParser.KW_ROLE);
			this.state = 1837;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ALL:
				{
				this.state = 1834;
				this.match(HiveParser.KW_ALL);
				}
				break;
			case HiveParser.KW_NONE:
				{
				this.state = 1835;
				this.match(HiveParser.KW_NONE);
				}
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				{
				this.state = 1836;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showGrants(): ShowGrantsContext {
		let _localctx: ShowGrantsContext = new ShowGrantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, HiveParser.RULE_showGrants);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1839;
			this.match(HiveParser.KW_SHOW);
			this.state = 1840;
			this.match(HiveParser.KW_GRANT);
			this.state = 1842;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_GROUP || _la === HiveParser.KW_USER || _la === HiveParser.KW_ROLE) {
				{
				this.state = 1841;
				this.principalName();
				}
			}

			this.state = 1846;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ON) {
				{
				this.state = 1844;
				this.match(HiveParser.KW_ON);
				this.state = 1845;
				this.privilegeIncludeColObject();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRolePrincipals(): ShowRolePrincipalsContext {
		let _localctx: ShowRolePrincipalsContext = new ShowRolePrincipalsContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, HiveParser.RULE_showRolePrincipals);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1848;
			this.match(HiveParser.KW_SHOW);
			this.state = 1849;
			this.match(HiveParser.KW_PRINCIPALS);
			this.state = 1850;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext {
		let _localctx: PrivilegeIncludeColObjectContext = new PrivilegeIncludeColObjectContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, HiveParser.RULE_privilegeIncludeColObject);
		try {
			this.state = 1854;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1852;
				this.match(HiveParser.KW_ALL);
				}
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLE:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASE:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1853;
				this.privObjectCols();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeObject(): PrivilegeObjectContext {
		let _localctx: PrivilegeObjectContext = new PrivilegeObjectContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, HiveParser.RULE_privilegeObject);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1856;
			this.match(HiveParser.KW_ON);
			this.state = 1857;
			this.privObject();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privObject(): PrivObjectContext {
		let _localctx: PrivObjectContext = new PrivObjectContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, HiveParser.RULE_privObject);
		let _la: number;
		try {
			this.state = 1872;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 166, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1859;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1860;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TABLE) {
					{
					this.state = 1861;
					this.match(HiveParser.KW_TABLE);
					}
				}

				this.state = 1864;
				this.tableName();
				this.state = 1866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					{
					this.state = 1865;
					this.partitionSpec();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1868;
				this.match(HiveParser.KW_URI);
				this.state = 1869;
				this.match(HiveParser.StringLiteral);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1870;
				this.match(HiveParser.KW_SERVER);
				this.state = 1871;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privObjectCols(): PrivObjectColsContext {
		let _localctx: PrivObjectColsContext = new PrivObjectColsContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, HiveParser.RULE_privObjectCols);
		let _la: number;
		try {
			this.state = 1893;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1874;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1875;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TABLE) {
					{
					this.state = 1876;
					this.match(HiveParser.KW_TABLE);
					}
				}

				this.state = 1879;
				this.tableName();
				this.state = 1884;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 168, this._ctx) ) {
				case 1:
					{
					this.state = 1880;
					this.match(HiveParser.LPAREN);
					this.state = 1881;
					this.columnNameList();
					this.state = 1882;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				this.state = 1887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					{
					this.state = 1886;
					this.partitionSpec();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1889;
				this.match(HiveParser.KW_URI);
				this.state = 1890;
				this.match(HiveParser.StringLiteral);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1891;
				this.match(HiveParser.KW_SERVER);
				this.state = 1892;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeList(): PrivilegeListContext {
		let _localctx: PrivilegeListContext = new PrivilegeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, HiveParser.RULE_privilegeList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1895;
			this.privlegeDef();
			this.state = 1900;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 1896;
				this.match(HiveParser.COMMA);
				this.state = 1897;
				this.privlegeDef();
				}
				}
				this.state = 1902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privlegeDef(): PrivlegeDefContext {
		let _localctx: PrivlegeDefContext = new PrivlegeDefContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, HiveParser.RULE_privlegeDef);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1903;
			this.privilegeType();
			this.state = 1908;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.LPAREN) {
				{
				this.state = 1904;
				this.match(HiveParser.LPAREN);
				this.state = 1905;
				this.columnNameList();
				this.state = 1906;
				this.match(HiveParser.RPAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeType(): PrivilegeTypeContext {
		let _localctx: PrivilegeTypeContext = new PrivilegeTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, HiveParser.RULE_privilegeType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1910;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_ALL) | (1 << HiveParser.KW_SELECT) | (1 << HiveParser.KW_INSERT))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (HiveParser.KW_CREATE - 65)) | (1 << (HiveParser.KW_ALTER - 65)) | (1 << (HiveParser.KW_DROP - 65)))) !== 0) || _la === HiveParser.KW_DELETE || _la === HiveParser.KW_LOCK || _la === HiveParser.KW_SHOW_DATABASE || _la === HiveParser.KW_UPDATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public principalSpecification(): PrincipalSpecificationContext {
		let _localctx: PrincipalSpecificationContext = new PrincipalSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, HiveParser.RULE_principalSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1912;
			this.principalName();
			this.state = 1917;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 1913;
				this.match(HiveParser.COMMA);
				this.state = 1914;
				this.principalName();
				}
				}
				this.state = 1919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public principalName(): PrincipalNameContext {
		let _localctx: PrincipalNameContext = new PrincipalNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, HiveParser.RULE_principalName);
		try {
			this.state = 1926;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_USER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1920;
				this.match(HiveParser.KW_USER);
				this.state = 1921;
				this.principalIdentifier();
				}
				break;
			case HiveParser.KW_GROUP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1922;
				this.match(HiveParser.KW_GROUP);
				this.state = 1923;
				this.principalIdentifier();
				}
				break;
			case HiveParser.KW_ROLE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1924;
				this.match(HiveParser.KW_ROLE);
				this.state = 1925;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withGrantOption(): WithGrantOptionContext {
		let _localctx: WithGrantOptionContext = new WithGrantOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, HiveParser.RULE_withGrantOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1928;
			this.match(HiveParser.KW_WITH);
			this.state = 1929;
			this.match(HiveParser.KW_GRANT);
			this.state = 1930;
			this.match(HiveParser.KW_OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantOptionFor(): GrantOptionForContext {
		let _localctx: GrantOptionForContext = new GrantOptionForContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, HiveParser.RULE_grantOptionFor);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1932;
			this.match(HiveParser.KW_GRANT);
			this.state = 1933;
			this.match(HiveParser.KW_OPTION);
			this.state = 1934;
			this.match(HiveParser.KW_FOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public adminOptionFor(): AdminOptionForContext {
		let _localctx: AdminOptionForContext = new AdminOptionForContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, HiveParser.RULE_adminOptionFor);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1936;
			this.match(HiveParser.KW_ADMIN);
			this.state = 1937;
			this.match(HiveParser.KW_OPTION);
			this.state = 1938;
			this.match(HiveParser.KW_FOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withAdminOption(): WithAdminOptionContext {
		let _localctx: WithAdminOptionContext = new WithAdminOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, HiveParser.RULE_withAdminOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1940;
			this.match(HiveParser.KW_WITH);
			this.state = 1941;
			this.match(HiveParser.KW_ADMIN);
			this.state = 1942;
			this.match(HiveParser.KW_OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public metastoreCheck(): MetastoreCheckContext {
		let _localctx: MetastoreCheckContext = new MetastoreCheckContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, HiveParser.RULE_metastoreCheck);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1944;
			this.match(HiveParser.KW_MSCK);
			this.state = 1946;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_REPAIR) {
				{
				this.state = 1945;
				this.match(HiveParser.KW_REPAIR);
				}
			}

			this.state = 1957;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_TABLE:
				{
				this.state = 1948;
				this.match(HiveParser.KW_TABLE);
				this.state = 1949;
				this.tableName();
				this.state = 1952;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 176, this._ctx) ) {
				case 1:
					{
					this.state = 1950;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_DROP || _la === HiveParser.KW_ADD || _la === HiveParser.KW_SYNC)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1951;
					this.match(HiveParser.KW_PARTITIONS);
					}
					break;
				}
				}
				break;
			case HiveParser.EOF:
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_PARTITION:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.SEMICOLON:
			case HiveParser.LPAREN:
				{
				this.state = 1955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PARTITION) {
					{
					this.state = 1954;
					this.partitionSpec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceList(): ResourceListContext {
		let _localctx: ResourceListContext = new ResourceListContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, HiveParser.RULE_resourceList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1959;
			this.resource();
			this.state = 1964;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 1960;
				this.match(HiveParser.COMMA);
				this.state = 1961;
				this.resource();
				}
				}
				this.state = 1966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resource(): ResourceContext {
		let _localctx: ResourceContext = new ResourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, HiveParser.RULE_resource);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1967;
			this.resourceType();
			this.state = 1968;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceType(): ResourceTypeContext {
		let _localctx: ResourceTypeContext = new ResourceTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, HiveParser.RULE_resourceType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1970;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_FILE || _la === HiveParser.KW_JAR || _la === HiveParser.KW_ARCHIVE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFunctionStatement(): CreateFunctionStatementContext {
		let _localctx: CreateFunctionStatementContext = new CreateFunctionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, HiveParser.RULE_createFunctionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1972;
			this.match(HiveParser.KW_CREATE);
			this.state = 1974;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TEMPORARY) {
				{
				this.state = 1973;
				this.match(HiveParser.KW_TEMPORARY);
				}
			}

			this.state = 1976;
			this.match(HiveParser.KW_FUNCTION);
			this.state = 1977;
			this.functionIdentifier();
			this.state = 1978;
			this.match(HiveParser.KW_AS);
			this.state = 1979;
			this.match(HiveParser.StringLiteral);
			this.state = 1982;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_USING) {
				{
				this.state = 1980;
				this.match(HiveParser.KW_USING);
				this.state = 1981;
				this.resourceList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFunctionStatement(): DropFunctionStatementContext {
		let _localctx: DropFunctionStatementContext = new DropFunctionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, HiveParser.RULE_dropFunctionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1984;
			this.match(HiveParser.KW_DROP);
			this.state = 1986;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TEMPORARY) {
				{
				this.state = 1985;
				this.match(HiveParser.KW_TEMPORARY);
				}
			}

			this.state = 1988;
			this.match(HiveParser.KW_FUNCTION);
			this.state = 1990;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 1989;
				this.ifExists();
				}
			}

			this.state = 1992;
			this.functionIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reloadFunctionStatement(): ReloadFunctionStatementContext {
		let _localctx: ReloadFunctionStatementContext = new ReloadFunctionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, HiveParser.RULE_reloadFunctionStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1994;
			this.match(HiveParser.KW_RELOAD);
			this.state = 1995;
			this.match(HiveParser.KW_FUNCTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createMacroStatement(): CreateMacroStatementContext {
		let _localctx: CreateMacroStatementContext = new CreateMacroStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, HiveParser.RULE_createMacroStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1997;
			this.match(HiveParser.KW_CREATE);
			this.state = 1998;
			this.match(HiveParser.KW_TEMPORARY);
			this.state = 1999;
			this.match(HiveParser.KW_MACRO);
			this.state = 2000;
			this.match(HiveParser.Identifier);
			this.state = 2001;
			this.match(HiveParser.LPAREN);
			this.state = 2003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la === HiveParser.Identifier) {
				{
				this.state = 2002;
				this.columnNameTypeList();
				}
			}

			this.state = 2005;
			this.match(HiveParser.RPAREN);
			this.state = 2006;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropMacroStatement(): DropMacroStatementContext {
		let _localctx: DropMacroStatementContext = new DropMacroStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, HiveParser.RULE_dropMacroStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2008;
			this.match(HiveParser.KW_DROP);
			this.state = 2009;
			this.match(HiveParser.KW_TEMPORARY);
			this.state = 2010;
			this.match(HiveParser.KW_MACRO);
			this.state = 2012;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 2011;
				this.ifExists();
				}
			}

			this.state = 2014;
			this.match(HiveParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createViewStatement(): CreateViewStatementContext {
		let _localctx: CreateViewStatementContext = new CreateViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, HiveParser.RULE_createViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2016;
			this.match(HiveParser.KW_CREATE);
			this.state = 2018;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_OR) {
				{
				this.state = 2017;
				this.orReplace();
				}
			}

			this.state = 2020;
			this.match(HiveParser.KW_VIEW);
			this.state = 2022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 2021;
				this.ifNotExists();
				}
			}

			this.state = 2024;
			this.tableName();
			this.state = 2029;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.LPAREN) {
				{
				this.state = 2025;
				this.match(HiveParser.LPAREN);
				this.state = 2026;
				this.columnNameCommentList();
				this.state = 2027;
				this.match(HiveParser.RPAREN);
				}
			}

			this.state = 2032;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 2031;
				this.tableComment();
				}
			}

			this.state = 2035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITIONED) {
				{
				this.state = 2034;
				this.viewPartition();
				}
			}

			this.state = 2038;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TBLPROPERTIES) {
				{
				this.state = 2037;
				this.tablePropertiesPrefixed();
				}
			}

			this.state = 2040;
			this.match(HiveParser.KW_AS);
			this.state = 2041;
			this.selectStatementWithCTE();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
		let _localctx: CreateMaterializedViewStatementContext = new CreateMaterializedViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, HiveParser.RULE_createMaterializedViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2043;
			this.match(HiveParser.KW_CREATE);
			this.state = 2044;
			this.match(HiveParser.KW_MATERIALIZED);
			this.state = 2045;
			this.match(HiveParser.KW_VIEW);
			this.state = 2047;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 2046;
				this.ifNotExists();
				}
			}

			this.state = 2049;
			this.tableName();
			this.state = 2051;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_DISABLE) {
				{
				this.state = 2050;
				this.rewriteDisabled();
				}
			}

			this.state = 2054;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 2053;
				this.tableComment();
				}
			}

			this.state = 2057;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ROW) {
				{
				this.state = 2056;
				this.tableRowFormat();
				}
			}

			this.state = 2060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_STORED) {
				{
				this.state = 2059;
				this.tableFileFormat();
				}
			}

			this.state = 2063;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LOCATION) {
				{
				this.state = 2062;
				this.tableLocation();
				}
			}

			this.state = 2066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TBLPROPERTIES) {
				{
				this.state = 2065;
				this.tablePropertiesPrefixed();
				}
			}

			this.state = 2068;
			this.match(HiveParser.KW_AS);
			this.state = 2069;
			this.selectStatementWithCTE();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewPartition(): ViewPartitionContext {
		let _localctx: ViewPartitionContext = new ViewPartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, HiveParser.RULE_viewPartition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2071;
			this.match(HiveParser.KW_PARTITIONED);
			this.state = 2072;
			this.match(HiveParser.KW_ON);
			this.state = 2073;
			this.match(HiveParser.LPAREN);
			this.state = 2074;
			this.columnNameList();
			this.state = 2075;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropViewStatement(): DropViewStatementContext {
		let _localctx: DropViewStatementContext = new DropViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, HiveParser.RULE_dropViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2077;
			this.match(HiveParser.KW_DROP);
			this.state = 2078;
			this.match(HiveParser.KW_VIEW);
			this.state = 2080;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 2079;
				this.ifExists();
				}
			}

			this.state = 2082;
			this.viewName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropMaterializedViewStatement(): DropMaterializedViewStatementContext {
		let _localctx: DropMaterializedViewStatementContext = new DropMaterializedViewStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, HiveParser.RULE_dropMaterializedViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2084;
			this.match(HiveParser.KW_DROP);
			this.state = 2085;
			this.match(HiveParser.KW_MATERIALIZED);
			this.state = 2086;
			this.match(HiveParser.KW_VIEW);
			this.state = 2088;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_IF) {
				{
				this.state = 2087;
				this.ifExists();
				}
			}

			this.state = 2090;
			this.viewName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showFunctionIdentifier(): ShowFunctionIdentifierContext {
		let _localctx: ShowFunctionIdentifierContext = new ShowFunctionIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, HiveParser.RULE_showFunctionIdentifier);
		try {
			this.state = 2094;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2092;
				this.functionIdentifier();
				}
				break;
			case HiveParser.StringLiteral:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2093;
				this.match(HiveParser.StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStmtIdentifier(): ShowStmtIdentifierContext {
		let _localctx: ShowStmtIdentifierContext = new ShowStmtIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, HiveParser.RULE_showStmtIdentifier);
		try {
			this.state = 2098;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2096;
				this.identifier();
				}
				break;
			case HiveParser.StringLiteral:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2097;
				this.match(HiveParser.StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableComment(): TableCommentContext {
		let _localctx: TableCommentContext = new TableCommentContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, HiveParser.RULE_tableComment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2100;
			this.match(HiveParser.KW_COMMENT);
			this.state = 2101;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablePartition(): TablePartitionContext {
		let _localctx: TablePartitionContext = new TablePartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, HiveParser.RULE_tablePartition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2103;
			this.match(HiveParser.KW_PARTITIONED);
			this.state = 2104;
			this.match(HiveParser.KW_BY);
			this.state = 2105;
			this.match(HiveParser.LPAREN);
			this.state = 2106;
			this.columnNameTypeConstraint();
			this.state = 2111;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2107;
				this.match(HiveParser.COMMA);
				this.state = 2108;
				this.columnNameTypeConstraint();
				}
				}
				this.state = 2113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2114;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableBuckets(): TableBucketsContext {
		let _localctx: TableBucketsContext = new TableBucketsContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, HiveParser.RULE_tableBuckets);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2116;
			this.match(HiveParser.KW_CLUSTERED);
			this.state = 2117;
			this.match(HiveParser.KW_BY);
			this.state = 2118;
			this.match(HiveParser.LPAREN);
			this.state = 2119;
			this.columnNameList();
			this.state = 2120;
			this.match(HiveParser.RPAREN);
			this.state = 2127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_SORTED) {
				{
				this.state = 2121;
				this.match(HiveParser.KW_SORTED);
				this.state = 2122;
				this.match(HiveParser.KW_BY);
				this.state = 2123;
				this.match(HiveParser.LPAREN);
				this.state = 2124;
				this.columnNameOrderList();
				this.state = 2125;
				this.match(HiveParser.RPAREN);
				}
			}

			this.state = 2129;
			this.match(HiveParser.KW_INTO);
			this.state = 2130;
			this.match(HiveParser.Number);
			this.state = 2131;
			this.match(HiveParser.KW_BUCKETS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSkewed(): TableSkewedContext {
		let _localctx: TableSkewedContext = new TableSkewedContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, HiveParser.RULE_tableSkewed);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2133;
			this.match(HiveParser.KW_SKEWED);
			this.state = 2134;
			this.match(HiveParser.KW_BY);
			this.state = 2135;
			this.match(HiveParser.LPAREN);
			this.state = 2136;
			this.columnNameList();
			this.state = 2137;
			this.match(HiveParser.RPAREN);
			this.state = 2138;
			this.match(HiveParser.KW_ON);
			this.state = 2139;
			this.match(HiveParser.LPAREN);
			this.state = 2140;
			this.skewedValueElement();
			this.state = 2141;
			this.match(HiveParser.RPAREN);
			this.state = 2143;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 205, this._ctx) ) {
			case 1:
				{
				this.state = 2142;
				this.storedAsDirs();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowFormat(): RowFormatContext {
		let _localctx: RowFormatContext = new RowFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, HiveParser.RULE_rowFormat);
		try {
			this.state = 2147;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2145;
				this.rowFormatSerde();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2146;
				this.rowFormatDelimited();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordReader(): RecordReaderContext {
		let _localctx: RecordReaderContext = new RecordReaderContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, HiveParser.RULE_recordReader);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2149;
			this.match(HiveParser.KW_RECORDREADER);
			this.state = 2150;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordWriter(): RecordWriterContext {
		let _localctx: RecordWriterContext = new RecordWriterContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, HiveParser.RULE_recordWriter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2152;
			this.match(HiveParser.KW_RECORDWRITER);
			this.state = 2153;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowFormatSerde(): RowFormatSerdeContext {
		let _localctx: RowFormatSerdeContext = new RowFormatSerdeContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, HiveParser.RULE_rowFormatSerde);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2155;
			this.match(HiveParser.KW_ROW);
			this.state = 2156;
			this.match(HiveParser.KW_FORMAT);
			this.state = 2157;
			this.match(HiveParser.KW_SERDE);
			this.state = 2158;
			this.match(HiveParser.StringLiteral);
			this.state = 2162;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 207, this._ctx) ) {
			case 1:
				{
				this.state = 2159;
				this.match(HiveParser.KW_WITH);
				this.state = 2160;
				this.match(HiveParser.KW_SERDEPROPERTIES);
				this.state = 2161;
				this.tableProperties();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowFormatDelimited(): RowFormatDelimitedContext {
		let _localctx: RowFormatDelimitedContext = new RowFormatDelimitedContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, HiveParser.RULE_rowFormatDelimited);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2164;
			this.match(HiveParser.KW_ROW);
			this.state = 2165;
			this.match(HiveParser.KW_FORMAT);
			this.state = 2166;
			this.match(HiveParser.KW_DELIMITED);
			this.state = 2168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_FIELDS) {
				{
				this.state = 2167;
				this.tableRowFormatFieldIdentifier();
				}
			}

			this.state = 2171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COLLECTION) {
				{
				this.state = 2170;
				this.tableRowFormatCollItemsIdentifier();
				}
			}

			this.state = 2174;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				{
				this.state = 2173;
				this.tableRowFormatMapKeysIdentifier();
				}
				break;
			}
			this.state = 2177;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LINES) {
				{
				this.state = 2176;
				this.tableRowFormatLinesIdentifier();
				}
			}

			this.state = 2180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NULL) {
				{
				this.state = 2179;
				this.tableRowNullFormat();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRowFormat(): TableRowFormatContext {
		let _localctx: TableRowFormatContext = new TableRowFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, HiveParser.RULE_tableRowFormat);
		try {
			this.state = 2184;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 213, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2182;
				this.rowFormatDelimited();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2183;
				this.rowFormatSerde();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
		let _localctx: TablePropertiesPrefixedContext = new TablePropertiesPrefixedContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, HiveParser.RULE_tablePropertiesPrefixed);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2186;
			this.match(HiveParser.KW_TBLPROPERTIES);
			this.state = 2187;
			this.tableProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableProperties(): TablePropertiesContext {
		let _localctx: TablePropertiesContext = new TablePropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, HiveParser.RULE_tableProperties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2189;
			this.match(HiveParser.LPAREN);
			this.state = 2190;
			this.tablePropertiesList();
			this.state = 2191;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablePropertiesList(): TablePropertiesListContext {
		let _localctx: TablePropertiesListContext = new TablePropertiesListContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, HiveParser.RULE_tablePropertiesList);
		let _la: number;
		try {
			this.state = 2209;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 216, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2193;
				this.keyValueProperty();
				this.state = 2198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					{
					{
					this.state = 2194;
					this.match(HiveParser.COMMA);
					this.state = 2195;
					this.keyValueProperty();
					}
					}
					this.state = 2200;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2201;
				this.keyProperty();
				this.state = 2206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					{
					{
					this.state = 2202;
					this.match(HiveParser.COMMA);
					this.state = 2203;
					this.keyProperty();
					}
					}
					this.state = 2208;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyValueProperty(): KeyValuePropertyContext {
		let _localctx: KeyValuePropertyContext = new KeyValuePropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, HiveParser.RULE_keyValueProperty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2211;
			this.match(HiveParser.StringLiteral);
			this.state = 2212;
			this.match(HiveParser.EQUAL);
			this.state = 2213;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keyProperty(): KeyPropertyContext {
		let _localctx: KeyPropertyContext = new KeyPropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, HiveParser.RULE_keyProperty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2215;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext {
		let _localctx: TableRowFormatFieldIdentifierContext = new TableRowFormatFieldIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, HiveParser.RULE_tableRowFormatFieldIdentifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2217;
			this.match(HiveParser.KW_FIELDS);
			this.state = 2218;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2219;
			this.match(HiveParser.KW_BY);
			this.state = 2220;
			this.match(HiveParser.StringLiteral);
			this.state = 2224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ESCAPED) {
				{
				this.state = 2221;
				this.match(HiveParser.KW_ESCAPED);
				this.state = 2222;
				this.match(HiveParser.KW_BY);
				this.state = 2223;
				this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext {
		let _localctx: TableRowFormatCollItemsIdentifierContext = new TableRowFormatCollItemsIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, HiveParser.RULE_tableRowFormatCollItemsIdentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2226;
			this.match(HiveParser.KW_COLLECTION);
			this.state = 2227;
			this.match(HiveParser.KW_ITEMS);
			this.state = 2228;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2229;
			this.match(HiveParser.KW_BY);
			this.state = 2230;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext {
		let _localctx: TableRowFormatMapKeysIdentifierContext = new TableRowFormatMapKeysIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, HiveParser.RULE_tableRowFormatMapKeysIdentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2232;
			this.match(HiveParser.KW_MAP);
			this.state = 2233;
			this.match(HiveParser.KW_KEYS);
			this.state = 2234;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2235;
			this.match(HiveParser.KW_BY);
			this.state = 2236;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext {
		let _localctx: TableRowFormatLinesIdentifierContext = new TableRowFormatLinesIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, HiveParser.RULE_tableRowFormatLinesIdentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2238;
			this.match(HiveParser.KW_LINES);
			this.state = 2239;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2240;
			this.match(HiveParser.KW_BY);
			this.state = 2241;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableRowNullFormat(): TableRowNullFormatContext {
		let _localctx: TableRowNullFormatContext = new TableRowNullFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, HiveParser.RULE_tableRowNullFormat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2243;
			this.match(HiveParser.KW_NULL);
			this.state = 2244;
			this.match(HiveParser.KW_DEFINED);
			this.state = 2245;
			this.match(HiveParser.KW_AS);
			this.state = 2246;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableFileFormat(): TableFileFormatContext {
		let _localctx: TableFileFormatContext = new TableFileFormatContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, HiveParser.RULE_tableFileFormat);
		let _la: number;
		try {
			this.state = 2271;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 220, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2248;
				this.match(HiveParser.KW_STORED);
				this.state = 2249;
				this.match(HiveParser.KW_AS);
				this.state = 2250;
				this.match(HiveParser.KW_INPUTFORMAT);
				this.state = 2251;
				this.match(HiveParser.StringLiteral);
				this.state = 2252;
				this.match(HiveParser.KW_OUTPUTFORMAT);
				this.state = 2253;
				this.match(HiveParser.StringLiteral);
				this.state = 2258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_INPUTDRIVER) {
					{
					this.state = 2254;
					this.match(HiveParser.KW_INPUTDRIVER);
					this.state = 2255;
					this.match(HiveParser.StringLiteral);
					this.state = 2256;
					this.match(HiveParser.KW_OUTPUTDRIVER);
					this.state = 2257;
					this.match(HiveParser.StringLiteral);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2260;
				this.match(HiveParser.KW_STORED);
				this.state = 2261;
				this.match(HiveParser.KW_BY);
				this.state = 2262;
				this.match(HiveParser.StringLiteral);
				this.state = 2266;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 219, this._ctx) ) {
				case 1:
					{
					this.state = 2263;
					this.match(HiveParser.KW_WITH);
					this.state = 2264;
					this.match(HiveParser.KW_SERDEPROPERTIES);
					this.state = 2265;
					this.tableProperties();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2268;
				this.match(HiveParser.KW_STORED);
				this.state = 2269;
				this.match(HiveParser.KW_AS);
				this.state = 2270;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableLocation(): TableLocationContext {
		let _localctx: TableLocationContext = new TableLocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, HiveParser.RULE_tableLocation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2273;
			this.match(HiveParser.KW_LOCATION);
			this.state = 2274;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeList(): ColumnNameTypeListContext {
		let _localctx: ColumnNameTypeListContext = new ColumnNameTypeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, HiveParser.RULE_columnNameTypeList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2276;
			this.columnNameType();
			this.state = 2281;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2277;
					this.match(HiveParser.COMMA);
					this.state = 2278;
					this.columnNameType();
					}
					}
				}
				this.state = 2283;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 221, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext {
		let _localctx: ColumnNameTypeOrConstraintListContext = new ColumnNameTypeOrConstraintListContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, HiveParser.RULE_columnNameTypeOrConstraintList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2284;
			this.columnNameTypeOrConstraint();
			this.state = 2289;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2285;
				this.match(HiveParser.COMMA);
				this.state = 2286;
				this.columnNameTypeOrConstraint();
				}
				}
				this.state = 2291;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameColonTypeList(): ColumnNameColonTypeListContext {
		let _localctx: ColumnNameColonTypeListContext = new ColumnNameColonTypeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, HiveParser.RULE_columnNameColonTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2292;
			this.columnNameColonType();
			this.state = 2297;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2293;
				this.match(HiveParser.COMMA);
				this.state = 2294;
				this.columnNameColonType();
				}
				}
				this.state = 2299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameList(): ColumnNameListContext {
		let _localctx: ColumnNameListContext = new ColumnNameListContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, HiveParser.RULE_columnNameList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2300;
			this.columnName();
			this.state = 2305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2301;
				this.match(HiveParser.COMMA);
				this.state = 2302;
				this.columnName();
				}
				}
				this.state = 2307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnName(): ColumnNameContext {
		let _localctx: ColumnNameContext = new ColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, HiveParser.RULE_columnName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2308;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extColumnName(): ExtColumnNameContext {
		let _localctx: ExtColumnNameContext = new ExtColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, HiveParser.RULE_extColumnName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2310;
			this.identifier();
			this.state = 2320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.DOT) {
				{
				{
				this.state = 2311;
				this.match(HiveParser.DOT);
				this.state = 2316;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
				case 1:
					{
					this.state = 2312;
					this.match(HiveParser.KW_ELEM_TYPE);
					}
					break;

				case 2:
					{
					this.state = 2313;
					this.match(HiveParser.KW_KEY_TYPE);
					}
					break;

				case 3:
					{
					this.state = 2314;
					this.match(HiveParser.KW_VALUE_TYPE);
					}
					break;

				case 4:
					{
					this.state = 2315;
					this.identifier();
					}
					break;
				}
				}
				}
				this.state = 2322;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameOrderList(): ColumnNameOrderListContext {
		let _localctx: ColumnNameOrderListContext = new ColumnNameOrderListContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, HiveParser.RULE_columnNameOrderList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2323;
			this.columnNameOrder();
			this.state = 2328;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2324;
				this.match(HiveParser.COMMA);
				this.state = 2325;
				this.columnNameOrder();
				}
				}
				this.state = 2330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnParenthesesList(): ColumnParenthesesListContext {
		let _localctx: ColumnParenthesesListContext = new ColumnParenthesesListContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, HiveParser.RULE_columnParenthesesList);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2331;
			this.match(HiveParser.LPAREN);
			this.state = 2332;
			this.columnNameList();
			this.state = 2333;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enableValidateSpecification(): EnableValidateSpecificationContext {
		let _localctx: EnableValidateSpecificationContext = new EnableValidateSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, HiveParser.RULE_enableValidateSpecification);
		let _la: number;
		try {
			this.state = 2340;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2335;
				this.enableSpecification();
				this.state = 2337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_VALIDATE || _la === HiveParser.KW_NOVALIDATE) {
					{
					this.state = 2336;
					this.validateSpecification();
					}
				}

				}
				break;
			case HiveParser.KW_NOT:
			case HiveParser.KW_ENFORCED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2339;
				this.enforcedSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enableSpecification(): EnableSpecificationContext {
		let _localctx: EnableSpecificationContext = new EnableSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, HiveParser.RULE_enableSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2342;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public validateSpecification(): ValidateSpecificationContext {
		let _localctx: ValidateSpecificationContext = new ValidateSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, HiveParser.RULE_validateSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2344;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_VALIDATE || _la === HiveParser.KW_NOVALIDATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enforcedSpecification(): EnforcedSpecificationContext {
		let _localctx: EnforcedSpecificationContext = new EnforcedSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, HiveParser.RULE_enforcedSpecification);
		try {
			this.state = 2349;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ENFORCED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2346;
				this.match(HiveParser.KW_ENFORCED);
				}
				break;
			case HiveParser.KW_NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2347;
				this.match(HiveParser.KW_NOT);
				this.state = 2348;
				this.match(HiveParser.KW_ENFORCED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relySpecification(): RelySpecificationContext {
		let _localctx: RelySpecificationContext = new RelySpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, HiveParser.RULE_relySpecification);
		let _la: number;
		try {
			this.state = 2355;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_RELY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2351;
				this.match(HiveParser.KW_RELY);
				}
				break;
			case HiveParser.EOF:
			case HiveParser.KW_DESC:
			case HiveParser.KW_FROM:
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_IMPORT:
			case HiveParser.KW_CREATE:
			case HiveParser.KW_ALTER:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_DESCRIBE:
			case HiveParser.KW_DROP:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_WITH:
			case HiveParser.KW_SET:
			case HiveParser.KW_DELETE:
			case HiveParser.KW_GRANT:
			case HiveParser.KW_REVOKE:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_USE:
			case HiveParser.KW_UPDATE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_TRUNCATE:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_START:
			case HiveParser.KW_COMMIT:
			case HiveParser.KW_ROLLBACK:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MERGE:
			case HiveParser.KW_REPL:
			case HiveParser.COMMA:
			case HiveParser.SEMICOLON:
			case HiveParser.LPAREN:
			case HiveParser.RPAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_NORELY) {
					{
					this.state = 2352;
					this.match(HiveParser.KW_NORELY);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createConstraint(): CreateConstraintContext {
		let _localctx: CreateConstraintContext = new CreateConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, HiveParser.RULE_createConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_CONSTRAINT) {
				{
				this.state = 2357;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2358;
				this.identifier();
				}
			}

			this.state = 2361;
			this.pkConstraint();
			this.state = 2363;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2362;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterConstraintWithName(): AlterConstraintWithNameContext {
		let _localctx: AlterConstraintWithNameContext = new AlterConstraintWithNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, HiveParser.RULE_alterConstraintWithName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2365;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2366;
			this.identifier();
			this.state = 2367;
			this.pkConstraint();
			this.state = 2369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2368;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pkConstraint(): PkConstraintContext {
		let _localctx: PkConstraintContext = new PkConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, HiveParser.RULE_pkConstraint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2371;
			this.tableConstraintPrimaryKey();
			this.state = 2372;
			_localctx._pkCols = this.columnParenthesesList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createForeignKey(): CreateForeignKeyContext {
		let _localctx: CreateForeignKeyContext = new CreateForeignKeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, HiveParser.RULE_createForeignKey);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2376;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_CONSTRAINT) {
				{
				this.state = 2374;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2375;
				this.identifier();
				}
			}

			this.state = 2378;
			this.match(HiveParser.KW_FOREIGN);
			this.state = 2379;
			this.match(HiveParser.KW_KEY);
			this.state = 2380;
			this.columnParenthesesList();
			this.state = 2381;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2382;
			this.tableName();
			this.state = 2383;
			this.columnParenthesesList();
			this.state = 2385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2384;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterForeignKeyWithName(): AlterForeignKeyWithNameContext {
		let _localctx: AlterForeignKeyWithNameContext = new AlterForeignKeyWithNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, HiveParser.RULE_alterForeignKeyWithName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2387;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2388;
			this.identifier();
			this.state = 2389;
			this.match(HiveParser.KW_FOREIGN);
			this.state = 2390;
			this.match(HiveParser.KW_KEY);
			this.state = 2391;
			this.columnParenthesesList();
			this.state = 2392;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2393;
			this.tableName();
			this.state = 2394;
			this.columnParenthesesList();
			this.state = 2396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2395;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedValueElement(): SkewedValueElementContext {
		let _localctx: SkewedValueElementContext = new SkewedValueElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, HiveParser.RULE_skewedValueElement);
		try {
			this.state = 2400;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_TRUE:
			case HiveParser.KW_FALSE:
			case HiveParser.KW_NULL:
			case HiveParser.KW_DATE:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_TIMESTAMPLOCALTZ:
			case HiveParser.KW_CURRENT_DATE:
			case HiveParser.KW_CURRENT_TIMESTAMP:
			case HiveParser.StringLiteral:
			case HiveParser.IntegralLiteral:
			case HiveParser.NumberLiteral:
			case HiveParser.Number:
			case HiveParser.CharSetName:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2398;
				this.skewedColumnValues();
				}
				break;
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2399;
				this.skewedColumnValuePairList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValuePairList(): SkewedColumnValuePairListContext {
		let _localctx: SkewedColumnValuePairListContext = new SkewedColumnValuePairListContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, HiveParser.RULE_skewedColumnValuePairList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2402;
			this.skewedColumnValuePair();
			this.state = 2407;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2403;
				this.match(HiveParser.COMMA);
				this.state = 2404;
				this.skewedColumnValuePair();
				}
				}
				this.state = 2409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValuePair(): SkewedColumnValuePairContext {
		let _localctx: SkewedColumnValuePairContext = new SkewedColumnValuePairContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, HiveParser.RULE_skewedColumnValuePair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2410;
			this.match(HiveParser.LPAREN);
			this.state = 2411;
			this.skewedColumnValues();
			this.state = 2412;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValues(): SkewedColumnValuesContext {
		let _localctx: SkewedColumnValuesContext = new SkewedColumnValuesContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, HiveParser.RULE_skewedColumnValues);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2414;
			this.skewedColumnValue();
			this.state = 2419;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2415;
				this.match(HiveParser.COMMA);
				this.state = 2416;
				this.skewedColumnValue();
				}
				}
				this.state = 2421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValue(): SkewedColumnValueContext {
		let _localctx: SkewedColumnValueContext = new SkewedColumnValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, HiveParser.RULE_skewedColumnValue);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2422;
			this.constant();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skewedValueLocationElement(): SkewedValueLocationElementContext {
		let _localctx: SkewedValueLocationElementContext = new SkewedValueLocationElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, HiveParser.RULE_skewedValueLocationElement);
		try {
			this.state = 2426;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_TRUE:
			case HiveParser.KW_FALSE:
			case HiveParser.KW_NULL:
			case HiveParser.KW_DATE:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_TIMESTAMPLOCALTZ:
			case HiveParser.KW_CURRENT_DATE:
			case HiveParser.KW_CURRENT_TIMESTAMP:
			case HiveParser.StringLiteral:
			case HiveParser.IntegralLiteral:
			case HiveParser.NumberLiteral:
			case HiveParser.Number:
			case HiveParser.CharSetName:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2424;
				this.skewedColumnValue();
				}
				break;
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2425;
				this.skewedColumnValuePair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderSpecification(): OrderSpecificationContext {
		let _localctx: OrderSpecificationContext = new OrderSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, HiveParser.RULE_orderSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2428;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nullOrdering(): NullOrderingContext {
		let _localctx: NullOrderingContext = new NullOrderingContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, HiveParser.RULE_nullOrdering);
		try {
			this.state = 2434;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 243, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2430;
				this.match(HiveParser.KW_NULLS);
				this.state = 2431;
				this.match(HiveParser.KW_FIRST);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2432;
				this.match(HiveParser.KW_NULLS);
				this.state = 2433;
				this.match(HiveParser.KW_LAST);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameOrder(): ColumnNameOrderContext {
		let _localctx: ColumnNameOrderContext = new ColumnNameOrderContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, HiveParser.RULE_columnNameOrder);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2436;
			this.identifier();
			this.state = 2438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC) {
				{
				this.state = 2437;
				this.orderSpecification();
				}
			}

			this.state = 2441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NULLS) {
				{
				this.state = 2440;
				this.nullOrdering();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameCommentList(): ColumnNameCommentListContext {
		let _localctx: ColumnNameCommentListContext = new ColumnNameCommentListContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, HiveParser.RULE_columnNameCommentList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2443;
			this.columnNameComment();
			this.state = 2448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2444;
				this.match(HiveParser.COMMA);
				this.state = 2445;
				this.columnNameComment();
				}
				}
				this.state = 2450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameComment(): ColumnNameCommentContext {
		let _localctx: ColumnNameCommentContext = new ColumnNameCommentContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, HiveParser.RULE_columnNameComment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2451;
			this.identifier();
			this.state = 2454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 2452;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2453;
				this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnRefOrder(): ColumnRefOrderContext {
		let _localctx: ColumnRefOrderContext = new ColumnRefOrderContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, HiveParser.RULE_columnRefOrder);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2456;
			this.expression(0);
			this.state = 2458;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 248, this._ctx) ) {
			case 1:
				{
				this.state = 2457;
				this.orderSpecification();
				}
				break;
			}
			this.state = 2461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NULLS) {
				{
				this.state = 2460;
				this.nullOrdering();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameType(): ColumnNameTypeContext {
		let _localctx: ColumnNameTypeContext = new ColumnNameTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, HiveParser.RULE_columnNameType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2463;
			this.identifier();
			this.state = 2464;
			this.colType();
			this.state = 2467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 2465;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2466;
				this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext {
		let _localctx: ColumnNameTypeOrConstraintContext = new ColumnNameTypeOrConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, HiveParser.RULE_columnNameTypeOrConstraint);
		try {
			this.state = 2471;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_PRIMARY:
			case HiveParser.KW_FOREIGN:
			case HiveParser.KW_CONSTRAINT:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2469;
				this.tableConstraint();
				}
				}
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2470;
				this.columnNameTypeConstraint();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableConstraint(): TableConstraintContext {
		let _localctx: TableConstraintContext = new TableConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, HiveParser.RULE_tableConstraint);
		try {
			this.state = 2475;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 252, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2473;
				this.createForeignKey();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2474;
				this.createConstraint();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeConstraint(): ColumnNameTypeConstraintContext {
		let _localctx: ColumnNameTypeConstraintContext = new ColumnNameTypeConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, HiveParser.RULE_columnNameTypeConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2477;
			this.identifier();
			this.state = 2478;
			this.colType();
			this.state = 2480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & ((1 << (HiveParser.KW_PRIMARY - 287)) | (1 << (HiveParser.KW_REFERENCES - 287)) | (1 << (HiveParser.KW_CONSTRAINT - 287)))) !== 0)) {
				{
				this.state = 2479;
				this.columnConstraint();
				}
			}

			this.state = 2484;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 2482;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2483;
				this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnConstraint(): ColumnConstraintContext {
		let _localctx: ColumnConstraintContext = new ColumnConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, HiveParser.RULE_columnConstraint);
		try {
			this.state = 2488;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2486;
				this.foreignKeyConstraint();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2487;
				this.colConstraint();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public foreignKeyConstraint(): ForeignKeyConstraintContext {
		let _localctx: ForeignKeyConstraintContext = new ForeignKeyConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, HiveParser.RULE_foreignKeyConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_CONSTRAINT) {
				{
				this.state = 2490;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2491;
				this.identifier();
				}
			}

			this.state = 2494;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2495;
			this.tableName();
			this.state = 2496;
			this.match(HiveParser.LPAREN);
			this.state = 2497;
			this.columnName();
			this.state = 2498;
			this.match(HiveParser.RPAREN);
			this.state = 2500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2499;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colConstraint(): ColConstraintContext {
		let _localctx: ColConstraintContext = new ColConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, HiveParser.RULE_colConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_CONSTRAINT) {
				{
				this.state = 2502;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2503;
				this.identifier();
				}
			}

			this.state = 2506;
			this.tableConstraintPrimaryKey();
			this.state = 2508;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2507;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterColumnConstraint(): AlterColumnConstraintContext {
		let _localctx: AlterColumnConstraintContext = new AlterColumnConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, HiveParser.RULE_alterColumnConstraint);
		try {
			this.state = 2512;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 260, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2510;
				this.alterForeignKeyConstraint();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2511;
				this.alterColConstraint();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext {
		let _localctx: AlterForeignKeyConstraintContext = new AlterForeignKeyConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, HiveParser.RULE_alterForeignKeyConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_CONSTRAINT) {
				{
				this.state = 2514;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2515;
				this.identifier();
				}
			}

			this.state = 2518;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2519;
			this.tableName();
			this.state = 2520;
			this.match(HiveParser.LPAREN);
			this.state = 2521;
			this.columnName();
			this.state = 2522;
			this.match(HiveParser.RPAREN);
			this.state = 2524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2523;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterColConstraint(): AlterColConstraintContext {
		let _localctx: AlterColConstraintContext = new AlterColConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, HiveParser.RULE_alterColConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2528;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_CONSTRAINT) {
				{
				this.state = 2526;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2527;
				this.identifier();
				}
			}

			this.state = 2530;
			this.tableConstraintPrimaryKey();
			this.state = 2532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT || _la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE || _la === HiveParser.KW_ENFORCED) {
				{
				this.state = 2531;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableConstraintPrimaryKey(): TableConstraintPrimaryKeyContext {
		let _localctx: TableConstraintPrimaryKeyContext = new TableConstraintPrimaryKeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, HiveParser.RULE_tableConstraintPrimaryKey);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2534;
			this.match(HiveParser.KW_PRIMARY);
			this.state = 2535;
			this.match(HiveParser.KW_KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintOptsCreate(): ConstraintOptsCreateContext {
		let _localctx: ConstraintOptsCreateContext = new ConstraintOptsCreateContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, HiveParser.RULE_constraintOptsCreate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2537;
			this.enableValidateSpecification();
			this.state = 2538;
			this.relySpecification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintOptsAlter(): ConstraintOptsAlterContext {
		let _localctx: ConstraintOptsAlterContext = new ConstraintOptsAlterContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, HiveParser.RULE_constraintOptsAlter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2540;
			this.enableValidateSpecification();
			this.state = 2541;
			this.relySpecification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnNameColonType(): ColumnNameColonTypeContext {
		let _localctx: ColumnNameColonTypeContext = new ColumnNameColonTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, HiveParser.RULE_columnNameColonType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2543;
			this.identifier();
			this.state = 2544;
			this.match(HiveParser.COLON);
			this.state = 2545;
			this.colType();
			this.state = 2548;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_COMMENT) {
				{
				this.state = 2546;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2547;
				this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colType(): ColTypeContext {
		let _localctx: ColTypeContext = new ColTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, HiveParser.RULE_colType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2550;
			this.type_db_col();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colTypeList(): ColTypeListContext {
		let _localctx: ColTypeListContext = new ColTypeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, HiveParser.RULE_colTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2552;
			this.colType();
			this.state = 2557;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2553;
				this.match(HiveParser.COMMA);
				this.state = 2554;
				this.colType();
				}
				}
				this.state = 2559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_db_col(): Type_db_colContext {
		let _localctx: Type_db_colContext = new Type_db_colContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, HiveParser.RULE_type_db_col);
		try {
			this.state = 2565;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_BOOLEAN:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_SMALLINT:
			case HiveParser.KW_INT:
			case HiveParser.KW_BIGINT:
			case HiveParser.KW_FLOAT:
			case HiveParser.KW_DOUBLE:
			case HiveParser.KW_DATE:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_TIMESTAMPLOCALTZ:
			case HiveParser.KW_DECIMAL:
			case HiveParser.KW_STRING:
			case HiveParser.KW_CHAR:
			case HiveParser.KW_VARCHAR:
			case HiveParser.KW_BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2560;
				this.primitiveType();
				}
				break;
			case HiveParser.KW_ARRAY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2561;
				this.listType();
				}
				break;
			case HiveParser.KW_STRUCT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2562;
				this.structType();
				}
				break;
			case HiveParser.KW_MAP:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2563;
				this.mapType();
				}
				break;
			case HiveParser.KW_UNIONTYPE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2564;
				this.unionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public primitiveType(): PrimitiveTypeContext {
		let _localctx: PrimitiveTypeContext = new PrimitiveTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, HiveParser.RULE_primitiveType);
		let _la: number;
		try {
			this.state = 2606;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 271, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2567;
				this.match(HiveParser.KW_TINYINT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2568;
				this.match(HiveParser.KW_SMALLINT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2569;
				this.match(HiveParser.KW_INT);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2570;
				this.match(HiveParser.KW_BIGINT);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2571;
				this.match(HiveParser.KW_BOOLEAN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2572;
				this.match(HiveParser.KW_FLOAT);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2573;
				this.match(HiveParser.KW_DOUBLE);
				this.state = 2575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_PRECISION) {
					{
					this.state = 2574;
					this.match(HiveParser.KW_PRECISION);
					}
				}

				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2577;
				this.match(HiveParser.KW_DATE);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2578;
				this.match(HiveParser.KW_DATETIME);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2579;
				this.match(HiveParser.KW_TIMESTAMP);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2580;
				this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2581;
				this.match(HiveParser.KW_TIMESTAMP);
				this.state = 2582;
				this.match(HiveParser.KW_WITH);
				this.state = 2583;
				this.match(HiveParser.KW_LOCAL);
				this.state = 2584;
				this.match(HiveParser.KW_TIME);
				this.state = 2585;
				this.match(HiveParser.KW_ZONE);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2586;
				this.match(HiveParser.KW_STRING);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2587;
				this.match(HiveParser.KW_BINARY);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2588;
				this.match(HiveParser.KW_DECIMAL);
				this.state = 2596;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 270, this._ctx) ) {
				case 1:
					{
					this.state = 2589;
					this.match(HiveParser.LPAREN);
					this.state = 2590;
					this.match(HiveParser.Number);
					this.state = 2593;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveParser.COMMA) {
						{
						this.state = 2591;
						this.match(HiveParser.COMMA);
						this.state = 2592;
						this.match(HiveParser.Number);
						}
					}

					this.state = 2595;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2598;
				this.match(HiveParser.KW_VARCHAR);
				this.state = 2599;
				this.match(HiveParser.LPAREN);
				this.state = 2600;
				this.match(HiveParser.Number);
				this.state = 2601;
				this.match(HiveParser.RPAREN);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2602;
				this.match(HiveParser.KW_CHAR);
				this.state = 2603;
				this.match(HiveParser.LPAREN);
				this.state = 2604;
				this.match(HiveParser.Number);
				this.state = 2605;
				this.match(HiveParser.RPAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listType(): ListTypeContext {
		let _localctx: ListTypeContext = new ListTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, HiveParser.RULE_listType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2608;
			this.match(HiveParser.KW_ARRAY);
			this.state = 2609;
			this.match(HiveParser.LESSTHAN);
			this.state = 2610;
			this.type_db_col();
			this.state = 2611;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public structType(): StructTypeContext {
		let _localctx: StructTypeContext = new StructTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, HiveParser.RULE_structType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2613;
			this.match(HiveParser.KW_STRUCT);
			this.state = 2614;
			this.match(HiveParser.LESSTHAN);
			this.state = 2615;
			this.columnNameColonTypeList();
			this.state = 2616;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapType(): MapTypeContext {
		let _localctx: MapTypeContext = new MapTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, HiveParser.RULE_mapType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2618;
			this.match(HiveParser.KW_MAP);
			this.state = 2619;
			this.match(HiveParser.LESSTHAN);
			this.state = 2620;
			this.primitiveType();
			this.state = 2621;
			this.match(HiveParser.COMMA);
			this.state = 2622;
			this.type_db_col();
			this.state = 2623;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionType(): UnionTypeContext {
		let _localctx: UnionTypeContext = new UnionTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, HiveParser.RULE_unionType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2625;
			this.match(HiveParser.KW_UNIONTYPE);
			this.state = 2626;
			this.match(HiveParser.LESSTHAN);
			this.state = 2627;
			this.colTypeList();
			this.state = 2628;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setOperator(): SetOperatorContext {
		let _localctx: SetOperatorContext = new SetOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, HiveParser.RULE_setOperator);
		let _la: number;
		try {
			this.state = 2654;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 276, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2630;
				this.match(HiveParser.KW_UNION);
				this.state = 2631;
				this.match(HiveParser.KW_ALL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2632;
				this.match(HiveParser.KW_UNION);
				this.state = 2634;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					{
					this.state = 2633;
					this.match(HiveParser.KW_DISTINCT);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2636;
				this.match(HiveParser.KW_INTERSECT);
				this.state = 2637;
				this.match(HiveParser.KW_ALL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2638;
				this.match(HiveParser.KW_INTERSECT);
				this.state = 2640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					{
					this.state = 2639;
					this.match(HiveParser.KW_DISTINCT);
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2642;
				this.match(HiveParser.KW_EXCEPT);
				this.state = 2643;
				this.match(HiveParser.KW_ALL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2644;
				this.match(HiveParser.KW_EXCEPT);
				this.state = 2646;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					{
					this.state = 2645;
					this.match(HiveParser.KW_DISTINCT);
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2648;
				this.match(HiveParser.KW_MINUS);
				this.state = 2649;
				this.match(HiveParser.KW_ALL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2650;
				this.match(HiveParser.KW_MINUS);
				this.state = 2652;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTINCT) {
					{
					this.state = 2651;
					this.match(HiveParser.KW_DISTINCT);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryStatementExpression(): QueryStatementExpressionContext {
		let _localctx: QueryStatementExpressionContext = new QueryStatementExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, HiveParser.RULE_queryStatementExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_WITH) {
				{
				this.state = 2656;
				this.withClause();
				}
			}

			this.state = 2659;
			this.queryStatementExpressionBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
		let _localctx: QueryStatementExpressionBodyContext = new QueryStatementExpressionBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, HiveParser.RULE_queryStatementExpressionBody);
		try {
			this.state = 2663;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_FROM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2661;
				this.fromStatement();
				}
				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_INSERT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2662;
				this.regularBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let _localctx: WithClauseContext = new WithClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, HiveParser.RULE_withClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2665;
			this.match(HiveParser.KW_WITH);
			this.state = 2666;
			this.cteStatement();
			this.state = 2671;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2667;
				this.match(HiveParser.COMMA);
				this.state = 2668;
				this.cteStatement();
				}
				}
				this.state = 2673;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cteStatement(): CteStatementContext {
		let _localctx: CteStatementContext = new CteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, HiveParser.RULE_cteStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2674;
			this.identifier();
			this.state = 2675;
			this.match(HiveParser.KW_AS);
			this.state = 2676;
			this.match(HiveParser.LPAREN);
			this.state = 2677;
			this.queryStatementExpression();
			this.state = 2678;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromStatement(): FromStatementContext {
		let _localctx: FromStatementContext = new FromStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, HiveParser.RULE_fromStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			{
			this.state = 2680;
			this.singleFromStatement();
			}
			this.state = 2686;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.KW_UNION || _la === HiveParser.KW_EXCEPT || _la === HiveParser.KW_MINUS || _la === HiveParser.KW_INTERSECT) {
				{
				{
				this.state = 2681;
				this.setOperator();
				this.state = 2682;
				this.singleFromStatement();
				}
				}
				this.state = 2688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleFromStatement(): SingleFromStatementContext {
		let _localctx: SingleFromStatementContext = new SingleFromStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, HiveParser.RULE_singleFromStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2689;
			this.fromClause();
			this.state = 2691;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2690;
					this.body();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2693;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public regularBody(): RegularBodyContext {
		let _localctx: RegularBodyContext = new RegularBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, HiveParser.RULE_regularBody);
		try {
			this.state = 2701;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_INSERT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2695;
				this.insertClause();
				this.state = 2698;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.KW_SELECT:
				case HiveParser.KW_MAP:
				case HiveParser.KW_REDUCE:
				case HiveParser.LPAREN:
					{
					this.state = 2696;
					this.selectStatement();
					}
					break;
				case HiveParser.KW_VALUES:
					{
					this.state = 2697;
					this.valuesClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2700;
				this.selectStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atomSelectStatement(): AtomSelectStatementContext {
		let _localctx: AtomSelectStatementContext = new AtomSelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, HiveParser.RULE_atomSelectStatement);
		let _la: number;
		try {
			this.state = 2723;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2703;
				this.selectClause();
				this.state = 2705;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 284, this._ctx) ) {
				case 1:
					{
					this.state = 2704;
					this.fromClause();
					}
					break;
				}
				this.state = 2708;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WHERE) {
					{
					this.state = 2707;
					this.whereClause();
					}
				}

				this.state = 2711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_GROUP) {
					{
					this.state = 2710;
					this.groupByClause();
					}
				}

				this.state = 2714;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_HAVING) {
					{
					this.state = 2713;
					this.havingClause();
					}
				}

				this.state = 2717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WINDOW) {
					{
					this.state = 2716;
					this.window_clause();
					}
				}

				}
				break;
			case HiveParser.LPAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2719;
				this.match(HiveParser.LPAREN);
				this.state = 2720;
				this.selectStatement();
				this.state = 2721;
				this.match(HiveParser.RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let _localctx: SelectStatementContext = new SelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, HiveParser.RULE_selectStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2725;
			this.atomSelectStatement();
			this.state = 2727;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_UNION || _la === HiveParser.KW_EXCEPT || _la === HiveParser.KW_MINUS || _la === HiveParser.KW_INTERSECT) {
				{
				this.state = 2726;
				this.setOpSelectStatement();
				}
			}

			this.state = 2730;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ORDER) {
				{
				this.state = 2729;
				this.orderByClause();
				}
			}

			this.state = 2733;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_CLUSTER) {
				{
				this.state = 2732;
				this.clusterByClause();
				}
			}

			this.state = 2736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_DISTRIBUTE) {
				{
				this.state = 2735;
				this.distributeByClause();
				}
			}

			this.state = 2739;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_SORT) {
				{
				this.state = 2738;
				this.sortByClause();
				}
			}

			this.state = 2742;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_LIMIT) {
				{
				this.state = 2741;
				this.limitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setOpSelectStatement(): SetOpSelectStatementContext {
		let _localctx: SetOpSelectStatementContext = new SetOpSelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, HiveParser.RULE_setOpSelectStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2744;
				this.setOperator();
				this.state = 2745;
				this.atomSelectStatement();
				}
				}
				this.state = 2749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveParser.KW_UNION || _la === HiveParser.KW_EXCEPT || _la === HiveParser.KW_MINUS || _la === HiveParser.KW_INTERSECT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		let _localctx: SelectStatementWithCTEContext = new SelectStatementWithCTEContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, HiveParser.RULE_selectStatementWithCTE);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2752;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_WITH) {
				{
				this.state = 2751;
				this.withClause();
				}
			}

			this.state = 2754;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public body(): BodyContext {
		let _localctx: BodyContext = new BodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, HiveParser.RULE_body);
		let _la: number;
		try {
			this.state = 2819;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_INSERT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2756;
				this.insertClause();
				this.state = 2757;
				this.selectClause();
				this.state = 2759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LATERAL || _la === HiveParser.COMMA) {
					{
					this.state = 2758;
					this.lateralView();
					}
				}

				this.state = 2762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WHERE) {
					{
					this.state = 2761;
					this.whereClause();
					}
				}

				this.state = 2765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_GROUP) {
					{
					this.state = 2764;
					this.groupByClause();
					}
				}

				this.state = 2768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_HAVING) {
					{
					this.state = 2767;
					this.havingClause();
					}
				}

				this.state = 2771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WINDOW) {
					{
					this.state = 2770;
					this.window_clause();
					}
				}

				this.state = 2774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ORDER) {
					{
					this.state = 2773;
					this.orderByClause();
					}
				}

				this.state = 2777;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_CLUSTER) {
					{
					this.state = 2776;
					this.clusterByClause();
					}
				}

				this.state = 2780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTRIBUTE) {
					{
					this.state = 2779;
					this.distributeByClause();
					}
				}

				this.state = 2783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_SORT) {
					{
					this.state = 2782;
					this.sortByClause();
					}
				}

				this.state = 2786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LIMIT) {
					{
					this.state = 2785;
					this.limitClause();
					}
				}

				}
				break;
			case HiveParser.KW_SELECT:
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2788;
				this.selectClause();
				this.state = 2790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LATERAL || _la === HiveParser.COMMA) {
					{
					this.state = 2789;
					this.lateralView();
					}
				}

				this.state = 2793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WHERE) {
					{
					this.state = 2792;
					this.whereClause();
					}
				}

				this.state = 2796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_GROUP) {
					{
					this.state = 2795;
					this.groupByClause();
					}
				}

				this.state = 2799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_HAVING) {
					{
					this.state = 2798;
					this.havingClause();
					}
				}

				this.state = 2802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_WINDOW) {
					{
					this.state = 2801;
					this.window_clause();
					}
				}

				this.state = 2805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ORDER) {
					{
					this.state = 2804;
					this.orderByClause();
					}
				}

				this.state = 2808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_CLUSTER) {
					{
					this.state = 2807;
					this.clusterByClause();
					}
				}

				this.state = 2811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_DISTRIBUTE) {
					{
					this.state = 2810;
					this.distributeByClause();
					}
				}

				this.state = 2814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_SORT) {
					{
					this.state = 2813;
					this.sortByClause();
					}
				}

				this.state = 2817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LIMIT) {
					{
					this.state = 2816;
					this.limitClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertClause(): InsertClauseContext {
		let _localctx: InsertClauseContext = new InsertClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, HiveParser.RULE_insertClause);
		let _la: number;
		try {
			this.state = 2839;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 322, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2821;
				this.match(HiveParser.KW_INSERT);
				this.state = 2822;
				this.match(HiveParser.KW_OVERWRITE);
				this.state = 2823;
				this.destination();
				this.state = 2825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_IF) {
					{
					this.state = 2824;
					this.ifNotExists();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2827;
				this.match(HiveParser.KW_INSERT);
				this.state = 2828;
				this.match(HiveParser.KW_INTO);
				this.state = 2830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_TABLE) {
					{
					this.state = 2829;
					this.match(HiveParser.KW_TABLE);
					}
				}

				this.state = 2832;
				this.tableOrPartition();
				this.state = 2837;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 321, this._ctx) ) {
				case 1:
					{
					this.state = 2833;
					this.match(HiveParser.LPAREN);
					this.state = 2834;
					this.columnNameList();
					this.state = 2835;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public destination(): DestinationContext {
		let _localctx: DestinationContext = new DestinationContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, HiveParser.RULE_destination);
		let _la: number;
		try {
			this.state = 2854;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_LOCAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_LOCAL) {
					{
					this.state = 2841;
					this.match(HiveParser.KW_LOCAL);
					}
				}

				this.state = 2844;
				this.match(HiveParser.KW_DIRECTORY);
				this.state = 2845;
				this.match(HiveParser.StringLiteral);
				this.state = 2847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROW) {
					{
					this.state = 2846;
					this.tableRowFormat();
					}
				}

				this.state = 2850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_STORED) {
					{
					this.state = 2849;
					this.tableFileFormat();
					}
				}

				}
				break;
			case HiveParser.KW_TABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2852;
				this.match(HiveParser.KW_TABLE);
				this.state = 2853;
				this.tableOrPartition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let _localctx: LimitClauseContext = new LimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, HiveParser.RULE_limitClause);
		try {
			this.state = 2866;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 328, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2856;
				this.match(HiveParser.KW_LIMIT);
				{
				this.state = 2859;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 327, this._ctx) ) {
				case 1:
					{
					this.state = 2857;
					this.match(HiveParser.Number);
					this.state = 2858;
					this.match(HiveParser.COMMA);
					}
					break;
				}
				this.state = 2861;
				this.match(HiveParser.Number);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2862;
				this.match(HiveParser.KW_LIMIT);
				this.state = 2863;
				this.match(HiveParser.Number);
				this.state = 2864;
				this.match(HiveParser.KW_OFFSET);
				this.state = 2865;
				this.match(HiveParser.Number);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let _localctx: DeleteStatementContext = new DeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, HiveParser.RULE_deleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2868;
			this.match(HiveParser.KW_DELETE);
			this.state = 2869;
			this.match(HiveParser.KW_FROM);
			this.state = 2870;
			this.tableName();
			this.state = 2872;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_WHERE) {
				{
				this.state = 2871;
				this.whereClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnAssignmentClause(): ColumnAssignmentClauseContext {
		let _localctx: ColumnAssignmentClauseContext = new ColumnAssignmentClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, HiveParser.RULE_columnAssignmentClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2874;
			this.tableOrColumn();
			this.state = 2875;
			this.match(HiveParser.EQUAL);
			this.state = 2876;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setColumnsClause(): SetColumnsClauseContext {
		let _localctx: SetColumnsClauseContext = new SetColumnsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, HiveParser.RULE_setColumnsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2878;
			this.match(HiveParser.KW_SET);
			this.state = 2879;
			this.columnAssignmentClause();
			this.state = 2884;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 2880;
				this.match(HiveParser.COMMA);
				this.state = 2881;
				this.columnAssignmentClause();
				}
				}
				this.state = 2886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let _localctx: UpdateStatementContext = new UpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, HiveParser.RULE_updateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2887;
			this.match(HiveParser.KW_UPDATE);
			this.state = 2888;
			this.tableName();
			this.state = 2889;
			this.setColumnsClause();
			this.state = 2891;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_WHERE) {
				{
				this.state = 2890;
				this.whereClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlTransactionStatement(): SqlTransactionStatementContext {
		let _localctx: SqlTransactionStatementContext = new SqlTransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, HiveParser.RULE_sqlTransactionStatement);
		try {
			this.state = 2897;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_START:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2893;
				this.startTransactionStatement();
				}
				break;
			case HiveParser.KW_COMMIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2894;
				this.commitStatement();
				}
				break;
			case HiveParser.KW_ROLLBACK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2895;
				this.rollbackStatement();
				}
				break;
			case HiveParser.KW_SET:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2896;
				this.setAutoCommitStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startTransactionStatement(): StartTransactionStatementContext {
		let _localctx: StartTransactionStatementContext = new StartTransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, HiveParser.RULE_startTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2899;
			this.match(HiveParser.KW_START);
			this.state = 2900;
			this.match(HiveParser.KW_TRANSACTION);
			this.state = 2909;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_READ || _la === HiveParser.KW_ISOLATION) {
				{
				this.state = 2901;
				this.transactionMode();
				this.state = 2906;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					{
					{
					this.state = 2902;
					this.match(HiveParser.COMMA);
					this.state = 2903;
					this.transactionMode();
					}
					}
					this.state = 2908;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let _localctx: TransactionModeContext = new TransactionModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, HiveParser.RULE_transactionMode);
		try {
			this.state = 2913;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ISOLATION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2911;
				this.isolationLevel();
				}
				break;
			case HiveParser.KW_READ:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2912;
				this.transactionAccessMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionAccessMode(): TransactionAccessModeContext {
		let _localctx: TransactionAccessModeContext = new TransactionAccessModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, HiveParser.RULE_transactionAccessMode);
		try {
			this.state = 2919;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2915;
				this.match(HiveParser.KW_READ);
				this.state = 2916;
				this.match(HiveParser.KW_ONLY);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2917;
				this.match(HiveParser.KW_READ);
				this.state = 2918;
				this.match(HiveParser.KW_WRITE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public isolationLevel(): IsolationLevelContext {
		let _localctx: IsolationLevelContext = new IsolationLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, HiveParser.RULE_isolationLevel);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2921;
			this.match(HiveParser.KW_ISOLATION);
			this.state = 2922;
			this.match(HiveParser.KW_LEVEL);
			this.state = 2923;
			this.levelOfIsolation();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelOfIsolation(): LevelOfIsolationContext {
		let _localctx: LevelOfIsolationContext = new LevelOfIsolationContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, HiveParser.RULE_levelOfIsolation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2925;
			this.match(HiveParser.KW_SNAPSHOT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commitStatement(): CommitStatementContext {
		let _localctx: CommitStatementContext = new CommitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, HiveParser.RULE_commitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2927;
			this.match(HiveParser.KW_COMMIT);
			this.state = 2929;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_WORK) {
				{
				this.state = 2928;
				this.match(HiveParser.KW_WORK);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollbackStatement(): RollbackStatementContext {
		let _localctx: RollbackStatementContext = new RollbackStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, HiveParser.RULE_rollbackStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2931;
			this.match(HiveParser.KW_ROLLBACK);
			this.state = 2933;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_WORK) {
				{
				this.state = 2932;
				this.match(HiveParser.KW_WORK);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setAutoCommitStatement(): SetAutoCommitStatementContext {
		let _localctx: SetAutoCommitStatementContext = new SetAutoCommitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, HiveParser.RULE_setAutoCommitStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2935;
			this.match(HiveParser.KW_SET);
			this.state = 2936;
			this.match(HiveParser.KW_AUTOCOMMIT);
			this.state = 2937;
			this.booleanValueTok();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public abortTransactionStatement(): AbortTransactionStatementContext {
		let _localctx: AbortTransactionStatementContext = new AbortTransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, HiveParser.RULE_abortTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2939;
			this.match(HiveParser.KW_ABORT);
			this.state = 2940;
			this.match(HiveParser.KW_TRANSACTIONS);
			this.state = 2942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2941;
				this.match(HiveParser.Number);
				}
				}
				this.state = 2944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveParser.Number);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeStatement(): MergeStatementContext {
		let _localctx: MergeStatementContext = new MergeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, HiveParser.RULE_mergeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2946;
			this.match(HiveParser.KW_MERGE);
			this.state = 2947;
			this.match(HiveParser.KW_INTO);
			this.state = 2948;
			this.tableName();
			this.state = 2953;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_AS) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la === HiveParser.Identifier) {
				{
				this.state = 2950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 2949;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 2952;
				this.identifier();
				}
			}

			this.state = 2955;
			this.match(HiveParser.KW_USING);
			this.state = 2956;
			this.joinSourcePart();
			this.state = 2957;
			this.match(HiveParser.KW_ON);
			this.state = 2958;
			this.expression(0);
			this.state = 2959;
			this.whenClauses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenClauses(): WhenClausesContext {
		let _localctx: WhenClausesContext = new WhenClausesContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, HiveParser.RULE_whenClauses);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2965;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 2963;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 342, this._ctx) ) {
					case 1:
						{
						this.state = 2961;
						this.whenMatchedAndClause();
						}
						break;

					case 2:
						{
						this.state = 2962;
						this.whenMatchedThenClause();
						}
						break;
					}
					}
				}
				this.state = 2967;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 343, this._ctx);
			}
			this.state = 2969;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_WHEN) {
				{
				this.state = 2968;
				this.whenNotMatchedClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenNotMatchedClause(): WhenNotMatchedClauseContext {
		let _localctx: WhenNotMatchedClauseContext = new WhenNotMatchedClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, HiveParser.RULE_whenNotMatchedClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2971;
			this.match(HiveParser.KW_WHEN);
			this.state = 2972;
			this.match(HiveParser.KW_NOT);
			this.state = 2973;
			this.match(HiveParser.KW_MATCHED);
			this.state = 2976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AND) {
				{
				this.state = 2974;
				this.match(HiveParser.KW_AND);
				this.state = 2975;
				this.expression(0);
				}
			}

			this.state = 2978;
			this.match(HiveParser.KW_THEN);
			this.state = 2979;
			this.match(HiveParser.KW_INSERT);
			this.state = 2980;
			this.match(HiveParser.KW_VALUES);
			this.state = 2981;
			this.valueRowConstructor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenMatchedAndClause(): WhenMatchedAndClauseContext {
		let _localctx: WhenMatchedAndClauseContext = new WhenMatchedAndClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, HiveParser.RULE_whenMatchedAndClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2983;
			this.match(HiveParser.KW_WHEN);
			this.state = 2984;
			this.match(HiveParser.KW_MATCHED);
			this.state = 2985;
			this.match(HiveParser.KW_AND);
			this.state = 2986;
			this.expression(0);
			this.state = 2987;
			this.match(HiveParser.KW_THEN);
			this.state = 2988;
			this.updateOrDelete();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenMatchedThenClause(): WhenMatchedThenClauseContext {
		let _localctx: WhenMatchedThenClauseContext = new WhenMatchedThenClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, HiveParser.RULE_whenMatchedThenClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2990;
			this.match(HiveParser.KW_WHEN);
			this.state = 2991;
			this.match(HiveParser.KW_MATCHED);
			this.state = 2992;
			this.match(HiveParser.KW_THEN);
			this.state = 2993;
			this.updateOrDelete();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateOrDelete(): UpdateOrDeleteContext {
		let _localctx: UpdateOrDeleteContext = new UpdateOrDeleteContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, HiveParser.RULE_updateOrDelete);
		try {
			this.state = 2998;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_UPDATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2995;
				this.match(HiveParser.KW_UPDATE);
				this.state = 2996;
				this.setColumnsClause();
				}
				break;
			case HiveParser.KW_DELETE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2997;
				this.match(HiveParser.KW_DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public killQueryStatement(): KillQueryStatementContext {
		let _localctx: KillQueryStatementContext = new KillQueryStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, HiveParser.RULE_killQueryStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3000;
			this.match(HiveParser.KW_KILL);
			this.state = 3001;
			this.match(HiveParser.KW_QUERY);
			this.state = 3003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3002;
				this.match(HiveParser.StringLiteral);
				}
				}
				this.state = 3005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectClause(): SelectClauseContext {
		let _localctx: SelectClauseContext = new SelectClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, HiveParser.RULE_selectClause);
		let _la: number;
		try {
			this.state = 3020;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_SELECT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3007;
				this.match(HiveParser.KW_SELECT);
				this.state = 3009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.QUERY_HINT) {
					{
					this.state = 3008;
					this.match(HiveParser.QUERY_HINT);
					}
				}

				this.state = 3017;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.KW_TRUE:
				case HiveParser.KW_FALSE:
				case HiveParser.KW_ALL:
				case HiveParser.KW_NOT:
				case HiveParser.KW_IF:
				case HiveParser.KW_EXISTS:
				case HiveParser.KW_ASC:
				case HiveParser.KW_DESC:
				case HiveParser.KW_NULLS:
				case HiveParser.KW_LAST:
				case HiveParser.KW_DISTINCT:
				case HiveParser.KW_OVERWRITE:
				case HiveParser.KW_PARTITIONS:
				case HiveParser.KW_TABLES:
				case HiveParser.KW_COLUMNS:
				case HiveParser.KW_INDEX:
				case HiveParser.KW_INDEXES:
				case HiveParser.KW_REBUILD:
				case HiveParser.KW_FUNCTIONS:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_REPAIR:
				case HiveParser.KW_DIRECTORY:
				case HiveParser.KW_CLUSTER:
				case HiveParser.KW_DISTRIBUTE:
				case HiveParser.KW_SORT:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_REPLICATION:
				case HiveParser.KW_METADATA:
				case HiveParser.KW_DATA:
				case HiveParser.KW_INPATH:
				case HiveParser.KW_NULL:
				case HiveParser.KW_CHANGE:
				case HiveParser.KW_FIRST:
				case HiveParser.KW_AFTER:
				case HiveParser.KW_RENAME:
				case HiveParser.KW_COMMENT:
				case HiveParser.KW_BOOLEAN:
				case HiveParser.KW_TINYINT:
				case HiveParser.KW_SMALLINT:
				case HiveParser.KW_INT:
				case HiveParser.KW_BIGINT:
				case HiveParser.KW_FLOAT:
				case HiveParser.KW_DOUBLE:
				case HiveParser.KW_DATE:
				case HiveParser.KW_DATETIME:
				case HiveParser.KW_TIMESTAMP:
				case HiveParser.KW_TIMESTAMPLOCALTZ:
				case HiveParser.KW_ZONE:
				case HiveParser.KW_INTERVAL:
				case HiveParser.KW_STRING:
				case HiveParser.KW_ARRAY:
				case HiveParser.KW_STRUCT:
				case HiveParser.KW_MAP:
				case HiveParser.KW_UNIONTYPE:
				case HiveParser.KW_PARTITIONED:
				case HiveParser.KW_CLUSTERED:
				case HiveParser.KW_SORTED:
				case HiveParser.KW_BUCKETS:
				case HiveParser.KW_FORMAT:
				case HiveParser.KW_DELIMITED:
				case HiveParser.KW_FIELDS:
				case HiveParser.KW_TERMINATED:
				case HiveParser.KW_ESCAPED:
				case HiveParser.KW_COLLECTION:
				case HiveParser.KW_ITEMS:
				case HiveParser.KW_KEYS:
				case HiveParser.KW_KEY_TYPE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_LINES:
				case HiveParser.KW_STORED:
				case HiveParser.KW_FILEFORMAT:
				case HiveParser.KW_INPUTFORMAT:
				case HiveParser.KW_OUTPUTFORMAT:
				case HiveParser.KW_INPUTDRIVER:
				case HiveParser.KW_OUTPUTDRIVER:
				case HiveParser.KW_ENABLE:
				case HiveParser.KW_DISABLE:
				case HiveParser.KW_LOCATION:
				case HiveParser.KW_BUCKET:
				case HiveParser.KW_CAST:
				case HiveParser.KW_ADD:
				case HiveParser.KW_REPLACE:
				case HiveParser.KW_TEMPORARY:
				case HiveParser.KW_FILE:
				case HiveParser.KW_JAR:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_FORMATTED:
				case HiveParser.KW_DEPENDENCY:
				case HiveParser.KW_LOGICAL:
				case HiveParser.KW_SERDE:
				case HiveParser.KW_DEFERRED:
				case HiveParser.KW_SERDEPROPERTIES:
				case HiveParser.KW_DBPROPERTIES:
				case HiveParser.KW_LIMIT:
				case HiveParser.KW_OFFSET:
				case HiveParser.KW_UNSET:
				case HiveParser.KW_TBLPROPERTIES:
				case HiveParser.KW_IDXPROPERTIES:
				case HiveParser.KW_VALUE_TYPE:
				case HiveParser.KW_ELEM_TYPE:
				case HiveParser.KW_DEFINED:
				case HiveParser.KW_CASE:
				case HiveParser.KW_MAPJOIN:
				case HiveParser.KW_STREAMTABLE:
				case HiveParser.KW_CLUSTERSTATUS:
				case HiveParser.KW_UTC:
				case HiveParser.KW_UTCTIMESTAMP:
				case HiveParser.KW_LONG:
				case HiveParser.KW_PLUS:
				case HiveParser.KW_VIEW:
				case HiveParser.KW_VIEWS:
				case HiveParser.KW_DATABASES:
				case HiveParser.KW_MATERIALIZED:
				case HiveParser.KW_SCHEMA:
				case HiveParser.KW_SCHEMAS:
				case HiveParser.KW_SSL:
				case HiveParser.KW_UNDO:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_LOCKS:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_SHARED:
				case HiveParser.KW_EXCLUSIVE:
				case HiveParser.KW_UNSIGNED:
				case HiveParser.KW_WHILE:
				case HiveParser.KW_READ:
				case HiveParser.KW_PURGE:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_BEFORE:
				case HiveParser.KW_BINARY:
				case HiveParser.KW_CONTINUE:
				case HiveParser.KW_RECORDREADER:
				case HiveParser.KW_RECORDWRITER:
				case HiveParser.KW_SEMI:
				case HiveParser.KW_TOUCH:
				case HiveParser.KW_ARCHIVE:
				case HiveParser.KW_UNARCHIVE:
				case HiveParser.KW_COMPUTE:
				case HiveParser.KW_STATISTICS:
				case HiveParser.KW_USE:
				case HiveParser.KW_OPTION:
				case HiveParser.KW_CONCATENATE:
				case HiveParser.KW_SHOW_DATABASE:
				case HiveParser.KW_RESTRICT:
				case HiveParser.KW_CASCADE:
				case HiveParser.KW_SKEWED:
				case HiveParser.KW_DIRECTORIES:
				case HiveParser.KW_CURRENT_DATE:
				case HiveParser.KW_CURRENT_TIMESTAMP:
				case HiveParser.KW_GROUPING:
				case HiveParser.KW_SETS:
				case HiveParser.KW_NOSCAN:
				case HiveParser.KW_ROLE:
				case HiveParser.KW_ROLES:
				case HiveParser.KW_URI:
				case HiveParser.KW_SERVER:
				case HiveParser.KW_ADMIN:
				case HiveParser.KW_OWNER:
				case HiveParser.KW_PRINCIPALS:
				case HiveParser.KW_COMPACT:
				case HiveParser.KW_COMPACTIONS:
				case HiveParser.KW_TRANSACTIONS:
				case HiveParser.KW_REWRITE:
				case HiveParser.KW_REOPTIMIZATION:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_YEAR:
				case HiveParser.KW_QUERY:
				case HiveParser.KW_QUARTER:
				case HiveParser.KW_MONTH:
				case HiveParser.KW_WEEK:
				case HiveParser.KW_DAY:
				case HiveParser.KW_DOW:
				case HiveParser.KW_HOUR:
				case HiveParser.KW_MINUTE:
				case HiveParser.KW_SECOND:
				case HiveParser.KW_TRANSACTION:
				case HiveParser.KW_WORK:
				case HiveParser.KW_WRITE:
				case HiveParser.KW_ISOLATION:
				case HiveParser.KW_LEVEL:
				case HiveParser.KW_SNAPSHOT:
				case HiveParser.KW_AUTOCOMMIT:
				case HiveParser.KW_CACHE:
				case HiveParser.KW_ENFORCED:
				case HiveParser.KW_VALIDATE:
				case HiveParser.KW_NOVALIDATE:
				case HiveParser.KW_RELY:
				case HiveParser.KW_NORELY:
				case HiveParser.KW_KEY:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_EXTRACT:
				case HiveParser.KW_FLOOR:
				case HiveParser.KW_MATCHED:
				case HiveParser.KW_REPL:
				case HiveParser.KW_DUMP:
				case HiveParser.KW_STATUS:
				case HiveParser.KW_VECTORIZATION:
				case HiveParser.KW_SUMMARY:
				case HiveParser.KW_OPERATOR:
				case HiveParser.KW_EXPRESSION:
				case HiveParser.KW_DETAIL:
				case HiveParser.KW_WAIT:
				case HiveParser.KW_RESOURCE:
				case HiveParser.KW_PLAN:
				case HiveParser.KW_QUERY_PARALLELISM:
				case HiveParser.KW_PLANS:
				case HiveParser.KW_ACTIVATE:
				case HiveParser.KW_DEFAULT:
				case HiveParser.KW_CHECK:
				case HiveParser.KW_POOL:
				case HiveParser.KW_MOVE:
				case HiveParser.KW_DO:
				case HiveParser.KW_ALLOC_FRACTION:
				case HiveParser.KW_SCHEDULING_POLICY:
				case HiveParser.KW_PATH:
				case HiveParser.KW_MAPPING:
				case HiveParser.KW_WORKLOAD:
				case HiveParser.KW_MANAGEMENT:
				case HiveParser.KW_ACTIVE:
				case HiveParser.KW_UNMANAGED:
				case HiveParser.LPAREN:
				case HiveParser.PLUS:
				case HiveParser.MINUS:
				case HiveParser.STAR:
				case HiveParser.TILDE:
				case HiveParser.StringLiteral:
				case HiveParser.IntegralLiteral:
				case HiveParser.NumberLiteral:
				case HiveParser.Number:
				case HiveParser.Identifier:
				case HiveParser.CharSetName:
					{
					{
					this.state = 3012;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT) {
						{
						this.state = 3011;
						_la = this._input.LA(1);
						if (!(_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 3014;
					this.selectList();
					}
					}
					break;
				case HiveParser.KW_TRANSFORM:
					{
					{
					this.state = 3015;
					this.match(HiveParser.KW_TRANSFORM);
					this.state = 3016;
					this.selectTrfmClause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HiveParser.KW_MAP:
			case HiveParser.KW_REDUCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3019;
				this.trfmClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectList(): SelectListContext {
		let _localctx: SelectListContext = new SelectListContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, HiveParser.RULE_selectList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3022;
			this.selectItem();
			this.state = 3027;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3023;
					this.match(HiveParser.COMMA);
					this.state = 3024;
					this.selectItem();
					}
					}
				}
				this.state = 3029;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectTrfmClause(): SelectTrfmClauseContext {
		let _localctx: SelectTrfmClauseContext = new SelectTrfmClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, HiveParser.RULE_selectTrfmClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3030;
			this.match(HiveParser.LPAREN);
			this.state = 3031;
			this.selectExpressionList();
			this.state = 3032;
			this.match(HiveParser.RPAREN);
			this.state = 3034;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ROW) {
				{
				this.state = 3033;
				this.rowFormat();
				}
			}

			this.state = 3037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_RECORDWRITER) {
				{
				this.state = 3036;
				this.recordWriter();
				}
			}

			this.state = 3039;
			this.match(HiveParser.KW_USING);
			this.state = 3040;
			this.match(HiveParser.StringLiteral);
			this.state = 3055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AS) {
				{
				this.state = 3041;
				this.match(HiveParser.KW_AS);
				this.state = 3053;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.LPAREN:
					{
					{
					this.state = 3042;
					this.match(HiveParser.LPAREN);
					this.state = 3045;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 355, this._ctx) ) {
					case 1:
						{
						this.state = 3043;
						this.aliasList();
						}
						break;

					case 2:
						{
						this.state = 3044;
						this.columnNameTypeList();
						}
						break;
					}
					this.state = 3047;
					this.match(HiveParser.RPAREN);
					}
					}
					break;
				case HiveParser.KW_ASC:
				case HiveParser.KW_DESC:
				case HiveParser.KW_NULLS:
				case HiveParser.KW_LAST:
				case HiveParser.KW_OVERWRITE:
				case HiveParser.KW_PARTITIONS:
				case HiveParser.KW_TABLES:
				case HiveParser.KW_COLUMNS:
				case HiveParser.KW_INDEX:
				case HiveParser.KW_INDEXES:
				case HiveParser.KW_REBUILD:
				case HiveParser.KW_FUNCTIONS:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_REPAIR:
				case HiveParser.KW_DIRECTORY:
				case HiveParser.KW_CLUSTER:
				case HiveParser.KW_DISTRIBUTE:
				case HiveParser.KW_SORT:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_REPLICATION:
				case HiveParser.KW_METADATA:
				case HiveParser.KW_DATA:
				case HiveParser.KW_INPATH:
				case HiveParser.KW_CHANGE:
				case HiveParser.KW_FIRST:
				case HiveParser.KW_AFTER:
				case HiveParser.KW_RENAME:
				case HiveParser.KW_COMMENT:
				case HiveParser.KW_TINYINT:
				case HiveParser.KW_DATETIME:
				case HiveParser.KW_ZONE:
				case HiveParser.KW_STRING:
				case HiveParser.KW_STRUCT:
				case HiveParser.KW_UNIONTYPE:
				case HiveParser.KW_PARTITIONED:
				case HiveParser.KW_CLUSTERED:
				case HiveParser.KW_SORTED:
				case HiveParser.KW_BUCKETS:
				case HiveParser.KW_FORMAT:
				case HiveParser.KW_DELIMITED:
				case HiveParser.KW_FIELDS:
				case HiveParser.KW_TERMINATED:
				case HiveParser.KW_ESCAPED:
				case HiveParser.KW_COLLECTION:
				case HiveParser.KW_ITEMS:
				case HiveParser.KW_KEYS:
				case HiveParser.KW_KEY_TYPE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_LINES:
				case HiveParser.KW_STORED:
				case HiveParser.KW_FILEFORMAT:
				case HiveParser.KW_INPUTFORMAT:
				case HiveParser.KW_OUTPUTFORMAT:
				case HiveParser.KW_INPUTDRIVER:
				case HiveParser.KW_OUTPUTDRIVER:
				case HiveParser.KW_ENABLE:
				case HiveParser.KW_DISABLE:
				case HiveParser.KW_LOCATION:
				case HiveParser.KW_BUCKET:
				case HiveParser.KW_ADD:
				case HiveParser.KW_REPLACE:
				case HiveParser.KW_TEMPORARY:
				case HiveParser.KW_FILE:
				case HiveParser.KW_JAR:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_FORMATTED:
				case HiveParser.KW_DEPENDENCY:
				case HiveParser.KW_LOGICAL:
				case HiveParser.KW_SERDE:
				case HiveParser.KW_DEFERRED:
				case HiveParser.KW_SERDEPROPERTIES:
				case HiveParser.KW_DBPROPERTIES:
				case HiveParser.KW_LIMIT:
				case HiveParser.KW_OFFSET:
				case HiveParser.KW_UNSET:
				case HiveParser.KW_TBLPROPERTIES:
				case HiveParser.KW_IDXPROPERTIES:
				case HiveParser.KW_VALUE_TYPE:
				case HiveParser.KW_ELEM_TYPE:
				case HiveParser.KW_DEFINED:
				case HiveParser.KW_MAPJOIN:
				case HiveParser.KW_STREAMTABLE:
				case HiveParser.KW_CLUSTERSTATUS:
				case HiveParser.KW_UTC:
				case HiveParser.KW_UTCTIMESTAMP:
				case HiveParser.KW_LONG:
				case HiveParser.KW_PLUS:
				case HiveParser.KW_VIEW:
				case HiveParser.KW_VIEWS:
				case HiveParser.KW_DATABASES:
				case HiveParser.KW_MATERIALIZED:
				case HiveParser.KW_SCHEMA:
				case HiveParser.KW_SCHEMAS:
				case HiveParser.KW_SSL:
				case HiveParser.KW_UNDO:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_LOCKS:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_SHARED:
				case HiveParser.KW_EXCLUSIVE:
				case HiveParser.KW_UNSIGNED:
				case HiveParser.KW_WHILE:
				case HiveParser.KW_READ:
				case HiveParser.KW_PURGE:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_BEFORE:
				case HiveParser.KW_CONTINUE:
				case HiveParser.KW_RECORDREADER:
				case HiveParser.KW_RECORDWRITER:
				case HiveParser.KW_SEMI:
				case HiveParser.KW_TOUCH:
				case HiveParser.KW_ARCHIVE:
				case HiveParser.KW_UNARCHIVE:
				case HiveParser.KW_COMPUTE:
				case HiveParser.KW_STATISTICS:
				case HiveParser.KW_USE:
				case HiveParser.KW_OPTION:
				case HiveParser.KW_CONCATENATE:
				case HiveParser.KW_SHOW_DATABASE:
				case HiveParser.KW_RESTRICT:
				case HiveParser.KW_CASCADE:
				case HiveParser.KW_SKEWED:
				case HiveParser.KW_DIRECTORIES:
				case HiveParser.KW_SETS:
				case HiveParser.KW_NOSCAN:
				case HiveParser.KW_ROLE:
				case HiveParser.KW_ROLES:
				case HiveParser.KW_URI:
				case HiveParser.KW_SERVER:
				case HiveParser.KW_ADMIN:
				case HiveParser.KW_OWNER:
				case HiveParser.KW_PRINCIPALS:
				case HiveParser.KW_COMPACT:
				case HiveParser.KW_COMPACTIONS:
				case HiveParser.KW_TRANSACTIONS:
				case HiveParser.KW_REWRITE:
				case HiveParser.KW_REOPTIMIZATION:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_YEAR:
				case HiveParser.KW_QUERY:
				case HiveParser.KW_QUARTER:
				case HiveParser.KW_MONTH:
				case HiveParser.KW_WEEK:
				case HiveParser.KW_DAY:
				case HiveParser.KW_DOW:
				case HiveParser.KW_HOUR:
				case HiveParser.KW_MINUTE:
				case HiveParser.KW_SECOND:
				case HiveParser.KW_TRANSACTION:
				case HiveParser.KW_WORK:
				case HiveParser.KW_WRITE:
				case HiveParser.KW_ISOLATION:
				case HiveParser.KW_LEVEL:
				case HiveParser.KW_SNAPSHOT:
				case HiveParser.KW_AUTOCOMMIT:
				case HiveParser.KW_CACHE:
				case HiveParser.KW_ENFORCED:
				case HiveParser.KW_VALIDATE:
				case HiveParser.KW_NOVALIDATE:
				case HiveParser.KW_RELY:
				case HiveParser.KW_NORELY:
				case HiveParser.KW_KEY:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_MATCHED:
				case HiveParser.KW_REPL:
				case HiveParser.KW_DUMP:
				case HiveParser.KW_STATUS:
				case HiveParser.KW_VECTORIZATION:
				case HiveParser.KW_SUMMARY:
				case HiveParser.KW_OPERATOR:
				case HiveParser.KW_EXPRESSION:
				case HiveParser.KW_DETAIL:
				case HiveParser.KW_WAIT:
				case HiveParser.KW_RESOURCE:
				case HiveParser.KW_PLAN:
				case HiveParser.KW_QUERY_PARALLELISM:
				case HiveParser.KW_PLANS:
				case HiveParser.KW_ACTIVATE:
				case HiveParser.KW_DEFAULT:
				case HiveParser.KW_CHECK:
				case HiveParser.KW_POOL:
				case HiveParser.KW_MOVE:
				case HiveParser.KW_DO:
				case HiveParser.KW_ALLOC_FRACTION:
				case HiveParser.KW_SCHEDULING_POLICY:
				case HiveParser.KW_PATH:
				case HiveParser.KW_MAPPING:
				case HiveParser.KW_WORKLOAD:
				case HiveParser.KW_MANAGEMENT:
				case HiveParser.KW_ACTIVE:
				case HiveParser.KW_UNMANAGED:
				case HiveParser.Identifier:
					{
					this.state = 3051;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 356, this._ctx) ) {
					case 1:
						{
						this.state = 3049;
						this.aliasList();
						}
						break;

					case 2:
						{
						this.state = 3050;
						this.columnNameTypeList();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 3058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ROW) {
				{
				this.state = 3057;
				this.rowFormat();
				}
			}

			this.state = 3061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_RECORDREADER) {
				{
				this.state = 3060;
				this.recordReader();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let _localctx: SelectItemContext = new SelectItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, HiveParser.RULE_selectItem);
		let _la: number;
		try {
			this.state = 3083;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3063;
				this.tableAllColumns();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 3064;
				this.expression(0);
				this.state = 3081;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 363, this._ctx) ) {
				case 1:
					{
					{
					this.state = 3066;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveParser.KW_AS) {
						{
						this.state = 3065;
						this.match(HiveParser.KW_AS);
						}
					}

					this.state = 3068;
					this.identifier();
					}
					}
					break;

				case 2:
					{
					{
					this.state = 3069;
					this.match(HiveParser.KW_AS);
					this.state = 3070;
					this.match(HiveParser.LPAREN);
					this.state = 3071;
					this.identifier();
					this.state = 3076;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveParser.COMMA) {
						{
						{
						this.state = 3072;
						this.match(HiveParser.COMMA);
						this.state = 3073;
						this.identifier();
						}
						}
						this.state = 3078;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3079;
					this.match(HiveParser.RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public trfmClause(): TrfmClauseContext {
		let _localctx: TrfmClauseContext = new TrfmClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, HiveParser.RULE_trfmClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3089;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_MAP:
				{
				this.state = 3085;
				this.match(HiveParser.KW_MAP);
				this.state = 3086;
				this.selectExpressionList();
				}
				break;
			case HiveParser.KW_REDUCE:
				{
				this.state = 3087;
				this.match(HiveParser.KW_REDUCE);
				this.state = 3088;
				this.selectExpressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3092;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ROW) {
				{
				this.state = 3091;
				this.rowFormat();
				}
			}

			this.state = 3095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_RECORDWRITER) {
				{
				this.state = 3094;
				this.recordWriter();
				}
			}

			this.state = 3097;
			this.match(HiveParser.KW_USING);
			this.state = 3098;
			this.match(HiveParser.StringLiteral);
			this.state = 3113;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AS) {
				{
				this.state = 3099;
				this.match(HiveParser.KW_AS);
				this.state = 3111;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.LPAREN:
					{
					{
					this.state = 3100;
					this.match(HiveParser.LPAREN);
					this.state = 3103;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 368, this._ctx) ) {
					case 1:
						{
						this.state = 3101;
						this.aliasList();
						}
						break;

					case 2:
						{
						this.state = 3102;
						this.columnNameTypeList();
						}
						break;
					}
					this.state = 3105;
					this.match(HiveParser.RPAREN);
					}
					}
					break;
				case HiveParser.KW_ASC:
				case HiveParser.KW_DESC:
				case HiveParser.KW_NULLS:
				case HiveParser.KW_LAST:
				case HiveParser.KW_OVERWRITE:
				case HiveParser.KW_PARTITIONS:
				case HiveParser.KW_TABLES:
				case HiveParser.KW_COLUMNS:
				case HiveParser.KW_INDEX:
				case HiveParser.KW_INDEXES:
				case HiveParser.KW_REBUILD:
				case HiveParser.KW_FUNCTIONS:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_REPAIR:
				case HiveParser.KW_DIRECTORY:
				case HiveParser.KW_CLUSTER:
				case HiveParser.KW_DISTRIBUTE:
				case HiveParser.KW_SORT:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_REPLICATION:
				case HiveParser.KW_METADATA:
				case HiveParser.KW_DATA:
				case HiveParser.KW_INPATH:
				case HiveParser.KW_CHANGE:
				case HiveParser.KW_FIRST:
				case HiveParser.KW_AFTER:
				case HiveParser.KW_RENAME:
				case HiveParser.KW_COMMENT:
				case HiveParser.KW_TINYINT:
				case HiveParser.KW_DATETIME:
				case HiveParser.KW_ZONE:
				case HiveParser.KW_STRING:
				case HiveParser.KW_STRUCT:
				case HiveParser.KW_UNIONTYPE:
				case HiveParser.KW_PARTITIONED:
				case HiveParser.KW_CLUSTERED:
				case HiveParser.KW_SORTED:
				case HiveParser.KW_BUCKETS:
				case HiveParser.KW_FORMAT:
				case HiveParser.KW_DELIMITED:
				case HiveParser.KW_FIELDS:
				case HiveParser.KW_TERMINATED:
				case HiveParser.KW_ESCAPED:
				case HiveParser.KW_COLLECTION:
				case HiveParser.KW_ITEMS:
				case HiveParser.KW_KEYS:
				case HiveParser.KW_KEY_TYPE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_LINES:
				case HiveParser.KW_STORED:
				case HiveParser.KW_FILEFORMAT:
				case HiveParser.KW_INPUTFORMAT:
				case HiveParser.KW_OUTPUTFORMAT:
				case HiveParser.KW_INPUTDRIVER:
				case HiveParser.KW_OUTPUTDRIVER:
				case HiveParser.KW_ENABLE:
				case HiveParser.KW_DISABLE:
				case HiveParser.KW_LOCATION:
				case HiveParser.KW_BUCKET:
				case HiveParser.KW_ADD:
				case HiveParser.KW_REPLACE:
				case HiveParser.KW_TEMPORARY:
				case HiveParser.KW_FILE:
				case HiveParser.KW_JAR:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_FORMATTED:
				case HiveParser.KW_DEPENDENCY:
				case HiveParser.KW_LOGICAL:
				case HiveParser.KW_SERDE:
				case HiveParser.KW_DEFERRED:
				case HiveParser.KW_SERDEPROPERTIES:
				case HiveParser.KW_DBPROPERTIES:
				case HiveParser.KW_LIMIT:
				case HiveParser.KW_OFFSET:
				case HiveParser.KW_UNSET:
				case HiveParser.KW_TBLPROPERTIES:
				case HiveParser.KW_IDXPROPERTIES:
				case HiveParser.KW_VALUE_TYPE:
				case HiveParser.KW_ELEM_TYPE:
				case HiveParser.KW_DEFINED:
				case HiveParser.KW_MAPJOIN:
				case HiveParser.KW_STREAMTABLE:
				case HiveParser.KW_CLUSTERSTATUS:
				case HiveParser.KW_UTC:
				case HiveParser.KW_UTCTIMESTAMP:
				case HiveParser.KW_LONG:
				case HiveParser.KW_PLUS:
				case HiveParser.KW_VIEW:
				case HiveParser.KW_VIEWS:
				case HiveParser.KW_DATABASES:
				case HiveParser.KW_MATERIALIZED:
				case HiveParser.KW_SCHEMA:
				case HiveParser.KW_SCHEMAS:
				case HiveParser.KW_SSL:
				case HiveParser.KW_UNDO:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_LOCKS:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_SHARED:
				case HiveParser.KW_EXCLUSIVE:
				case HiveParser.KW_UNSIGNED:
				case HiveParser.KW_WHILE:
				case HiveParser.KW_READ:
				case HiveParser.KW_PURGE:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_BEFORE:
				case HiveParser.KW_CONTINUE:
				case HiveParser.KW_RECORDREADER:
				case HiveParser.KW_RECORDWRITER:
				case HiveParser.KW_SEMI:
				case HiveParser.KW_TOUCH:
				case HiveParser.KW_ARCHIVE:
				case HiveParser.KW_UNARCHIVE:
				case HiveParser.KW_COMPUTE:
				case HiveParser.KW_STATISTICS:
				case HiveParser.KW_USE:
				case HiveParser.KW_OPTION:
				case HiveParser.KW_CONCATENATE:
				case HiveParser.KW_SHOW_DATABASE:
				case HiveParser.KW_RESTRICT:
				case HiveParser.KW_CASCADE:
				case HiveParser.KW_SKEWED:
				case HiveParser.KW_DIRECTORIES:
				case HiveParser.KW_SETS:
				case HiveParser.KW_NOSCAN:
				case HiveParser.KW_ROLE:
				case HiveParser.KW_ROLES:
				case HiveParser.KW_URI:
				case HiveParser.KW_SERVER:
				case HiveParser.KW_ADMIN:
				case HiveParser.KW_OWNER:
				case HiveParser.KW_PRINCIPALS:
				case HiveParser.KW_COMPACT:
				case HiveParser.KW_COMPACTIONS:
				case HiveParser.KW_TRANSACTIONS:
				case HiveParser.KW_REWRITE:
				case HiveParser.KW_REOPTIMIZATION:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_YEAR:
				case HiveParser.KW_QUERY:
				case HiveParser.KW_QUARTER:
				case HiveParser.KW_MONTH:
				case HiveParser.KW_WEEK:
				case HiveParser.KW_DAY:
				case HiveParser.KW_DOW:
				case HiveParser.KW_HOUR:
				case HiveParser.KW_MINUTE:
				case HiveParser.KW_SECOND:
				case HiveParser.KW_TRANSACTION:
				case HiveParser.KW_WORK:
				case HiveParser.KW_WRITE:
				case HiveParser.KW_ISOLATION:
				case HiveParser.KW_LEVEL:
				case HiveParser.KW_SNAPSHOT:
				case HiveParser.KW_AUTOCOMMIT:
				case HiveParser.KW_CACHE:
				case HiveParser.KW_ENFORCED:
				case HiveParser.KW_VALIDATE:
				case HiveParser.KW_NOVALIDATE:
				case HiveParser.KW_RELY:
				case HiveParser.KW_NORELY:
				case HiveParser.KW_KEY:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_MATCHED:
				case HiveParser.KW_REPL:
				case HiveParser.KW_DUMP:
				case HiveParser.KW_STATUS:
				case HiveParser.KW_VECTORIZATION:
				case HiveParser.KW_SUMMARY:
				case HiveParser.KW_OPERATOR:
				case HiveParser.KW_EXPRESSION:
				case HiveParser.KW_DETAIL:
				case HiveParser.KW_WAIT:
				case HiveParser.KW_RESOURCE:
				case HiveParser.KW_PLAN:
				case HiveParser.KW_QUERY_PARALLELISM:
				case HiveParser.KW_PLANS:
				case HiveParser.KW_ACTIVATE:
				case HiveParser.KW_DEFAULT:
				case HiveParser.KW_CHECK:
				case HiveParser.KW_POOL:
				case HiveParser.KW_MOVE:
				case HiveParser.KW_DO:
				case HiveParser.KW_ALLOC_FRACTION:
				case HiveParser.KW_SCHEDULING_POLICY:
				case HiveParser.KW_PATH:
				case HiveParser.KW_MAPPING:
				case HiveParser.KW_WORKLOAD:
				case HiveParser.KW_MANAGEMENT:
				case HiveParser.KW_ACTIVE:
				case HiveParser.KW_UNMANAGED:
				case HiveParser.Identifier:
					{
					this.state = 3109;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 369, this._ctx) ) {
					case 1:
						{
						this.state = 3107;
						this.aliasList();
						}
						break;

					case 2:
						{
						this.state = 3108;
						this.columnNameTypeList();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 3116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ROW) {
				{
				this.state = 3115;
				this.rowFormat();
				}
			}

			this.state = 3119;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_RECORDREADER) {
				{
				this.state = 3118;
				this.recordReader();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectExpression(): SelectExpressionContext {
		let _localctx: SelectExpressionContext = new SelectExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, HiveParser.RULE_selectExpression);
		try {
			this.state = 3123;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3121;
				this.tableAllColumns();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3122;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectExpressionList(): SelectExpressionListContext {
		let _localctx: SelectExpressionListContext = new SelectExpressionListContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, HiveParser.RULE_selectExpressionList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3125;
			this.selectExpression();
			this.state = 3130;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3126;
				this.match(HiveParser.COMMA);
				this.state = 3127;
				this.selectExpression();
				}
				}
				this.state = 3132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_clause(): Window_clauseContext {
		let _localctx: Window_clauseContext = new Window_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, HiveParser.RULE_window_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3133;
			this.match(HiveParser.KW_WINDOW);
			this.state = 3134;
			this.window_defn();
			this.state = 3139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3135;
				this.match(HiveParser.COMMA);
				this.state = 3136;
				this.window_defn();
				}
				}
				this.state = 3141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_defn(): Window_defnContext {
		let _localctx: Window_defnContext = new Window_defnContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, HiveParser.RULE_window_defn);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3142;
			this.identifier();
			this.state = 3143;
			this.match(HiveParser.KW_AS);
			this.state = 3144;
			this.window_specification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_specification(): Window_specificationContext {
		let _localctx: Window_specificationContext = new Window_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, HiveParser.RULE_window_specification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3158;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				{
				this.state = 3146;
				this.identifier();
				}
				break;
			case HiveParser.LPAREN:
				{
				{
				this.state = 3147;
				this.match(HiveParser.LPAREN);
				this.state = 3149;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
				case 1:
					{
					this.state = 3148;
					this.identifier();
					}
					break;
				}
				this.state = 3152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ORDER || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (HiveParser.KW_PARTITION - 35)) | (1 << (HiveParser.KW_CLUSTER - 35)) | (1 << (HiveParser.KW_DISTRIBUTE - 35)) | (1 << (HiveParser.KW_SORT - 35)))) !== 0)) {
					{
					this.state = 3151;
					this.partitioningSpec();
					}
				}

				this.state = 3155;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ROWS || _la === HiveParser.KW_RANGE) {
					{
					this.state = 3154;
					this.window_frame();
					}
				}

				this.state = 3157;
				this.match(HiveParser.RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_frame(): Window_frameContext {
		let _localctx: Window_frameContext = new Window_frameContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, HiveParser.RULE_window_frame);
		try {
			this.state = 3162;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ROWS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3160;
				this.window_range_expression();
				}
				break;
			case HiveParser.KW_RANGE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3161;
				this.window_value_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_range_expression(): Window_range_expressionContext {
		let _localctx: Window_range_expressionContext = new Window_range_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, HiveParser.RULE_window_range_expression);
		try {
			this.state = 3172;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 382, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3164;
				this.match(HiveParser.KW_ROWS);
				this.state = 3165;
				this.window_frame_start_boundary();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3166;
				this.match(HiveParser.KW_ROWS);
				this.state = 3167;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 3168;
				this.window_frame_boundary();
				this.state = 3169;
				this.match(HiveParser.KW_AND);
				this.state = 3170;
				this.window_frame_boundary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_value_expression(): Window_value_expressionContext {
		let _localctx: Window_value_expressionContext = new Window_value_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, HiveParser.RULE_window_value_expression);
		try {
			this.state = 3182;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 383, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3174;
				this.match(HiveParser.KW_RANGE);
				this.state = 3175;
				this.window_frame_start_boundary();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3176;
				this.match(HiveParser.KW_RANGE);
				this.state = 3177;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 3178;
				this.window_frame_boundary();
				this.state = 3179;
				this.match(HiveParser.KW_AND);
				this.state = 3180;
				this.window_frame_boundary();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_frame_start_boundary(): Window_frame_start_boundaryContext {
		let _localctx: Window_frame_start_boundaryContext = new Window_frame_start_boundaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, HiveParser.RULE_window_frame_start_boundary);
		try {
			this.state = 3190;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_UNBOUNDED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3184;
				this.match(HiveParser.KW_UNBOUNDED);
				this.state = 3185;
				this.match(HiveParser.KW_PRECEDING);
				}
				break;
			case HiveParser.KW_CURRENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3186;
				this.match(HiveParser.KW_CURRENT);
				this.state = 3187;
				this.match(HiveParser.KW_ROW);
				}
				break;
			case HiveParser.Number:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3188;
				this.match(HiveParser.Number);
				this.state = 3189;
				this.match(HiveParser.KW_PRECEDING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_frame_boundary(): Window_frame_boundaryContext {
		let _localctx: Window_frame_boundaryContext = new Window_frame_boundaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, HiveParser.RULE_window_frame_boundary);
		let _la: number;
		try {
			this.state = 3198;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_UNBOUNDED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3192;
				this.match(HiveParser.KW_UNBOUNDED);
				this.state = 3193;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_PRECEDING || _la === HiveParser.KW_FOLLOWING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case HiveParser.KW_CURRENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3194;
				this.match(HiveParser.KW_CURRENT);
				this.state = 3195;
				this.match(HiveParser.KW_ROW);
				}
				break;
			case HiveParser.Number:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3196;
				this.match(HiveParser.Number);
				this.state = 3197;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_PRECEDING || _la === HiveParser.KW_FOLLOWING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableAllColumns(): TableAllColumnsContext {
		let _localctx: TableAllColumnsContext = new TableAllColumnsContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, HiveParser.RULE_tableAllColumns);
		try {
			this.state = 3205;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.STAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3200;
				this.match(HiveParser.STAR);
				}
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3201;
				this.tableName();
				this.state = 3202;
				this.match(HiveParser.DOT);
				this.state = 3203;
				this.match(HiveParser.STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableOrColumn(): TableOrColumnContext {
		let _localctx: TableOrColumnContext = new TableOrColumnContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, HiveParser.RULE_tableOrColumn);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3207;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionList(): ExpressionListContext {
		let _localctx: ExpressionListContext = new ExpressionListContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, HiveParser.RULE_expressionList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3209;
			this.expression(0);
			this.state = 3214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3210;
				this.match(HiveParser.COMMA);
				this.state = 3211;
				this.expression(0);
				}
				}
				this.state = 3216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aliasList(): AliasListContext {
		let _localctx: AliasListContext = new AliasListContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, HiveParser.RULE_aliasList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3217;
			this.identifier();
			this.state = 3222;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3218;
					this.match(HiveParser.COMMA);
					this.state = 3219;
					this.identifier();
					}
					}
				}
				this.state = 3224;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let _localctx: FromClauseContext = new FromClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, HiveParser.RULE_fromClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3225;
			this.match(HiveParser.KW_FROM);
			this.state = 3226;
			this.fromSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromSource(): FromSourceContext {
		let _localctx: FromSourceContext = new FromSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, HiveParser.RULE_fromSource);
		let _la: number;
		try {
			this.state = 3237;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_UNIQUEJOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3228;
				this.uniqueJoinToken();
				this.state = 3229;
				this.uniqueJoinSource();
				this.state = 3232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3230;
					this.match(HiveParser.COMMA);
					this.state = 3231;
					this.uniqueJoinSource();
					}
					}
					this.state = 3234;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === HiveParser.COMMA);
				}
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLE:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.LPAREN:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3236;
				this.joinSource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atomjoinSource(): AtomjoinSourceContext {
		let _localctx: AtomjoinSourceContext = new AtomjoinSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, HiveParser.RULE_atomjoinSource);
		try {
			let _alt: number;
			this.state = 3271;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 395, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3239;
				this.tableSource();
				this.state = 3243;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3240;
						this.lateralView();
						}
						}
					}
					this.state = 3245;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 391, this._ctx);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3246;
				this.virtualTableSource();
				this.state = 3250;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3247;
						this.lateralView();
						}
						}
					}
					this.state = 3252;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 392, this._ctx);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3253;
				this.subQuerySource();
				this.state = 3257;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3254;
						this.lateralView();
						}
						}
					}
					this.state = 3259;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3260;
				this.partitionedTableFunction();
				this.state = 3264;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3261;
						this.lateralView();
						}
						}
					}
					this.state = 3266;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 394, this._ctx);
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3267;
				this.match(HiveParser.LPAREN);
				this.state = 3268;
				this.joinSource();
				this.state = 3269;
				this.match(HiveParser.RPAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinSource(): JoinSourceContext {
		let _localctx: JoinSourceContext = new JoinSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, HiveParser.RULE_joinSource);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3273;
			this.atomjoinSource();
			this.state = 3284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & ((1 << (HiveParser.KW_JOIN - 30)) | (1 << (HiveParser.KW_LEFT - 30)) | (1 << (HiveParser.KW_RIGHT - 30)) | (1 << (HiveParser.KW_FULL - 30)))) !== 0) || _la === HiveParser.KW_CROSS || _la === HiveParser.KW_INNER || _la === HiveParser.COMMA) {
				{
				{
				this.state = 3274;
				this.joinToken();
				this.state = 3275;
				this.joinSourcePart();
				this.state = 3280;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveParser.KW_ON:
					{
					this.state = 3276;
					this.match(HiveParser.KW_ON);
					this.state = 3277;
					this.expression(0);
					}
					break;
				case HiveParser.KW_USING:
					{
					this.state = 3278;
					this.match(HiveParser.KW_USING);
					this.state = 3279;
					this.columnParenthesesList();
					}
					break;
				case HiveParser.EOF:
				case HiveParser.KW_DESC:
				case HiveParser.KW_ORDER:
				case HiveParser.KW_GROUP:
				case HiveParser.KW_HAVING:
				case HiveParser.KW_WHERE:
				case HiveParser.KW_FROM:
				case HiveParser.KW_SELECT:
				case HiveParser.KW_INSERT:
				case HiveParser.KW_JOIN:
				case HiveParser.KW_LEFT:
				case HiveParser.KW_RIGHT:
				case HiveParser.KW_FULL:
				case HiveParser.KW_SHOW:
				case HiveParser.KW_MSCK:
				case HiveParser.KW_CLUSTER:
				case HiveParser.KW_DISTRIBUTE:
				case HiveParser.KW_SORT:
				case HiveParser.KW_UNION:
				case HiveParser.KW_EXCEPT:
				case HiveParser.KW_LOAD:
				case HiveParser.KW_EXPORT:
				case HiveParser.KW_IMPORT:
				case HiveParser.KW_CREATE:
				case HiveParser.KW_ALTER:
				case HiveParser.KW_DESCRIBE:
				case HiveParser.KW_DROP:
				case HiveParser.KW_MAP:
				case HiveParser.KW_REDUCE:
				case HiveParser.KW_KILL:
				case HiveParser.KW_EXPLAIN:
				case HiveParser.KW_WITH:
				case HiveParser.KW_LIMIT:
				case HiveParser.KW_SET:
				case HiveParser.KW_DELETE:
				case HiveParser.KW_MINUS:
				case HiveParser.KW_INTERSECT:
				case HiveParser.KW_GRANT:
				case HiveParser.KW_REVOKE:
				case HiveParser.KW_LOCK:
				case HiveParser.KW_UNLOCK:
				case HiveParser.KW_ANALYZE:
				case HiveParser.KW_CROSS:
				case HiveParser.KW_USE:
				case HiveParser.KW_UPDATE:
				case HiveParser.KW_WINDOW:
				case HiveParser.KW_TRUNCATE:
				case HiveParser.KW_INNER:
				case HiveParser.KW_RELOAD:
				case HiveParser.KW_START:
				case HiveParser.KW_COMMIT:
				case HiveParser.KW_ROLLBACK:
				case HiveParser.KW_ABORT:
				case HiveParser.KW_MERGE:
				case HiveParser.KW_REPL:
				case HiveParser.COMMA:
				case HiveParser.SEMICOLON:
				case HiveParser.LPAREN:
				case HiveParser.RPAREN:
					break;
				default:
					break;
				}
				}
				}
				this.state = 3286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinSourcePart(): JoinSourcePartContext {
		let _localctx: JoinSourcePartContext = new JoinSourcePartContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, HiveParser.RULE_joinSourcePart);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3291;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
			case 1:
				{
				this.state = 3287;
				this.tableSource();
				}
				break;

			case 2:
				{
				this.state = 3288;
				this.virtualTableSource();
				}
				break;

			case 3:
				{
				this.state = 3289;
				this.subQuerySource();
				}
				break;

			case 4:
				{
				this.state = 3290;
				this.partitionedTableFunction();
				}
				break;
			}
			this.state = 3296;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3293;
					this.lateralView();
					}
					}
				}
				this.state = 3298;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinSource(): UniqueJoinSourceContext {
		let _localctx: UniqueJoinSourceContext = new UniqueJoinSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, HiveParser.RULE_uniqueJoinSource);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PRESERVE) {
				{
				this.state = 3299;
				this.match(HiveParser.KW_PRESERVE);
				}
			}

			this.state = 3302;
			this.uniqueJoinTableSource();
			this.state = 3303;
			this.uniqueJoinExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinExpr(): UniqueJoinExprContext {
		let _localctx: UniqueJoinExprContext = new UniqueJoinExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, HiveParser.RULE_uniqueJoinExpr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3305;
			this.match(HiveParser.LPAREN);
			this.state = 3306;
			this.expressionList();
			this.state = 3307;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinToken(): UniqueJoinTokenContext {
		let _localctx: UniqueJoinTokenContext = new UniqueJoinTokenContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, HiveParser.RULE_uniqueJoinToken);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3309;
			this.match(HiveParser.KW_UNIQUEJOIN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinToken(): JoinTokenContext {
		let _localctx: JoinTokenContext = new JoinTokenContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, HiveParser.RULE_joinToken);
		let _la: number;
		try {
			this.state = 3335;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3311;
				this.match(HiveParser.KW_JOIN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3312;
				this.match(HiveParser.KW_INNER);
				this.state = 3313;
				this.match(HiveParser.KW_JOIN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3314;
				this.match(HiveParser.COMMA);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3315;
				this.match(HiveParser.KW_CROSS);
				this.state = 3316;
				this.match(HiveParser.KW_JOIN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3317;
				this.match(HiveParser.KW_LEFT);
				this.state = 3319;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_OUTER) {
					{
					this.state = 3318;
					this.match(HiveParser.KW_OUTER);
					}
				}

				this.state = 3321;
				this.match(HiveParser.KW_JOIN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3322;
				this.match(HiveParser.KW_RIGHT);
				this.state = 3324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_OUTER) {
					{
					this.state = 3323;
					this.match(HiveParser.KW_OUTER);
					}
				}

				this.state = 3326;
				this.match(HiveParser.KW_JOIN);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3327;
				this.match(HiveParser.KW_FULL);
				this.state = 3329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_OUTER) {
					{
					this.state = 3328;
					this.match(HiveParser.KW_OUTER);
					}
				}

				this.state = 3331;
				this.match(HiveParser.KW_JOIN);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3332;
				this.match(HiveParser.KW_LEFT);
				this.state = 3333;
				this.match(HiveParser.KW_SEMI);
				this.state = 3334;
				this.match(HiveParser.KW_JOIN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lateralView(): LateralViewContext {
		let _localctx: LateralViewContext = new LateralViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, HiveParser.RULE_lateralView);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3396;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3337;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3338;
				this.match(HiveParser.KW_VIEW);
				this.state = 3339;
				this.match(HiveParser.KW_OUTER);
				this.state = 3340;
				this.function_();
				this.state = 3341;
				this.tableAlias();
				this.state = 3351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 3342;
					this.match(HiveParser.KW_AS);
					this.state = 3343;
					this.identifier();
					this.state = 3348;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3344;
							this.match(HiveParser.COMMA);
							this.state = 3345;
							this.identifier();
							}
							}
						}
						this.state = 3350;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
					}
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.COMMA) {
					{
					this.state = 3353;
					this.match(HiveParser.COMMA);
					}
				}

				this.state = 3356;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3357;
				this.match(HiveParser.KW_VIEW);
				this.state = 3358;
				this.function_();
				this.state = 3359;
				this.tableAlias();
				this.state = 3369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 3360;
					this.match(HiveParser.KW_AS);
					this.state = 3361;
					this.identifier();
					this.state = 3366;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3362;
							this.match(HiveParser.COMMA);
							this.state = 3363;
							this.identifier();
							}
							}
						}
						this.state = 3368;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
					}
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.COMMA) {
					{
					this.state = 3371;
					this.match(HiveParser.COMMA);
					}
				}

				this.state = 3374;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3375;
				this.match(HiveParser.KW_TABLE);
				this.state = 3376;
				this.match(HiveParser.LPAREN);
				this.state = 3377;
				this.valuesClause();
				this.state = 3378;
				this.match(HiveParser.RPAREN);
				this.state = 3380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 3379;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 3382;
				this.tableAlias();
				this.state = 3394;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 413, this._ctx) ) {
				case 1:
					{
					this.state = 3383;
					this.match(HiveParser.LPAREN);
					this.state = 3384;
					this.identifier();
					this.state = 3389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveParser.COMMA) {
						{
						{
						this.state = 3385;
						this.match(HiveParser.COMMA);
						this.state = 3386;
						this.identifier();
						}
						}
						this.state = 3391;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3392;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableAlias(): TableAliasContext {
		let _localctx: TableAliasContext = new TableAliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, HiveParser.RULE_tableAlias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3398;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableBucketSample(): TableBucketSampleContext {
		let _localctx: TableBucketSampleContext = new TableBucketSampleContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, HiveParser.RULE_tableBucketSample);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3400;
			this.match(HiveParser.KW_TABLESAMPLE);
			this.state = 3401;
			this.match(HiveParser.LPAREN);
			this.state = 3402;
			this.match(HiveParser.KW_BUCKET);
			this.state = 3403;
			this.match(HiveParser.Number);
			this.state = 3404;
			this.match(HiveParser.KW_OUT);
			this.state = 3405;
			this.match(HiveParser.KW_OF);
			this.state = 3406;
			this.match(HiveParser.Number);
			this.state = 3416;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ON) {
				{
				this.state = 3407;
				this.match(HiveParser.KW_ON);
				this.state = 3408;
				this.expression(0);
				this.state = 3413;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					{
					{
					this.state = 3409;
					this.match(HiveParser.COMMA);
					this.state = 3410;
					this.expression(0);
					}
					}
					this.state = 3415;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3418;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public splitSample(): SplitSampleContext {
		let _localctx: SplitSampleContext = new SplitSampleContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, HiveParser.RULE_splitSample);
		let _la: number;
		try {
			this.state = 3429;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3420;
				this.match(HiveParser.KW_TABLESAMPLE);
				this.state = 3421;
				this.match(HiveParser.LPAREN);
				this.state = 3422;
				this.match(HiveParser.Number);
				this.state = 3423;
				_la = this._input.LA(1);
				if (!(_la === HiveParser.KW_ROWS || _la === HiveParser.KW_PERCENT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3424;
				this.match(HiveParser.RPAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3425;
				this.match(HiveParser.KW_TABLESAMPLE);
				this.state = 3426;
				this.match(HiveParser.LPAREN);
				this.state = 3427;
				this.match(HiveParser.ByteLengthLiteral);
				this.state = 3428;
				this.match(HiveParser.RPAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSample(): TableSampleContext {
		let _localctx: TableSampleContext = new TableSampleContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, HiveParser.RULE_tableSample);
		try {
			this.state = 3433;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 418, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3431;
				this.tableBucketSample();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3432;
				this.splitSample();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSource(): TableSourceContext {
		let _localctx: TableSourceContext = new TableSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, HiveParser.RULE_tableSource);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3435;
			this.tableName();
			this.state = 3437;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				{
				this.state = 3436;
				this.tableProperties();
				}
				break;
			}
			this.state = 3440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TABLESAMPLE) {
				{
				this.state = 3439;
				this.tableSample();
				}
			}

			this.state = 3446;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
			case 1:
				{
				this.state = 3443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 3442;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 3445;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinTableSource(): UniqueJoinTableSourceContext {
		let _localctx: UniqueJoinTableSourceContext = new UniqueJoinTableSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, HiveParser.RULE_uniqueJoinTableSource);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3448;
			this.tableName();
			this.state = 3450;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TABLESAMPLE) {
				{
				this.state = 3449;
				this.tableSample();
				}
			}

			this.state = 3456;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_AS) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0) || _la === HiveParser.Identifier) {
				{
				this.state = 3453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_AS) {
					{
					this.state = 3452;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 3455;
				this.identifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let _localctx: TableNameContext = new TableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, HiveParser.RULE_tableName);
		try {
			this.state = 3463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3458;
				this.identifier();
				this.state = 3459;
				this.match(HiveParser.DOT);
				this.state = 3460;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3462;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewName(): ViewNameContext {
		let _localctx: ViewNameContext = new ViewNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, HiveParser.RULE_viewName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3468;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 427, this._ctx) ) {
			case 1:
				{
				this.state = 3465;
				this.identifier();
				this.state = 3466;
				this.match(HiveParser.DOT);
				}
				break;
			}
			this.state = 3470;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subQuerySource(): SubQuerySourceContext {
		let _localctx: SubQuerySourceContext = new SubQuerySourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, HiveParser.RULE_subQuerySource);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3472;
			this.match(HiveParser.LPAREN);
			this.state = 3473;
			this.queryStatementExpression();
			this.state = 3474;
			this.match(HiveParser.RPAREN);
			this.state = 3476;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AS) {
				{
				this.state = 3475;
				this.match(HiveParser.KW_AS);
				}
			}

			this.state = 3478;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitioningSpec(): PartitioningSpecContext {
		let _localctx: PartitioningSpecContext = new PartitioningSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, HiveParser.RULE_partitioningSpec);
		let _la: number;
		try {
			this.state = 3491;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_PARTITION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3480;
				this.partitionByClause();
				this.state = 3482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ORDER) {
					{
					this.state = 3481;
					this.orderByClause();
					}
				}

				}
				break;
			case HiveParser.KW_ORDER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3484;
				this.orderByClause();
				}
				break;
			case HiveParser.KW_DISTRIBUTE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3485;
				this.distributeByClause();
				this.state = 3487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_SORT) {
					{
					this.state = 3486;
					this.sortByClause();
					}
				}

				}
				break;
			case HiveParser.KW_SORT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3489;
				this.sortByClause();
				}
				break;
			case HiveParser.KW_CLUSTER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3490;
				this.clusterByClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
		let _localctx: PartitionTableFunctionSourceContext = new PartitionTableFunctionSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, HiveParser.RULE_partitionTableFunctionSource);
		try {
			this.state = 3496;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 432, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3493;
				this.subQuerySource();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3494;
				this.tableSource();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3495;
				this.partitionedTableFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionedTableFunction(): PartitionedTableFunctionContext {
		let _localctx: PartitionedTableFunctionContext = new PartitionedTableFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, HiveParser.RULE_partitionedTableFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3498;
			this.identifier();
			this.state = 3499;
			this.match(HiveParser.LPAREN);
			this.state = 3500;
			this.match(HiveParser.KW_ON);
			this.state = 3501;
			this.partitionTableFunctionSource();
			this.state = 3503;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ORDER || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (HiveParser.KW_PARTITION - 35)) | (1 << (HiveParser.KW_CLUSTER - 35)) | (1 << (HiveParser.KW_DISTRIBUTE - 35)) | (1 << (HiveParser.KW_SORT - 35)))) !== 0)) {
				{
				this.state = 3502;
				this.partitioningSpec();
				}
			}

			this.state = 3520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.Identifier) {
				{
				this.state = 3505;
				this.match(HiveParser.Identifier);
				this.state = 3506;
				this.match(HiveParser.LPAREN);
				this.state = 3507;
				this.expression(0);
				this.state = 3508;
				this.match(HiveParser.RPAREN);
				this.state = 3517;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					{
					{
					this.state = 3509;
					this.match(HiveParser.COMMA);
					this.state = 3510;
					this.match(HiveParser.Identifier);
					this.state = 3511;
					this.match(HiveParser.LPAREN);
					this.state = 3512;
					this.expression(0);
					this.state = 3513;
					this.match(HiveParser.RPAREN);
					}
					}
					this.state = 3519;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3522;
			this.match(HiveParser.RPAREN);
			this.state = 3524;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 436, this._ctx) ) {
			case 1:
				{
				this.state = 3523;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whereClause(): WhereClauseContext {
		let _localctx: WhereClauseContext = new WhereClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, HiveParser.RULE_whereClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3526;
			this.match(HiveParser.KW_WHERE);
			this.state = 3527;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public searchCondition(): SearchConditionContext {
		let _localctx: SearchConditionContext = new SearchConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, HiveParser.RULE_searchCondition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3529;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valuesClause(): ValuesClauseContext {
		let _localctx: ValuesClauseContext = new ValuesClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, HiveParser.RULE_valuesClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3531;
			this.match(HiveParser.KW_VALUES);
			this.state = 3532;
			this.valuesTableConstructor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valuesTableConstructor(): ValuesTableConstructorContext {
		let _localctx: ValuesTableConstructorContext = new ValuesTableConstructorContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, HiveParser.RULE_valuesTableConstructor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3534;
			this.valueRowConstructor();
			this.state = 3539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3535;
				this.match(HiveParser.COMMA);
				this.state = 3536;
				this.valueRowConstructor();
				}
				}
				this.state = 3541;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valueRowConstructor(): ValueRowConstructorContext {
		let _localctx: ValueRowConstructorContext = new ValueRowConstructorContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, HiveParser.RULE_valueRowConstructor);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3542;
			this.expressionsInParenthesis();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public virtualTableSource(): VirtualTableSourceContext {
		let _localctx: VirtualTableSourceContext = new VirtualTableSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, HiveParser.RULE_virtualTableSource);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3544;
			this.match(HiveParser.KW_TABLE);
			this.state = 3545;
			this.match(HiveParser.LPAREN);
			this.state = 3546;
			this.valuesClause();
			this.state = 3547;
			this.match(HiveParser.RPAREN);
			this.state = 3549;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_AS) {
				{
				this.state = 3548;
				this.match(HiveParser.KW_AS);
				}
			}

			this.state = 3551;
			this.tableAlias();
			this.state = 3561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.LPAREN) {
				{
				this.state = 3552;
				this.match(HiveParser.LPAREN);
				this.state = 3553;
				this.identifier();
				this.state = 3558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					{
					{
					this.state = 3554;
					this.match(HiveParser.COMMA);
					this.state = 3555;
					this.identifier();
					}
					}
					this.state = 3560;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3563;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let _localctx: GroupByClauseContext = new GroupByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, HiveParser.RULE_groupByClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3565;
			this.match(HiveParser.KW_GROUP);
			this.state = 3566;
			this.match(HiveParser.KW_BY);
			this.state = 3567;
			this.groupby_expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupby_expression(): Groupby_expressionContext {
		let _localctx: Groupby_expressionContext = new Groupby_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, HiveParser.RULE_groupby_expression);
		try {
			this.state = 3572;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 441, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3569;
				this.rollupStandard();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3570;
				this.rollupOldSyntax();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3571;
				this.groupByEmpty();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupByEmpty(): GroupByEmptyContext {
		let _localctx: GroupByEmptyContext = new GroupByEmptyContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, HiveParser.RULE_groupByEmpty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3574;
			this.match(HiveParser.LPAREN);
			this.state = 3575;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollupStandard(): RollupStandardContext {
		let _localctx: RollupStandardContext = new RollupStandardContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, HiveParser.RULE_rollupStandard);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3577;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_ROLLUP || _la === HiveParser.KW_CUBE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3578;
			this.match(HiveParser.LPAREN);
			this.state = 3579;
			this.expression(0);
			this.state = 3584;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3580;
				this.match(HiveParser.COMMA);
				this.state = 3581;
				this.expression(0);
				}
				}
				this.state = 3586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3587;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollupOldSyntax(): RollupOldSyntaxContext {
		let _localctx: RollupOldSyntaxContext = new RollupOldSyntaxContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, HiveParser.RULE_rollupOldSyntax);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3589;
			this.expressionsNotInParenthesis();
			this.state = 3594;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
			case 1:
				{
				this.state = 3590;
				this.match(HiveParser.KW_WITH);
				this.state = 3591;
				this.match(HiveParser.KW_ROLLUP);
				}
				break;

			case 2:
				{
				this.state = 3592;
				this.match(HiveParser.KW_WITH);
				this.state = 3593;
				this.match(HiveParser.KW_CUBE);
				}
				break;
			}
			this.state = 3609;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_GROUPING) {
				{
				this.state = 3596;
				this.match(HiveParser.KW_GROUPING);
				this.state = 3597;
				this.match(HiveParser.KW_SETS);
				this.state = 3598;
				this.match(HiveParser.LPAREN);
				this.state = 3599;
				this.groupingSetExpression();
				this.state = 3604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveParser.COMMA) {
					{
					{
					this.state = 3600;
					this.match(HiveParser.COMMA);
					this.state = 3601;
					this.groupingSetExpression();
					}
					}
					this.state = 3606;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3607;
				this.match(HiveParser.RPAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingSetExpression(): GroupingSetExpressionContext {
		let _localctx: GroupingSetExpressionContext = new GroupingSetExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, HiveParser.RULE_groupingSetExpression);
		try {
			this.state = 3613;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 446, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3611;
				this.groupingSetExpressionMultiple();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3612;
				this.groupingExpressionSingle();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingSetExpressionMultiple(): GroupingSetExpressionMultipleContext {
		let _localctx: GroupingSetExpressionMultipleContext = new GroupingSetExpressionMultipleContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, HiveParser.RULE_groupingSetExpressionMultiple);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3615;
			this.match(HiveParser.LPAREN);
			this.state = 3617;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_TRUE) | (1 << HiveParser.KW_FALSE) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_IF) | (1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)) | (1 << (HiveParser.KW_NULL - 36)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_BOOLEAN - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_SMALLINT - 68)) | (1 << (HiveParser.KW_INT - 68)) | (1 << (HiveParser.KW_BIGINT - 68)) | (1 << (HiveParser.KW_FLOAT - 68)) | (1 << (HiveParser.KW_DOUBLE - 68)) | (1 << (HiveParser.KW_DATE - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_TIMESTAMP - 68)) | (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_INTERVAL - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_ARRAY - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_MAP - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & ((1 << (HiveParser.KW_CAST - 133)) | (1 << (HiveParser.KW_ADD - 133)) | (1 << (HiveParser.KW_REPLACE - 133)) | (1 << (HiveParser.KW_TEMPORARY - 133)) | (1 << (HiveParser.KW_FILE - 133)) | (1 << (HiveParser.KW_JAR - 133)) | (1 << (HiveParser.KW_EXPLAIN - 133)) | (1 << (HiveParser.KW_FORMATTED - 133)) | (1 << (HiveParser.KW_DEPENDENCY - 133)) | (1 << (HiveParser.KW_LOGICAL - 133)) | (1 << (HiveParser.KW_SERDE - 133)) | (1 << (HiveParser.KW_DEFERRED - 133)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 133)) | (1 << (HiveParser.KW_DBPROPERTIES - 133)) | (1 << (HiveParser.KW_LIMIT - 133)) | (1 << (HiveParser.KW_OFFSET - 133)) | (1 << (HiveParser.KW_UNSET - 133)) | (1 << (HiveParser.KW_TBLPROPERTIES - 133)) | (1 << (HiveParser.KW_IDXPROPERTIES - 133)) | (1 << (HiveParser.KW_VALUE_TYPE - 133)) | (1 << (HiveParser.KW_ELEM_TYPE - 133)) | (1 << (HiveParser.KW_DEFINED - 133)) | (1 << (HiveParser.KW_CASE - 133)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_BINARY - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (HiveParser.KW_CURRENT_DATE - 237)) | (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 237)) | (1 << (HiveParser.KW_GROUPING - 237)) | (1 << (HiveParser.KW_SETS - 237)) | (1 << (HiveParser.KW_NOSCAN - 237)) | (1 << (HiveParser.KW_ROLE - 237)) | (1 << (HiveParser.KW_ROLES - 237)) | (1 << (HiveParser.KW_URI - 237)) | (1 << (HiveParser.KW_SERVER - 237)) | (1 << (HiveParser.KW_ADMIN - 237)) | (1 << (HiveParser.KW_OWNER - 237)) | (1 << (HiveParser.KW_PRINCIPALS - 237)) | (1 << (HiveParser.KW_COMPACT - 237)) | (1 << (HiveParser.KW_COMPACTIONS - 237)) | (1 << (HiveParser.KW_TRANSACTIONS - 237)) | (1 << (HiveParser.KW_REWRITE - 237)) | (1 << (HiveParser.KW_REOPTIMIZATION - 237)) | (1 << (HiveParser.KW_RELOAD - 237)) | (1 << (HiveParser.KW_YEAR - 237)) | (1 << (HiveParser.KW_QUERY - 237)) | (1 << (HiveParser.KW_QUARTER - 237)) | (1 << (HiveParser.KW_MONTH - 237)))) !== 0) || ((((_la - 269)) & ~0x1F) === 0 && ((1 << (_la - 269)) & ((1 << (HiveParser.KW_WEEK - 269)) | (1 << (HiveParser.KW_DAY - 269)) | (1 << (HiveParser.KW_DOW - 269)) | (1 << (HiveParser.KW_HOUR - 269)) | (1 << (HiveParser.KW_MINUTE - 269)) | (1 << (HiveParser.KW_SECOND - 269)) | (1 << (HiveParser.KW_TRANSACTION - 269)) | (1 << (HiveParser.KW_WORK - 269)) | (1 << (HiveParser.KW_WRITE - 269)) | (1 << (HiveParser.KW_ISOLATION - 269)) | (1 << (HiveParser.KW_LEVEL - 269)) | (1 << (HiveParser.KW_SNAPSHOT - 269)) | (1 << (HiveParser.KW_AUTOCOMMIT - 269)) | (1 << (HiveParser.KW_CACHE - 269)) | (1 << (HiveParser.KW_ENFORCED - 269)) | (1 << (HiveParser.KW_VALIDATE - 269)) | (1 << (HiveParser.KW_NOVALIDATE - 269)) | (1 << (HiveParser.KW_RELY - 269)) | (1 << (HiveParser.KW_NORELY - 269)) | (1 << (HiveParser.KW_KEY - 269)) | (1 << (HiveParser.KW_ABORT - 269)) | (1 << (HiveParser.KW_EXTRACT - 269)) | (1 << (HiveParser.KW_FLOOR - 269)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (HiveParser.KW_MATCHED - 302)) | (1 << (HiveParser.KW_REPL - 302)) | (1 << (HiveParser.KW_DUMP - 302)) | (1 << (HiveParser.KW_STATUS - 302)) | (1 << (HiveParser.KW_VECTORIZATION - 302)) | (1 << (HiveParser.KW_SUMMARY - 302)) | (1 << (HiveParser.KW_OPERATOR - 302)) | (1 << (HiveParser.KW_EXPRESSION - 302)) | (1 << (HiveParser.KW_DETAIL - 302)) | (1 << (HiveParser.KW_WAIT - 302)) | (1 << (HiveParser.KW_RESOURCE - 302)) | (1 << (HiveParser.KW_PLAN - 302)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 302)) | (1 << (HiveParser.KW_PLANS - 302)) | (1 << (HiveParser.KW_ACTIVATE - 302)) | (1 << (HiveParser.KW_DEFAULT - 302)) | (1 << (HiveParser.KW_CHECK - 302)) | (1 << (HiveParser.KW_POOL - 302)) | (1 << (HiveParser.KW_MOVE - 302)) | (1 << (HiveParser.KW_DO - 302)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 302)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 302)) | (1 << (HiveParser.KW_PATH - 302)) | (1 << (HiveParser.KW_MAPPING - 302)) | (1 << (HiveParser.KW_WORKLOAD - 302)) | (1 << (HiveParser.KW_MANAGEMENT - 302)) | (1 << (HiveParser.KW_ACTIVE - 302)) | (1 << (HiveParser.KW_UNMANAGED - 302)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (HiveParser.LPAREN - 336)) | (1 << (HiveParser.PLUS - 336)) | (1 << (HiveParser.MINUS - 336)) | (1 << (HiveParser.TILDE - 336)) | (1 << (HiveParser.StringLiteral - 336)) | (1 << (HiveParser.IntegralLiteral - 336)) | (1 << (HiveParser.NumberLiteral - 336)) | (1 << (HiveParser.Number - 336)))) !== 0) || _la === HiveParser.Identifier || _la === HiveParser.CharSetName) {
				{
				this.state = 3616;
				this.expression(0);
				}
			}

			this.state = 3623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3619;
				this.match(HiveParser.COMMA);
				this.state = 3620;
				this.expression(0);
				}
				}
				this.state = 3625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3626;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingExpressionSingle(): GroupingExpressionSingleContext {
		let _localctx: GroupingExpressionSingleContext = new GroupingExpressionSingleContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, HiveParser.RULE_groupingExpressionSingle);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3628;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let _localctx: HavingClauseContext = new HavingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, HiveParser.RULE_havingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3630;
			this.match(HiveParser.KW_HAVING);
			this.state = 3631;
			this.havingCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public havingCondition(): HavingConditionContext {
		let _localctx: HavingConditionContext = new HavingConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, HiveParser.RULE_havingCondition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3633;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		let _localctx: ExpressionsInParenthesisContext = new ExpressionsInParenthesisContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, HiveParser.RULE_expressionsInParenthesis);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3635;
			this.match(HiveParser.LPAREN);
			this.state = 3636;
			this.expressionsNotInParenthesis();
			this.state = 3637;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
		let _localctx: ExpressionsNotInParenthesisContext = new ExpressionsNotInParenthesisContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, HiveParser.RULE_expressionsNotInParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3639;
			this.expression(0);
			this.state = 3641;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.COMMA) {
				{
				this.state = 3640;
				this.expressionPart();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionPart(): ExpressionPartContext {
		let _localctx: ExpressionPartContext = new ExpressionPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, HiveParser.RULE_expressionPart);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3643;
				this.match(HiveParser.COMMA);
				this.state = 3644;
				this.expression(0);
				}
				}
				this.state = 3647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveParser.COMMA);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressions(): ExpressionsContext {
		let _localctx: ExpressionsContext = new ExpressionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, HiveParser.RULE_expressions);
		try {
			this.state = 3651;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 451, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3649;
				this.expressionsInParenthesis();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3650;
				this.expressionsNotInParenthesis();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnRefOrderInParenthesis(): ColumnRefOrderInParenthesisContext {
		let _localctx: ColumnRefOrderInParenthesisContext = new ColumnRefOrderInParenthesisContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, HiveParser.RULE_columnRefOrderInParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3653;
			this.match(HiveParser.LPAREN);
			this.state = 3654;
			this.columnRefOrder();
			this.state = 3659;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3655;
				this.match(HiveParser.COMMA);
				this.state = 3656;
				this.columnRefOrder();
				}
				}
				this.state = 3661;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3662;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnRefOrderNotInParenthesis(): ColumnRefOrderNotInParenthesisContext {
		let _localctx: ColumnRefOrderNotInParenthesisContext = new ColumnRefOrderNotInParenthesisContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, HiveParser.RULE_columnRefOrderNotInParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3664;
			this.columnRefOrder();
			this.state = 3669;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3665;
				this.match(HiveParser.COMMA);
				this.state = 3666;
				this.columnRefOrder();
				}
				}
				this.state = 3671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let _localctx: OrderByClauseContext = new OrderByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, HiveParser.RULE_orderByClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3672;
			this.match(HiveParser.KW_ORDER);
			this.state = 3673;
			this.match(HiveParser.KW_BY);
			this.state = 3674;
			this.columnRefOrder();
			this.state = 3679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 3675;
				this.match(HiveParser.COMMA);
				this.state = 3676;
				this.columnRefOrder();
				}
				}
				this.state = 3681;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clusterByClause(): ClusterByClauseContext {
		let _localctx: ClusterByClauseContext = new ClusterByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, HiveParser.RULE_clusterByClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3682;
			this.match(HiveParser.KW_CLUSTER);
			this.state = 3683;
			this.match(HiveParser.KW_BY);
			this.state = 3684;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionByClause(): PartitionByClauseContext {
		let _localctx: PartitionByClauseContext = new PartitionByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, HiveParser.RULE_partitionByClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3686;
			this.match(HiveParser.KW_PARTITION);
			this.state = 3687;
			this.match(HiveParser.KW_BY);
			this.state = 3688;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public distributeByClause(): DistributeByClauseContext {
		let _localctx: DistributeByClauseContext = new DistributeByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, HiveParser.RULE_distributeByClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3690;
			this.match(HiveParser.KW_DISTRIBUTE);
			this.state = 3691;
			this.match(HiveParser.KW_BY);
			this.state = 3692;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortByClause(): SortByClauseContext {
		let _localctx: SortByClauseContext = new SortByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, HiveParser.RULE_sortByClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3694;
			this.match(HiveParser.KW_SORT);
			this.state = 3695;
			this.match(HiveParser.KW_BY);
			this.state = 3698;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 455, this._ctx) ) {
			case 1:
				{
				this.state = 3696;
				this.columnRefOrderInParenthesis();
				}
				break;

			case 2:
				{
				this.state = 3697;
				this.columnRefOrderNotInParenthesis();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_(): Function_Context {
		let _localctx: Function_Context = new Function_Context(this._ctx, this.state);
		this.enterRule(_localctx, 638, HiveParser.RULE_function_);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3700;
			this.functionName();
			this.state = 3701;
			this.match(HiveParser.LPAREN);
			this.state = 3716;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 459, this._ctx) ) {
			case 1:
				{
				this.state = 3702;
				this.match(HiveParser.STAR);
				}
				break;

			case 2:
				{
				this.state = 3704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT) {
					{
					this.state = 3703;
					_la = this._input.LA(1);
					if (!(_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3714;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_TRUE) | (1 << HiveParser.KW_FALSE) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_IF) | (1 << HiveParser.KW_EXISTS) | (1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)) | (1 << (HiveParser.KW_NULL - 36)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_BOOLEAN - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_SMALLINT - 68)) | (1 << (HiveParser.KW_INT - 68)) | (1 << (HiveParser.KW_BIGINT - 68)) | (1 << (HiveParser.KW_FLOAT - 68)) | (1 << (HiveParser.KW_DOUBLE - 68)) | (1 << (HiveParser.KW_DATE - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_TIMESTAMP - 68)) | (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_INTERVAL - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_ARRAY - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_MAP - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & ((1 << (HiveParser.KW_CAST - 133)) | (1 << (HiveParser.KW_ADD - 133)) | (1 << (HiveParser.KW_REPLACE - 133)) | (1 << (HiveParser.KW_TEMPORARY - 133)) | (1 << (HiveParser.KW_FILE - 133)) | (1 << (HiveParser.KW_JAR - 133)) | (1 << (HiveParser.KW_EXPLAIN - 133)) | (1 << (HiveParser.KW_FORMATTED - 133)) | (1 << (HiveParser.KW_DEPENDENCY - 133)) | (1 << (HiveParser.KW_LOGICAL - 133)) | (1 << (HiveParser.KW_SERDE - 133)) | (1 << (HiveParser.KW_DEFERRED - 133)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 133)) | (1 << (HiveParser.KW_DBPROPERTIES - 133)) | (1 << (HiveParser.KW_LIMIT - 133)) | (1 << (HiveParser.KW_OFFSET - 133)) | (1 << (HiveParser.KW_UNSET - 133)) | (1 << (HiveParser.KW_TBLPROPERTIES - 133)) | (1 << (HiveParser.KW_IDXPROPERTIES - 133)) | (1 << (HiveParser.KW_VALUE_TYPE - 133)) | (1 << (HiveParser.KW_ELEM_TYPE - 133)) | (1 << (HiveParser.KW_DEFINED - 133)) | (1 << (HiveParser.KW_CASE - 133)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_BINARY - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & ((1 << (HiveParser.KW_CURRENT_DATE - 237)) | (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 237)) | (1 << (HiveParser.KW_GROUPING - 237)) | (1 << (HiveParser.KW_SETS - 237)) | (1 << (HiveParser.KW_NOSCAN - 237)) | (1 << (HiveParser.KW_ROLE - 237)) | (1 << (HiveParser.KW_ROLES - 237)) | (1 << (HiveParser.KW_URI - 237)) | (1 << (HiveParser.KW_SERVER - 237)) | (1 << (HiveParser.KW_ADMIN - 237)) | (1 << (HiveParser.KW_OWNER - 237)) | (1 << (HiveParser.KW_PRINCIPALS - 237)) | (1 << (HiveParser.KW_COMPACT - 237)) | (1 << (HiveParser.KW_COMPACTIONS - 237)) | (1 << (HiveParser.KW_TRANSACTIONS - 237)) | (1 << (HiveParser.KW_REWRITE - 237)) | (1 << (HiveParser.KW_REOPTIMIZATION - 237)) | (1 << (HiveParser.KW_RELOAD - 237)) | (1 << (HiveParser.KW_YEAR - 237)) | (1 << (HiveParser.KW_QUERY - 237)) | (1 << (HiveParser.KW_QUARTER - 237)) | (1 << (HiveParser.KW_MONTH - 237)))) !== 0) || ((((_la - 269)) & ~0x1F) === 0 && ((1 << (_la - 269)) & ((1 << (HiveParser.KW_WEEK - 269)) | (1 << (HiveParser.KW_DAY - 269)) | (1 << (HiveParser.KW_DOW - 269)) | (1 << (HiveParser.KW_HOUR - 269)) | (1 << (HiveParser.KW_MINUTE - 269)) | (1 << (HiveParser.KW_SECOND - 269)) | (1 << (HiveParser.KW_TRANSACTION - 269)) | (1 << (HiveParser.KW_WORK - 269)) | (1 << (HiveParser.KW_WRITE - 269)) | (1 << (HiveParser.KW_ISOLATION - 269)) | (1 << (HiveParser.KW_LEVEL - 269)) | (1 << (HiveParser.KW_SNAPSHOT - 269)) | (1 << (HiveParser.KW_AUTOCOMMIT - 269)) | (1 << (HiveParser.KW_CACHE - 269)) | (1 << (HiveParser.KW_ENFORCED - 269)) | (1 << (HiveParser.KW_VALIDATE - 269)) | (1 << (HiveParser.KW_NOVALIDATE - 269)) | (1 << (HiveParser.KW_RELY - 269)) | (1 << (HiveParser.KW_NORELY - 269)) | (1 << (HiveParser.KW_KEY - 269)) | (1 << (HiveParser.KW_ABORT - 269)) | (1 << (HiveParser.KW_EXTRACT - 269)) | (1 << (HiveParser.KW_FLOOR - 269)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (HiveParser.KW_MATCHED - 302)) | (1 << (HiveParser.KW_REPL - 302)) | (1 << (HiveParser.KW_DUMP - 302)) | (1 << (HiveParser.KW_STATUS - 302)) | (1 << (HiveParser.KW_VECTORIZATION - 302)) | (1 << (HiveParser.KW_SUMMARY - 302)) | (1 << (HiveParser.KW_OPERATOR - 302)) | (1 << (HiveParser.KW_EXPRESSION - 302)) | (1 << (HiveParser.KW_DETAIL - 302)) | (1 << (HiveParser.KW_WAIT - 302)) | (1 << (HiveParser.KW_RESOURCE - 302)) | (1 << (HiveParser.KW_PLAN - 302)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 302)) | (1 << (HiveParser.KW_PLANS - 302)) | (1 << (HiveParser.KW_ACTIVATE - 302)) | (1 << (HiveParser.KW_DEFAULT - 302)) | (1 << (HiveParser.KW_CHECK - 302)) | (1 << (HiveParser.KW_POOL - 302)) | (1 << (HiveParser.KW_MOVE - 302)) | (1 << (HiveParser.KW_DO - 302)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 302)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 302)) | (1 << (HiveParser.KW_PATH - 302)) | (1 << (HiveParser.KW_MAPPING - 302)) | (1 << (HiveParser.KW_WORKLOAD - 302)) | (1 << (HiveParser.KW_MANAGEMENT - 302)) | (1 << (HiveParser.KW_ACTIVE - 302)) | (1 << (HiveParser.KW_UNMANAGED - 302)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (HiveParser.LPAREN - 336)) | (1 << (HiveParser.PLUS - 336)) | (1 << (HiveParser.MINUS - 336)) | (1 << (HiveParser.STAR - 336)) | (1 << (HiveParser.TILDE - 336)) | (1 << (HiveParser.StringLiteral - 336)) | (1 << (HiveParser.IntegralLiteral - 336)) | (1 << (HiveParser.NumberLiteral - 336)) | (1 << (HiveParser.Number - 336)))) !== 0) || _la === HiveParser.Identifier || _la === HiveParser.CharSetName) {
					{
					this.state = 3706;
					this.selectExpression();
					this.state = 3711;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveParser.COMMA) {
						{
						{
						this.state = 3707;
						this.match(HiveParser.COMMA);
						this.state = 3708;
						this.selectExpression();
						}
						}
						this.state = 3713;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;
			}
			this.state = 3718;
			this.match(HiveParser.RPAREN);
			this.state = 3721;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 460, this._ctx) ) {
			case 1:
				{
				this.state = 3719;
				this.match(HiveParser.KW_OVER);
				this.state = 3720;
				this.window_specification();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionName(): FunctionNameContext {
		let _localctx: FunctionNameContext = new FunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, HiveParser.RULE_functionName);
		try {
			this.state = 3725;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3723;
				this.functionIdentifier();
				}
				break;
			case HiveParser.KW_IF:
			case HiveParser.KW_BOOLEAN:
			case HiveParser.KW_SMALLINT:
			case HiveParser.KW_INT:
			case HiveParser.KW_BIGINT:
			case HiveParser.KW_FLOAT:
			case HiveParser.KW_DOUBLE:
			case HiveParser.KW_DATE:
			case HiveParser.KW_TIMESTAMP:
			case HiveParser.KW_ARRAY:
			case HiveParser.KW_MAP:
			case HiveParser.KW_BINARY:
			case HiveParser.KW_CURRENT_DATE:
			case HiveParser.KW_CURRENT_TIMESTAMP:
			case HiveParser.KW_GROUPING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3724;
				this.sql11ReservedKeywordsUsedAsFunctionName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public castExpression(): CastExpressionContext {
		let _localctx: CastExpressionContext = new CastExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, HiveParser.RULE_castExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3727;
			this.match(HiveParser.KW_CAST);
			this.state = 3728;
			this.match(HiveParser.LPAREN);
			this.state = 3729;
			this.expression(0);
			this.state = 3730;
			this.match(HiveParser.KW_AS);
			this.state = 3731;
			this.primitiveType();
			this.state = 3732;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseExpression(): CaseExpressionContext {
		let _localctx: CaseExpressionContext = new CaseExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, HiveParser.RULE_caseExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3734;
			this.match(HiveParser.KW_CASE);
			this.state = 3735;
			this.expression(0);
			this.state = 3741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3736;
				this.match(HiveParser.KW_WHEN);
				this.state = 3737;
				this.expression(0);
				this.state = 3738;
				this.match(HiveParser.KW_THEN);
				this.state = 3739;
				this.expression(0);
				}
				}
				this.state = 3743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveParser.KW_WHEN);
			this.state = 3747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ELSE) {
				{
				this.state = 3745;
				this.match(HiveParser.KW_ELSE);
				this.state = 3746;
				this.expression(0);
				}
			}

			this.state = 3749;
			this.match(HiveParser.KW_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenExpression(): WhenExpressionContext {
		let _localctx: WhenExpressionContext = new WhenExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, HiveParser.RULE_whenExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3751;
			this.match(HiveParser.KW_CASE);
			this.state = 3757;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3752;
				this.match(HiveParser.KW_WHEN);
				this.state = 3753;
				this.expression(0);
				this.state = 3754;
				this.match(HiveParser.KW_THEN);
				this.state = 3755;
				this.expression(0);
				}
				}
				this.state = 3759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveParser.KW_WHEN);
			this.state = 3763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_ELSE) {
				{
				this.state = 3761;
				this.match(HiveParser.KW_ELSE);
				this.state = 3762;
				this.expression(0);
				}
			}

			this.state = 3765;
			this.match(HiveParser.KW_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public floorExpression(): FloorExpressionContext {
		let _localctx: FloorExpressionContext = new FloorExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, HiveParser.RULE_floorExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3767;
			this.match(HiveParser.KW_FLOOR);
			this.state = 3768;
			this.match(HiveParser.LPAREN);
			this.state = 3769;
			this.expression(0);
			this.state = 3772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_TO) {
				{
				this.state = 3770;
				this.match(HiveParser.KW_TO);
				this.state = 3771;
				this.floorDateQualifiers();
				}
			}

			this.state = 3774;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public floorDateQualifiers(): FloorDateQualifiersContext {
		let _localctx: FloorDateQualifiersContext = new FloorDateQualifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, HiveParser.RULE_floorDateQualifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3776;
			_la = this._input.LA(1);
			if (!(((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (HiveParser.KW_YEAR - 265)) | (1 << (HiveParser.KW_QUARTER - 265)) | (1 << (HiveParser.KW_MONTH - 265)) | (1 << (HiveParser.KW_WEEK - 265)) | (1 << (HiveParser.KW_DAY - 265)) | (1 << (HiveParser.KW_HOUR - 265)) | (1 << (HiveParser.KW_MINUTE - 265)) | (1 << (HiveParser.KW_SECOND - 265)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extractExpression(): ExtractExpressionContext {
		let _localctx: ExtractExpressionContext = new ExtractExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, HiveParser.RULE_extractExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3778;
			this.match(HiveParser.KW_EXTRACT);
			this.state = 3779;
			this.match(HiveParser.LPAREN);
			this.state = 3780;
			this.timeQualifiers();
			this.state = 3781;
			this.match(HiveParser.KW_FROM);
			this.state = 3782;
			this.expression(0);
			this.state = 3783;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timeQualifiers(): TimeQualifiersContext {
		let _localctx: TimeQualifiersContext = new TimeQualifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, HiveParser.RULE_timeQualifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3785;
			_la = this._input.LA(1);
			if (!(((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (HiveParser.KW_YEAR - 265)) | (1 << (HiveParser.KW_QUARTER - 265)) | (1 << (HiveParser.KW_MONTH - 265)) | (1 << (HiveParser.KW_WEEK - 265)) | (1 << (HiveParser.KW_DAY - 265)) | (1 << (HiveParser.KW_DOW - 265)) | (1 << (HiveParser.KW_HOUR - 265)) | (1 << (HiveParser.KW_MINUTE - 265)) | (1 << (HiveParser.KW_SECOND - 265)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, HiveParser.RULE_constant);
		try {
			this.state = 3799;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 467, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3787;
				this.intervalLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3788;
				this.match(HiveParser.Number);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3789;
				this.dateLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3790;
				this.timestampLiteral();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3791;
				this.timestampLocalTZLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3792;
				this.match(HiveParser.StringLiteral);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3793;
				this.stringLiteralSequence();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3794;
				this.match(HiveParser.IntegralLiteral);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3795;
				this.match(HiveParser.NumberLiteral);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3796;
				this.charSetStringLiteral();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3797;
				this.booleanValue();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3798;
				this.match(HiveParser.KW_NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringLiteralSequence(): StringLiteralSequenceContext {
		let _localctx: StringLiteralSequenceContext = new StringLiteralSequenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, HiveParser.RULE_stringLiteralSequence);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3801;
			this.match(HiveParser.StringLiteral);
			this.state = 3803;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3802;
					this.match(HiveParser.StringLiteral);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3805;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 468, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charSetStringLiteral(): CharSetStringLiteralContext {
		let _localctx: CharSetStringLiteralContext = new CharSetStringLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, HiveParser.RULE_charSetStringLiteral);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3807;
			this.match(HiveParser.CharSetName);
			this.state = 3808;
			this.match(HiveParser.CharSetLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateLiteral(): DateLiteralContext {
		let _localctx: DateLiteralContext = new DateLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, HiveParser.RULE_dateLiteral);
		try {
			this.state = 3813;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3810;
				this.match(HiveParser.KW_DATE);
				this.state = 3811;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case HiveParser.KW_CURRENT_DATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3812;
				this.match(HiveParser.KW_CURRENT_DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timestampLiteral(): TimestampLiteralContext {
		let _localctx: TimestampLiteralContext = new TimestampLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, HiveParser.RULE_timestampLiteral);
		try {
			this.state = 3818;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_TIMESTAMP:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3815;
				this.match(HiveParser.KW_TIMESTAMP);
				this.state = 3816;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case HiveParser.KW_CURRENT_TIMESTAMP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3817;
				this.match(HiveParser.KW_CURRENT_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timestampLocalTZLiteral(): TimestampLocalTZLiteralContext {
		let _localctx: TimestampLocalTZLiteralContext = new TimestampLocalTZLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, HiveParser.RULE_timestampLocalTZLiteral);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3820;
			this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
			this.state = 3821;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalValue(): IntervalValueContext {
		let _localctx: IntervalValueContext = new IntervalValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, HiveParser.RULE_intervalValue);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3823;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.StringLiteral || _la === HiveParser.Number)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalLiteral(): IntervalLiteralContext {
		let _localctx: IntervalLiteralContext = new IntervalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, HiveParser.RULE_intervalLiteral);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3825;
			this.intervalValue();
			this.state = 3826;
			this.intervalQualifiers();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalExpression(): IntervalExpressionContext {
		let _localctx: IntervalExpressionContext = new IntervalExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, HiveParser.RULE_intervalExpression);
		try {
			this.state = 3843;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 471, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3828;
				this.match(HiveParser.LPAREN);
				this.state = 3829;
				this.intervalValue();
				this.state = 3830;
				this.match(HiveParser.RPAREN);
				this.state = 3831;
				this.intervalQualifiers();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3833;
				this.match(HiveParser.KW_INTERVAL);
				this.state = 3834;
				this.intervalValue();
				this.state = 3835;
				this.intervalQualifiers();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3837;
				this.match(HiveParser.KW_INTERVAL);
				this.state = 3838;
				this.match(HiveParser.LPAREN);
				this.state = 3839;
				this.expression(0);
				this.state = 3840;
				this.match(HiveParser.RPAREN);
				this.state = 3841;
				this.intervalQualifiers();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalQualifiers(): IntervalQualifiersContext {
		let _localctx: IntervalQualifiersContext = new IntervalQualifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, HiveParser.RULE_intervalQualifiers);
		try {
			this.state = 3857;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 472, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3845;
				this.match(HiveParser.KW_YEAR);
				this.state = 3846;
				this.match(HiveParser.KW_TO);
				this.state = 3847;
				this.match(HiveParser.KW_MONTH);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3848;
				this.match(HiveParser.KW_DAY);
				this.state = 3849;
				this.match(HiveParser.KW_TO);
				this.state = 3850;
				this.match(HiveParser.KW_SECOND);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3851;
				this.match(HiveParser.KW_YEAR);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3852;
				this.match(HiveParser.KW_MONTH);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3853;
				this.match(HiveParser.KW_DAY);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3854;
				this.match(HiveParser.KW_HOUR);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3855;
				this.match(HiveParser.KW_MINUTE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3856;
				this.match(HiveParser.KW_SECOND);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atomExpression(): AtomExpressionContext {
		let _localctx: AtomExpressionContext = new AtomExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, HiveParser.RULE_atomExpression);
		try {
			this.state = 3870;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 473, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3859;
				this.constant();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3860;
				this.intervalExpression();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3861;
				this.castExpression();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3862;
				this.extractExpression();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3863;
				this.floorExpression();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3864;
				this.caseExpression();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3865;
				this.whenExpression();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3866;
				this.subQueryExpression();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3867;
				this.function_();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3868;
				this.tableOrColumn();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3869;
				this.expressionsInParenthesis();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceUnaryOperator(): PrecedenceUnaryOperatorContext {
		let _localctx: PrecedenceUnaryOperatorContext = new PrecedenceUnaryOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, HiveParser.RULE_precedenceUnaryOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3872;
			_la = this._input.LA(1);
			if (!(((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (HiveParser.PLUS - 350)) | (1 << (HiveParser.MINUS - 350)) | (1 << (HiveParser.TILDE - 350)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public isCondition(): IsConditionContext {
		let _localctx: IsConditionContext = new IsConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, HiveParser.RULE_isCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_NOT) {
				{
				this.state = 3874;
				this.match(HiveParser.KW_NOT);
				}
			}

			this.state = 3882;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_NULL:
				{
				this.state = 3877;
				this.match(HiveParser.KW_NULL);
				}
				break;
			case HiveParser.KW_TRUE:
				{
				this.state = 3878;
				this.match(HiveParser.KW_TRUE);
				}
				break;
			case HiveParser.KW_FALSE:
				{
				this.state = 3879;
				this.match(HiveParser.KW_FALSE);
				}
				break;
			case HiveParser.KW_DISTINCT:
				{
				this.state = 3880;
				this.match(HiveParser.KW_DISTINCT);
				this.state = 3881;
				this.match(HiveParser.KW_FROM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceBitwiseXorOperator(): PrecedenceBitwiseXorOperatorContext {
		let _localctx: PrecedenceBitwiseXorOperatorContext = new PrecedenceBitwiseXorOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, HiveParser.RULE_precedenceBitwiseXorOperator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3884;
			this.match(HiveParser.BITWISEXOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceStarOperator(): PrecedenceStarOperatorContext {
		let _localctx: PrecedenceStarOperatorContext = new PrecedenceStarOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, HiveParser.RULE_precedenceStarOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3886;
			_la = this._input.LA(1);
			if (!(((((_la - 349)) & ~0x1F) === 0 && ((1 << (_la - 349)) & ((1 << (HiveParser.DIVIDE - 349)) | (1 << (HiveParser.STAR - 349)) | (1 << (HiveParser.MOD - 349)) | (1 << (HiveParser.DIV - 349)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedencePlusOperator(): PrecedencePlusOperatorContext {
		let _localctx: PrecedencePlusOperatorContext = new PrecedencePlusOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, HiveParser.RULE_precedencePlusOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3888;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.PLUS || _la === HiveParser.MINUS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceConcatenateOperator(): PrecedenceConcatenateOperatorContext {
		let _localctx: PrecedenceConcatenateOperatorContext = new PrecedenceConcatenateOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, HiveParser.RULE_precedenceConcatenateOperator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3890;
			this.match(HiveParser.CONCATENATE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceAmpersandOperator(): PrecedenceAmpersandOperatorContext {
		let _localctx: PrecedenceAmpersandOperatorContext = new PrecedenceAmpersandOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, HiveParser.RULE_precedenceAmpersandOperator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3892;
			this.match(HiveParser.AMPERSAND);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceBitwiseOrOperator(): PrecedenceBitwiseOrOperatorContext {
		let _localctx: PrecedenceBitwiseOrOperatorContext = new PrecedenceBitwiseOrOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, HiveParser.RULE_precedenceBitwiseOrOperator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3894;
			this.match(HiveParser.BITWISEOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext {
		let _localctx: PrecedenceRegexpOperatorContext = new PrecedenceRegexpOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, HiveParser.RULE_precedenceRegexpOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3896;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_LIKE || _la === HiveParser.KW_RLIKE || _la === HiveParser.KW_REGEXP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceComparisonOperator(): PrecedenceComparisonOperatorContext {
		let _localctx: PrecedenceComparisonOperatorContext = new PrecedenceComparisonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, HiveParser.RULE_precedenceComparisonOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3898;
			_la = this._input.LA(1);
			if (!(((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (HiveParser.EQUAL - 342)) | (1 << (HiveParser.EQUAL_NS - 342)) | (1 << (HiveParser.NOTEQUAL - 342)) | (1 << (HiveParser.LESSTHANOREQUALTO - 342)) | (1 << (HiveParser.LESSTHAN - 342)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 342)) | (1 << (HiveParser.GREATERTHAN - 342)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceNotOperator(): PrecedenceNotOperatorContext {
		let _localctx: PrecedenceNotOperatorContext = new PrecedenceNotOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, HiveParser.RULE_precedenceNotOperator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3900;
			this.match(HiveParser.KW_NOT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceLogicOperator(): PrecedenceLogicOperatorContext {
		let _localctx: PrecedenceLogicOperatorContext = new PrecedenceLogicOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, HiveParser.RULE_precedenceLogicOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3902;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_AND || _la === HiveParser.KW_OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 702;
		this.enterRecursionRule(_localctx, 702, HiveParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3929;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 478, this._ctx) ) {
			case 1:
				{
				this.state = 3905;
				this.atomExpression();
				this.state = 3914;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 3912;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case HiveParser.LSQUARE:
							{
							{
							this.state = 3906;
							this.match(HiveParser.LSQUARE);
							this.state = 3907;
							this.expression(0);
							this.state = 3908;
							this.match(HiveParser.RSQUARE);
							}
							}
							break;
						case HiveParser.DOT:
							{
							{
							this.state = 3910;
							this.match(HiveParser.DOT);
							this.state = 3911;
							this.identifier();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 3916;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 477, this._ctx);
				}
				}
				break;

			case 2:
				{
				this.state = 3917;
				this.precedenceUnaryOperator();
				this.state = 3918;
				this.expression(17);
				}
				break;

			case 3:
				{
				this.state = 3920;
				this.match(HiveParser.KW_EXISTS);
				this.state = 3921;
				this.subQueryExpression();
				}
				break;

			case 4:
				{
				this.state = 3922;
				this.precedenceNotOperator();
				this.state = 3923;
				this.expression(3);
				}
				break;

			case 5:
				{
				this.state = 3925;
				this.match(HiveParser.LPAREN);
				this.state = 3926;
				this.expression(0);
				this.state = 3927;
				this.match(HiveParser.RPAREN);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 3997;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 3995;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 483, this._ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3931;
						if (!(this.precpred(this._ctx, 15))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 15)");
						}
						this.state = 3932;
						this.precedenceBitwiseXorOperator();
						this.state = 3933;
						this.expression(16);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3935;
						if (!(this.precpred(this._ctx, 14))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 14)");
						}
						this.state = 3936;
						this.precedenceStarOperator();
						this.state = 3937;
						this.expression(15);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3939;
						if (!(this.precpred(this._ctx, 13))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
						}
						this.state = 3940;
						this.precedencePlusOperator();
						this.state = 3941;
						this.expression(14);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3943;
						if (!(this.precpred(this._ctx, 12))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
						}
						this.state = 3944;
						this.precedenceConcatenateOperator();
						this.state = 3945;
						this.expression(13);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3947;
						if (!(this.precpred(this._ctx, 11))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
						}
						this.state = 3948;
						this.precedenceAmpersandOperator();
						this.state = 3949;
						this.expression(12);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3951;
						if (!(this.precpred(this._ctx, 10))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
						}
						this.state = 3952;
						this.precedenceBitwiseOrOperator();
						this.state = 3953;
						this.expression(11);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3955;
						if (!(this.precpred(this._ctx, 9))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
						}
						this.state = 3956;
						this.precedenceComparisonOperator();
						this.state = 3957;
						this.expression(10);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3959;
						if (!(this.precpred(this._ctx, 8))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
						}
						this.state = 3961;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_NOT) {
							{
							this.state = 3960;
							this.match(HiveParser.KW_NOT);
							}
						}

						this.state = 3963;
						this.precedenceRegexpOperator();
						this.state = 3964;
						this.expression(9);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3966;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 3968;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_NOT) {
							{
							this.state = 3967;
							this.match(HiveParser.KW_NOT);
							}
						}

						this.state = 3970;
						this.match(HiveParser.KW_BETWEEN);
						this.state = 3971;
						this.expression(0);
						this.state = 3972;
						this.match(HiveParser.KW_AND);
						this.state = 3973;
						this.expression(6);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3975;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 3976;
						this.precedenceLogicOperator();
						this.state = 3977;
						this.expression(3);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3979;
						if (!(this.precpred(this._ctx, 16))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 16)");
						}
						this.state = 3980;
						this.match(HiveParser.KW_IS);
						this.state = 3981;
						this.isCondition();
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3982;
						if (!(this.precpred(this._ctx, 7))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
						}
						this.state = 3984;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_NOT) {
							{
							this.state = 3983;
							this.match(HiveParser.KW_NOT);
							}
						}

						this.state = 3986;
						this.match(HiveParser.KW_LIKE);
						this.state = 3987;
						_la = this._input.LA(1);
						if (!(_la === HiveParser.KW_ALL || _la === HiveParser.KW_ANY)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 3988;
						this.expressionsInParenthesis();
						}
						break;

					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveParser.RULE_expression);
						this.state = 3989;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 3991;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === HiveParser.KW_NOT) {
							{
							this.state = 3990;
							this.match(HiveParser.KW_NOT);
							}
						}

						this.state = 3993;
						this.match(HiveParser.KW_IN);
						this.state = 3994;
						this.precedenceSimilarExpressionIn();
						}
						break;
					}
					}
				}
				this.state = 3999;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 484, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext {
		let _localctx: PrecedenceSimilarExpressionInContext = new PrecedenceSimilarExpressionInContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, HiveParser.RULE_precedenceSimilarExpressionIn);
		try {
			this.state = 4002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 485, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4000;
				this.subQueryExpression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4001;
				this.expressionsInParenthesis();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subQueryExpression(): SubQueryExpressionContext {
		let _localctx: SubQueryExpressionContext = new SubQueryExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, HiveParser.RULE_subQueryExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4004;
			this.match(HiveParser.LPAREN);
			this.state = 4005;
			this.selectStatement();
			this.state = 4006;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanValue(): BooleanValueContext {
		let _localctx: BooleanValueContext = new BooleanValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, HiveParser.RULE_booleanValue);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4008;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_TRUE || _la === HiveParser.KW_FALSE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanValueTok(): BooleanValueTokContext {
		let _localctx: BooleanValueTokContext = new BooleanValueTokContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, HiveParser.RULE_booleanValueTok);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4010;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_TRUE || _la === HiveParser.KW_FALSE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableOrPartition(): TableOrPartitionContext {
		let _localctx: TableOrPartitionContext = new TableOrPartitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, HiveParser.RULE_tableOrPartition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4012;
			this.tableName();
			this.state = 4014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.KW_PARTITION) {
				{
				this.state = 4013;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionSpec(): PartitionSpecContext {
		let _localctx: PartitionSpecContext = new PartitionSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, HiveParser.RULE_partitionSpec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4016;
			this.match(HiveParser.KW_PARTITION);
			this.state = 4017;
			this.match(HiveParser.LPAREN);
			this.state = 4018;
			this.partitionVal();
			this.state = 4023;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 4019;
				this.match(HiveParser.COMMA);
				this.state = 4020;
				this.partitionVal();
				}
				}
				this.state = 4025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4026;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionVal(): PartitionValContext {
		let _localctx: PartitionValContext = new PartitionValContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, HiveParser.RULE_partitionVal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4028;
			this.identifier();
			this.state = 4031;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveParser.EQUAL) {
				{
				this.state = 4029;
				this.match(HiveParser.EQUAL);
				this.state = 4030;
				this.constant();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropPartitionSpec(): DropPartitionSpecContext {
		let _localctx: DropPartitionSpecContext = new DropPartitionSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, HiveParser.RULE_dropPartitionSpec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4033;
			this.match(HiveParser.KW_PARTITION);
			this.state = 4034;
			this.match(HiveParser.LPAREN);
			this.state = 4035;
			this.dropPartitionVal();
			this.state = 4040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveParser.COMMA) {
				{
				{
				this.state = 4036;
				this.match(HiveParser.COMMA);
				this.state = 4037;
				this.dropPartitionVal();
				}
				}
				this.state = 4042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4043;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropPartitionVal(): DropPartitionValContext {
		let _localctx: DropPartitionValContext = new DropPartitionValContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, HiveParser.RULE_dropPartitionVal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4045;
			this.identifier();
			this.state = 4046;
			this.dropPartitionOperator();
			this.state = 4047;
			this.constant();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropPartitionOperator(): DropPartitionOperatorContext {
		let _localctx: DropPartitionOperatorContext = new DropPartitionOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, HiveParser.RULE_dropPartitionOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4049;
			_la = this._input.LA(1);
			if (!(((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (HiveParser.EQUAL - 342)) | (1 << (HiveParser.NOTEQUAL - 342)) | (1 << (HiveParser.LESSTHANOREQUALTO - 342)) | (1 << (HiveParser.LESSTHAN - 342)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 342)) | (1 << (HiveParser.GREATERTHAN - 342)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sysFuncNames(): SysFuncNamesContext {
		let _localctx: SysFuncNamesContext = new SysFuncNamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, HiveParser.RULE_sysFuncNames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4051;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_AND) | (1 << HiveParser.KW_OR) | (1 << HiveParser.KW_NOT) | (1 << HiveParser.KW_LIKE) | (1 << HiveParser.KW_IF))) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (HiveParser.KW_BOOLEAN - 77)) | (1 << (HiveParser.KW_TINYINT - 77)) | (1 << (HiveParser.KW_SMALLINT - 77)) | (1 << (HiveParser.KW_INT - 77)) | (1 << (HiveParser.KW_BIGINT - 77)) | (1 << (HiveParser.KW_FLOAT - 77)) | (1 << (HiveParser.KW_DOUBLE - 77)) | (1 << (HiveParser.KW_STRING - 77)) | (1 << (HiveParser.KW_ARRAY - 77)) | (1 << (HiveParser.KW_STRUCT - 77)) | (1 << (HiveParser.KW_MAP - 77)) | (1 << (HiveParser.KW_UNIONTYPE - 77)))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (HiveParser.KW_RLIKE - 136)) | (1 << (HiveParser.KW_REGEXP - 136)) | (1 << (HiveParser.KW_CASE - 136)) | (1 << (HiveParser.KW_WHEN - 136)))) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & ((1 << (HiveParser.KW_IN - 180)) | (1 << (HiveParser.KW_BETWEEN - 180)) | (1 << (HiveParser.KW_BINARY - 180)))) !== 0) || _la === HiveParser.KW_FLOOR || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (HiveParser.EQUAL - 342)) | (1 << (HiveParser.EQUAL_NS - 342)) | (1 << (HiveParser.NOTEQUAL - 342)) | (1 << (HiveParser.LESSTHANOREQUALTO - 342)) | (1 << (HiveParser.LESSTHAN - 342)) | (1 << (HiveParser.GREATERTHANOREQUALTO - 342)) | (1 << (HiveParser.GREATERTHAN - 342)) | (1 << (HiveParser.DIVIDE - 342)) | (1 << (HiveParser.PLUS - 342)) | (1 << (HiveParser.MINUS - 342)) | (1 << (HiveParser.STAR - 342)) | (1 << (HiveParser.MOD - 342)) | (1 << (HiveParser.DIV - 342)) | (1 << (HiveParser.AMPERSAND - 342)) | (1 << (HiveParser.TILDE - 342)) | (1 << (HiveParser.BITWISEOR - 342)) | (1 << (HiveParser.BITWISEXOR - 342)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public descFuncNames(): DescFuncNamesContext {
		let _localctx: DescFuncNamesContext = new DescFuncNamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, HiveParser.RULE_descFuncNames);
		try {
			this.state = 4056;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4053;
				this.sysFuncNames();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4054;
				this.match(HiveParser.StringLiteral);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4055;
				this.functionIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, HiveParser.RULE_identifier);
		try {
			this.state = 4060;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4058;
				this.match(HiveParser.Identifier);
				}
				break;
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4059;
				this.nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionIdentifier(): FunctionIdentifierContext {
		let _localctx: FunctionIdentifierContext = new FunctionIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, HiveParser.RULE_functionIdentifier);
		try {
			this.state = 4067;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 492, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4062;
				this.identifier();
				this.state = 4063;
				this.match(HiveParser.DOT);
				this.state = 4064;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4066;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public principalIdentifier(): PrincipalIdentifierContext {
		let _localctx: PrincipalIdentifierContext = new PrincipalIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, HiveParser.RULE_principalIdentifier);
		try {
			this.state = 4071;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveParser.KW_ASC:
			case HiveParser.KW_DESC:
			case HiveParser.KW_NULLS:
			case HiveParser.KW_LAST:
			case HiveParser.KW_OVERWRITE:
			case HiveParser.KW_PARTITIONS:
			case HiveParser.KW_TABLES:
			case HiveParser.KW_COLUMNS:
			case HiveParser.KW_INDEX:
			case HiveParser.KW_INDEXES:
			case HiveParser.KW_REBUILD:
			case HiveParser.KW_FUNCTIONS:
			case HiveParser.KW_SHOW:
			case HiveParser.KW_MSCK:
			case HiveParser.KW_REPAIR:
			case HiveParser.KW_DIRECTORY:
			case HiveParser.KW_CLUSTER:
			case HiveParser.KW_DISTRIBUTE:
			case HiveParser.KW_SORT:
			case HiveParser.KW_LOAD:
			case HiveParser.KW_EXPORT:
			case HiveParser.KW_REPLICATION:
			case HiveParser.KW_METADATA:
			case HiveParser.KW_DATA:
			case HiveParser.KW_INPATH:
			case HiveParser.KW_CHANGE:
			case HiveParser.KW_FIRST:
			case HiveParser.KW_AFTER:
			case HiveParser.KW_RENAME:
			case HiveParser.KW_COMMENT:
			case HiveParser.KW_TINYINT:
			case HiveParser.KW_DATETIME:
			case HiveParser.KW_ZONE:
			case HiveParser.KW_STRING:
			case HiveParser.KW_STRUCT:
			case HiveParser.KW_UNIONTYPE:
			case HiveParser.KW_PARTITIONED:
			case HiveParser.KW_CLUSTERED:
			case HiveParser.KW_SORTED:
			case HiveParser.KW_BUCKETS:
			case HiveParser.KW_FORMAT:
			case HiveParser.KW_DELIMITED:
			case HiveParser.KW_FIELDS:
			case HiveParser.KW_TERMINATED:
			case HiveParser.KW_ESCAPED:
			case HiveParser.KW_COLLECTION:
			case HiveParser.KW_ITEMS:
			case HiveParser.KW_KEYS:
			case HiveParser.KW_KEY_TYPE:
			case HiveParser.KW_KILL:
			case HiveParser.KW_LINES:
			case HiveParser.KW_STORED:
			case HiveParser.KW_FILEFORMAT:
			case HiveParser.KW_INPUTFORMAT:
			case HiveParser.KW_OUTPUTFORMAT:
			case HiveParser.KW_INPUTDRIVER:
			case HiveParser.KW_OUTPUTDRIVER:
			case HiveParser.KW_ENABLE:
			case HiveParser.KW_DISABLE:
			case HiveParser.KW_LOCATION:
			case HiveParser.KW_BUCKET:
			case HiveParser.KW_ADD:
			case HiveParser.KW_REPLACE:
			case HiveParser.KW_TEMPORARY:
			case HiveParser.KW_FILE:
			case HiveParser.KW_JAR:
			case HiveParser.KW_EXPLAIN:
			case HiveParser.KW_FORMATTED:
			case HiveParser.KW_DEPENDENCY:
			case HiveParser.KW_LOGICAL:
			case HiveParser.KW_SERDE:
			case HiveParser.KW_DEFERRED:
			case HiveParser.KW_SERDEPROPERTIES:
			case HiveParser.KW_DBPROPERTIES:
			case HiveParser.KW_LIMIT:
			case HiveParser.KW_OFFSET:
			case HiveParser.KW_UNSET:
			case HiveParser.KW_TBLPROPERTIES:
			case HiveParser.KW_IDXPROPERTIES:
			case HiveParser.KW_VALUE_TYPE:
			case HiveParser.KW_ELEM_TYPE:
			case HiveParser.KW_DEFINED:
			case HiveParser.KW_MAPJOIN:
			case HiveParser.KW_STREAMTABLE:
			case HiveParser.KW_CLUSTERSTATUS:
			case HiveParser.KW_UTC:
			case HiveParser.KW_UTCTIMESTAMP:
			case HiveParser.KW_LONG:
			case HiveParser.KW_PLUS:
			case HiveParser.KW_VIEW:
			case HiveParser.KW_VIEWS:
			case HiveParser.KW_DATABASES:
			case HiveParser.KW_MATERIALIZED:
			case HiveParser.KW_SCHEMA:
			case HiveParser.KW_SCHEMAS:
			case HiveParser.KW_SSL:
			case HiveParser.KW_UNDO:
			case HiveParser.KW_LOCK:
			case HiveParser.KW_LOCKS:
			case HiveParser.KW_UNLOCK:
			case HiveParser.KW_SHARED:
			case HiveParser.KW_EXCLUSIVE:
			case HiveParser.KW_UNSIGNED:
			case HiveParser.KW_WHILE:
			case HiveParser.KW_READ:
			case HiveParser.KW_PURGE:
			case HiveParser.KW_ANALYZE:
			case HiveParser.KW_BEFORE:
			case HiveParser.KW_CONTINUE:
			case HiveParser.KW_RECORDREADER:
			case HiveParser.KW_RECORDWRITER:
			case HiveParser.KW_SEMI:
			case HiveParser.KW_TOUCH:
			case HiveParser.KW_ARCHIVE:
			case HiveParser.KW_UNARCHIVE:
			case HiveParser.KW_COMPUTE:
			case HiveParser.KW_STATISTICS:
			case HiveParser.KW_USE:
			case HiveParser.KW_OPTION:
			case HiveParser.KW_CONCATENATE:
			case HiveParser.KW_SHOW_DATABASE:
			case HiveParser.KW_RESTRICT:
			case HiveParser.KW_CASCADE:
			case HiveParser.KW_SKEWED:
			case HiveParser.KW_DIRECTORIES:
			case HiveParser.KW_SETS:
			case HiveParser.KW_NOSCAN:
			case HiveParser.KW_ROLE:
			case HiveParser.KW_ROLES:
			case HiveParser.KW_URI:
			case HiveParser.KW_SERVER:
			case HiveParser.KW_ADMIN:
			case HiveParser.KW_OWNER:
			case HiveParser.KW_PRINCIPALS:
			case HiveParser.KW_COMPACT:
			case HiveParser.KW_COMPACTIONS:
			case HiveParser.KW_TRANSACTIONS:
			case HiveParser.KW_REWRITE:
			case HiveParser.KW_REOPTIMIZATION:
			case HiveParser.KW_RELOAD:
			case HiveParser.KW_YEAR:
			case HiveParser.KW_QUERY:
			case HiveParser.KW_QUARTER:
			case HiveParser.KW_MONTH:
			case HiveParser.KW_WEEK:
			case HiveParser.KW_DAY:
			case HiveParser.KW_DOW:
			case HiveParser.KW_HOUR:
			case HiveParser.KW_MINUTE:
			case HiveParser.KW_SECOND:
			case HiveParser.KW_TRANSACTION:
			case HiveParser.KW_WORK:
			case HiveParser.KW_WRITE:
			case HiveParser.KW_ISOLATION:
			case HiveParser.KW_LEVEL:
			case HiveParser.KW_SNAPSHOT:
			case HiveParser.KW_AUTOCOMMIT:
			case HiveParser.KW_CACHE:
			case HiveParser.KW_ENFORCED:
			case HiveParser.KW_VALIDATE:
			case HiveParser.KW_NOVALIDATE:
			case HiveParser.KW_RELY:
			case HiveParser.KW_NORELY:
			case HiveParser.KW_KEY:
			case HiveParser.KW_ABORT:
			case HiveParser.KW_MATCHED:
			case HiveParser.KW_REPL:
			case HiveParser.KW_DUMP:
			case HiveParser.KW_STATUS:
			case HiveParser.KW_VECTORIZATION:
			case HiveParser.KW_SUMMARY:
			case HiveParser.KW_OPERATOR:
			case HiveParser.KW_EXPRESSION:
			case HiveParser.KW_DETAIL:
			case HiveParser.KW_WAIT:
			case HiveParser.KW_RESOURCE:
			case HiveParser.KW_PLAN:
			case HiveParser.KW_QUERY_PARALLELISM:
			case HiveParser.KW_PLANS:
			case HiveParser.KW_ACTIVATE:
			case HiveParser.KW_DEFAULT:
			case HiveParser.KW_CHECK:
			case HiveParser.KW_POOL:
			case HiveParser.KW_MOVE:
			case HiveParser.KW_DO:
			case HiveParser.KW_ALLOC_FRACTION:
			case HiveParser.KW_SCHEDULING_POLICY:
			case HiveParser.KW_PATH:
			case HiveParser.KW_MAPPING:
			case HiveParser.KW_WORKLOAD:
			case HiveParser.KW_MANAGEMENT:
			case HiveParser.KW_ACTIVE:
			case HiveParser.KW_UNMANAGED:
			case HiveParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4069;
				this.identifier();
				}
				break;
			case HiveParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4070;
				this.match(HiveParser.QuotedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonReserved(): NonReservedContext {
		let _localctx: NonReservedContext = new NonReservedContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, HiveParser.RULE_nonReserved);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4073;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveParser.KW_ASC) | (1 << HiveParser.KW_DESC) | (1 << HiveParser.KW_NULLS) | (1 << HiveParser.KW_LAST) | (1 << HiveParser.KW_OVERWRITE))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (HiveParser.KW_PARTITIONS - 36)) | (1 << (HiveParser.KW_TABLES - 36)) | (1 << (HiveParser.KW_COLUMNS - 36)) | (1 << (HiveParser.KW_INDEX - 36)) | (1 << (HiveParser.KW_INDEXES - 36)) | (1 << (HiveParser.KW_REBUILD - 36)) | (1 << (HiveParser.KW_FUNCTIONS - 36)) | (1 << (HiveParser.KW_SHOW - 36)) | (1 << (HiveParser.KW_MSCK - 36)) | (1 << (HiveParser.KW_REPAIR - 36)) | (1 << (HiveParser.KW_DIRECTORY - 36)) | (1 << (HiveParser.KW_CLUSTER - 36)) | (1 << (HiveParser.KW_DISTRIBUTE - 36)) | (1 << (HiveParser.KW_SORT - 36)) | (1 << (HiveParser.KW_LOAD - 36)) | (1 << (HiveParser.KW_EXPORT - 36)) | (1 << (HiveParser.KW_REPLICATION - 36)) | (1 << (HiveParser.KW_METADATA - 36)) | (1 << (HiveParser.KW_DATA - 36)) | (1 << (HiveParser.KW_INPATH - 36)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (HiveParser.KW_CHANGE - 68)) | (1 << (HiveParser.KW_FIRST - 68)) | (1 << (HiveParser.KW_AFTER - 68)) | (1 << (HiveParser.KW_RENAME - 68)) | (1 << (HiveParser.KW_COMMENT - 68)) | (1 << (HiveParser.KW_TINYINT - 68)) | (1 << (HiveParser.KW_DATETIME - 68)) | (1 << (HiveParser.KW_ZONE - 68)) | (1 << (HiveParser.KW_STRING - 68)) | (1 << (HiveParser.KW_STRUCT - 68)) | (1 << (HiveParser.KW_UNIONTYPE - 68)))) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (HiveParser.KW_PARTITIONED - 101)) | (1 << (HiveParser.KW_CLUSTERED - 101)) | (1 << (HiveParser.KW_SORTED - 101)) | (1 << (HiveParser.KW_BUCKETS - 101)) | (1 << (HiveParser.KW_FORMAT - 101)) | (1 << (HiveParser.KW_DELIMITED - 101)) | (1 << (HiveParser.KW_FIELDS - 101)) | (1 << (HiveParser.KW_TERMINATED - 101)) | (1 << (HiveParser.KW_ESCAPED - 101)) | (1 << (HiveParser.KW_COLLECTION - 101)) | (1 << (HiveParser.KW_ITEMS - 101)) | (1 << (HiveParser.KW_KEYS - 101)) | (1 << (HiveParser.KW_KEY_TYPE - 101)) | (1 << (HiveParser.KW_KILL - 101)) | (1 << (HiveParser.KW_LINES - 101)) | (1 << (HiveParser.KW_STORED - 101)) | (1 << (HiveParser.KW_FILEFORMAT - 101)) | (1 << (HiveParser.KW_INPUTFORMAT - 101)) | (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) | (1 << (HiveParser.KW_INPUTDRIVER - 101)) | (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) | (1 << (HiveParser.KW_ENABLE - 101)) | (1 << (HiveParser.KW_DISABLE - 101)) | (1 << (HiveParser.KW_LOCATION - 101)) | (1 << (HiveParser.KW_BUCKET - 101)))) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & ((1 << (HiveParser.KW_ADD - 134)) | (1 << (HiveParser.KW_REPLACE - 134)) | (1 << (HiveParser.KW_TEMPORARY - 134)) | (1 << (HiveParser.KW_FILE - 134)) | (1 << (HiveParser.KW_JAR - 134)) | (1 << (HiveParser.KW_EXPLAIN - 134)) | (1 << (HiveParser.KW_FORMATTED - 134)) | (1 << (HiveParser.KW_DEPENDENCY - 134)) | (1 << (HiveParser.KW_LOGICAL - 134)) | (1 << (HiveParser.KW_SERDE - 134)) | (1 << (HiveParser.KW_DEFERRED - 134)) | (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) | (1 << (HiveParser.KW_DBPROPERTIES - 134)) | (1 << (HiveParser.KW_LIMIT - 134)) | (1 << (HiveParser.KW_OFFSET - 134)) | (1 << (HiveParser.KW_UNSET - 134)) | (1 << (HiveParser.KW_TBLPROPERTIES - 134)) | (1 << (HiveParser.KW_IDXPROPERTIES - 134)) | (1 << (HiveParser.KW_VALUE_TYPE - 134)) | (1 << (HiveParser.KW_ELEM_TYPE - 134)) | (1 << (HiveParser.KW_DEFINED - 134)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (HiveParser.KW_MAPJOIN - 167)) | (1 << (HiveParser.KW_STREAMTABLE - 167)) | (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) | (1 << (HiveParser.KW_UTC - 167)) | (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) | (1 << (HiveParser.KW_LONG - 167)) | (1 << (HiveParser.KW_PLUS - 167)) | (1 << (HiveParser.KW_VIEW - 167)) | (1 << (HiveParser.KW_VIEWS - 167)) | (1 << (HiveParser.KW_DATABASES - 167)) | (1 << (HiveParser.KW_MATERIALIZED - 167)) | (1 << (HiveParser.KW_SCHEMA - 167)) | (1 << (HiveParser.KW_SCHEMAS - 167)) | (1 << (HiveParser.KW_SSL - 167)) | (1 << (HiveParser.KW_UNDO - 167)) | (1 << (HiveParser.KW_LOCK - 167)) | (1 << (HiveParser.KW_LOCKS - 167)) | (1 << (HiveParser.KW_UNLOCK - 167)) | (1 << (HiveParser.KW_SHARED - 167)) | (1 << (HiveParser.KW_EXCLUSIVE - 167)) | (1 << (HiveParser.KW_UNSIGNED - 167)) | (1 << (HiveParser.KW_WHILE - 167)) | (1 << (HiveParser.KW_READ - 167)))) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (HiveParser.KW_PURGE - 200)) | (1 << (HiveParser.KW_ANALYZE - 200)) | (1 << (HiveParser.KW_BEFORE - 200)) | (1 << (HiveParser.KW_CONTINUE - 200)) | (1 << (HiveParser.KW_RECORDREADER - 200)) | (1 << (HiveParser.KW_RECORDWRITER - 200)) | (1 << (HiveParser.KW_SEMI - 200)) | (1 << (HiveParser.KW_TOUCH - 200)) | (1 << (HiveParser.KW_ARCHIVE - 200)) | (1 << (HiveParser.KW_UNARCHIVE - 200)) | (1 << (HiveParser.KW_COMPUTE - 200)) | (1 << (HiveParser.KW_STATISTICS - 200)) | (1 << (HiveParser.KW_USE - 200)) | (1 << (HiveParser.KW_OPTION - 200)) | (1 << (HiveParser.KW_CONCATENATE - 200)) | (1 << (HiveParser.KW_SHOW_DATABASE - 200)) | (1 << (HiveParser.KW_RESTRICT - 200)) | (1 << (HiveParser.KW_CASCADE - 200)) | (1 << (HiveParser.KW_SKEWED - 200)) | (1 << (HiveParser.KW_DIRECTORIES - 200)))) !== 0) || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (HiveParser.KW_SETS - 243)) | (1 << (HiveParser.KW_NOSCAN - 243)) | (1 << (HiveParser.KW_ROLE - 243)) | (1 << (HiveParser.KW_ROLES - 243)) | (1 << (HiveParser.KW_URI - 243)) | (1 << (HiveParser.KW_SERVER - 243)) | (1 << (HiveParser.KW_ADMIN - 243)) | (1 << (HiveParser.KW_OWNER - 243)) | (1 << (HiveParser.KW_PRINCIPALS - 243)) | (1 << (HiveParser.KW_COMPACT - 243)) | (1 << (HiveParser.KW_COMPACTIONS - 243)) | (1 << (HiveParser.KW_TRANSACTIONS - 243)) | (1 << (HiveParser.KW_REWRITE - 243)) | (1 << (HiveParser.KW_REOPTIMIZATION - 243)) | (1 << (HiveParser.KW_RELOAD - 243)) | (1 << (HiveParser.KW_YEAR - 243)) | (1 << (HiveParser.KW_QUERY - 243)) | (1 << (HiveParser.KW_QUARTER - 243)) | (1 << (HiveParser.KW_MONTH - 243)) | (1 << (HiveParser.KW_WEEK - 243)) | (1 << (HiveParser.KW_DAY - 243)) | (1 << (HiveParser.KW_DOW - 243)) | (1 << (HiveParser.KW_HOUR - 243)) | (1 << (HiveParser.KW_MINUTE - 243)) | (1 << (HiveParser.KW_SECOND - 243)))) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & ((1 << (HiveParser.KW_TRANSACTION - 276)) | (1 << (HiveParser.KW_WORK - 276)) | (1 << (HiveParser.KW_WRITE - 276)) | (1 << (HiveParser.KW_ISOLATION - 276)) | (1 << (HiveParser.KW_LEVEL - 276)) | (1 << (HiveParser.KW_SNAPSHOT - 276)) | (1 << (HiveParser.KW_AUTOCOMMIT - 276)) | (1 << (HiveParser.KW_CACHE - 276)) | (1 << (HiveParser.KW_ENFORCED - 276)) | (1 << (HiveParser.KW_VALIDATE - 276)) | (1 << (HiveParser.KW_NOVALIDATE - 276)) | (1 << (HiveParser.KW_RELY - 276)) | (1 << (HiveParser.KW_NORELY - 276)) | (1 << (HiveParser.KW_KEY - 276)) | (1 << (HiveParser.KW_ABORT - 276)) | (1 << (HiveParser.KW_MATCHED - 276)) | (1 << (HiveParser.KW_REPL - 276)) | (1 << (HiveParser.KW_DUMP - 276)) | (1 << (HiveParser.KW_STATUS - 276)) | (1 << (HiveParser.KW_VECTORIZATION - 276)) | (1 << (HiveParser.KW_SUMMARY - 276)))) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & ((1 << (HiveParser.KW_OPERATOR - 308)) | (1 << (HiveParser.KW_EXPRESSION - 308)) | (1 << (HiveParser.KW_DETAIL - 308)) | (1 << (HiveParser.KW_WAIT - 308)) | (1 << (HiveParser.KW_RESOURCE - 308)) | (1 << (HiveParser.KW_PLAN - 308)) | (1 << (HiveParser.KW_QUERY_PARALLELISM - 308)) | (1 << (HiveParser.KW_PLANS - 308)) | (1 << (HiveParser.KW_ACTIVATE - 308)) | (1 << (HiveParser.KW_DEFAULT - 308)) | (1 << (HiveParser.KW_CHECK - 308)) | (1 << (HiveParser.KW_POOL - 308)) | (1 << (HiveParser.KW_MOVE - 308)) | (1 << (HiveParser.KW_DO - 308)) | (1 << (HiveParser.KW_ALLOC_FRACTION - 308)) | (1 << (HiveParser.KW_SCHEDULING_POLICY - 308)) | (1 << (HiveParser.KW_PATH - 308)) | (1 << (HiveParser.KW_MAPPING - 308)) | (1 << (HiveParser.KW_WORKLOAD - 308)) | (1 << (HiveParser.KW_MANAGEMENT - 308)) | (1 << (HiveParser.KW_ACTIVE - 308)) | (1 << (HiveParser.KW_UNMANAGED - 308)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext {
		let _localctx: Sql11ReservedKeywordsUsedAsFunctionNameContext = new Sql11ReservedKeywordsUsedAsFunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4075;
			_la = this._input.LA(1);
			if (!(_la === HiveParser.KW_IF || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (HiveParser.KW_BOOLEAN - 77)) | (1 << (HiveParser.KW_SMALLINT - 77)) | (1 << (HiveParser.KW_INT - 77)) | (1 << (HiveParser.KW_BIGINT - 77)) | (1 << (HiveParser.KW_FLOAT - 77)) | (1 << (HiveParser.KW_DOUBLE - 77)) | (1 << (HiveParser.KW_DATE - 77)) | (1 << (HiveParser.KW_TIMESTAMP - 77)) | (1 << (HiveParser.KW_ARRAY - 77)) | (1 << (HiveParser.KW_MAP - 77)))) !== 0) || _la === HiveParser.KW_BINARY || _la === HiveParser.KW_CURRENT_DATE || _la === HiveParser.KW_CURRENT_TIMESTAMP || _la === HiveParser.KW_GROUPING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 351:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 15);

		case 1:
			return this.precpred(this._ctx, 14);

		case 2:
			return this.precpred(this._ctx, 13);

		case 3:
			return this.precpred(this._ctx, 12);

		case 4:
			return this.precpred(this._ctx, 11);

		case 5:
			return this.precpred(this._ctx, 10);

		case 6:
			return this.precpred(this._ctx, 9);

		case 7:
			return this.precpred(this._ctx, 8);

		case 8:
			return this.precpred(this._ctx, 5);

		case 9:
			return this.precpred(this._ctx, 2);

		case 10:
			return this.precpred(this._ctx, 16);

		case 11:
			return this.precpred(this._ctx, 7);

		case 12:
			return this.precpred(this._ctx, 6);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 8;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0179\u0FF0\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x03" +
		"\x02\x03\x02\x03\x02\x07\x02\u02E8\n\x02\f\x02\x0E\x02\u02EB\v\x02\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x05\x03\u02F1\n\x03\x03\x04\x03\x04\x05\x04" +
		"\u02F5\n\x04\x03\x05\x03\x05\x07\x05\u02F9\n\x05\f\x05\x0E\x05\u02FC\v" +
		"\x05\x03\x05\x03\x05\x03\x05\x05\x05\u0301\n\x05\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\u030C\n\x06\x03" +
		"\x06\x05\x06\u030F\n\x06\x05\x06\u0311\n\x06\x03\x07\x03\x07\x03\b\x03" +
		"\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x05\t\u0323\n\t\x03\n\x03\n\x03\n\x05\n\u0328\n\n\x03\n\x03\n\x03\n" +
		"\x05\n\u032D\n\n\x03\n\x03\n\x03\n\x03\n\x05\n\u0333\n\n\x03\v\x03\v\x05" +
		"\v\u0337\n\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x05\f\u0344\n\f\x03\r\x03\r\x05\r\u0348\n\r\x03\r\x03\r\x05\r" +
		"\u034C\n\r\x03\r\x03\r\x03\r\x05\r\u0351\n\r\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x05\x0E\u0358\n\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E" +
		"\u035E\n\x0E\x03\x0E\x03\x0E\x05\x0E\u0362\n\x0E\x05\x0E\u0364\n\x0E\x03" +
		"\x0E\x03\x0E\x05\x0E\u0368\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x05\x0F\u036F\n\x0F\x05\x0F\u0371\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x05\x0F\u0377\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x11\x07\x11\u0380\n\x11\f\x11\x0E\x11\u0383\v\x11\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x05\x12\u038A\n\x12\x03\x12\x03\x12\x05\x12\u038E" +
		"\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u03B8\n\x13\x03\x14\x03" +
		"\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03" +
		"\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u03D3\n\x1B\x03\x1B" +
		"\x03\x1B\x05\x1B\u03D7\n\x1B\x03\x1B\x05\x1B\u03DA\n\x1B\x03\x1B\x03\x1B" +
		"\x03\x1B\x05\x1B\u03DF\n\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x07\x1E\u03EB\n\x1E\f\x1E\x0E\x1E" +
		"\u03EE\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x05 \u03F6\n \x03" +
		" \x03 \x05 \u03FA\n \x03!\x03!\x03!\x03\"\x03\"\x05\"\u0401\n\"\x03\"" +
		"\x05\"\u0404\n\"\x03\"\x03\"\x05\"\u0408\n\"\x03\"\x03\"\x03\"\x03\"\x05" +
		"\"\u040E\n\"\x03\"\x05\"\u0411\n\"\x03\"\x05\"\u0414\n\"\x03\"\x05\"\u0417" +
		"\n\"\x03\"\x03\"\x03\"\x03\"\x05\"\u041D\n\"\x03\"\x05\"\u0420\n\"\x03" +
		"\"\x05\"\u0423\n\"\x03\"\x05\"\u0426\n\"\x03\"\x05\"\u0429\n\"\x03\"\x05" +
		"\"\u042C\n\"\x03\"\x05\"\u042F\n\"\x03\"\x05\"\u0432\n\"\x03\"\x05\"\u0435" +
		"\n\"\x03\"\x03\"\x05\"\u0439\n\"\x05\"\u043B\n\"\x03#\x03#\x03#\x03#\x03" +
		"#\x03#\x03#\x03#\x05#\u0445\n#\x03$\x03$\x03$\x05$\u044A\n$\x03$\x03$" +
		"\x05$\u044E\n$\x03$\x05$\u0451\n$\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03" +
		"%\x03%\x05%\u045C\n%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03" +
		"%\x03%\x03%\x03%\x03%\x05%\u046C\n%\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x03&\x03&\x05&\u047B\n&\x03&\x03&\x05&\u047F\n&" +
		"\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x05\'\u048E\n\'\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)" +
		"\x03)\x03)\x05)\u049B\n)\x03*\x03*\x05*\u049F\n*\x03+\x03+\x03+\x05+\u04A4" +
		"\n+\x03,\x03,\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03.\x03.\x03.\x03" +
		".\x03.\x03/\x03/\x03/\x03/\x030\x030\x030\x030\x030\x030\x050\u04BF\n" +
		"0\x031\x031\x031\x051\u04C4\n1\x032\x032\x032\x032\x033\x033\x053\u04CC" +
		"\n3\x033\x033\x033\x033\x053\u04D2\n3\x033\x033\x053\u04D6\n3\x033\x05" +
		"3\u04D9\n3\x033\x053\u04DC\n3\x034\x034\x034\x034\x054\u04E2\n4\x034\x03" +
		"4\x034\x034\x034\x054\u04E9\n4\x035\x035\x035\x035\x035\x036\x036\x03" +
		"6\x056\u04F3\n6\x037\x037\x057\u04F7\n7\x037\x067\u04FA\n7\r7\x0E7\u04FB" +
		"\x038\x038\x058\u0500\n8\x039\x039\x079\u0504\n9\f9\x0E9\u0507\v9\x03" +
		":\x03:\x07:\u050B\n:\f:\x0E:\u050E\v:\x03;\x03;\x07;\u0512\n;\f;\x0E;" +
		"\u0515\v;\x03<\x03<\x03<\x03=\x03=\x05=\u051C\n=\x03=\x03=\x03=\x07=\u0521" +
		"\n=\f=\x0E=\u0524\v=\x03=\x05=\u0527\n=\x03=\x05=\u052A\n=\x03>\x03>\x03" +
		">\x03>\x03>\x03>\x05>\u0532\n>\x03>\x05>\u0535\n>\x03?\x03?\x03?\x03?" +
		"\x03?\x03?\x05?\u053D\n?\x03?\x05?\u0540\n?\x03@\x03@\x05@\u0544\n@\x03" +
		"A\x03A\x03B\x03B\x03B\x03B\x03B\x03B\x05B\u054E\nB\x03B\x03B\x03B\x05" +
		"B\u0553\nB\x03C\x03C\x03C\x03C\x05C\u0559\nC\x03C\x03C\x03D\x03D\x03D" +
		"\x03D\x03E\x03E\x03E\x03E\x03E\x05E\u0566\nE\x03F\x03F\x03F\x03F\x03F" +
		"\x03G\x03G\x03G\x03G\x03H\x03H\x03H\x07H\u0574\nH\fH\x0EH\u0577\vH\x03" +
		"I\x03I\x03I\x03I\x03J\x03J\x03J\x03J\x03K\x03K\x03K\x03K\x03K\x05K\u0586" +
		"\nK\x03L\x03L\x03L\x03L\x03L\x03L\x03M\x03M\x03M\x03M\x03N\x03N\x03N\x03" +
		"N\x05N\u0596\nN\x03N\x03N\x03N\x03N\x03N\x05N\u059D\nN\x03O\x03O\x03P" +
		"\x03P\x03P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
		"Q\x03Q\x05Q\u05B1\nQ\x03Q\x03Q\x05Q\u05B5\nQ\x03Q\x03Q\x03Q\x05Q\u05BA" +
		"\nQ\x03Q\x03Q\x03Q\x05Q\u05BF\nQ\x03Q\x05Q\u05C2\nQ\x03Q\x05Q\u05C5\n" +
		"Q\x03Q\x03Q\x05Q\u05C9\nQ\x03Q\x05Q\u05CC\nQ\x03Q\x05Q\u05CF\nQ\x03R\x03" +
		"R\x03R\x07R\u05D4\nR\fR\x0ER\u05D7\vR\x03S\x03S\x03S\x03S\x03S\x03S\x03" +
		"T\x03T\x05T\u05E1\nT\x03U\x03U\x03U\x03V\x03V\x03V\x05V\u05E9\nV\x03V" +
		"\x03V\x03V\x03V\x05V\u05EF\nV\x03W\x03W\x03W\x03W\x03X\x03X\x03X\x03X" +
		"\x03X\x03X\x03X\x03X\x03X\x03X\x05X\u05FF\nX\x03X\x05X\u0602\nX\x03Y\x03" +
		"Y\x03Y\x03Y\x03Y\x03Z\x03Z\x03Z\x05Z\u060C\nZ\x03Z\x03Z\x03Z\x03Z\x03" +
		"Z\x03Z\x05Z\u0614\nZ\x07Z\u0616\nZ\fZ\x0EZ\u0619\vZ\x05Z\u061B\nZ\x03" +
		"[\x03[\x05[\u061F\n[\x03\\\x03\\\x05\\\u0623\n\\\x03\\\x05\\\u0626\n\\" +
		"\x03]\x03]\x03]\x05]\u062B\n]\x03]\x03]\x03]\x05]\u0630\n]\x03]\x03]\x03" +
		"]\x03]\x05]\u0636\n]\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x05" +
		"^\u0641\n^\x05^\u0643\n^\x03^\x03^\x05^\u0647\n^\x03_\x03_\x03_\x03_\x05" +
		"_\u064D\n_\x03_\x03_\x03_\x03_\x05_\u0653\n_\x03_\x03_\x03_\x05_\u0658" +
		"\n_\x03_\x03_\x03_\x03_\x05_\u065E\n_\x03_\x03_\x03_\x05_\u0663\n_\x03" +
		"_\x03_\x03_\x03_\x03_\x05_\u066A\n_\x03_\x03_\x03_\x05_\u066F\n_\x03_" +
		"\x03_\x03_\x03_\x03_\x03_\x05_\u0677\n_\x03_\x03_\x03_\x05_\u067C\n_\x03" +
		"_\x03_\x03_\x03_\x03_\x05_\u0683\n_\x03_\x03_\x03_\x03_\x05_\u0689\n_" +
		"\x03_\x03_\x03_\x03_\x03_\x03_\x05_\u0691\n_\x03_\x03_\x03_\x03_\x03_" +
		"\x05_\u0698\n_\x03_\x03_\x03_\x05_\u069D\n_\x03_\x03_\x03_\x03_\x03_\x03" +
		"_\x05_\u06A5\n_\x03_\x03_\x03_\x03_\x03_\x05_\u06AC\n_\x03_\x05_\u06AF" +
		"\n_\x03_\x05_\u06B2\n_\x05_\u06B4\n_\x03_\x03_\x03_\x03_\x03_\x03_\x03" +
		"_\x03_\x03_\x03_\x03_\x03_\x05_\u06C2\n_\x05_\u06C4\n_\x03`\x03`\x03`" +
		"\x03`\x05`\u06CA\n`\x03`\x03`\x03a\x03a\x03a\x03a\x03a\x03b\x03b\x03c" +
		"\x03c\x03c\x03c\x05c\u06D9\nc\x03d\x03d\x03d\x03d\x03e\x03e\x03e\x03e" +
		"\x03f\x03f\x03f\x03f\x03g\x03g\x03g\x05g\u06EA\ng\x03g\x03g\x03g\x05g" +
		"\u06EF\ng\x03h\x03h\x05h\u06F3\nh\x03h\x03h\x05h\u06F7\nh\x03h\x03h\x03" +
		"h\x03i\x03i\x05i\u06FE\ni\x03i\x03i\x03i\x07i\u0703\ni\fi\x0Ei\u0706\v" +
		"i\x03i\x03i\x03i\x05i\u070B\ni\x03j\x03j\x05j\u070F\nj\x03j\x05j\u0712" +
		"\nj\x03j\x03j\x03j\x07j\u0717\nj\fj\x0Ej\u071A\vj\x03j\x03j\x03j\x03k" +
		"\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x03m\x03m\x03m\x03m\x03n\x03n\x03" +
		"n\x03n\x03n\x05n\u0730\nn\x03o\x03o\x03o\x05o\u0735\no\x03o\x03o\x05o" +
		"\u0739\no\x03p\x03p\x03p\x03p\x03q\x03q\x05q\u0741\nq\x03r\x03r\x03r\x03" +
		"s\x03s\x03s\x05s\u0749\ns\x03s\x03s\x05s\u074D\ns\x03s\x03s\x03s\x03s" +
		"\x05s\u0753\ns\x03t\x03t\x03t\x05t\u0758\nt\x03t\x03t\x03t\x03t\x03t\x05" +
		"t\u075F\nt\x03t\x05t\u0762\nt\x03t\x03t\x03t\x03t\x05t\u0768\nt\x03u\x03" +
		"u\x03u\x07u\u076D\nu\fu\x0Eu\u0770\vu\x03v\x03v\x03v\x03v\x03v\x05v\u0777" +
		"\nv\x03w\x03w\x03x\x03x\x03x\x07x\u077E\nx\fx\x0Ex\u0781\vx\x03y\x03y" +
		"\x03y\x03y\x03y\x03y\x05y\u0789\ny\x03z\x03z\x03z\x03z\x03{\x03{\x03{" +
		"\x03{\x03|\x03|\x03|\x03|\x03}\x03}\x03}\x03}\x03~\x03~\x05~\u079D\n~" +
		"\x03~\x03~\x03~\x03~\x05~\u07A3\n~\x03~\x05~\u07A6\n~\x05~\u07A8\n~\x03" +
		"\x7F\x03\x7F\x03\x7F\x07\x7F\u07AD\n\x7F\f\x7F\x0E\x7F\u07B0\v\x7F\x03" +
		"\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03\x82\x03\x82\x05\x82\u07B9\n\x82" +
		"\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x05\x82\u07C1\n\x82\x03" +
		"\x83\x03\x83\x05\x83\u07C5\n\x83\x03\x83\x03\x83\x05\x83\u07C9\n\x83\x03" +
		"\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
		"\x85\x03\x85\x05\x85\u07D6\n\x85\x03\x85\x03\x85\x03\x85\x03\x86\x03\x86" +
		"\x03\x86\x03\x86\x05\x86\u07DF\n\x86\x03\x86\x03\x86\x03\x87\x03\x87\x05" +
		"\x87\u07E5\n\x87\x03\x87\x03\x87\x05\x87\u07E9\n\x87\x03\x87\x03\x87\x03" +
		"\x87\x03\x87\x03\x87\x05\x87\u07F0\n\x87\x03\x87\x05\x87\u07F3\n\x87\x03" +
		"\x87\x05\x87\u07F6\n\x87\x03\x87\x05\x87\u07F9\n\x87\x03\x87\x03\x87\x03" +
		"\x87\x03\x88\x03\x88\x03\x88\x03\x88\x05\x88\u0802\n\x88\x03\x88\x03\x88" +
		"\x05\x88\u0806\n\x88\x03\x88\x05\x88\u0809\n\x88\x03\x88\x05\x88\u080C" +
		"\n\x88\x03\x88\x05\x88\u080F\n\x88\x03\x88\x05\x88\u0812\n\x88\x03\x88" +
		"\x05\x88\u0815\n\x88\x03\x88\x03\x88\x03\x88\x03\x89\x03\x89\x03\x89\x03" +
		"\x89\x03\x89\x03\x89\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0823\n\x8A\x03\x8A" +
		"\x03\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u082B\n\x8B\x03\x8B\x03" +
		"\x8B\x03\x8C\x03\x8C\x05\x8C\u0831\n\x8C\x03\x8D\x03\x8D\x05\x8D\u0835" +
		"\n\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F" +
		"\x03\x8F\x07\x8F\u0840\n\x8F\f\x8F\x0E\x8F\u0843\v\x8F\x03\x8F\x03\x8F" +
		"\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90" +
		"\x03\x90\x03\x90\x05\x90\u0852\n\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03" +
		"\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
		"\x91\x05\x91\u0862\n\x91\x03\x92\x03\x92\x05\x92\u0866\n\x92\x03\x93\x03" +
		"\x93\x03\x93\x03\x94\x03\x94\x03\x94\x03\x95\x03\x95\x03\x95\x03\x95\x03" +
		"\x95\x03\x95\x03\x95\x05\x95\u0875\n\x95\x03\x96\x03\x96\x03\x96\x03\x96" +
		"\x05\x96\u087B\n\x96\x03\x96\x05\x96\u087E\n\x96\x03\x96\x05\x96\u0881" +
		"\n\x96\x03\x96\x05\x96\u0884\n\x96\x03\x96\x05\x96\u0887\n\x96\x03\x97" +
		"\x03\x97\x05\x97\u088B\n\x97\x03\x98\x03\x98\x03\x98\x03\x99\x03\x99\x03" +
		"\x99\x03\x99\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u0897\n\x9A\f\x9A\x0E\x9A" +
		"\u089A\v\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u089F\n\x9A\f\x9A\x0E\x9A" +
		"\u08A2\v\x9A\x05\x9A\u08A4\n\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9C" +
		"\x03\x9C\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x05\x9D" +
		"\u08B3\n\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9F\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03" +
		"\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA2\x03" +
		"\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u08D5\n\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u08DD\n\xA2\x03" +
		"\xA2\x03\xA2\x03\xA2\x05\xA2\u08E2\n\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA4" +
		"\x03\xA4\x03\xA4\x07\xA4\u08EA\n\xA4\f\xA4\x0E\xA4\u08ED\v\xA4\x03\xA5" +
		"\x03\xA5\x03\xA5\x07\xA5\u08F2\n\xA5\f\xA5\x0E\xA5\u08F5\v\xA5\x03\xA6" +
		"\x03\xA6\x03\xA6\x07\xA6\u08FA\n\xA6\f\xA6\x0E\xA6\u08FD\v\xA6\x03\xA7" +
		"\x03\xA7\x03\xA7\x07\xA7\u0902\n\xA7\f\xA7\x0E\xA7\u0905\v\xA7\x03\xA8" +
		"\x03\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x05\xA9\u090F" +
		"\n\xA9\x07\xA9\u0911\n\xA9\f\xA9\x0E\xA9\u0914\v\xA9\x03\xAA\x03\xAA\x03" +
		"\xAA\x07\xAA\u0919\n\xAA\f\xAA\x0E\xAA\u091C\v\xAA\x03\xAB\x03\xAB\x03" +
		"\xAB\x03\xAB\x03\xAC\x03\xAC\x05\xAC\u0924\n\xAC\x03\xAC\x05\xAC\u0927" +
		"\n\xAC\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x03\xAF\x05\xAF" +
		"\u0930\n\xAF\x03\xB0\x03\xB0\x05\xB0\u0934\n\xB0\x05\xB0\u0936\n\xB0\x03" +
		"\xB1\x03\xB1\x05\xB1\u093A\n\xB1\x03\xB1\x03\xB1\x05\xB1";
	private static readonly _serializedATNSegment1: string =
		"\u093E\n\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u0944\n\xB2\x03\xB3" +
		"\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x05\xB4\u094B\n\xB4\x03\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u0954\n\xB4\x03\xB5\x03\xB5" +
		"\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u095F" +
		"\n\xB5\x03\xB6\x03\xB6\x05\xB6\u0963\n\xB6\x03\xB7\x03\xB7\x03\xB7\x07" +
		"\xB7\u0968\n\xB7\f\xB7\x0E\xB7\u096B\v\xB7\x03\xB8\x03\xB8\x03\xB8\x03" +
		"\xB8\x03\xB9\x03\xB9\x03\xB9\x07\xB9\u0974\n\xB9\f\xB9\x0E\xB9\u0977\v" +
		"\xB9\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x05\xBB\u097D\n\xBB\x03\xBC\x03\xBC" +
		"\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u0985\n\xBD\x03\xBE\x03\xBE\x05" +
		"\xBE\u0989\n\xBE\x03\xBE\x05\xBE\u098C\n\xBE\x03\xBF\x03\xBF\x03\xBF\x07" +
		"\xBF\u0991\n\xBF\f\xBF\x0E\xBF\u0994\v\xBF\x03\xC0\x03\xC0\x03\xC0\x05" +
		"\xC0\u0999\n\xC0\x03\xC1\x03\xC1\x05\xC1\u099D\n\xC1\x03\xC1\x05\xC1\u09A0" +
		"\n\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x05\xC2\u09A6\n\xC2\x03\xC3\x03" +
		"\xC3\x05\xC3\u09AA\n\xC3\x03\xC4\x03\xC4\x05\xC4\u09AE\n\xC4\x03\xC5\x03" +
		"\xC5\x03\xC5\x05\xC5\u09B3\n\xC5\x03\xC5\x03\xC5\x05\xC5\u09B7\n\xC5\x03" +
		"\xC6\x03\xC6\x05\xC6\u09BB\n\xC6\x03\xC7\x03\xC7\x05\xC7\u09BF\n\xC7\x03" +
		"\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u09C7\n\xC7\x03\xC8" +
		"\x03\xC8\x05\xC8\u09CB\n\xC8\x03\xC8\x03\xC8\x05\xC8\u09CF\n\xC8\x03\xC9" +
		"\x03\xC9\x05\xC9\u09D3\n\xC9\x03\xCA\x03\xCA\x05\xCA\u09D7\n\xCA\x03\xCA" +
		"\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u09DF\n\xCA\x03\xCB\x03" +
		"\xCB\x05\xCB\u09E3\n\xCB\x03\xCB\x03\xCB\x05\xCB\u09E7\n\xCB\x03\xCC\x03" +
		"\xCC\x03\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u09F7\n\xCF\x03\xD0\x03\xD0\x03\xD1" +
		"\x03\xD1\x03\xD1\x07\xD1\u09FE\n\xD1\f\xD1\x0E\xD1\u0A01\v\xD1\x03\xD2" +
		"\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u0A08\n\xD2\x03\xD3\x03\xD3\x03" +
		"\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0A12\n\xD3\x03\xD3" +
		"\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3" +
		"\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0A24\n\xD3\x03" +
		"\xD3\x05\xD3\u0A27\n\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3" +
		"\x03\xD3\x03\xD3\x05\xD3\u0A31\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03" +
		"\xD4\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x03\xD6\x03" +
		"\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03" +
		"\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u0A4D\n\xD8\x03\xD8\x03\xD8\x03\xD8" +
		"\x03\xD8\x05\xD8\u0A53\n\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u0A59" +
		"\n\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u0A5F\n\xD8\x05\xD8\u0A61" +
		"\n\xD8\x03\xD9\x05\xD9\u0A64\n\xD9\x03\xD9\x03\xD9\x03\xDA\x03\xDA\x05" +
		"\xDA\u0A6A\n\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x07\xDB\u0A70\n\xDB\f" +
		"\xDB\x0E\xDB\u0A73\v\xDB\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u0A7F\n\xDD\f\xDD\x0E\xDD\u0A82" +
		"\v\xDD\x03\xDE\x03\xDE\x06\xDE\u0A86\n\xDE\r\xDE\x0E\xDE\u0A87\x03\xDF" +
		"\x03\xDF\x03\xDF\x05\xDF\u0A8D\n\xDF\x03\xDF\x05\xDF\u0A90\n\xDF\x03\xE0" +
		"\x03\xE0\x05\xE0\u0A94\n\xE0\x03\xE0\x05\xE0\u0A97\n\xE0\x03\xE0\x05\xE0" +
		"\u0A9A\n\xE0\x03\xE0\x05\xE0\u0A9D\n\xE0\x03\xE0\x05\xE0\u0AA0\n\xE0\x03" +
		"\xE0\x03\xE0\x03\xE0\x03\xE0\x05\xE0\u0AA6\n\xE0\x03\xE1\x03\xE1\x05\xE1" +
		"\u0AAA\n\xE1\x03\xE1\x05\xE1\u0AAD\n\xE1\x03\xE1\x05\xE1\u0AB0\n\xE1\x03" +
		"\xE1\x05\xE1\u0AB3\n\xE1\x03\xE1\x05\xE1\u0AB6\n\xE1\x03\xE1\x05\xE1\u0AB9" +
		"\n\xE1\x03\xE2\x03\xE2\x03\xE2\x06\xE2\u0ABE\n\xE2\r\xE2\x0E\xE2\u0ABF" +
		"\x03\xE3\x05\xE3\u0AC3\n\xE3\x03\xE3\x03\xE3\x03\xE4\x03\xE4\x03\xE4\x05" +
		"\xE4\u0ACA\n\xE4\x03\xE4\x05\xE4\u0ACD\n\xE4\x03\xE4\x05\xE4\u0AD0\n\xE4" +
		"\x03\xE4\x05\xE4\u0AD3\n\xE4\x03\xE4\x05\xE4\u0AD6\n\xE4\x03\xE4\x05\xE4" +
		"\u0AD9\n\xE4\x03\xE4\x05\xE4\u0ADC\n\xE4\x03\xE4\x05\xE4\u0ADF\n\xE4\x03" +
		"\xE4\x05\xE4\u0AE2\n\xE4\x03\xE4\x05\xE4\u0AE5\n\xE4\x03\xE4\x03\xE4\x05" +
		"\xE4\u0AE9\n\xE4\x03\xE4\x05\xE4\u0AEC\n\xE4\x03\xE4\x05\xE4\u0AEF\n\xE4" +
		"\x03\xE4\x05\xE4\u0AF2\n\xE4\x03\xE4\x05\xE4\u0AF5\n\xE4\x03\xE4\x05\xE4" +
		"\u0AF8\n\xE4\x03\xE4\x05\xE4\u0AFB\n\xE4\x03\xE4\x05\xE4\u0AFE\n\xE4\x03" +
		"\xE4\x05\xE4\u0B01\n\xE4\x03\xE4\x05\xE4\u0B04\n\xE4\x05\xE4\u0B06\n\xE4" +
		"\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x05\xE5\u0B0C\n\xE5\x03\xE5\x03\xE5\x03" +
		"\xE5\x05\xE5\u0B11\n\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x05\xE5" +
		"\u0B18\n\xE5\x05\xE5\u0B1A\n\xE5\x03\xE6\x05\xE6\u0B1D\n\xE6\x03\xE6\x03" +
		"\xE6\x03\xE6\x05\xE6\u0B22\n\xE6\x03\xE6\x05\xE6\u0B25\n\xE6\x03\xE6\x03" +
		"\xE6\x05\xE6\u0B29\n\xE6\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0B2E\n\xE7\x03" +
		"\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0B35\n\xE7\x03\xE8\x03\xE8" +
		"\x03\xE8\x03\xE8\x05\xE8\u0B3B\n\xE8\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03" +
		"\xEA\x03\xEA\x03\xEA\x03\xEA\x07\xEA\u0B45\n\xEA\f\xEA\x0E\xEA\u0B48\v" +
		"\xEA\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x05\xEB\u0B4E\n\xEB\x03\xEC\x03\xEC" +
		"\x03\xEC\x03\xEC\x05\xEC\u0B54\n\xEC\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x07\xED\u0B5B\n\xED\f\xED\x0E\xED\u0B5E\v\xED\x05\xED\u0B60\n\xED" +
		"\x03\xEE\x03\xEE\x05\xEE\u0B64\n\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x05" +
		"\xEF\u0B6A\n\xEF\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF1\x03\xF1\x03\xF2" +
		"\x03\xF2\x05\xF2\u0B74\n\xF2\x03\xF3\x03\xF3\x05\xF3\u0B78\n\xF3\x03\xF4" +
		"\x03\xF4\x03\xF4\x03\xF4\x03\xF5\x03\xF5\x03\xF5\x06\xF5\u0B81\n\xF5\r" +
		"\xF5\x0E\xF5\u0B82\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u0B89\n\xF6" +
		"\x03\xF6\x05\xF6\u0B8C\n\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03" +
		"\xF6\x03\xF7\x03\xF7\x07\xF7\u0B96\n\xF7\f\xF7\x0E\xF7\u0B99\v\xF7\x03" +
		"\xF7\x05\xF7\u0B9C\n\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8" +
		"\u0BA3\n\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF9\x03\xF9\x03" +
		"\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u0BB9\n\xFB\x03\xFC\x03\xFC\x03\xFC" +
		"\x06\xFC\u0BBE\n\xFC\r\xFC\x0E\xFC\u0BBF\x03\xFD\x03\xFD\x05\xFD\u0BC4" +
		"\n\xFD\x03\xFD\x05\xFD\u0BC7\n\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u0BCC" +
		"\n\xFD\x03\xFD\x05\xFD\u0BCF\n\xFD\x03\xFE\x03\xFE\x03\xFE\x07\xFE\u0BD4" +
		"\n\xFE\f\xFE\x0E\xFE\u0BD7\v\xFE\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x05\xFF" +
		"\u0BDD\n\xFF\x03\xFF\x05\xFF\u0BE0\n\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF" +
		"\x03\xFF\x03\xFF\x05\xFF\u0BE8\n\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x05" +
		"\xFF\u0BEE\n\xFF\x05\xFF\u0BF0\n\xFF\x05\xFF\u0BF2\n\xFF\x03\xFF\x05\xFF" +
		"\u0BF5\n\xFF\x03\xFF\x05\xFF\u0BF8\n\xFF\x03\u0100\x03\u0100\x03\u0100" +
		"\x05\u0100\u0BFD\n\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x07\u0100\u0C05\n\u0100\f\u0100\x0E\u0100\u0C08\v\u0100\x03" +
		"\u0100\x03\u0100\x05\u0100\u0C0C\n\u0100\x05\u0100\u0C0E\n\u0100\x03\u0101" +
		"\x03\u0101\x03\u0101\x03\u0101\x05\u0101\u0C14\n\u0101\x03\u0101\x05\u0101" +
		"\u0C17\n\u0101\x03\u0101\x05\u0101\u0C1A\n\u0101\x03\u0101\x03\u0101\x03" +
		"\u0101\x03\u0101\x03\u0101\x03\u0101\x05\u0101\u0C22\n\u0101\x03\u0101" +
		"\x03\u0101\x03\u0101\x03\u0101\x05\u0101\u0C28\n\u0101\x05\u0101\u0C2A" +
		"\n\u0101\x05\u0101\u0C2C\n\u0101\x03\u0101\x05\u0101\u0C2F\n\u0101\x03" +
		"\u0101\x05\u0101\u0C32\n\u0101\x03\u0102\x03\u0102\x05\u0102\u0C36\n\u0102" +
		"\x03\u0103\x03\u0103\x03\u0103\x07\u0103\u0C3B\n\u0103\f\u0103\x0E\u0103" +
		"\u0C3E\v\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x07\u0104\u0C44" +
		"\n\u0104\f\u0104\x0E\u0104\u0C47\v\u0104\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x03\u0106\x03\u0106\x03\u0106\x05\u0106\u0C50\n\u0106\x03\u0106" +
		"\x05\u0106\u0C53\n\u0106\x03\u0106\x05\u0106\u0C56\n\u0106\x03\u0106\x05" +
		"\u0106\u0C59\n\u0106\x03\u0107\x03\u0107\x05\u0107\u0C5D\n\u0107\x03\u0108" +
		"\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108" +
		"\x05\u0108\u0C67\n\u0108\x03\u0109\x03\u0109\x03\u0109\x03\u0109\x03\u0109" +
		"\x03\u0109\x03\u0109\x03\u0109\x05\u0109\u0C71\n\u0109\x03\u010A\x03\u010A" +
		"\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x05\u010A\u0C79\n\u010A\x03\u010B" +
		"\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x05\u010B\u0C81\n\u010B" +
		"\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x05\u010C\u0C88\n\u010C" +
		"\x03\u010D\x03\u010D\x03\u010E\x03\u010E\x03\u010E\x07\u010E\u0C8F\n\u010E" +
		"\f\u010E\x0E\u010E\u0C92\v\u010E\x03\u010F\x03\u010F\x03\u010F\x07\u010F" +
		"\u0C97\n\u010F\f\u010F\x0E\u010F\u0C9A\v\u010F\x03\u0110\x03\u0110\x03" +
		"\u0110\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x06\u0111\u0CA3\n\u0111" +
		"\r\u0111\x0E\u0111\u0CA4\x03\u0111\x05\u0111\u0CA8\n\u0111\x03\u0112\x03" +
		"\u0112\x07\u0112\u0CAC\n\u0112\f\u0112\x0E\u0112\u0CAF\v\u0112\x03\u0112" +
		"\x03\u0112\x07\u0112\u0CB3\n\u0112\f\u0112\x0E\u0112\u0CB6\v\u0112\x03" +
		"\u0112\x03\u0112\x07\u0112\u0CBA\n\u0112\f\u0112\x0E\u0112\u0CBD\v\u0112" +
		"\x03\u0112\x03\u0112\x07\u0112\u0CC1\n\u0112\f\u0112\x0E\u0112\u0CC4\v" +
		"\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x05\u0112\u0CCA\n\u0112" +
		"\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113" +
		"\x05\u0113\u0CD3\n\u0113\x07\u0113\u0CD5\n\u0113\f\u0113\x0E\u0113\u0CD8" +
		"\v\u0113\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u0CDE\n\u0114" +
		"\x03\u0114\x07\u0114\u0CE1\n\u0114\f\u0114\x0E\u0114\u0CE4\v\u0114\x03" +
		"\u0115\x05\u0115\u0CE7\n\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x03\u0117\x03\u0117\x03\u0118\x03\u0118" +
		"\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118" +
		"\u0CFA\n\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118\u0CFF\n\u0118\x03" +
		"\u0118\x03\u0118\x03\u0118\x05\u0118\u0D04\n\u0118\x03\u0118\x03\u0118" +
		"\x03\u0118\x03\u0118\x05\u0118\u0D0A\n\u0118\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x07\u0119" +
		"\u0D15\n\u0119\f\u0119\x0E\u0119\u0D18\v\u0119\x05\u0119\u0D1A\n\u0119" +
		"\x03\u0119\x05\u0119\u0D1D\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x07\u0119\u0D27\n\u0119\f\u0119" +
		"\x0E\u0119\u0D2A\v\u0119\x05\u0119\u0D2C\n\u0119\x03\u0119\x05\u0119\u0D2F" +
		"\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x05" +
		"\u0119\u0D37\n\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119" +
		"\x07\u0119\u0D3E\n\u0119\f\u0119\x0E\u0119\u0D41\v\u0119\x03\u0119\x03" +
		"\u0119\x05\u0119\u0D45\n\u0119\x05\u0119\u0D47\n\u0119\x03\u011A\x03\u011A" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x07\u011B\u0D56\n\u011B\f\u011B" +
		"\x0E\u011B\u0D59\v\u011B\x05\u011B\u0D5B\n\u011B\x03\u011B\x03\u011B\x03" +
		"\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03" +
		"\u011C\x03\u011C\x05\u011C\u0D68\n\u011C\x03\u011D\x03\u011D\x05\u011D" +
		"\u0D6C\n\u011D\x03\u011E\x03\u011E\x05\u011E\u0D70\n\u011E\x03\u011E\x05" +
		"\u011E\u0D73\n\u011E\x03\u011E\x05\u011E\u0D76\n\u011E\x03\u011E\x05\u011E" +
		"\u0D79\n\u011E\x03\u011F\x03\u011F\x05\u011F\u0D7D\n\u011F\x03\u011F\x05" +
		"\u011F\u0D80\n\u011F\x03\u011F\x05\u011F\u0D83\n\u011F\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x05\u0120\u0D8A\n\u0120\x03\u0121\x03\u0121" +
		"\x03\u0121\x05\u0121\u0D8F\n\u0121\x03\u0121\x03\u0121\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x05\u0122\u0D97\n\u0122\x03\u0122\x03\u0122\x03\u0123" +
		"\x03\u0123\x05\u0123\u0D9D\n\u0123\x03\u0123\x03\u0123\x03\u0123\x05\u0123" +
		"\u0DA2\n\u0123\x03\u0123\x03\u0123\x05\u0123\u0DA6\n\u0123\x03\u0124\x03" +
		"\u0124\x03\u0124\x05\u0124\u0DAB\n\u0124\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x05\u0125\u0DB2\n\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x07\u0125\u0DBE\n\u0125\f\u0125\x0E\u0125\u0DC1\v\u0125\x05\u0125\u0DC3" +
		"\n\u0125\x03\u0125\x03\u0125\x05\u0125\u0DC7\n\u0125\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0127\x03\u0127\x03\u0128\x03\u0128\x03\u0128\x03\u0129" +
		"\x03\u0129\x03\u0129\x07\u0129\u0DD4\n\u0129\f\u0129\x0E\u0129\u0DD7\v" +
		"\u0129\x03\u012A\x03\u012A\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03" +
		"\u012B\x05\u012B\u0DE0\n\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B" +
		"\x03\u012B\x07\u012B\u0DE7\n\u012B\f\u012B\x0E\u012B\u0DEA\v\u012B\x05" +
		"\u012B\u0DEC\n\u012B\x03\u012B\x03\u012B\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012D\x03\u012D\x03\u012D\x05\u012D\u0DF7\n\u012D\x03\u012E" +
		"\x03\u012E\x03\u012E\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
		"\x07\u012F\u0E01\n\u012F\f\u012F\x0E\u012F\u0E04\v\u012F\x03\u012F\x03" +
		"\u012F\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x05\u0130\u0E0D" +
		"\n\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x07" +
		"\u0130\u0E15\n\u0130\f\u0130\x0E\u0130\u0E18\v\u0130\x03\u0130\x03\u0130" +
		"\x05\u0130\u0E1C\n\u0130\x03\u0131\x03\u0131\x05\u0131\u0E20\n\u0131\x03" +
		"\u0132\x03\u0132\x05\u0132\u0E24\n\u0132\x03\u0132\x03\u0132\x07\u0132" +
		"\u0E28\n\u0132\f\u0132\x0E\u0132\u0E2B\v\u0132\x03\u0132\x03\u0132\x03" +
		"\u0133\x03\u0133\x03\u0134\x03\u0134\x03\u0134\x03\u0135\x03\u0135\x03" +
		"\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0137\x03\u0137\x05\u0137\u0E3C" +
		"\n\u0137\x03\u0138\x03\u0138\x06\u0138\u0E40\n\u0138\r\u0138\x0E\u0138" +
		"\u0E41\x03\u0139\x03\u0139\x05\u0139\u0E46\n\u0139\x03\u013A\x03\u013A" +
		"\x03\u013A\x03\u013A\x07\u013A\u0E4C\n\u013A\f\u013A\x0E\u013A\u0E4F\v" +
		"\u013A\x03\u013A\x03\u013A\x03\u013B\x03\u013B\x03\u013B\x07\u013B\u0E56" +
		"\n\u013B\f\u013B\x0E\u013B\u0E59\v\u013B\x03\u013C\x03\u013C\x03\u013C" +
		"\x03\u013C\x03\u013C\x07\u013C\u0E60\n\u013C\f\u013C\x0E\u013C\u0E63\v" +
		"\u013C\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013E\x03\u013E\x03" +
		"\u013E\x03\u013E\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u0140\x03" +
		"\u0140\x03\u0140\x03\u0140\x05\u0140\u0E75\n\u0140\x03\u0141\x03\u0141" +
		"\x03\u0141\x03\u0141\x05\u0141\u0E7B\n\u0141\x03\u0141\x03\u0141\x03\u0141" +
		"\x07\u0141\u0E80\n\u0141\f\u0141\x0E\u0141\u0E83\v\u0141\x05\u0141\u0E85" +
		"\n\u0141\x05\u0141\u0E87\n\u0141\x03\u0141\x03\u0141\x03\u0141\x05\u0141" +
		"\u0E8C\n\u0141\x03\u0142\x03\u0142\x05\u0142\u0E90\n\u0142\x03\u0143\x03" +
		"\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0143\x03\u0144\x03" +
		"\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x06\u0144\u0EA0" +
		"\n\u0144\r\u0144\x0E\u0144\u0EA1\x03\u0144\x03\u0144\x05\u0144\u0EA6\n" +
		"\u0144\x03\u0144\x03\u0144\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03" +
		"\u0145\x03\u0145\x06\u0145\u0EB0\n\u0145\r\u0145\x0E\u0145\u0EB1\x03\u0145" +
		"\x03\u0145\x05\u0145\u0EB6\n\u0145\x03\u0145\x03\u0145\x03\u0146\x03\u0146" +
		"\x03\u0146\x03\u0146\x03\u0146\x05\u0146\u0EBF\n\u0146\x03\u0146\x03\u0146" +
		"\x03\u0147\x03\u0147\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148" +
		"\x03\u0148\x03\u0148\x03\u0149\x03\u0149\x03\u014A\x03\u014A\x03\u014A" +
		"\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A" +
		"\x03\u014A\x03\u014A\x05\u014A\u0EDA\n\u014A\x03\u014B\x03\u014B\x06\u014B" +
		"\u0EDE\n\u014B\r\u014B\x0E\u014B\u0EDF\x03\u014C\x03\u014C\x03\u014C\x03" +
		"\u014D\x03\u014D\x03\u014D\x05\u014D\u0EE8\n\u014D\x03\u014E\x03\u014E" +
		"\x03\u014E\x05\u014E\u0EED\n\u014E\x03\u014F\x03\u014F\x03\u014F\x03\u0150" +
		"\x03\u0150\x03\u0151\x03\u0151\x03\u0151\x03\u0152\x03\u0152\x03\u0152" +
		"\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152" +
		"\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x05\u0152\u0F06\n\u0152" +
		"\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153" +
		"\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x05\u0153\u0F14\n\u0153" +
		"\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
		"\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x05\u0154\u0F21\n\u0154\x03\u0155" +
		"\x03\u0155\x03\u0156\x05\u0156\u0F26\n\u0156\x03\u0156\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x05\u0156\u0F2D\n\u0156\x03\u0157\x03\u0157\x03\u0158" +
		"\x03\u0158\x03\u0159\x03\u0159\x03\u015A\x03\u015A\x03\u015B\x03\u015B" +
		"\x03\u015C\x03\u015C\x03\u015D\x03\u015D\x03\u015E\x03\u015E\x03\u015F" +
		"\x03\u015F\x03\u0160\x03\u0160\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x07\u0161\u0F4B\n\u0161\f\u0161" +
		"\x0E\u0161\u0F4E\v\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x05\u0161\u0F5C\n\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161\u0F7C\n\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161\u0F83\n\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161" +
		"\u0F93\n\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161" +
		"\u0F9A\n\u0161\x03\u0161\x03\u0161\x07\u0161\u0F9E\n\u0161\f\u0161\x0E" +
		"\u0161\u0FA1\v\u0161\x03\u0162\x03\u0162\x05\u0162\u0FA5\n\u0162\x03\u0163" +
		"\x03\u0163\x03\u0163\x03\u0163\x03\u0164\x03\u0164\x03\u0165\x03\u0165" +
		"\x03\u0166\x03\u0166\x05\u0166\u0FB1\n\u0166\x03\u0167\x03\u0167\x03\u0167" +
		"\x03\u0167\x03\u0167\x07\u0167\u0FB8\n\u0167\f\u0167\x0E\u0167\u0FBB\v" +
		"\u0167\x03\u0167\x03\u0167\x03\u0168\x03\u0168\x03\u0168\x05\u0168\u0FC2" +
		"\n\u0168\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x07\u0169\u0FC9" +
		"\n\u0169\f\u0169\x0E\u0169\u0FCC\v\u0169\x03\u0169\x03\u0169\x03\u016A" +
		"\x03\u016A\x03\u016A\x03\u016A\x03\u016B\x03\u016B\x03\u016C\x03\u016C" +
		"\x03\u016D\x03\u016D\x03\u016D\x05\u016D\u0FDB\n\u016D\x03\u016E\x03\u016E" +
		"\x05\u016E\u0FDF\n\u016E\x03\u016F\x03\u016F\x03\u016F\x03\u016F\x03\u016F" +
		"\x05\u016F\u0FE6\n\u016F\x03\u0170\x03\u0170\x05\u0170\u0FEA\n\u0170\x03" +
		"\u0171\x03\u0171\x03\u0172\x03\u0172\x03\u0172\x02\x02\x03\u02C0\u0173" +
		"\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14" +
		"\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02" +
		"*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02" +
		"F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02" +
		"b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02" +
		"~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02" +
		"\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02" +
		"\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02" +
		"\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02" +
		"\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02" +
		"\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02" +
		"\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02" +
		"\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A" +
		"\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118" +
		"\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126" +
		"\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134" +
		"\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142" +
		"\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150" +
		"\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E" +
		"\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C" +
		"\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A" +
		"\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188" +
		"\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196" +
		"\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4" +
		"\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2" +
		"\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0" +
		"\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE" +
		"\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC" +
		"\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA" +
		"\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8" +
		"\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206" +
		"\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214" +
		"\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222" +
		"\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230" +
		"\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E" +
		"\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C" +
		"\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A" +
		"\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\u0268" +
		"\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02\u0276" +
		"\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02\u0284" +
		"\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290\x02\u0292" +
		"\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E\x02\u02A0" +
		"\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC\x02\u02AE" +
		"\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA\x02\u02BC" +
		"\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8\x02\u02CA" +
		"\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02\u02D6\x02\u02D8" +
		"\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0\x02\u02E2\x02\x02$\x03\x02\u0135" +
		"\u0138\x03\x02\xE3\xE4\x04\x02\xB7\xB7\xBA\xBA\x03\x02\x88\x89\x04\x02" +
		"\x0F\x0FJJ\x03\x02\x92\x93\x04\x02\xB8\xB8\xBB\xBB\x04\x02\x17\x17\xB6" +
		"\xB6\x03\x02\xC3\xC4\v\x02\x05\x05\x19\x19\x1B\x1BCCEEKK\xAF\xAF\xC0\xC0" +
		"\xE1\xE2\x05\x02KK\x88\x88\u014D\u014D\x04\x02\x8F\x90\xDA\xDA\x03\x02" +
		"\x7F\x80\x03\x02\u0126\u0127\x03\x02\x0E\x0F\x04\x02\x05\x05\x1A\x1A\x03" +
		"\x02\xEC\xED\x04\x02mm\x86\x86\x03\x02\xE6\xE7\x05\x02\u010B\u010B\u010D" +
		"\u0110\u0112\u0114\x04\x02\u010B\u010B\u010D\u0114\x04\x02\u016C\u016C" +
		"\u0171\u0171\x04\x02\u0160\u0161\u0166\u0166\x04\x02\u015F\u015F\u0162" +
		"\u0164\x03\x02\u0160\u0161\x04\x02\n\n\x8A\x8B\x03\x02\u0158\u015E\x03" +
		"\x02\x07\b\x04\x02\x05\x05\v\v\x03\x02\x03\x04\x04\x02\u0158\u0158\u015A" +
		"\u015E\x0F\x02\x07\n\f\fOU__be\x8A\x8B\xA4\xA5\xB6\xB6\xCE\xCE\xD0\xD0" +
		"\u012E\u012E\u0158\u0167\u0169\u01696\x02\x0E\x11\x1C\x1C&&(157:;=@FF" +
		"HILLNNPPXX\\\\__cceegikkn\x81\x83\x83\x88\x89\x8C\x8C\x8F\x91\x93\x96" +
		"\x98\x9C\x9E\xA3\xA9\xAE\xB0\xB0\xB4\xB5\xB8\xBB\xBE\xC4\xC6\xC8\xCA\xCA" +
		"\xCC\xCD\xD2\xD2\xD5\xD7\xD9\xE1\xE3\xE5\xE8\xE8\xF5\xF5\xF7\xF7\xF9\xFA" +
		"\xFD\u0105\u0107\u0107\u010A\u0114\u0116\u0116\u0119\u0119\u011B\u0120" +
		"\u0125\u0129\u012B\u012C\u0130\u014B\f\x02\f\fOOQUWWYYbbdd\xD0\xD0\xEF" +
		"\xF0\xF4\xF4\x02\u113D\x02\u02E9\x03\x02\x02\x02\x04\u02F0\x03\x02\x02" +
		"\x02\x06\u02F4\x03\x02\x02\x02\b\u02F6\x03\x02\x02\x02\n\u0310\x03\x02" +
		"\x02\x02\f\u0312\x03\x02\x02\x02\x0E\u0314\x03\x02\x02\x02\x10\u0322\x03" +
		"\x02\x02\x02\x12\u0324\x03\x02\x02\x02\x14\u0334\x03\x02\x02\x02\x16\u033D" +
		"\x03\x02\x02\x02\x18\u0345\x03\x02\x02\x02\x1A\u0352\x03\x02\x02\x02\x1C" +
		"\u0369\x03\x02\x02\x02\x1E\u0378\x03\x02\x02\x02 \u037C\x03\x02\x02\x02" +
		"\"\u0384\x03\x02\x02\x02$\u03B7\x03\x02\x02\x02&\u03B9\x03\x02\x02\x02" +
		"(\u03BC\x03\x02\x02\x02*\u03BE\x03\x02\x02\x02,\u03C2\x03\x02\x02\x02" +
		".\u03C5\x03\x02\x02\x020\u03C8\x03\x02\x02\x022\u03CC\x03\x02\x02\x02" +
		"4\u03CF\x03\x02\x02\x026\u03E0\x03\x02\x02\x028\u03E3\x03\x02\x02\x02" +
		":\u03E7\x03\x02\x02\x02<\u03EF\x03\x02\x02\x02>\u03F2\x03\x02\x02\x02" +
		"@\u03FB";
	private static readonly _serializedATNSegment2: string =
		"\x03\x02\x02\x02B\u03FE\x03\x02\x02\x02D\u043C\x03\x02\x02\x02F\u0446" +
		"\x03\x02\x02\x02H\u046B\x03\x02\x02\x02J\u047E\x03\x02\x02\x02L\u048D" +
		"\x03\x02\x02\x02N\u048F\x03\x02\x02\x02P\u049A\x03\x02\x02\x02R\u049E" +
		"\x03\x02\x02\x02T\u04A3\x03\x02\x02\x02V\u04A5\x03\x02\x02\x02X\u04AA" +
		"\x03\x02\x02\x02Z\u04AF\x03\x02\x02\x02\\\u04B4\x03\x02\x02\x02^\u04B8" +
		"\x03\x02\x02\x02`\u04C0\x03\x02\x02\x02b\u04C5\x03\x02\x02\x02d\u04C9" +
		"\x03\x02\x02\x02f\u04DD\x03\x02\x02\x02h\u04EA\x03\x02\x02\x02j\u04F2" +
		"\x03\x02\x02\x02l\u04F4\x03\x02\x02\x02n\u04FD\x03\x02\x02\x02p\u0501" +
		"\x03\x02\x02\x02r\u0508\x03\x02\x02\x02t\u050F\x03\x02\x02\x02v\u0516" +
		"\x03\x02\x02\x02x\u0519\x03\x02\x02\x02z\u0534\x03\x02\x02\x02|\u053F" +
		"\x03\x02\x02\x02~\u0543\x03\x02\x02\x02\x80\u0545\x03\x02\x02\x02\x82" +
		"\u0552\x03\x02\x02\x02\x84\u0554\x03\x02\x02\x02\x86\u055C\x03\x02\x02" +
		"\x02\x88\u0565\x03\x02\x02\x02\x8A\u0567\x03\x02\x02\x02\x8C\u056C\x03" +
		"\x02\x02\x02\x8E\u0570\x03\x02\x02\x02\x90\u0578\x03\x02\x02\x02\x92\u057C" +
		"\x03\x02\x02\x02\x94\u0585\x03\x02\x02\x02\x96\u0587\x03\x02\x02\x02\x98" +
		"\u058D\x03\x02\x02\x02\x9A\u0591\x03\x02\x02\x02\x9C\u059E\x03\x02\x02" +
		"\x02\x9E\u05A0\x03\x02\x02\x02\xA0\u05A4\x03\x02\x02\x02\xA2\u05D0\x03" +
		"\x02\x02\x02\xA4\u05D8\x03\x02\x02\x02\xA6\u05DE\x03\x02\x02\x02\xA8\u05E2" +
		"\x03\x02\x02\x02\xAA\u05E5\x03\x02\x02\x02\xAC\u05F0\x03\x02\x02\x02\xAE" +
		"\u0601\x03\x02\x02\x02\xB0\u0603\x03\x02\x02\x02\xB2\u0608\x03\x02\x02" +
		"\x02\xB4\u061C\x03\x02\x02\x02\xB6\u0620\x03\x02\x02\x02\xB8\u0627\x03" +
		"\x02\x02\x02\xBA\u0637\x03\x02\x02\x02\xBC\u06C3\x03\x02\x02\x02\xBE\u06C5" +
		"\x03\x02\x02\x02\xC0\u06CD\x03\x02\x02\x02\xC2\u06D2\x03\x02\x02\x02\xC4" +
		"\u06D4\x03\x02\x02\x02\xC6\u06DA\x03\x02\x02\x02\xC8\u06DE\x03\x02\x02" +
		"\x02\xCA\u06E2\x03\x02\x02\x02\xCC\u06E6\x03\x02\x02\x02\xCE\u06F0\x03" +
		"\x02\x02\x02\xD0\u06FB\x03\x02\x02\x02\xD2\u070C\x03\x02\x02\x02\xD4\u071E" +
		"\x03\x02\x02\x02\xD6\u0723\x03\x02\x02\x02\xD8\u0726\x03\x02\x02\x02\xDA" +
		"\u072A\x03\x02\x02\x02\xDC\u0731\x03\x02\x02\x02\xDE\u073A\x03\x02\x02" +
		"\x02\xE0\u0740\x03\x02\x02\x02\xE2\u0742\x03\x02\x02\x02\xE4\u0752\x03" +
		"\x02\x02\x02\xE6\u0767\x03\x02\x02\x02\xE8\u0769\x03\x02\x02\x02\xEA\u0771" +
		"\x03\x02\x02\x02\xEC\u0778\x03\x02\x02\x02\xEE\u077A\x03\x02\x02\x02\xF0" +
		"\u0788\x03\x02\x02\x02\xF2\u078A\x03\x02\x02\x02\xF4\u078E\x03\x02\x02" +
		"\x02\xF6\u0792\x03\x02\x02\x02\xF8\u0796\x03\x02\x02\x02\xFA\u079A\x03" +
		"\x02\x02\x02\xFC\u07A9\x03\x02\x02\x02\xFE\u07B1\x03\x02\x02\x02\u0100" +
		"\u07B4\x03\x02\x02\x02\u0102\u07B6\x03\x02\x02\x02\u0104\u07C2\x03\x02" +
		"\x02\x02\u0106\u07CC\x03\x02\x02\x02\u0108\u07CF\x03\x02\x02\x02\u010A" +
		"\u07DA\x03\x02\x02\x02\u010C\u07E2\x03\x02\x02\x02\u010E\u07FD\x03\x02" +
		"\x02\x02\u0110\u0819\x03\x02\x02\x02\u0112\u081F\x03\x02\x02\x02\u0114" +
		"\u0826\x03\x02\x02\x02\u0116\u0830\x03\x02\x02\x02\u0118\u0834\x03\x02" +
		"\x02\x02\u011A\u0836\x03\x02\x02\x02\u011C\u0839\x03\x02\x02\x02\u011E" +
		"\u0846\x03\x02\x02\x02\u0120\u0857\x03\x02\x02\x02\u0122\u0865\x03\x02" +
		"\x02\x02\u0124\u0867\x03\x02\x02\x02\u0126\u086A\x03\x02\x02\x02\u0128" +
		"\u086D\x03\x02\x02\x02\u012A\u0876\x03\x02\x02\x02\u012C\u088A\x03\x02" +
		"\x02\x02\u012E\u088C\x03\x02\x02\x02\u0130\u088F\x03\x02\x02\x02\u0132" +
		"\u08A3\x03\x02\x02\x02\u0134\u08A5\x03\x02\x02\x02\u0136\u08A9\x03\x02" +
		"\x02\x02\u0138\u08AB\x03\x02\x02\x02\u013A\u08B4\x03\x02\x02\x02\u013C" +
		"\u08BA\x03\x02\x02\x02\u013E\u08C0\x03\x02\x02\x02\u0140\u08C5\x03\x02" +
		"\x02\x02\u0142\u08E1\x03\x02\x02\x02\u0144\u08E3\x03\x02\x02\x02\u0146" +
		"\u08E6\x03\x02\x02\x02\u0148\u08EE\x03\x02\x02\x02\u014A\u08F6\x03\x02" +
		"\x02\x02\u014C\u08FE\x03\x02\x02\x02\u014E\u0906\x03\x02\x02\x02\u0150" +
		"\u0908\x03\x02\x02\x02\u0152\u0915\x03\x02\x02\x02\u0154\u091D\x03\x02" +
		"\x02\x02\u0156\u0926\x03\x02\x02\x02\u0158\u0928\x03\x02\x02\x02\u015A" +
		"\u092A\x03\x02\x02\x02\u015C\u092F\x03\x02\x02\x02\u015E\u0935\x03\x02" +
		"\x02\x02\u0160\u0939\x03\x02\x02\x02\u0162\u093F\x03\x02\x02\x02\u0164" +
		"\u0945\x03\x02\x02\x02\u0166\u094A\x03\x02\x02\x02\u0168\u0955\x03\x02" +
		"\x02\x02\u016A\u0962\x03\x02\x02\x02\u016C\u0964\x03\x02\x02\x02\u016E" +
		"\u096C\x03\x02\x02\x02\u0170\u0970\x03\x02\x02\x02\u0172\u0978\x03\x02" +
		"\x02\x02\u0174\u097C\x03\x02\x02\x02\u0176\u097E\x03\x02\x02\x02\u0178" +
		"\u0984\x03\x02\x02\x02\u017A\u0986\x03\x02\x02\x02\u017C\u098D\x03\x02" +
		"\x02\x02\u017E\u0995\x03\x02\x02\x02\u0180\u099A\x03\x02\x02\x02\u0182" +
		"\u09A1\x03\x02\x02\x02\u0184\u09A9\x03\x02\x02\x02\u0186\u09AD\x03\x02" +
		"\x02\x02\u0188\u09AF\x03\x02\x02\x02\u018A\u09BA\x03\x02\x02\x02\u018C" +
		"\u09BE\x03\x02\x02\x02\u018E\u09CA\x03\x02\x02\x02\u0190\u09D2\x03\x02" +
		"\x02\x02\u0192\u09D6\x03\x02\x02\x02\u0194\u09E2\x03\x02\x02\x02\u0196" +
		"\u09E8\x03\x02\x02\x02\u0198\u09EB\x03\x02\x02\x02\u019A\u09EE\x03\x02" +
		"\x02\x02\u019C\u09F1\x03\x02\x02\x02\u019E\u09F8\x03\x02\x02\x02\u01A0" +
		"\u09FA\x03\x02\x02\x02\u01A2\u0A07\x03\x02\x02\x02\u01A4\u0A30\x03\x02" +
		"\x02\x02\u01A6\u0A32\x03\x02\x02\x02\u01A8\u0A37\x03\x02\x02\x02\u01AA" +
		"\u0A3C\x03\x02\x02\x02\u01AC\u0A43\x03\x02\x02\x02\u01AE\u0A60\x03\x02" +
		"\x02\x02\u01B0\u0A63\x03\x02\x02\x02\u01B2\u0A69\x03\x02\x02\x02\u01B4" +
		"\u0A6B\x03\x02\x02\x02\u01B6\u0A74\x03\x02\x02\x02\u01B8\u0A7A\x03\x02" +
		"\x02\x02\u01BA\u0A83\x03\x02\x02\x02\u01BC\u0A8F\x03\x02\x02\x02\u01BE" +
		"\u0AA5\x03\x02\x02\x02\u01C0\u0AA7\x03\x02\x02\x02\u01C2\u0ABD\x03\x02" +
		"\x02\x02\u01C4\u0AC2\x03\x02\x02\x02\u01C6\u0B05\x03\x02\x02\x02\u01C8" +
		"\u0B19\x03\x02\x02\x02\u01CA\u0B28\x03\x02\x02\x02\u01CC\u0B34\x03\x02" +
		"\x02\x02\u01CE\u0B36\x03\x02\x02\x02\u01D0\u0B3C\x03\x02\x02\x02\u01D2" +
		"\u0B40\x03\x02\x02\x02\u01D4\u0B49\x03\x02\x02\x02\u01D6\u0B53\x03\x02" +
		"\x02\x02\u01D8\u0B55\x03\x02\x02\x02\u01DA\u0B63\x03\x02\x02\x02\u01DC" +
		"\u0B69\x03\x02\x02\x02\u01DE\u0B6B\x03\x02\x02\x02\u01E0\u0B6F\x03\x02" +
		"\x02\x02\u01E2\u0B71\x03\x02\x02\x02\u01E4\u0B75\x03\x02\x02\x02\u01E6" +
		"\u0B79\x03\x02\x02\x02\u01E8\u0B7D\x03\x02\x02\x02\u01EA\u0B84\x03\x02" +
		"\x02\x02\u01EC\u0B97\x03\x02\x02\x02\u01EE\u0B9D\x03\x02\x02\x02\u01F0" +
		"\u0BA9\x03\x02\x02\x02\u01F2\u0BB0\x03\x02\x02\x02\u01F4\u0BB8\x03\x02" +
		"\x02\x02\u01F6\u0BBA\x03\x02\x02\x02\u01F8\u0BCE\x03\x02\x02\x02\u01FA" +
		"\u0BD0\x03\x02\x02\x02\u01FC\u0BD8\x03\x02\x02\x02\u01FE\u0C0D\x03\x02" +
		"\x02\x02\u0200\u0C13\x03\x02\x02\x02\u0202\u0C35\x03\x02\x02\x02\u0204" +
		"\u0C37\x03\x02\x02\x02\u0206\u0C3F\x03\x02\x02\x02\u0208\u0C48\x03\x02" +
		"\x02\x02\u020A\u0C58\x03\x02\x02\x02\u020C\u0C5C\x03\x02\x02\x02\u020E" +
		"\u0C66\x03\x02\x02\x02\u0210\u0C70\x03\x02\x02\x02\u0212\u0C78\x03\x02" +
		"\x02\x02\u0214\u0C80\x03\x02\x02\x02\u0216\u0C87\x03\x02\x02\x02\u0218" +
		"\u0C89\x03\x02\x02\x02\u021A\u0C8B\x03\x02\x02\x02\u021C\u0C93\x03\x02" +
		"\x02\x02\u021E\u0C9B\x03\x02\x02\x02\u0220\u0CA7\x03\x02\x02\x02\u0222" +
		"\u0CC9\x03\x02\x02\x02\u0224\u0CCB\x03\x02\x02\x02\u0226\u0CDD\x03\x02" +
		"\x02\x02\u0228\u0CE6\x03\x02\x02\x02\u022A\u0CEB\x03\x02\x02\x02\u022C" +
		"\u0CEF\x03\x02\x02\x02\u022E\u0D09\x03\x02\x02\x02\u0230\u0D46\x03\x02" +
		"\x02\x02\u0232\u0D48\x03\x02\x02\x02\u0234\u0D4A\x03\x02\x02\x02\u0236" +
		"\u0D67\x03\x02\x02\x02\u0238\u0D6B\x03\x02\x02\x02\u023A\u0D6D\x03\x02" +
		"\x02\x02\u023C\u0D7A\x03\x02\x02\x02\u023E\u0D89\x03\x02\x02\x02\u0240" +
		"\u0D8E\x03\x02\x02\x02\u0242\u0D92\x03\x02\x02\x02\u0244\u0DA5\x03\x02" +
		"\x02\x02\u0246\u0DAA\x03\x02\x02\x02\u0248\u0DAC\x03\x02\x02\x02\u024A" +
		"\u0DC8\x03\x02\x02\x02\u024C\u0DCB\x03\x02\x02\x02\u024E\u0DCD\x03\x02" +
		"\x02\x02\u0250\u0DD0\x03\x02\x02\x02\u0252\u0DD8\x03\x02\x02\x02\u0254" +
		"\u0DDA\x03\x02\x02\x02\u0256\u0DEF\x03\x02\x02\x02\u0258\u0DF6\x03\x02" +
		"\x02\x02\u025A\u0DF8\x03\x02\x02\x02\u025C\u0DFB\x03\x02\x02\x02\u025E" +
		"\u0E07\x03\x02\x02\x02\u0260\u0E1F\x03\x02\x02\x02\u0262\u0E21\x03\x02" +
		"\x02\x02\u0264\u0E2E\x03\x02\x02\x02\u0266\u0E30\x03\x02\x02\x02\u0268" +
		"\u0E33\x03\x02\x02\x02\u026A\u0E35\x03\x02\x02\x02\u026C\u0E39\x03\x02" +
		"\x02\x02\u026E\u0E3F\x03\x02\x02\x02\u0270\u0E45\x03\x02\x02\x02\u0272" +
		"\u0E47\x03\x02\x02\x02\u0274\u0E52\x03\x02\x02\x02\u0276\u0E5A\x03\x02" +
		"\x02\x02\u0278\u0E64\x03\x02\x02\x02\u027A\u0E68\x03\x02\x02\x02\u027C" +
		"\u0E6C\x03\x02\x02\x02\u027E\u0E70\x03\x02\x02\x02\u0280\u0E76\x03\x02" +
		"\x02\x02\u0282\u0E8F\x03\x02\x02\x02\u0284\u0E91\x03\x02\x02\x02\u0286" +
		"\u0E98\x03\x02\x02\x02\u0288\u0EA9\x03\x02\x02\x02\u028A\u0EB9\x03\x02" +
		"\x02\x02\u028C\u0EC2\x03\x02\x02\x02\u028E\u0EC4\x03\x02\x02\x02\u0290" +
		"\u0ECB\x03\x02\x02\x02\u0292\u0ED9\x03\x02\x02\x02\u0294\u0EDB\x03\x02" +
		"\x02\x02\u0296\u0EE1\x03\x02\x02\x02\u0298\u0EE7\x03\x02\x02\x02\u029A" +
		"\u0EEC\x03\x02\x02\x02\u029C\u0EEE\x03\x02\x02\x02\u029E\u0EF1\x03\x02" +
		"\x02\x02\u02A0\u0EF3\x03\x02\x02\x02\u02A2\u0F05\x03\x02\x02\x02\u02A4" +
		"\u0F13\x03\x02\x02\x02\u02A6\u0F20\x03\x02\x02\x02\u02A8\u0F22\x03\x02" +
		"\x02\x02\u02AA\u0F25\x03\x02\x02\x02\u02AC\u0F2E\x03\x02\x02\x02\u02AE" +
		"\u0F30\x03\x02\x02\x02\u02B0\u0F32\x03\x02\x02\x02\u02B2\u0F34\x03\x02" +
		"\x02\x02\u02B4\u0F36\x03\x02\x02\x02\u02B6\u0F38\x03\x02\x02\x02\u02B8" +
		"\u0F3A\x03\x02\x02\x02\u02BA\u0F3C\x03\x02\x02\x02\u02BC\u0F3E\x03\x02" +
		"\x02\x02\u02BE\u0F40\x03\x02\x02\x02\u02C0\u0F5B\x03\x02\x02\x02\u02C2" +
		"\u0FA4\x03\x02\x02\x02\u02C4\u0FA6\x03\x02\x02\x02\u02C6\u0FAA\x03\x02" +
		"\x02\x02\u02C8\u0FAC\x03\x02\x02\x02\u02CA\u0FAE\x03\x02\x02\x02\u02CC" +
		"\u0FB2\x03\x02\x02\x02\u02CE\u0FBE\x03\x02\x02\x02\u02D0\u0FC3\x03\x02" +
		"\x02\x02\u02D2\u0FCF\x03\x02\x02\x02\u02D4\u0FD3\x03\x02\x02\x02\u02D6" +
		"\u0FD5\x03\x02\x02\x02\u02D8\u0FDA\x03\x02\x02\x02\u02DA\u0FDE\x03\x02" +
		"\x02\x02\u02DC\u0FE5\x03\x02\x02\x02\u02DE\u0FE9\x03\x02\x02\x02\u02E0" +
		"\u0FEB\x03\x02\x02\x02\u02E2\u0FED\x03\x02\x02\x02\u02E4\u02E5\x05\x06" +
		"\x04\x02\u02E5\u02E6\x05\x04\x03\x02\u02E6\u02E8\x03\x02\x02\x02\u02E7" +
		"\u02E4\x03\x02\x02\x02\u02E8\u02EB\x03\x02\x02\x02\u02E9\u02E7\x03\x02" +
		"\x02\x02\u02E9\u02EA\x03\x02\x02\x02\u02EA\u02EC\x03\x02\x02\x02\u02EB" +
		"\u02E9\x03\x02\x02\x02\u02EC\u02ED\x07\x02\x02\x03\u02ED\x03\x03\x02\x02" +
		"\x02\u02EE\u02F1\x07\u0151\x02\x02\u02EF\u02F1\x03\x02\x02\x02\u02F0\u02EE" +
		"\x03\x02\x02\x02\u02F0\u02EF\x03\x02\x02\x02\u02F1\x05\x03\x02\x02\x02" +
		"\u02F2\u02F5\x05\b\x05\x02\u02F3\u02F5\x05\x10\t\x02\u02F4\u02F2\x03\x02" +
		"\x02\x02\u02F4\u02F3\x03\x02\x02\x02\u02F5\x07\x03\x02\x02\x02\u02F6\u0300" +
		"\x07\x91\x02\x02\u02F7\u02F9\x05\n\x06\x02\u02F8\u02F7\x03\x02\x02\x02" +
		"\u02F9\u02FC\x03\x02\x02\x02\u02FA\u02F8\x03\x02\x02\x02\u02FA\u02FB\x03" +
		"\x02\x02\x02\u02FB\u02FD\x03\x02\x02\x02\u02FC\u02FA\x03\x02\x02\x02\u02FD" +
		"\u0301\x05\x10\t\x02\u02FE\u02FF\x07\u0105\x02\x02\u02FF\u0301\x05\u01B0" +
		"\xD9\x02\u0300\u02FA\x03\x02\x02\x02\u0300\u02FE\x03\x02\x02\x02\u0301" +
		"\t\x03\x02\x02\x02\u0302\u0311\x07\x92\x02\x02\u0303\u0311\x07\x93\x02" +
		"\x02\u0304\u0311\x07\x94\x02\x02\u0305\u0311\x07\x95\x02\x02\u0306\u0311" +
		"\x07\u0106\x02\x02\u0307\u0311\x07\xCC\x02\x02\u0308\u0311\x07\u0107\x02" +
		"\x02\u0309\u030B\x07\u0134\x02\x02\u030A\u030C\x05\f\x07\x02\u030B\u030A" +
		"\x03\x02\x02\x02\u030B\u030C\x03\x02\x02\x02\u030C\u030E\x03\x02\x02\x02" +
		"\u030D\u030F\x05\x0E\b\x02\u030E\u030D\x03\x02\x02\x02\u030E\u030F\x03" +
		"\x02\x02\x02\u030F\u0311\x03\x02\x02\x02\u0310\u0302\x03\x02\x02\x02\u0310" +
		"\u0303\x03\x02\x02\x02\u0310\u0304\x03\x02\x02\x02\u0310\u0305\x03\x02" +
		"\x02\x02\u0310\u0306\x03\x02\x02\x02\u0310\u0307\x03\x02\x02\x02\u0310" +
		"\u0308\x03\x02\x02\x02\u0310\u0309\x03\x02\x02\x02\u0311\v\x03\x02\x02" +
		"\x02\u0312\u0313\x07\u011A\x02\x02\u0313\r\x03\x02\x02\x02\u0314\u0315" +
		"\t\x02\x02\x02\u0315\x0F\x03\x02\x02\x02\u0316\u0323\x05\u01B0\xD9\x02" +
		"\u0317\u0323\x05\x12\n\x02\u0318\u0323\x05\x16\f\x02\u0319\u0323\x05\x18" +
		"\r\x02\u031A\u0323\x05\x1A\x0E\x02\u031B\u0323\x05\x1C\x0F\x02\u031C\u0323" +
		"\x05\"\x12\x02\u031D\u0323\x05$\x13\x02\u031E\u0323\x05\u01CE\xE8\x02" +
		"\u031F\u0323\x05\u01D4\xEB\x02\u0320\u0323\x05\u01D6\xEC\x02\u0321\u0323" +
		"\x05\u01EA\xF6\x02\u0322\u0316\x03\x02\x02\x02\u0322\u0317\x03\x02\x02" +
		"\x02\u0322\u0318\x03\x02\x02\x02\u0322\u0319\x03\x02\x02\x02\u0322\u031A" +
		"\x03\x02\x02\x02\u0322\u031B\x03\x02\x02\x02\u0322\u031C\x03\x02\x02\x02" +
		"\u0322\u031D\x03\x02\x02\x02\u0322\u031E\x03\x02\x02\x02\u0322\u031F\x03" +
		"\x02\x02\x02\u0322\u0320\x03\x02\x02\x02\u0322\u0321\x03\x02\x02\x02\u0323" +
		"\x11\x03\x02\x02\x02\u0324\u0325\x07:\x02\x02\u0325\u0327\x07?\x02\x02" +
		"\u0326\u0328\x072\x02\x02\u0327\u0326\x03\x02\x02\x02\u0327\u0328\x03" +
		"\x02\x02\x02\u0328\u0329\x03\x02\x02\x02\u0329\u032A\x07@\x02\x02\u032A" +
		"\u032C\x07\u016C\x02\x02\u032B\u032D\x07\x1C\x02\x02\u032C\u032B\x03\x02" +
		"\x02\x02\u032C\u032D\x03\x02\x02\x02\u032D\u032E\x03\x02\x02\x02\u032E" +
		"\u032F\x07j\x02\x02\u032F\u0330\x07\'\x02\x02\u0330\u0332\x05\u02CA\u0166" +
		"\x02\u0331\u0333\x05\xB0Y\x02\u0332\u0331\x03\x02\x02\x02\u0332\u0333" +
		"\x03\x02\x02\x02\u0333\x13\x03\x02\x02\x02\u0334\u0336\x07\xE9\x02\x02" +
		"\u0335\u0337\x07>\x02\x02\u0336\u0335\x03\x02\x02\x02\u0336\u0337\x03" +
		"\x02\x02\x02\u0337\u0338\x03\x02\x02\x02\u0338\u0339\x07=\x02\x02\u0339" +
		"\u033A\x07\u0152\x02\x02\u033A\u033B\x07\u016C\x02\x02\u033B\u033C\x07" +
		"\u0153\x02\x02\u033C\x15\x03\x02\x02\x02\u033D\u033E\x07;\x02\x02\u033E" +
		"\u033F\x07\'\x02\x02\u033F\u0340\x05\u02CA\u0166\x02\u0340\u0341\x07M" +
		"\x02\x02\u0341\u0343\x07\u016C\x02\x02\u0342\u0344\x05\x14\v\x02\u0343" +
		"\u0342\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344\x17\x03\x02\x02" +
		"\x02\u0345\u034B\x07<\x02\x02\u0346\u0348\x07D\x02\x02\u0347\u0346\x03" +
		"\x02\x02\x02\u0347\u0348\x03\x02\x02\x02\u0348\u0349\x03\x02\x02\x02\u0349" +
		"\u034A\x07\'\x02\x02\u034A\u034C\x05\u02CA\u0166\x02\u034B\u0347\x03\x02" +
		"\x02\x02\u034B\u034C\x03\x02\x02\x02\u034C\u034D\x03\x02\x02\x02\u034D" +
		"\u034E\x07\x17\x02\x02\u034E\u0350\x07\u016C\x02\x02\u034F\u0351\x05\u0144" +
		"\xA3\x02\u0350\u034F\x03\x02\x02\x02\u0350\u0351\x03\x02\x02\x02\u0351" +
		"\x19\x03\x02\x02\x02\u0352\u0353\x07\u0131\x02\x02\u0353\u0354\x07\u0132" +
		"\x02\x02\u0354\u0357\x05\u02DA\u016E\x02\u0355\u0356\x07\u014E\x02\x02" +
		"\u0356\u0358\x05\u02DA\u016E\x02\u0357\u0355\x03\x02\x02\x02\u0357\u0358" +
		"\x03\x02\x02\x02\u0358\u0363\x03\x02\x02\x02\u0359\u035A\x07\x17\x02\x02" +
		"\u035A\u035D\x07\u0171\x02\x02\u035B\u035C\x07M\x02\x02\u035C\u035E\x07" +
		"\u0171\x02\x02\u035D\u035B\x03\x02\x02\x02\u035D\u035E\x03\x02\x02\x02" +
		"\u035E\u0361\x03\x02\x02\x02\u035F\u0360\x07\x9B\x02\x02\u0360\u0362\x07" +
		"\u0171\x02\x02\u0361\u035F\x03\x02\x02\x02\u0361\u0362\x03\x02\x02\x02" +
		"\u0362\u0364\x03\x02\x02\x02\u0363\u0359\x03\x02\x02\x02\u0363\u0364\x03" +
		"\x02\x02\x02\u0364\u0367\x03\x02\x02\x02\u0365\u0366\x07\x97\x02\x02\u0366" +
		"\u0368\x05\x1E\x10\x02\u0367\u0365\x03\x02\x02\x02\u0367\u0368\x03\x02" +
		"\x02\x02\u0368\x1B\x03\x02\x02\x02\u0369\u036A\x07\u0131\x02\x02\u036A" +
		"\u0370\x07:\x02\x02\u036B\u036E\x05\u02DA\u016E\x02\u036C\u036D\x07\u014E" +
		"\x02\x02\u036D\u036F\x05\u02DA\u016E\x02\u036E\u036C\x03\x02\x02\x02\u036E" +
		"\u036F\x03\x02\x02\x02\u036F\u0371\x03\x02\x02\x02\u0370\u036B\x03\x02" +
		"\x02\x02\u0370\u0371\x03\x02\x02\x02\u0371\u0372\x03\x02\x02\x02\u0372" +
		"\u0373\x07\x17\x02\x02\u0373\u0376\x07\u016C\x02\x02\u0374\u0375\x07\x97" +
		"\x02\x02\u0375\u0377\x05\x1E\x10\x02\u0376\u0374\x03\x02\x02\x02\u0376" +
		"\u0377\x03\x02\x02\x02\u0377\x1D\x03\x02\x02\x02\u0378\u0379\x07\u0152" +
		"\x02\x02\u0379\u037A\x05 \x11\x02\u037A\u037B\x07\u0153\x02\x02\u037B" +
		"\x1F\x03\x02\x02\x02\u037C\u0381\x05\u0134\x9B\x02\u037D\u037E\x07\u0150" +
		"\x02\x02\u037E\u0380\x05\u0134\x9B\x02\u037F\u037D\x03\x02\x02\x02\u0380" +
		"\u0383\x03\x02\x02\x02\u0381\u037F\x03\x02\x02\x02\u0381\u0382\x03\x02" +
		"\x02\x02\u0382!\x03\x02\x02\x02\u0383\u0381\x03\x02\x02\x02\u0384\u0385" +
		"\x07\u0131\x02\x02\u0385\u0386\x07\u0133\x02\x02\u0386\u0389\x05\u02DA" +
		"\u016E\x02\u0387\u0388\x07\u014E\x02\x02\u0388\u038A\x05\u02DA\u016E\x02" +
		"\u0389\u0387\x03\x02\x02\x02\u0389\u038A\x03\x02\x02\x02\u038A\u038D\x03" +
		"\x02\x02\x02\u038B\u038C\x07\x97\x02\x02\u038C\u038E\x05\x1E\x10\x02\u038D" +
		"\u038B\x03\x02\x02\x02\u038D\u038E\x03\x02\x02\x02\u038E#\x03\x02\x02" +
		"\x02\u038F\u03B8\x054\x1B\x02\u0390\u03B8\x05<\x1F\x02\u0391\u03B8\x05" +
		"> \x02\u0392\u03B8\x05B\"\x02\u0393\u03B8\x05F$\x02\u0394\u03B8\x05D#" +
		"\x02\u0395\u03B8\x05H%\x02\u0396\u03B8\x05\xB8]\x02\u0397\u03B8\x05\xBC" +
		"_\x02\u0398\u03B8\x05\xFA~\x02\u0399\u03B8\x05\u010C\x87\x02\u039A\u03B8" +
		"\x05\u010E\x88\x02\u039B\u03B8\x05\u0112\x8A\x02\u039C\u03B8\x05\u0114" +
		"\x8B\x02\u039D\u03B8\x05\u0102\x82\x02\u039E\u03B8\x05\u0108\x85\x02\u039F" +
		"\u03B8\x05\u0104\x83\x02\u03A0\u03B8\x05\u0106\x84\x02\u03A1\u03B8\x05" +
		"\u010A\x86\x02\u03A2\u03B8\x05\xBA^\x02\u03A3\u03B8\x05\xBE`\x02\u03A4" +
		"\u03B8\x05\xC4c\x02\u03A5\u03B8\x05\xC0a\x02\u03A6\u03B8\x05\xC6d\x02" +
		"\u03A7\u03B8\x05\xC8e\x02\u03A8\u03B8\x05\xCAf\x02\u03A9\u03B8\x05\xCC" +
		"g\x02\u03AA\u03B8\x05\xCEh\x02\u03AB\u03B8\x05\xDCo\x02\u03AC\u03B8\x05" +
		"\xD4k\x02\u03AD\u03B8\x05\xDEp\x02\u03AE\u03B8\x05\xD6l\x02\u03AF\u03B8" +
		"\x05\xD0i\x02\u03B0\u03B8\x05\xD2j\x02\u03B1\u03B8\x05\xDAn\x02\u03B2" +
		"\u03B8\x05\xD8m\x02\u03B3\u03B8\x05\u01E8\xF5\x02\u03B4\u03B8\x05\u01F6" +
		"\xFC\x02\u03B5\u03B8\x05\xA0Q\x02\u03B6\u03B8\x05\xA4S\x02\u03B7\u038F" +
		"\x03\x02\x02\x02\u03B7\u0390\x03\x02\x02\x02\u03B7\u0391\x03\x02\x02\x02" +
		"\u03B7\u0392\x03\x02\x02\x02\u03B7\u0393\x03\x02\x02\x02\u03B7\u0394\x03" +
		"\x02\x02\x02\u03B7\u0395\x03\x02\x02\x02\u03B7\u0396\x03\x02\x02\x02\u03B7" +
		"\u0397\x03\x02\x02\x02\u03B7\u0398\x03\x02\x02\x02\u03B7\u0399\x03\x02" +
		"\x02\x02\u03B7\u039A\x03\x02\x02\x02\u03B7\u039B\x03\x02\x02\x02\u03B7" +
		"\u039C\x03\x02\x02\x02\u03B7\u039D\x03\x02\x02\x02\u03B7\u039E\x03\x02" +
		"\x02\x02\u03B7\u039F\x03\x02\x02\x02\u03B7\u03A0\x03\x02\x02\x02\u03B7" +
		"\u03A1\x03\x02\x02\x02\u03B7\u03A2\x03\x02\x02\x02\u03B7\u03A3\x03\x02" +
		"\x02\x02\u03B7\u03A4\x03\x02\x02\x02\u03B7\u03A5\x03\x02\x02\x02\u03B7" +
		"\u03A6\x03\x02\x02\x02\u03B7\u03A7\x03\x02\x02\x02\u03B7\u03A8\x03\x02" +
		"\x02\x02\u03B7\u03A9\x03\x02\x02\x02\u03B7\u03AA\x03\x02\x02\x02\u03B7" +
		"\u03AB\x03\x02\x02\x02\u03B7\u03AC\x03\x02\x02\x02\u03B7\u03AD\x03\x02" +
		"\x02\x02\u03B7\u03AE\x03\x02\x02\x02\u03B7\u03AF\x03\x02\x02\x02\u03B7" +
		"\u03B0\x03\x02\x02\x02\u03B7\u03B1\x03\x02\x02\x02\u03B7\u03B2\x03\x02" +
		"\x02\x02\u03B7\u03B3\x03\x02\x02\x02\u03B7\u03B4\x03\x02\x02\x02\u03B7" +
		"\u03B5\x03\x02\x02\x02\u03B7\u03B6\x03\x02\x02\x02\u03B8%\x03\x02\x02" +
		"\x02\u03B9\u03BA\x07\f\x02\x02\u03BA\u03BB\x07\r\x02\x02\u03BB\'\x03\x02" +
		"\x02\x02\u03BC\u03BD\t\x03\x02\x02\u03BD)\x03\x02\x02\x02\u03BE\u03BF" +
		"\x07\f\x02\x02\u03BF\u03C0\x07\t\x02\x02\u03C0\u03C1\x07\r\x02\x02\u03C1" +
		"+\x03\x02\x02\x02\u03C2\u03C3\x07\x7F\x02\x02\u03C3\u03C4\x07\u0105\x02" +
		"\x02\u03C4-\x03\x02\x02\x02\u03C5\u03C6\x07\x80\x02\x02\u03C6\u03C7\x07" +
		"\u0105\x02\x02\u03C7/\x03\x02\x02\x02\u03C8\u03C9\x07y\x02\x02\u03C9\u03CA" +
		"\x07\x18\x02\x02\u03CA\u03CB\x07\xE8\x02\x02\u03CB1\x03\x02\x02\x02\u03CC" +
		"\u03CD\x07\b\x02\x02\u03CD\u03CE\x07\x89\x02\x02\u03CE3\x03\x02\x02\x02" +
		"\u03CF\u03D0\x07C\x02\x02\u03D0\u03D2\t\x04\x02\x02\u03D1\u03D3\x05*\x16" +
		"\x02\u03D2\u03D1\x03\x02\x02\x02\u03D2\u03D3\x03\x02\x02\x02\u03D3\u03D4" +
		"\x03\x02\x02\x02\u03D4\u03D6\x05\u02DA\u016E\x02\u03D5\u03D7\x05@!\x02" +
		"\u03D6\u03D5\x03\x02\x02\x02\u03D6\u03D7\x03\x02\x02\x02\u03D7\u03D9\x03" +
		"\x02\x02\x02\u03D8\u03DA\x056\x1C\x02\u03D9\u03D8\x03\x02\x02\x02\u03D9" +
		"\u03DA\x03\x02\x02\x02\u03DA\u03DE\x03\x02\x02\x02\u03DB\u03DC\x07\x97" +
		"\x02\x02\u03DC\u03DD\x07\x9A\x02\x02\u03DD\u03DF\x058\x1D\x02\u03DE\u03DB" +
		"\x03\x02\x02\x02\u03DE\u03DF\x03\x02\x02\x02\u03DF5\x03\x02\x02\x02\u03E0" +
		"\u03E1\x07\x81\x02\x02\u03E1\u03E2\x07\u016C\x02\x02\u03E27\x03\x02\x02" +
		"\x02\u03E3\u03E4\x07\u0152\x02\x02\u03E4\u03E5\x05:\x1E\x02\u03E5\u03E6" +
		"\x07\u0153\x02\x02\u03E69\x03\x02\x02\x02\u03E7\u03EC\x05\u0134\x9B\x02" +
		"\u03E8\u03E9\x07\u0150\x02\x02\u03E9\u03EB\x05\u0134\x9B\x02\u03EA\u03E8" +
		"\x03\x02\x02\x02\u03EB\u03EE\x03\x02\x02\x02\u03EC\u03EA\x03\x02\x02\x02" +
		"\u03EC\u03ED\x03\x02\x02\x02\u03ED;\x03\x02\x02\x02\u03EE\u03EC\x03\x02" +
		"\x02\x02\u03EF\u03F0\x07\xDE\x02\x02\u03F0\u03F1\x05\u02DA\u016E\x02\u03F1" +
		"=\x03\x02\x02\x02\u03F2\u03F3\x07K\x02\x02\u03F3\u03F5\t\x04\x02\x02\u03F4" +
		"\u03F6\x05&\x14\x02\u03F5\u03F4\x03\x02\x02\x02\u03F5\u03F6\x03\x02\x02" +
		"\x02\u03F6\u03F7\x03\x02\x02\x02\u03F7\u03F9\x05\u02DA\u016E\x02\u03F8" +
		"\u03FA\x05(\x15\x02\u03F9\u03F8\x03\x02\x02\x02\u03F9\u03FA\x03\x02\x02" +
		"\x02\u03FA?\x03\x02\x02\x02\u03FB\u03FC\x07N\x02\x02\u03FC\u03FD\x07\u016C" +
		"\x02\x02\u03FDA\x03\x02\x02\x02\u03FE\u0400\x07C\x02\x02\u03FF\u0401\x07" +
		"\x8C\x02\x02\u0400\u03FF\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0401" +
		"\u0403\x03\x02\x02\x02\u0402\u0404\x07D\x02\x02\u0403\u0402\x03\x02\x02" +
		"\x02\u0403\u0404\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02\u0405\u0407" +
		"\x07\'\x02\x02\u0406\u0408\x05*\x16\x02\u0407\u0406\x03\x02\x02\x02\u0407" +
		"\u0408\x03\x02\x02\x02\u0408\u0409\x03\x02\x02\x02\u0409\u043A\x05\u023E" +
		"\u0120\x02\u040A\u040B\x07\n\x02\x02\u040B\u040D\x05\u023E\u0120\x02\u040C" +
		"\u040E\x05\u012C\x97\x02\u040D\u040C\x03\x02\x02\x02\u040D\u040E\x03\x02" +
		"\x02\x02\u040E\u0410\x03\x02\x02\x02\u040F\u0411\x05\u0142\xA2\x02\u0410" +
		"\u040F\x03\x02\x02\x02\u0410\u0411\x03\x02\x02\x02\u0411\u0413\x03\x02" +
		"\x02\x02\u0412\u0414\x05\u0144\xA3\x02\u0413\u0412\x03\x02\x02\x02\u0413" +
		"\u0414\x03\x02\x02\x02\u0414\u0416\x03\x02\x02\x02\u0415\u0417\x05\u012E" +
		"\x98\x02\u0416\u0415\x03\x02\x02\x02\u0416\u0417\x03\x02\x02\x02\u0417" +
		"\u043B\x03\x02\x02\x02\u0418\u0419\x07\u0152\x02\x02\u0419\u041A\x05\u0148" +
		"\xA5\x02\u041A\u041B\x07\u0153\x02\x02\u041B\u041D\x03\x02\x02\x02\u041C" +
		"\u0418\x03\x02\x02\x02\u041C\u041D\x03\x02\x02\x02\u041D\u041F\x03\x02" +
		"\x02\x02\u041E\u0420\x05\u011A\x8E\x02\u041F\u041E\x03\x02\x02\x02\u041F" +
		"\u0420\x03\x02\x02\x02\u0420\u0422\x03\x02\x02\x02\u0421\u0423\x05\u011C" +
		"\x8F\x02\u0422\u0421\x03\x02\x02\x02\u0422\u0423\x03\x02\x02\x02\u0423" +
		"\u0425\x03\x02\x02\x02\u0424\u0426\x05\u011E\x90\x02\u0425\u0424\x03\x02" +
		"\x02\x02\u0425\u0426\x03\x02\x02\x02\u0426\u0428\x03\x02\x02\x02\u0427" +
		"\u0429\x05\u0120\x91\x02\u0428\u0427\x03\x02\x02\x02\u0428\u0429\x03\x02" +
		"\x02\x02\u0429\u042B\x03\x02\x02\x02\u042A\u042C\x05\u012C\x97\x02\u042B" +
		"\u042A\x03\x02\x02\x02\u042B\u042C\x03\x02\x02\x02\u042C\u042E\x03\x02" +
		"\x02\x02\u042D\u042F\x05\u0142\xA2\x02\u042E\u042D\x03\x02\x02\x02\u042E" +
		"\u042F\x03\x02\x02\x02\u042F\u0431\x03\x02\x02\x02\u0430\u0432\x05\u0144" +
		"\xA3\x02\u0431\u0430\x03\x02\x02\x02\u0431\u0432\x03\x02\x02\x02\u0432" +
		"\u0434\x03\x02\x02\x02\u0433\u0435\x05\u012E\x98\x02\u0434\u0433\x03\x02" +
		"\x02\x02\u0434\u0435\x03\x02\x02\x02\u0435\u0438\x03\x02\x02\x02\u0436" +
		"\u0437\x07\x18\x02\x02\u0437\u0439\x05\u01C4\xE3\x02\u0438\u0436\x03\x02" +
		"\x02\x02\u0438\u0439\x03\x02\x02\x02\u0439\u043B\x03\x02\x02\x02\u043A" +
		"\u040A\x03\x02\x02\x02\u043A\u041C\x03\x02\x02\x02\u043BC\x03\x02\x02" +
		"\x02\u043C\u043D\x07\xF6\x02\x02\u043D\u043E\x07\'\x02\x02\u043E\u0444" +
		"\x05\xA6T\x02\u043F\u0440\x07)\x02\x02\u0440\u0441\x07\u0152\x02\x02\u0441" +
		"\u0442\x05\u014C\xA7\x02\u0442\u0443\x07\u0153\x02\x02\u0443\u0445\x03" +
		"\x02\x02\x02\u0444\u043F\x03\x02\x02\x02\u0444\u0445\x03\x02\x02\x02\u0445" +
		"E\x03\x02\x02\x02\u0446\u0447\x07K\x02\x02\u0447\u0449\x07\'\x02\x02\u0448" +
		"\u044A\x05&\x14\x02\u0449\u0448\x03\x02\x02\x02\u0449\u044A\x03\x02\x02" +
		"\x02\u044A\u044B\x03\x02\x02\x02\u044B\u044D\x05\u023E\u0120\x02\u044C" +
		"\u044E\x07\xCA\x02\x02\u044D\u044C\x03\x02\x02\x02\u044D\u044E\x03\x02" +
		"\x02\x02\u044E\u0450\x03\x02\x02\x02\u044F\u0451\x05\x14\v\x02\u0450\u044F" +
		"\x03\x02\x02\x02\u0450\u0451\x03\x02\x02\x02\u0451G\x03\x02\x02\x02\u0452" +
		"\u0453\x07E\x02\x02\u0453\u0454\x07\'\x02\x02\u0454\u0455\x05\u023E\u0120" +
		"\x02\u0455\u0456\x05J&\x02\u0456\u046C\x03\x02\x02\x02\u0457\u0458\x07" +
		"E\x02\x02\u0458\u0459\x07\xB4\x02\x02\u0459\u045B\x05\u023E\u0120\x02" +
		"\u045A\u045C\x07\x18\x02\x02\u045B\u045A\x03\x02\x02\x02\u045B\u045C\x03" +
		"\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u045E\x05P)\x02\u045E\u046C" +
		"\x03\x02\x02\x02\u045F\u0460\x07E\x02\x02\u0460\u0461\x07\xB9\x02\x02" +
		"\u0461\u0462\x07\xB4\x02\x02\u0462\u0463\x05\u023E";
	private static readonly _serializedATNSegment3: string =
		"\u0120\x02\u0463\u0464\x05R*\x02\u0464\u046C\x03\x02\x02\x02\u0465\u0466" +
		"\x07E\x02\x02\u0466\u0467\t\x04\x02\x02\u0467\u046C\x05T+\x02\u0468\u0469" +
		"\x07E\x02\x02\u0469\u046A\x07*\x02\x02\u046A\u046C\x05\x84C\x02\u046B" +
		"\u0452\x03\x02\x02\x02\u046B\u0457\x03\x02\x02\x02\u046B\u045F\x03\x02" +
		"\x02\x02\u046B\u0465\x03\x02\x02\x02\u046B\u0468\x03\x02\x02\x02\u046C" +
		"I\x03\x02\x02\x02\u046D\u047F\x05\\/\x02\u046E\u047F\x05x=\x02\u046F\u047F" +
		"\x05l7\x02\u0470\u047F\x05p9\x02\u0471\u047F\x05r:\x02\u0472\u047F\x05" +
		"t;\x02\u0473\u047F\x05z>\x02\u0474\u047F\x05\x94K\x02\u0475\u047F\x05" +
		"\x96L\x02\u0476\u047F\x05N(\x02\u0477\u047F\x05b2\x02\u0478\u047F\x05" +
		"`1\x02\u0479\u047B\x05\u02CC\u0167\x02\u047A\u0479\x03\x02\x02\x02\u047A" +
		"\u047B\x03\x02\x02\x02\u047B\u047C\x03\x02\x02\x02\u047C\u047F\x05L\'" +
		"\x02\u047D\u047F\x05\xACW\x02\u047E\u046D\x03\x02\x02\x02\u047E\u046E" +
		"\x03\x02\x02\x02\u047E\u046F\x03\x02\x02\x02\u047E\u0470\x03\x02\x02\x02" +
		"\u047E\u0471\x03\x02\x02\x02\u047E\u0472\x03\x02\x02\x02\u047E\u0473\x03" +
		"\x02\x02\x02\u047E\u0474\x03\x02\x02\x02\u047E\u0475\x03\x02\x02\x02\u047E" +
		"\u0476\x03\x02\x02\x02\u047E\u0477\x03\x02\x02\x02\u047E\u0478\x03\x02" +
		"\x02\x02\u047E\u047A\x03\x02\x02\x02\u047E\u047D\x03\x02\x02\x02\u047F" +
		"K\x03\x02\x02\x02\u0480\u048E\x05\x86D\x02\u0481\u048E\x05\x92J\x02\u0482" +
		"\u048E\x05\x9CO\x02\u0483\u048E\x05\x82B\x02\u0484\u048E\x05\x98M\x02" +
		"\u0485\u048E\x05\x9EP\x02\u0486\u048E\x05\x8AF\x02\u0487\u048E\x05\x88" +
		"E\x02\u0488\u048E\x05\xAAV\x02\u0489\u048E\x05f4\x02\u048A\u048E\x05h" +
		"5\x02\u048B\u048E\x05d3\x02\u048C\u048E\x05^0\x02\u048D\u0480\x03\x02" +
		"\x02\x02\u048D\u0481\x03\x02\x02\x02\u048D\u0482\x03\x02\x02\x02\u048D" +
		"\u0483\x03\x02\x02\x02\u048D\u0484\x03\x02\x02\x02\u048D\u0485\x03\x02" +
		"\x02\x02\u048D\u0486\x03\x02\x02\x02\u048D\u0487\x03\x02\x02\x02\u048D" +
		"\u0488\x03\x02\x02\x02\u048D\u0489\x03\x02\x02\x02\u048D\u048A\x03\x02" +
		"\x02\x02\u048D\u048B\x03\x02\x02\x02\u048D\u048C\x03\x02\x02\x02\u048E" +
		"M\x03\x02\x02\x02\u048F\u0490\x07%\x02\x02\u0490\u0491\x07G\x02\x02\u0491" +
		"\u0492\x07\u0152\x02\x02\u0492\u0493\x05\u0182\xC2\x02\u0493\u0494\x07" +
		"\u0153\x02\x02\u0494O\x03\x02\x02\x02\u0495\u049B\x05|?\x02\u0496\u049B" +
		"\x05\\/\x02\u0497\u049B\x05l7\x02\u0498\u049B\x05x=\x02\u0499\u049B\x05" +
		"\u01C4\xE3\x02\u049A\u0495\x03\x02\x02\x02\u049A\u0496\x03\x02\x02\x02" +
		"\u049A\u0497\x03\x02\x02\x02\u049A\u0498\x03\x02\x02\x02\u049A\u0499\x03" +
		"\x02\x02\x02\u049BQ\x03\x02\x02\x02\u049C\u049F\x05~@\x02\u049D\u049F" +
		"\x05\x80A\x02\u049E\u049C\x03\x02\x02\x02\u049E\u049D\x03\x02\x02\x02" +
		"\u049FS\x03\x02\x02\x02\u04A0\u04A4\x05V,\x02\u04A1\u04A4\x05X-\x02\u04A2" +
		"\u04A4\x05Z.\x02\u04A3\u04A0\x03\x02\x02\x02\u04A3\u04A1\x03\x02\x02\x02" +
		"\u04A3\u04A2\x03\x02\x02\x02\u04A4U\x03\x02\x02\x02\u04A5\u04A6\x05\u02DA" +
		"\u016E\x02\u04A6\u04A7\x07\x9D\x02\x02\u04A7\u04A8\x07\x9A\x02\x02\u04A8" +
		"\u04A9\x058\x1D\x02\u04A9W\x03\x02\x02\x02\u04AA\u04AB\x05\u02DA\u016E" +
		"\x02\u04AB\u04AC\x07\x9D\x02\x02\u04AC\u04AD\x07\u0100\x02\x02\u04AD\u04AE" +
		"\x05\xF0y\x02\u04AEY\x03\x02\x02\x02\u04AF\u04B0\x05\u02DA\u016E\x02\u04B0" +
		"\u04B1\x07\x9D\x02\x02\u04B1\u04B2\x07\x81\x02\x02\u04B2\u04B3\x07\u016C" +
		"\x02\x02\u04B3[\x03\x02\x02\x02\u04B4\u04B5\x07L\x02\x02\u04B5\u04B6\x07" +
		"M\x02\x02\u04B6\u04B7\x05\u023E\u0120\x02\u04B7]\x03\x02\x02\x02\u04B8" +
		"\u04B9\t\x05\x02\x02\u04B9\u04BA\x07)\x02\x02\u04BA\u04BB\x07\u0152\x02" +
		"\x02\u04BB\u04BC\x05\u0146\xA4\x02\u04BC\u04BE\x07\u0153\x02\x02\u04BD" +
		"\u04BF\x05(\x15\x02\u04BE\u04BD\x03\x02\x02\x02\u04BE\u04BF\x03\x02\x02" +
		"\x02\u04BF_\x03\x02\x02\x02\u04C0\u04C3\x07\x88\x02\x02\u04C1\u04C4\x05" +
		"\u0168\xB5\x02\u04C2\u04C4\x05\u0162\xB2\x02\u04C3\u04C1\x03\x02\x02\x02" +
		"\u04C3\u04C2\x03\x02\x02\x02\u04C4a\x03\x02\x02\x02\u04C5\u04C6\x07K\x02" +
		"\x02\u04C6\u04C7\x07\u0124\x02\x02\u04C7\u04C8\x05\u02DA\u016E\x02\u04C8" +
		"c\x03\x02\x02\x02\u04C9\u04CB\x07F\x02\x02\u04CA\u04CC\x07G\x02\x02\u04CB" +
		"\u04CA\x03\x02\x02\x02\u04CB\u04CC\x03\x02\x02\x02\u04CC\u04CD\x03\x02" +
		"\x02\x02\u04CD\u04CE\x05\u02DA\u016E\x02\u04CE\u04CF\x05\u02DA\u016E\x02" +
		"\u04CF\u04D1\x05\u019E\xD0\x02\u04D0\u04D2\x05\u0190\xC9\x02\u04D1\u04D0" +
		"\x03\x02\x02\x02\u04D1\u04D2\x03\x02\x02\x02\u04D2\u04D5\x03\x02\x02\x02" +
		"\u04D3\u04D4\x07N\x02\x02\u04D4\u04D6\x07\u016C\x02\x02\u04D5\u04D3\x03" +
		"\x02\x02\x02\u04D5\u04D6\x03\x02\x02\x02\u04D6\u04D8\x03\x02\x02\x02\u04D7" +
		"\u04D9\x05j6\x02\u04D8\u04D7\x03\x02\x02\x02\u04D8\u04D9\x03\x02\x02\x02" +
		"\u04D9\u04DB\x03\x02\x02\x02\u04DA\u04DC\x05(\x15\x02\u04DB\u04DA\x03" +
		"\x02\x02\x02\u04DB\u04DC\x03\x02\x02\x02\u04DCe\x03\x02\x02\x02\u04DD" +
		"\u04DE\x07\xE2\x02\x02\u04DE\u04DF\x07\xDD\x02\x02\u04DF\u04E1\x07\xE9" +
		"\x02\x02\u04E0\u04E2\x07G\x02\x02\u04E1\u04E0\x03\x02\x02\x02\u04E1\u04E2" +
		"\x03\x02\x02\x02\u04E2\u04E3\x03\x02\x02\x02\u04E3\u04E4\x05\u02DA\u016E" +
		"\x02\u04E4\u04E5\x07\x9D\x02\x02\u04E5\u04E8\x05\u0130\x99\x02\u04E6\u04E7" +
		"\x07N\x02\x02\u04E7\u04E9\x07\u016C\x02\x02\u04E8\u04E6\x03\x02\x02\x02" +
		"\u04E8\u04E9\x03\x02\x02\x02\u04E9g\x03\x02\x02\x02\u04EA\u04EB\x07\xE2" +
		"\x02\x02\u04EB\u04EC\x07\xDD\x02\x02\u04EC\u04ED\x07\x9D\x02\x02\u04ED" +
		"\u04EE\x05\u0130\x99\x02\u04EEi\x03\x02\x02\x02\u04EF\u04F3\x07H\x02\x02" +
		"\u04F0\u04F1\x07I\x02\x02\u04F1\u04F3\x05\u02DA\u016E\x02\u04F2\u04EF" +
		"\x03\x02\x02\x02\u04F2\u04F0\x03\x02\x02\x02\u04F3k\x03\x02\x02\x02\u04F4" +
		"\u04F6\x07\x88\x02\x02\u04F5\u04F7\x05*\x16\x02\u04F6\u04F5\x03\x02\x02" +
		"\x02\u04F6\u04F7\x03\x02\x02\x02\u04F7\u04F9\x03\x02\x02\x02\u04F8\u04FA" +
		"\x05n8\x02\u04F9\u04F8\x03\x02\x02\x02\u04FA\u04FB\x03\x02\x02\x02\u04FB" +
		"\u04F9\x03\x02\x02\x02\u04FB\u04FC\x03\x02\x02\x02\u04FCm\x03\x02\x02" +
		"\x02\u04FD\u04FF\x05\u02CC\u0167\x02\u04FE\u0500\x05v<\x02\u04FF\u04FE" +
		"\x03\x02\x02\x02\u04FF\u0500\x03\x02\x02\x02\u0500o\x03\x02\x02\x02\u0501" +
		"\u0505\x07\xD9\x02\x02\u0502\u0504\x05\u02CC\u0167\x02\u0503\u0502\x03" +
		"\x02\x02\x02\u0504\u0507\x03\x02\x02\x02\u0505\u0503\x03\x02\x02\x02\u0505" +
		"\u0506\x03\x02\x02\x02\u0506q\x03\x02\x02\x02\u0507\u0505\x03\x02\x02" +
		"\x02\u0508\u050C\x07\xDA\x02\x02\u0509\u050B\x05\u02CC\u0167\x02\u050A" +
		"\u0509\x03\x02\x02\x02\u050B\u050E\x03\x02\x02\x02\u050C\u050A\x03\x02" +
		"\x02\x02\u050C\u050D\x03\x02\x02\x02\u050Ds\x03\x02\x02\x02\u050E\u050C" +
		"\x03\x02\x02\x02\u050F\u0513\x07\xDB\x02\x02\u0510\u0512\x05\u02CC\u0167" +
		"\x02\u0511\u0510\x03\x02\x02\x02\u0512\u0515\x03\x02\x02\x02\u0513\u0511" +
		"\x03\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514u\x03\x02\x02\x02\u0515" +
		"\u0513\x03\x02\x02\x02\u0516\u0517\x07\x81\x02\x02\u0517\u0518\x07\u016C" +
		"\x02\x02\u0518w\x03\x02\x02\x02\u0519\u051B\x07K\x02\x02\u051A\u051C\x05" +
		"&\x14\x02\u051B\u051A\x03\x02\x02\x02\u051B\u051C\x03\x02\x02\x02\u051C" +
		"\u051D\x03\x02\x02\x02\u051D\u0522\x05\u02D0\u0169\x02\u051E\u051F\x07" +
		"\u0150\x02\x02\u051F\u0521\x05\u02D0\u0169\x02\u0520\u051E\x03\x02\x02" +
		"\x02\u0521\u0524\x03\x02\x02\x02\u0522\u0520\x03\x02\x02\x02\u0522\u0523" +
		"\x03\x02\x02\x02\u0523\u0526\x03\x02\x02\x02\u0524\u0522\x03\x02\x02\x02" +
		"\u0525\u0527\x07\xCA\x02\x02\u0526\u0525\x03\x02\x02\x02\u0526\u0527\x03" +
		"\x02\x02\x02\u0527\u0529\x03\x02\x02\x02\u0528\u052A\x05\x14\v\x02\u0529" +
		"\u0528\x03\x02\x02\x02\u0529\u052A\x03\x02\x02\x02\u052Ay\x03\x02\x02" +
		"\x02\u052B\u052C\x07\x9D\x02\x02\u052C\u052D\x07\x9F\x02\x02\u052D\u0535" +
		"\x05\u0130\x99\x02\u052E\u052F\x07\x9E\x02\x02\u052F\u0531\x07\x9F\x02" +
		"\x02\u0530\u0532\x05&\x14\x02\u0531\u0530\x03\x02\x02\x02\u0531\u0532" +
		"\x03\x02\x02\x02\u0532\u0533\x03\x02\x02\x02\u0533\u0535\x05\u0130\x99" +
		"\x02\u0534\u052B\x03\x02\x02\x02\u0534\u052E\x03\x02\x02\x02\u0535{\x03" +
		"\x02\x02\x02\u0536\u0537\x07\x9D\x02\x02\u0537\u0538\x07\x9F\x02\x02\u0538" +
		"\u0540\x05\u0130\x99\x02\u0539\u053A\x07\x9E\x02\x02\u053A\u053C\x07\x9F" +
		"\x02\x02\u053B\u053D\x05&\x14\x02\u053C\u053B\x03\x02\x02\x02\u053C\u053D" +
		"\x03\x02\x02\x02\u053D\u053E\x03\x02\x02\x02\u053E\u0540\x05\u0130\x99" +
		"\x02\u053F\u0536\x03\x02\x02\x02\u053F\u0539\x03\x02\x02\x02\u0540}\x03" +
		"\x02\x02\x02\u0541\u0544\x05,\x17\x02\u0542\u0544\x05.\x18\x02\u0543\u0541" +
		"\x03\x02\x02\x02\u0543\u0542\x03\x02\x02\x02\u0544\x7F\x03\x02\x02\x02" +
		"\u0545\u0546\x07,\x02\x02\u0546\x81\x03\x02\x02\x02\u0547\u0548\x07\x9D" +
		"\x02\x02\u0548\u0549\x07\x96\x02\x02\u0549\u054D\x07\u016C\x02\x02\u054A" +
		"\u054B\x07\x97\x02\x02\u054B\u054C\x07\x99\x02\x02\u054C\u054E\x05\u0130" +
		"\x99\x02\u054D\u054A\x03\x02\x02\x02\u054D\u054E\x03\x02\x02\x02\u054E" +
		"\u0553\x03\x02\x02\x02\u054F\u0550\x07\x9D\x02\x02\u0550\u0551\x07\x99" +
		"\x02\x02\u0551\u0553\x05\u0130\x99\x02\u0552\u0547\x03\x02\x02\x02\u0552" +
		"\u054F\x03\x02\x02\x02\u0553\x83\x03\x02\x02\x02\u0554\u0555\x05\u02DA" +
		"\u016E\x02\u0555\u0556\x07$\x02\x02\u0556\u0558\x05\u023E\u0120\x02\u0557" +
		"\u0559\x05\u02CC\u0167\x02\u0558\u0557\x03\x02\x02\x02\u0558\u0559\x03" +
		"\x02\x02\x02\u0559\u055A\x03\x02\x02\x02\u055A\u055B\x07,\x02\x02\u055B" +
		"\x85\x03\x02\x02\x02\u055C\u055D\x07\x9D\x02\x02\u055D\u055E\x07z\x02" +
		"\x02\u055E\u055F\x05\xAEX\x02\u055F\x87\x03\x02\x02\x02\u0560\u0561\x07" +
		"\t\x02\x02\u0561\u0566\x07h\x02\x02\u0562\u0563\x07\t\x02\x02\u0563\u0566" +
		"\x07i\x02\x02\u0564\u0566\x05\u011E\x90\x02\u0565\u0560\x03\x02\x02\x02" +
		"\u0565\u0562\x03\x02\x02\x02\u0565\u0564\x03\x02\x02\x02\u0566\x89\x03" +
		"\x02\x02\x02\u0567\u0568\x07\x9D\x02\x02\u0568\u0569\x07\xE5\x02\x02\u0569" +
		"\u056A\x07\x81\x02\x02\u056A\u056B\x05\x8CG\x02\u056B\x8B\x03\x02\x02" +
		"\x02\u056C\u056D\x07\u0152\x02\x02\u056D\u056E\x05\x8EH\x02\u056E\u056F" +
		"\x07\u0153\x02\x02\u056F\x8D\x03\x02\x02\x02\u0570\u0575\x05\x90I\x02" +
		"\u0571\u0572\x07\u0150\x02\x02\u0572\u0574\x05\x90I\x02\u0573\u0571\x03" +
		"\x02\x02\x02\u0574\u0577\x03\x02\x02\x02\u0575\u0573\x03\x02\x02\x02\u0575" +
		"\u0576\x03\x02\x02\x02\u0576\x8F\x03\x02\x02\x02\u0577\u0575\x03\x02\x02" +
		"\x02\u0578\u0579\x05\u0174\xBB\x02\u0579\u057A\x07\u0158\x02\x02\u057A" +
		"\u057B\x07\u016C\x02\x02\u057B\x91\x03\x02\x02\x02\u057C\u057D\x07\x9D" +
		"\x02\x02\u057D\u057E\x07\x81\x02\x02\u057E\u057F\x07\u016C\x02\x02\u057F" +
		"\x93\x03\x02\x02\x02\u0580\u0586\x05\u0120\x91\x02\u0581\u0582\x07\t\x02" +
		"\x02\u0582\u0586\x07\xE5\x02\x02\u0583\u0584\x07\t\x02\x02\u0584\u0586" +
		"\x050\x19\x02\u0585\u0580\x03\x02\x02\x02\u0585\u0581\x03\x02\x02\x02" +
		"\u0585\u0583\x03\x02\x02\x02\u0586\x95\x03\x02\x02\x02\u0587\u0588\x07" +
		"\xFC\x02\x02\u0588\u0589\x05\u02CC\u0167\x02\u0589\u058A\x07\x97\x02\x02" +
		"\u058A\u058B\x07\'\x02\x02\u058B\u058C\x05\u023E\u0120\x02\u058C\x97\x03" +
		"\x02\x02\x02\u058D\u058E\x07L\x02\x02\u058E\u058F\x07M\x02\x02\u058F\u0590" +
		"\x05\u02CC\u0167\x02\u0590\x99\x03\x02\x02\x02\u0591\u0592\x07\xE2\x02" +
		"\x02\u0592\u0593\x07\xDD\x02\x02\u0593\u0595\x07\xE9\x02\x02\u0594\u0596" +
		"\x07G\x02\x02\u0595\u0594\x03\x02\x02\x02\u0595\u0596\x03\x02\x02\x02" +
		"\u0596\u0597\x03\x02\x02\x02\u0597\u0598\x05\u02DA\u016E\x02\u0598\u0599" +
		"\x07\x9D\x02\x02\u0599\u059C\x05\u0130\x99\x02\u059A\u059B\x07N\x02\x02" +
		"\u059B\u059D\x07\u016C\x02\x02\u059C\u059A\x03\x02\x02\x02\u059C\u059D" +
		"\x03\x02\x02\x02\u059D\x9B\x03\x02\x02\x02\u059E\u059F\x07\xE0\x02\x02" +
		"\u059F\x9D\x03\x02\x02\x02\u05A0\u05A1\x07j\x02\x02\u05A1\u05A2\x07\u0171" +
		"\x02\x02\u05A2\u05A3\x07k\x02\x02\u05A3\x9F\x03\x02\x02\x02\u05A4\u05A5" +
		"\x07C\x02\x02\u05A5\u05A6\x07*\x02\x02\u05A6\u05A7\x05\u02DA\u016E\x02" +
		"\u05A7\u05A8\x07$\x02\x02\u05A8\u05A9\x07\'\x02\x02\u05A9\u05AA\x05\u023E" +
		"\u0120\x02\u05AA\u05AB\x05\u0154\xAB\x02\u05AB\u05AC\x07\x18\x02\x02\u05AC" +
		"\u05B0\x07\u016C\x02\x02\u05AD\u05AE\x07\x97\x02\x02\u05AE\u05AF\x07\x98" +
		"\x02\x02\u05AF\u05B1\x07,\x02\x02\u05B0\u05AD\x03\x02\x02\x02\u05B0\u05B1" +
		"\x03\x02\x02\x02\u05B1\u05B4\x03\x02\x02\x02\u05B2\u05B3\x07\xA0\x02\x02" +
		"\u05B3\u05B5\x05\u0130\x99\x02\u05B4\u05B2\x03\x02\x02\x02\u05B4\u05B5" +
		"\x03\x02\x02\x02\u05B5\u05B9\x03\x02\x02\x02\u05B6\u05B7\x07\xB6\x02\x02" +
		"\u05B7\u05B8\x07\'\x02\x02\u05B8\u05BA\x05\u023E\u0120\x02\u05B9\u05B6" +
		"\x03\x02\x02\x02\u05B9\u05BA\x03\x02\x02\x02\u05BA\u05BE\x03\x02\x02\x02" +
		"\u05BB\u05BC\x07g\x02\x02\u05BC\u05BD\x07\x14\x02\x02\u05BD\u05BF\x05" +
		"\u0154\xAB\x02\u05BE\u05BB\x03\x02\x02\x02\u05BE\u05BF\x03\x02\x02\x02" +
		"\u05BF\u05C4\x03\x02\x02\x02\u05C0\u05C2\x05\u012C\x97\x02\u05C1\u05C0" +
		"\x03\x02\x02\x02\u05C1\u05C2\x03\x02\x02\x02\u05C2\u05C3\x03\x02\x02\x02" +
		"\u05C3\u05C5\x05\u0142\xA2\x02\u05C4\u05C1\x03\x02\x02\x02\u05C4\u05C5" +
		"\x03\x02\x02\x02\u05C5\u05C8\x03\x02\x02\x02\u05C6\u05C7\x07\x81\x02\x02" +
		"\u05C7\u05C9\x05\xA2R\x02\u05C8\u05C6\x03\x02\x02\x02\u05C8\u05C9\x03" +
		"\x02\x02\x02\u05C9\u05CB\x03\x02\x02\x02\u05CA\u05CC\x05\u012E\x98\x02" +
		"\u05CB\u05CA\x03\x02\x02\x02\u05CB\u05CC\x03\x02\x02\x02\u05CC\u05CE\x03" +
		"\x02\x02\x02\u05CD\u05CF\x05\u011A\x8E\x02\u05CE\u05CD\x03\x02\x02\x02" +
		"\u05CE\u05CF\x03\x02\x02\x02\u05CF\xA1\x03\x02\x02\x02\u05D0\u05D5\x05" +
		"\u02DA\u016E\x02\u05D1\u05D2\x07\u014E\x02\x02\u05D2\u05D4\x05\u02DA\u016E" +
		"\x02\u05D3\u05D1\x03\x02\x02\x02\u05D4\u05D7\x03\x02\x02\x02\u05D5\u05D3" +
		"\x03\x02\x02\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6\xA3\x03\x02\x02\x02" +
		"\u05D7\u05D5\x03\x02\x02\x02\u05D8\u05D9\x07K\x02\x02\u05D9\u05DA\x07" +
		"*\x02\x02\u05DA\u05DB\x05\u02DA\u016E\x02\u05DB\u05DC\x07$\x02\x02\u05DC" +
		"\u05DD\x05\u023E\u0120\x02\u05DD\xA5\x03\x02\x02\x02\u05DE\u05E0\x05\u023E" +
		"\u0120\x02\u05DF\u05E1\x05\u02CC\u0167\x02\u05E0\u05DF\x03\x02\x02\x02" +
		"\u05E0\u05E1\x03\x02\x02\x02\u05E1\xA7\x03\x02\x02\x02\u05E2\u05E3\x07" +
		"\x07\x02\x02\u05E3\u05E4\x07\u0139\x02\x02\u05E4\xA9\x03\x02\x02\x02\u05E5" +
		"\u05E6\x07\u0102\x02\x02\u05E6\u05E8\x07\u016C\x02\x02\u05E7\u05E9\x05" +
		"\xA8U\x02\u05E8\u05E7\x03\x02\x02\x02\u05E8\u05E9\x03\x02\x02\x02\u05E9" +
		"\u05EE\x03\x02\x02\x02\u05EA\u05EB\x07\x97\x02\x02\u05EB\u05EC\x07\x1C" +
		"\x02\x02\u05EC\u05ED\x07\x9F\x02\x02\u05ED\u05EF\x05\u0130\x99\x02\u05EE" +
		"\u05EA\x03\x02\x02\x02\u05EE\u05EF\x03\x02\x02\x02\u05EF\xAB\x03\x02\x02" +
		"\x02\u05F0\u05F1\x07\x9D\x02\x02\u05F1\u05F2\x07\u0100\x02\x02\u05F2\u05F3" +
		"\x05\xF0y\x02\u05F3\xAD\x03\x02\x02\x02\u05F4\u05F5\x07{\x02\x02\u05F5" +
		"\u05F6\x07\u016C\x02\x02\u05F6\u05F7\x07|\x02\x02\u05F7\u05F8\x07\u016C" +
		"\x02\x02\u05F8\u05F9\x07\x96\x02\x02\u05F9\u05FE\x07\u016C\x02\x02\u05FA" +
		"\u05FB\x07}\x02\x02\u05FB\u05FC\x07\u016C\x02\x02\u05FC\u05FD\x07~\x02" +
		"\x02\u05FD\u05FF\x07\u016C\x02\x02\u05FE\u05FA\x03\x02\x02\x02\u05FE\u05FF" +
		"\x03\x02\x02\x02\u05FF\u0602\x03\x02\x02\x02\u0600\u0602\x05\u02DA\u016E" +
		"\x02\u0601\u05F4\x03\x02\x02\x02\u0601\u0600\x03\x02\x02\x02\u0602\xAF" +
		"\x03\x02\x02\x02\u0603\u0604\x07{\x02\x02\u0604\u0605\x07\u016C\x02\x02" +
		"\u0605\u0606\x07\x96\x02\x02\u0606\u0607\x07\u016C\x02\x02\u0607\xB1\x03" +
		"\x02\x02\x02\u0608\u060B\x05\u02DA\u016E\x02\u0609\u060A\x07\u014E\x02" +
		"\x02\u060A\u060C\x05\u02DA\u016E\x02\u060B\u0609\x03\x02\x02\x02\u060B" +
		"\u060C\x03\x02\x02\x02\u060C\u061A\x03\x02\x02\x02\u060D\u0617\x05\u02DA" +
		"\u016E\x02\u060E\u0613\x07\u014E\x02\x02\u060F\u0614\x07\xA2\x02\x02\u0610" +
		"\u0614\x07v\x02\x02\u0611\u0614\x07\xA1\x02\x02\u0612\u0614\x05\u02DA" +
		"\u016E\x02\u0613\u060F\x03\x02\x02\x02\u0613\u0610\x03\x02\x02\x02\u0613" +
		"\u0611\x03\x02\x02\x02\u0613\u0612\x03\x02\x02\x02\u0614\u0616\x03\x02" +
		"\x02\x02\u0615\u060E\x03\x02\x02\x02\u0616\u0619\x03\x02\x02\x02\u0617" +
		"\u0615\x03\x02\x02\x02\u0617\u0618\x03\x02\x02\x02\u0618\u061B\x03\x02" +
		"\x02\x02\u0619\u0617\x03\x02\x02\x02\u061A\u060D\x03\x02\x02\x02\u061A" +
		"\u061B\x03\x02\x02\x02\u061B\xB3\x03\x02\x02\x02\u061C\u061E\x05\xB2Z" +
		"\x02\u061D\u061F\x05\u02CC\u0167\x02\u061E\u061D\x03\x02\x02\x02\u061E" +
		"\u061F\x03\x02\x02\x02\u061F\xB5\x03\x02\x02\x02\u0620\u0622\x05\u023E" +
		"\u0120\x02\u0621\u0623\x05\u02CC\u0167\x02\u0622\u0621\x03\x02\x02\x02" +
		"\u0622\u0623\x03\x02\x02\x02\u0623\u0625\x03\x02\x02\x02\u0624\u0626\x05" +
		"\u0150\xA9\x02\u0625\u0624\x03\x02\x02\x02\u0625\u0626\x03\x02\x02\x02" +
		"\u0626\xB7\x03\x02\x02\x02\u0627\u0635\t\x06\x02\x02\u0628\u062A\t\x04" +
		"\x02\x02\u0629\u062B\x07\x92\x02\x02\u062A\u0629\x03\x02\x02\x02\u062A" +
		"\u062B\x03\x02\x02\x02\u062B\u062C\x03\x02\x02\x02\u062C\u0636\x05\u02DA" +
		"\u016E\x02\u062D\u062F\x07\x8D\x02\x02\u062E\u0630\x07\x92\x02\x02\u062F" +
		"\u062E\x03\x02\x02\x02\u062F\u0630\x03\x02\x02\x02\u0630\u0631\x03\x02" +
		"\x02\x02\u0631\u0636\x05\u02D8\u016D\x02\u0632\u0633\t\x07\x02\x02\u0633" +
		"\u0636\x05\xB6\\\x02\u0634\u0636\x05\xB6\\\x02\u0635\u0628\x03\x02\x02" +
		"\x02\u0635\u062D\x03\x02\x02\x02\u0635\u0632\x03\x02\x02\x02\u0635\u0634" +
		"\x03\x02\x02\x02\u0636\xB9\x03\x02\x02\x02\u0637\u0638\x07\xCC\x02\x02" +
		"\u0638\u0639\x07\'\x02\x02\u0639\u0646\x05\u02CA\u0166\x02\u063A\u063B" +
		"\x07\xDC\x02\x02\u063B\u0642\x07\xDD\x02\x02\u063C\u0643\x07\xF7\x02\x02" +
		"\u063D\u063E\x07\xE9\x02\x02\u063E\u0640\x07)\x02\x02\u063F\u0641\x05" +
		"\u014C\xA7\x02\u0640\u063F\x03\x02\x02\x02\u0640\u0641\x03\x02\x02\x02" +
		"\u0641\u0643\x03\x02\x02\x02\u0642\u063C\x03\x02\x02\x02\u0642\u063D\x03" +
		"\x02\x02\x02\u0642\u0643\x03\x02\x02\x02\u0643\u0647\x03\x02\x02\x02\u0644" +
		"\u0645\x07\u0120\x02\x02\u0645\u0647\x07>\x02\x02\u0646\u063A\x03\x02" +
		"\x02\x02\u0646\u0644\x03\x02\x02\x02\u0647\xBB\x03\x02\x02\x02\u0648\u0649" +
		"\x07.\x02\x02\u0649\u064C\t\b\x02\x02\u064A\u064B\x07\n\x02\x02\u064B" +
		"\u064D\x05\u0118\x8D\x02\u064C\u064A\x03\x02\x02\x02\u064C\u064D\x03\x02" +
		"\x02\x02\u064D\u06C4\x03\x02\x02\x02\u064E\u064F\x07.\x02\x02\u064F\u0652" +
		"\x07(\x02\x02\u0650\u0651\t\t\x02\x02\u0651\u0653\x05\u02DA\u016E\x02" +
		"\u0652\u0650\x03\x02\x02\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0657\x03" +
		"\x02\x02\x02\u0654\u0655\x07\n\x02\x02\u0655\u0658\x05\u0118\x8D\x02\u0656" +
		"\u0658\x05\u0118\x8D\x02\u0657\u0654\x03\x02\x02\x02\u0657\u0656\x03\x02" +
		"\x02\x02\u0657\u0658\x03\x02\x02\x02\u0658\u06C4\x03\x02\x02\x02\u0659" +
		"\u065A\x07.\x02\x02\u065A\u065D\x07\xB5\x02\x02\u065B\u065C\t\t\x02\x02" +
		"\u065C\u065E\x05\u02DA\u016E\x02\u065D\u065B\x03\x02\x02\x02\u065D\u065E" +
		"\x03\x02\x02\x02\u065E\u0662\x03\x02\x02\x02\u065F\u0660\x07\n\x02\x02" +
		"\u0660\u0663\x05\u0118\x8D\x02\u0661\u0663\x05\u0118\x8D\x02\u0662\u065F" +
		"\x03\x02\x02\x02\u0662\u0661\x03\x02\x02\x02\u0662\u0663\x03\x02\x02\x02" +
		"\u0663\u06C4\x03\x02\x02\x02\u0664\u0665\x07.\x02\x02\u0665\u0666\x07" +
		"\xB9\x02\x02\u0666\u0669\x07\xB5\x02\x02\u0667\u0668\t\t\x02\x02\u0668" +
		"\u066A\x05\u02DA\u016E\x02\u0669\u0667\x03\x02\x02\x02\u0669\u066A\x03" +
		"\x02\x02\x02\u066A\u066E\x03\x02\x02\x02\u066B\u066C\x07\n\x02\x02\u066C" +
		"\u066F\x05\u0118\x8D\x02\u066D\u066F\x05\u0118\x8D\x02\u066E\u066B\x03" +
		"\x02\x02\x02\u066E\u066D\x03\x02\x02\x02\u066E\u066F\x03\x02\x02\x02\u066F" +
		"\u06C4\x03\x02\x02\x02\u0670\u0671\x07.\x02\x02\u0671\u0672\x07)\x02\x02" +
		"\u0672\u0673\t\t\x02\x02\u0673\u0676\x05\u023E\u0120\x02\u0674\u0675\t" +
		"\t\x02\x02\u0675\u0677\x05\u02DA\u016E\x02\u0676\u0674\x03\x02\x02\x02" +
		"\u0676\u0677\x03\x02\x02\x02\u0677\u067B\x03\x02\x02\x02\u0678\u0679\x07" +
		"\n\x02\x02\u0679\u067C\x05\u0118\x8D\x02\u067A\u067C\x05\u0118\x8D\x02" +
		"\u067B\u0678\x03\x02\x02\x02\u067B\u067A\x03\x02\x02\x02\u067B\u067C\x03" +
		"\x02\x02\x02\u067C\u06C4\x03\x02\x02\x02\u067D\u067E\x07.\x02\x02\u067E" +
		"\u0682\x07-\x02\x02\u067F\u0680\x07\n\x02\x02\u0680\u0683\x05\u0116\x8C" +
		"\x02\u0681\u0683\x05\u0116\x8C\x02\u0682\u067F\x03\x02\x02\x02\u0682\u0681" +
		"\x03\x02\x02\x02\u0682\u0683\x03\x02\x02\x02\u0683\u06C4\x03\x02\x02\x02" +
		"\u0684\u0685\x07.\x02\x02\u0685\u0686\x07&\x02\x02\u0686\u0688\x05\u023E" +
		"\u0120\x02\u0687\u0689\x05\u02CC\u0167\x02\u0688\u0687\x03\x02\x02\x02" +
		"\u0688\u0689\x03\x02\x02\x02\u0689\u06C4\x03\x02\x02\x02\u068A\u068B\x07" +
		".\x02\x02\u068B\u0690\x07C\x02\x02\u068C\u068D\t\x04\x02\x02\u068D\u0691" +
		"\x05\u02DA\u016E\x02\u068E\u068F\x07\'\x02\x02\u068F\u0691\x05\u023E\u0120" +
		"\x02\u0690\u068C\x03\x02\x02\x02\u0690\u068E\x03\x02\x02\x02\u0691\u06C4" +
		"\x03\x02\x02\x02\u0692\u0693\x07.\x02\x02\u0693\u0694\x07\'\x02\x02\u0694" +
		"\u0697\x07\x92\x02\x02\u0695\u0696\t\t\x02\x02\u0696\u0698\x05\u02DA\u016E" +
		"\x02\u0697\u0695\x03\x02\x02\x02\u0697\u0698\x03\x02\x02\x02\u0698\u0699" +
		"\x03\x02\x02\x02\u0699\u069A\x07\n\x02\x02\u069A\u069C\x05\u0118\x8D\x02" +
		"\u069B\u069D\x05\u02CC\u0167\x02\u069C\u069B\x03\x02\x02\x02\u069C\u069D" +
		"\x03\x02\x02\x02\u069D\u06C4\x03\x02\x02\x02\u069E\u069F\x07.\x02\x02" +
		"\u069F\u06A0\x07\x9F\x02\x02\u06A0\u06A4\x05\u023E\u0120\x02\u06A1\u06A2" +
		"\x07\u0152\x02\x02\u06A2\u06A3\x07\u016C\x02\x02\u06A3\u06A5\x07\u0153" +
		"\x02\x02\u06A4\u06A1\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02\x02\u06A5" +
		"\u06C4\x03\x02\x02\x02\u06A6\u06A7\x07.\x02\x02\u06A7\u06B3\x07\xC1\x02" +
		"\x02\u06A8\u06A9\t\x04\x02\x02\u06A9\u06AB\x05\u02DA\u016E\x02\u06AA\u06AC" +
		"\x07\x92\x02\x02\u06AB\u06AA\x03\x02\x02\x02\u06AB\u06AC\x03\x02\x02\x02" +
		"\u06AC\u06B4\x03\x02\x02\x02\u06AD\u06AF\x05\xB4[\x02\u06AE\u06AD\x03" +
		"\x02\x02\x02\u06AE\u06AF\x03\x02\x02\x02\u06AF\u06B1\x03\x02\x02\x02\u06B0" +
		"\u06B2\x07\x92\x02\x02\u06B1\u06B0\x03\x02\x02\x02\u06B1\u06B2\x03\x02" +
		"\x02\x02\u06B2\u06B4\x03\x02\x02\x02\u06B3\u06A8\x03\x02\x02\x02\u06B3" +
		"\u06AE\x03\x02\x02\x02\u06B4\u06C4\x03\x02\x02\x02\u06B5\u06B6\x07.\x02" +
		"\x02\u06B6\u06C4\x07\u0103\x02\x02\u06B7\u06B8\x07.\x02\x02\u06B8\u06C4" +
		"\x07\u0104\x02\x02\u06B9\u06BA\x07.\x02\x02\u06BA\u06BB\x07\u0108\x02" +
		"\x02\u06BB\u06C4\x07\u016C\x02\x02\u06BC\u06BD\x07.\x02\x02\u06BD\u06C1" +
		"\x07\u013A\x02\x02\u06BE\u06BF\x07\u013B\x02\x02\u06BF\u06C2\x05\u02DA" +
		"\u016E\x02\u06C0\u06C2\x07\u013D\x02\x02\u06C1\u06BE\x03\x02\x02\x02\u06C1" +
		"\u06C0\x03\x02\x02\x02\u06C2\u06C4\x03\x02\x02\x02\u06C3\u0648\x03\x02" +
		"\x02\x02\u06C3\u064E\x03\x02\x02\x02\u06C3\u0659\x03\x02\x02\x02\u06C3" +
		"\u0664\x03\x02\x02\x02\u06C3\u0670\x03\x02\x02\x02\u06C3\u067D\x03\x02" +
		"\x02\x02\u06C3\u0684\x03\x02\x02\x02\u06C3\u068A\x03\x02\x02\x02\u06C3" +
		"\u0692\x03\x02\x02\x02\u06C3\u069E\x03\x02\x02\x02\u06C3\u06A6\x03\x02" +
		"\x02\x02\u06C3\u06B5\x03\x02\x02\x02\u06C3\u06B7\x03\x02\x02\x02\u06C3" +
		"\u06B9\x03\x02\x02\x02\u06C3\u06BC\x03\x02\x02\x02\u06C4\xBD\x03\x02\x02" +
		"\x02\u06C5\u06C6\x07\xC0\x02\x02\u06C6\u06C7\x07\'\x02\x02\u06C7\u06C9" +
		"\x05\u023E\u0120\x02\u06C8\u06CA\x05\u02CC\u0167\x02\u06C9\u06C8\x03\x02" +
		"\x02\x02\u06C9\u06CA\x03\x02\x02\x02\u06CA\u06CB\x03\x02\x02\x02\u06CB" +
		"\u06CC\x05\xC2b\x02\u06CC\xBF\x03\x02\x02\x02\u06CD\u06CE\x07\xC0\x02" +
		"\x02\u06CE\u06CF\t\x04\x02\x02\u06CF\u06D0\x05\u02DA\u016E\x02\u06D0\u06D1" +
		"\x05\xC2b\x02\u06D1\xC1\x03\x02\x02\x02\u06D2\u06D3\t\n\x02\x02\u06D3" +
		"\xC3\x03\x02\x02\x02\u06D4\u06D5\x07\xC2\x02\x02\u06D5\u06D6\x07\'\x02" +
		"\x02\u06D6\u06D8\x05\u023E\u0120\x02\u06D7\u06D9\x05\u02CC\u0167\x02\u06D8" +
		"\u06D7\x03\x02\x02\x02\u06D8\u06D9\x03\x02\x02\x02\u06D9\xC5\x03\x02\x02" +
		"\x02\u06DA\u06DB\x07\xC2\x02\x02\u06DB\u06DC\t\x04\x02\x02\u06DC\u06DD" +
		"\x05\u02DA\u016E\x02\u06DD\xC7\x03\x02\x02\x02\u06DE\u06DF\x07C\x02\x02" +
		"\u06DF\u06E0\x07\xF9\x02\x02\u06E0\u06E1\x05\u02DA\u016E\x02\u06E1\xC9" +
		"\x03\x02\x02\x02\u06E2\u06E3\x07K\x02\x02\u06E3\u06E4\x07\xF9\x02\x02" +
		"\u06E4\u06E5\x05\u02DA\u016E\x02\u06E5\xCB\x03\x02\x02\x02\u06E6\u06E7" +
		"\x07\xBC\x02\x02\u06E7\u06E9\x05\xE8u\x02\u06E8\u06EA\x05\xE2r\x02\u06E9" +
		"\u06E8\x03\x02\x02\x02\u06E9\u06EA\x03\x02\x02\x02\u06EA\u06EB\x03\x02" +
		"\x02\x02\u06EB\u06EC\x07M\x02\x02\u06EC\u06EE\x05\xEEx\x02\u06ED\u06EF" +
		"\x05\xF2z\x02\u06EE\u06ED\x03\x02\x02\x02\u06EE\u06EF\x03\x02\x02\x02" +
		"\u06EF\xCD\x03\x02\x02\x02\u06F0\u06F2\x07\xBD\x02\x02\u06F1\u06F3\x05" +
		"\xF4{\x02\u06F2\u06F1\x03\x02\x02\x02\u06F2\u06F3\x03\x02\x02\x02\u06F3" +
		"\u06F4\x03\x02\x02\x02\u06F4\u06F6\x05\xE8u\x02\u06F5\u06F7\x05\xE2r\x02" +
		"\u06F6\u06F5\x03\x02\x02\x02\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06F8\x03" +
		"\x02\x02\x02\u06F8\u06F9\x07\x17\x02\x02\u06F9\u06FA\x05\xEEx\x02\u06FA" +
		"\xCF\x03\x02\x02\x02\u06FB\u06FD\x07\xBC\x02\x02\u06FC\u06FE\x07\xF9\x02" +
		"\x02\u06FD\u06FC\x03\x02\x02\x02\u06FD\u06FE\x03\x02\x02\x02\u06FE\u06FF" +
		"\x03\x02\x02\x02\u06FF\u0704\x05\u02DA\u016E\x02\u0700\u0701\x07\u0150" +
		"\x02\x02\u0701\u0703\x05\u02DA\u016E\x02\u0702\u0700\x03\x02\x02\x02\u0703" +
		"\u0706\x03\x02\x02\x02\u0704\u0702\x03\x02\x02\x02\u0704\u0705\x03\x02" +
		"\x02\x02\u0705\u0707\x03\x02\x02\x02\u0706\u0704\x03\x02\x02\x02\u0707" +
		"\u0708\x07M\x02\x02\u0708\u070A\x05\xEEx\x02\u0709\u070B\x05\xF8}\x02" +
		"\u070A\u0709\x03\x02\x02\x02\u070A\u070B\x03\x02\x02\x02";
	private static readonly _serializedATNSegment4: string =
		"\u070B\xD1\x03\x02\x02\x02\u070C\u070E\x07\xBD\x02\x02\u070D\u070F\x05" +
		"\xF6|\x02\u070E\u070D\x03\x02\x02\x02\u070E\u070F\x03\x02\x02\x02\u070F" +
		"\u0711\x03\x02\x02\x02\u0710\u0712\x07\xF9\x02\x02\u0711\u0710\x03\x02" +
		"\x02\x02\u0711\u0712\x03\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713" +
		"\u0718\x05\u02DA\u016E\x02\u0714\u0715\x07\u0150\x02\x02\u0715\u0717\x05" +
		"\u02DA\u016E\x02\u0716\u0714\x03\x02\x02\x02\u0717\u071A\x03\x02\x02\x02" +
		"\u0718\u0716\x03\x02\x02\x02\u0718\u0719\x03\x02\x02\x02\u0719\u071B\x03" +
		"\x02\x02\x02\u071A\u0718\x03\x02\x02\x02\u071B\u071C\x07\x17\x02\x02\u071C" +
		"\u071D\x05\xEEx\x02\u071D\xD3\x03\x02\x02\x02\u071E\u071F\x07.\x02\x02" +
		"\u071F\u0720\x07\xF9\x02\x02\u0720\u0721\x07\xBC\x02\x02\u0721\u0722\x05" +
		"\xF0y\x02\u0722\xD5\x03\x02\x02\x02\u0723\u0724\x07.\x02\x02\u0724\u0725" +
		"\x07\xFA\x02\x02\u0725\xD7\x03\x02\x02\x02\u0726\u0727\x07.\x02\x02\u0727" +
		"\u0728\x07\xEE\x02\x02\u0728\u0729\x07\xFA\x02\x02\u0729\xD9\x03\x02\x02" +
		"\x02\u072A\u072B\x07\x9D\x02\x02\u072B\u072F\x07\xF9\x02\x02\u072C\u0730" +
		"\x07\x05\x02\x02\u072D\u0730\x07\x06\x02\x02\u072E\u0730\x05\u02DA\u016E" +
		"\x02\u072F\u072C\x03\x02\x02\x02\u072F\u072D\x03\x02\x02\x02\u072F\u072E" +
		"\x03\x02\x02\x02\u0730\xDB\x03\x02\x02\x02\u0731\u0732\x07.\x02\x02\u0732" +
		"\u0734\x07\xBC\x02\x02\u0733\u0735\x05\xF0y\x02\u0734\u0733\x03\x02\x02" +
		"\x02\u0734\u0735\x03\x02\x02\x02\u0735\u0738\x03\x02\x02\x02\u0736\u0737" +
		"\x07$\x02\x02\u0737\u0739\x05\xE0q\x02\u0738\u0736\x03\x02\x02\x02\u0738" +
		"\u0739\x03\x02\x02\x02\u0739\xDD\x03\x02\x02\x02\u073A\u073B\x07.\x02" +
		"\x02\u073B\u073C\x07\u0101\x02\x02\u073C\u073D\x05\u02DA\u016E\x02\u073D" +
		"\xDF\x03\x02\x02\x02\u073E\u0741\x07\x05\x02\x02\u073F\u0741\x05\xE6t" +
		"\x02\u0740\u073E\x03\x02\x02\x02\u0740\u073F\x03\x02\x02\x02\u0741\xE1" +
		"\x03\x02\x02\x02\u0742\u0743\x07$\x02\x02\u0743\u0744\x05\xE4s\x02\u0744" +
		"\xE3\x03\x02\x02\x02\u0745\u0746\t\x04\x02\x02\u0746\u0753\x05\u02DA\u016E" +
		"\x02\u0747\u0749\x07\'\x02\x02\u0748\u0747\x03\x02\x02\x02\u0748\u0749" +
		"\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u074C\x05\u023E\u0120" +
		"\x02\u074B\u074D\x05\u02CC\u0167\x02\u074C\u074B\x03\x02\x02\x02\u074C" +
		"\u074D\x03\x02\x02\x02\u074D\u0753\x03\x02\x02\x02\u074E\u074F\x07\xFD" +
		"\x02\x02\u074F\u0753\x07\u016C\x02\x02\u0750\u0751\x07\xFE\x02\x02\u0751" +
		"\u0753\x05\u02DA\u016E\x02\u0752\u0745\x03\x02\x02\x02\u0752\u0748\x03" +
		"\x02\x02\x02\u0752\u074E\x03\x02\x02\x02\u0752\u0750\x03\x02\x02\x02\u0753" +
		"\xE5\x03\x02\x02\x02\u0754\u0755\t\x04\x02\x02\u0755\u0768\x05\u02DA\u016E" +
		"\x02\u0756\u0758\x07\'\x02\x02\u0757\u0756\x03\x02\x02\x02\u0757\u0758" +
		"\x03\x02\x02\x02\u0758\u0759\x03\x02\x02\x02\u0759\u075E\x05\u023E\u0120" +
		"\x02\u075A\u075B\x07\u0152\x02\x02\u075B\u075C\x05\u014C\xA7\x02\u075C" +
		"\u075D\x07\u0153\x02\x02\u075D\u075F\x03\x02\x02\x02\u075E\u075A\x03\x02" +
		"\x02\x02\u075E\u075F\x03\x02\x02\x02\u075F\u0761\x03\x02\x02\x02\u0760" +
		"\u0762\x05\u02CC\u0167\x02\u0761\u0760\x03\x02\x02\x02\u0761\u0762\x03" +
		"\x02\x02\x02\u0762\u0768\x03\x02\x02\x02\u0763\u0764\x07\xFD\x02\x02\u0764" +
		"\u0768\x07\u016C\x02\x02\u0765\u0766\x07\xFE\x02\x02\u0766\u0768\x05\u02DA" +
		"\u016E\x02\u0767\u0754\x03\x02\x02\x02\u0767\u0757\x03\x02\x02\x02\u0767" +
		"\u0763\x03\x02\x02\x02\u0767\u0765\x03\x02\x02\x02\u0768\xE7\x03\x02\x02" +
		"\x02\u0769\u076E\x05\xEAv\x02\u076A\u076B\x07\u0150\x02\x02\u076B\u076D" +
		"\x05\xEAv\x02\u076C\u076A\x03\x02\x02\x02\u076D\u0770\x03\x02\x02\x02" +
		"\u076E\u076C\x03\x02\x02\x02\u076E\u076F\x03\x02\x02\x02\u076F\xE9\x03" +
		"\x02\x02\x02\u0770\u076E\x03\x02\x02\x02\u0771\u0776\x05\xECw\x02\u0772" +
		"\u0773\x07\u0152\x02\x02\u0773\u0774\x05\u014C\xA7\x02\u0774\u0775\x07" +
		"\u0153\x02\x02\u0775\u0777\x03\x02\x02\x02\u0776\u0772\x03\x02\x02\x02" +
		"\u0776\u0777\x03\x02\x02\x02\u0777\xEB\x03\x02\x02\x02\u0778\u0779\t\v" +
		"\x02\x02\u0779\xED\x03\x02\x02\x02\u077A\u077F\x05\xF0y\x02\u077B\u077C" +
		"\x07\u0150\x02\x02\u077C\u077E\x05\xF0y\x02\u077D\u077B\x03\x02\x02\x02" +
		"\u077E\u0781\x03\x02\x02\x02\u077F\u077D\x03\x02\x02\x02\u077F\u0780\x03" +
		"\x02\x02\x02\u0780\xEF\x03\x02\x02\x02\u0781\u077F\x03\x02\x02\x02\u0782" +
		"\u0783\x07\xF8\x02\x02\u0783\u0789\x05\u02DE\u0170\x02\u0784\u0785\x07" +
		"\x13\x02\x02\u0785\u0789\x05\u02DE\u0170\x02\u0786\u0787\x07\xF9\x02\x02" +
		"\u0787\u0789\x05\u02DA\u016E\x02\u0788\u0782\x03\x02\x02\x02\u0788\u0784" +
		"\x03\x02\x02\x02\u0788\u0786\x03\x02\x02\x02\u0789\xF1\x03\x02\x02\x02" +
		"\u078A\u078B\x07\x97\x02\x02\u078B\u078C\x07\xBC\x02\x02\u078C\u078D\x07" +
		"\xDF\x02\x02\u078D\xF3\x03\x02\x02\x02\u078E\u078F\x07\xBC\x02\x02\u078F" +
		"\u0790\x07\xDF\x02\x02\u0790\u0791\x07\xE9\x02\x02\u0791\xF5\x03\x02\x02" +
		"\x02\u0792\u0793\x07\xFF\x02\x02\u0793\u0794\x07\xDF\x02\x02\u0794\u0795" +
		"\x07\xE9\x02\x02\u0795\xF7\x03\x02\x02\x02\u0796\u0797\x07\x97\x02\x02" +
		"\u0797\u0798\x07\xFF\x02\x02\u0798\u0799\x07\xDF\x02\x02\u0799\xF9\x03" +
		"\x02\x02\x02\u079A\u079C\x07/\x02\x02\u079B\u079D\x070\x02\x02\u079C\u079B" +
		"\x03\x02\x02\x02\u079C\u079D\x03\x02\x02\x02\u079D\u07A7\x03\x02\x02\x02" +
		"\u079E\u079F\x07\'\x02\x02\u079F\u07A2\x05\u023E\u0120\x02\u07A0\u07A1" +
		"\t\f\x02\x02\u07A1\u07A3\x07&\x02\x02\u07A2\u07A0\x03\x02\x02\x02\u07A2" +
		"\u07A3\x03\x02\x02\x02\u07A3\u07A8\x03\x02\x02\x02\u07A4\u07A6\x05\u02CC" +
		"\u0167\x02\u07A5\u07A4\x03\x02\x02\x02\u07A5\u07A6\x03\x02\x02\x02\u07A6" +
		"\u07A8\x03\x02\x02\x02\u07A7\u079E\x03\x02\x02\x02\u07A7\u07A5\x03\x02" +
		"\x02\x02\u07A8\xFB\x03\x02\x02\x02\u07A9\u07AE\x05\xFE\x80\x02\u07AA\u07AB" +
		"\x07\u0150\x02\x02\u07AB\u07AD\x05\xFE\x80\x02\u07AC\u07AA\x03\x02\x02" +
		"\x02\u07AD\u07B0\x03\x02\x02\x02\u07AE\u07AC\x03\x02\x02\x02\u07AE\u07AF" +
		"\x03\x02\x02\x02\u07AF\xFD\x03\x02\x02\x02\u07B0\u07AE\x03\x02\x02\x02" +
		"\u07B1\u07B2\x05\u0100\x81\x02\u07B2\u07B3\x07\u016C\x02\x02\u07B3\xFF" +
		"\x03\x02\x02\x02\u07B4\u07B5\t\r\x02\x02\u07B5\u0101\x03\x02\x02\x02\u07B6" +
		"\u07B8\x07C\x02\x02\u07B7\u07B9\x07\x8C\x02\x02\u07B8\u07B7\x03\x02\x02" +
		"\x02\u07B8\u07B9\x03\x02\x02\x02\u07B9\u07BA\x03\x02\x02\x02\u07BA\u07BB" +
		"\x07\x8D\x02\x02\u07BB\u07BC\x05\u02DC\u016F\x02\u07BC\u07BD\x07\x18\x02" +
		"\x02\u07BD\u07C0\x07\u016C\x02\x02\u07BE\u07BF\x074\x02\x02\u07BF\u07C1" +
		"\x05\xFC\x7F\x02\u07C0\u07BE\x03\x02\x02\x02\u07C0\u07C1\x03\x02\x02\x02" +
		"\u07C1\u0103\x03\x02\x02\x02\u07C2\u07C4\x07K\x02\x02\u07C3\u07C5\x07" +
		"\x8C\x02\x02\u07C4\u07C3\x03\x02\x02\x02\u07C4\u07C5\x03\x02\x02\x02\u07C5" +
		"\u07C6\x03\x02\x02\x02\u07C6\u07C8\x07\x8D\x02\x02\u07C7\u07C9\x05&\x14" +
		"\x02\u07C8\u07C7\x03\x02\x02\x02\u07C8\u07C9\x03\x02\x02\x02\u07C9\u07CA" +
		"\x03\x02\x02\x02\u07CA\u07CB\x05\u02DC\u016F\x02\u07CB\u0105\x03\x02\x02" +
		"\x02\u07CC\u07CD\x07\u010A\x02\x02\u07CD\u07CE\x07\x8D\x02\x02\u07CE\u0107" +
		"\x03\x02\x02\x02\u07CF\u07D0\x07C\x02\x02\u07D0\u07D1\x07\x8C\x02\x02" +
		"\u07D1\u07D2\x07\x8E\x02\x02\u07D2\u07D3\x07\u0172\x02\x02\u07D3\u07D5" +
		"\x07\u0152\x02\x02\u07D4\u07D6\x05\u0146\xA4\x02\u07D5\u07D4\x03\x02\x02" +
		"\x02\u07D5\u07D6\x03\x02\x02\x02\u07D6\u07D7\x03\x02\x02\x02\u07D7\u07D8" +
		"\x07\u0153\x02\x02\u07D8\u07D9\x05\u02C0\u0161\x02\u07D9\u0109\x03\x02" +
		"\x02\x02\u07DA\u07DB\x07K\x02\x02\u07DB\u07DC\x07\x8C\x02\x02\u07DC\u07DE" +
		"\x07\x8E\x02\x02\u07DD\u07DF\x05&\x14\x02\u07DE\u07DD\x03\x02\x02\x02" +
		"\u07DE\u07DF\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02\u07E0\u07E1\x07" +
		"\u0172\x02\x02\u07E1\u010B\x03\x02\x02\x02\u07E2\u07E4\x07C\x02\x02\u07E3" +
		"\u07E5\x052\x1A\x02\u07E4\u07E3\x03\x02\x02\x02\u07E4\u07E5\x03\x02\x02" +
		"\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6\u07E8\x07\xB4\x02\x02\u07E7\u07E9" +
		"\x05*\x16\x02\u07E8\u07E7\x03\x02\x02\x02\u07E8\u07E9\x03\x02\x02\x02" +
		"\u07E9\u07EA\x03\x02\x02\x02\u07EA\u07EF\x05\u023E\u0120\x02\u07EB\u07EC" +
		"\x07\u0152\x02\x02\u07EC\u07ED\x05\u017C\xBF\x02\u07ED\u07EE\x07\u0153" +
		"\x02\x02\u07EE\u07F0\x03\x02\x02\x02\u07EF\u07EB\x03\x02\x02\x02\u07EF" +
		"\u07F0\x03\x02\x02\x02\u07F0\u07F2\x03\x02\x02\x02\u07F1\u07F3\x05\u011A" +
		"\x8E\x02\u07F2\u07F1\x03\x02\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3" +
		"\u07F5\x03\x02\x02\x02\u07F4\u07F6\x05\u0110\x89\x02\u07F5\u07F4\x03\x02" +
		"\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u07F8\x03\x02\x02\x02\u07F7" +
		"\u07F9\x05\u012E\x98\x02\u07F8\u07F7\x03\x02\x02\x02\u07F8\u07F9\x03\x02" +
		"\x02\x02\u07F9\u07FA\x03\x02\x02\x02\u07FA\u07FB\x07\x18\x02\x02\u07FB" +
		"\u07FC\x05\u01C4\xE3\x02\u07FC\u010D\x03\x02\x02\x02\u07FD\u07FE\x07C" +
		"\x02\x02\u07FE\u07FF\x07\xB9\x02\x02\u07FF\u0801\x07\xB4\x02\x02\u0800" +
		"\u0802\x05*\x16\x02\u0801\u0800\x03\x02\x02\x02\u0801\u0802\x03\x02\x02" +
		"\x02\u0802\u0803\x03\x02\x02\x02\u0803\u0805\x05\u023E\u0120\x02\u0804" +
		"\u0806\x05.\x18\x02\u0805\u0804\x03\x02\x02\x02\u0805\u0806\x03\x02\x02" +
		"\x02\u0806\u0808\x03\x02\x02\x02\u0807\u0809\x05\u011A\x8E\x02\u0808\u0807" +
		"\x03\x02\x02\x02\u0808\u0809\x03\x02\x02\x02\u0809\u080B\x03\x02\x02\x02" +
		"\u080A\u080C\x05\u012C\x97\x02\u080B\u080A\x03\x02\x02\x02\u080B\u080C" +
		"\x03\x02\x02\x02\u080C\u080E\x03\x02\x02\x02\u080D\u080F\x05\u0142\xA2" +
		"\x02\u080E\u080D\x03\x02\x02\x02\u080E\u080F\x03\x02\x02\x02\u080F\u0811" +
		"\x03\x02\x02\x02\u0810\u0812\x05\u0144\xA3\x02\u0811\u0810\x03\x02\x02" +
		"\x02\u0811\u0812\x03\x02\x02\x02\u0812\u0814\x03\x02\x02\x02\u0813\u0815" +
		"\x05\u012E\x98\x02\u0814\u0813\x03\x02\x02\x02\u0814\u0815\x03\x02\x02" +
		"\x02\u0815\u0816\x03\x02\x02\x02\u0816\u0817\x07\x18\x02\x02\u0817\u0818" +
		"\x05\u01C4\xE3\x02\u0818\u010F\x03\x02\x02\x02\u0819\u081A\x07g\x02\x02" +
		"\u081A\u081B\x07$\x02\x02\u081B\u081C\x07\u0152\x02\x02\u081C\u081D\x05" +
		"\u014C\xA7\x02\u081D\u081E\x07\u0153\x02\x02\u081E\u0111\x03\x02\x02\x02" +
		"\u081F\u0820\x07K\x02\x02\u0820\u0822\x07\xB4\x02\x02\u0821\u0823\x05" +
		"&\x14\x02\u0822\u0821\x03\x02\x02\x02\u0822\u0823\x03\x02\x02\x02\u0823" +
		"\u0824\x03\x02\x02\x02\u0824\u0825\x05\u0240\u0121\x02\u0825\u0113\x03" +
		"\x02\x02\x02\u0826\u0827\x07K\x02\x02\u0827\u0828\x07\xB9\x02\x02\u0828" +
		"\u082A\x07\xB4\x02\x02\u0829\u082B\x05&\x14\x02\u082A\u0829\x03\x02\x02" +
		"\x02\u082A\u082B\x03\x02\x02\x02\u082B\u082C\x03\x02\x02\x02\u082C\u082D" +
		"\x05\u0240\u0121\x02\u082D\u0115\x03\x02\x02\x02\u082E\u0831\x05\u02DC" +
		"\u016F\x02\u082F\u0831\x07\u016C\x02\x02\u0830\u082E\x03\x02\x02\x02\u0830" +
		"\u082F\x03\x02\x02\x02\u0831\u0117\x03\x02\x02\x02\u0832\u0835\x05\u02DA" +
		"\u016E\x02\u0833\u0835\x07\u016C\x02\x02\u0834\u0832\x03\x02\x02\x02\u0834" +
		"\u0833\x03\x02\x02\x02\u0835\u0119\x03\x02\x02\x02\u0836\u0837\x07N\x02" +
		"\x02\u0837\u0838\x07\u016C\x02\x02\u0838\u011B\x03\x02\x02\x02\u0839\u083A" +
		"\x07g\x02\x02\u083A\u083B\x07\x14\x02\x02\u083B\u083C\x07\u0152\x02\x02" +
		"\u083C\u0841\x05\u0188\xC5\x02\u083D\u083E\x07\u0150\x02\x02\u083E\u0840" +
		"\x05\u0188\xC5\x02\u083F\u083D\x03\x02\x02\x02\u0840\u0843\x03\x02\x02" +
		"\x02\u0841\u083F\x03\x02\x02\x02\u0841\u0842\x03\x02\x02\x02\u0842\u0844" +
		"\x03\x02\x02\x02\u0843\u0841\x03\x02\x02\x02\u0844\u0845\x07\u0153\x02" +
		"\x02\u0845\u011D\x03\x02\x02\x02\u0846\u0847\x07h\x02\x02\u0847\u0848" +
		"\x07\x14\x02\x02\u0848\u0849\x07\u0152\x02\x02\u0849\u084A\x05\u014C\xA7" +
		"\x02\u084A\u0851\x07\u0153\x02\x02\u084B\u084C\x07i\x02\x02\u084C\u084D" +
		"\x07\x14\x02\x02\u084D\u084E\x07\u0152\x02\x02\u084E\u084F\x05\u0152\xAA" +
		"\x02\u084F\u0850\x07\u0153\x02\x02\u0850\u0852\x03\x02\x02\x02\u0851\u084B" +
		"\x03\x02\x02\x02\u0851\u0852\x03\x02\x02\x02\u0852\u0853\x03\x02\x02\x02" +
		"\u0853\u0854\x07j\x02\x02\u0854\u0855\x07\u0171\x02\x02\u0855\u0856\x07" +
		"k\x02\x02\u0856\u011F\x03\x02\x02\x02\u0857\u0858\x07\xE5\x02\x02\u0858" +
		"\u0859\x07\x14\x02\x02\u0859\u085A\x07\u0152\x02\x02\u085A\u085B\x05\u014C" +
		"\xA7\x02\u085B\u085C\x07\u0153\x02\x02\u085C\u085D\x07$\x02\x02\u085D" +
		"\u085E\x07\u0152\x02\x02\u085E\u085F\x05\u016A\xB6\x02\u085F\u0861\x07" +
		"\u0153\x02\x02\u0860\u0862\x050\x19\x02\u0861\u0860\x03\x02\x02\x02\u0861" +
		"\u0862\x03\x02\x02\x02\u0862\u0121\x03\x02\x02\x02\u0863\u0866\x05\u0128" +
		"\x95\x02\u0864\u0866\x05\u012A\x96\x02\u0865\u0863\x03\x02\x02\x02\u0865" +
		"\u0864\x03\x02\x02\x02\u0866\u0123\x03\x02\x02\x02\u0867\u0868\x07\xD5" +
		"\x02\x02\u0868\u0869\x07\u016C\x02\x02\u0869\u0125\x03\x02\x02\x02\u086A" +
		"\u086B\x07\xD6\x02\x02\u086B\u086C\x07\u016C\x02\x02\u086C\u0127\x03\x02" +
		"\x02\x02\u086D\u086E\x07l\x02\x02\u086E\u086F\x07n\x02\x02\u086F\u0870" +
		"\x07\x96\x02\x02\u0870\u0874\x07\u016C\x02\x02\u0871\u0872\x07\x97\x02" +
		"\x02\u0872\u0873\x07\x99\x02\x02\u0873\u0875\x05\u0130\x99\x02\u0874\u0871" +
		"\x03\x02\x02\x02\u0874\u0875\x03\x02\x02\x02\u0875\u0129\x03\x02\x02\x02" +
		"\u0876\u0877\x07l\x02\x02\u0877\u0878\x07n\x02\x02\u0878\u087A\x07o\x02" +
		"\x02\u0879\u087B\x05\u0138\x9D\x02\u087A\u0879\x03\x02\x02\x02\u087A\u087B" +
		"\x03\x02\x02\x02\u087B\u087D\x03\x02\x02\x02\u087C\u087E\x05\u013A\x9E" +
		"\x02\u087D\u087C\x03\x02\x02\x02\u087D\u087E\x03\x02\x02\x02\u087E\u0880" +
		"\x03\x02\x02\x02\u087F\u0881\x05\u013C\x9F\x02\u0880\u087F\x03\x02\x02" +
		"\x02\u0880\u0881\x03\x02\x02\x02\u0881\u0883\x03\x02\x02\x02\u0882\u0884" +
		"\x05\u013E\xA0\x02\u0883\u0882\x03\x02\x02\x02\u0883\u0884\x03\x02\x02" +
		"\x02\u0884\u0886\x03\x02\x02\x02\u0885\u0887\x05\u0140\xA1\x02\u0886\u0885" +
		"\x03\x02\x02\x02\u0886\u0887\x03\x02\x02\x02\u0887\u012B\x03\x02\x02\x02" +
		"\u0888\u088B\x05\u012A\x96\x02\u0889\u088B\x05\u0128\x95\x02\u088A\u0888" +
		"\x03\x02\x02\x02\u088A\u0889\x03\x02\x02\x02\u088B\u012D\x03\x02\x02\x02" +
		"\u088C\u088D\x07\x9F\x02\x02\u088D\u088E\x05\u0130\x99\x02\u088E\u012F" +
		"\x03\x02\x02\x02\u088F\u0890\x07\u0152\x02\x02\u0890\u0891\x05\u0132\x9A" +
		"\x02\u0891\u0892\x07\u0153\x02\x02\u0892\u0131\x03\x02\x02\x02\u0893\u0898" +
		"\x05\u0134\x9B\x02\u0894\u0895\x07\u0150\x02\x02\u0895\u0897\x05\u0134" +
		"\x9B\x02\u0896\u0894\x03\x02\x02\x02\u0897\u089A\x03\x02\x02\x02\u0898" +
		"\u0896\x03\x02\x02\x02\u0898\u0899\x03\x02\x02\x02\u0899\u08A4\x03\x02" +
		"\x02\x02\u089A\u0898\x03\x02\x02\x02\u089B\u08A0\x05\u0136\x9C\x02\u089C" +
		"\u089D\x07\u0150\x02\x02\u089D\u089F\x05\u0136\x9C\x02\u089E\u089C\x03" +
		"\x02\x02\x02\u089F\u08A2\x03\x02\x02\x02\u08A0\u089E\x03\x02\x02\x02\u08A0" +
		"\u08A1\x03\x02\x02\x02\u08A1\u08A4\x03\x02\x02\x02\u08A2\u08A0\x03\x02" +
		"\x02\x02\u08A3\u0893\x03\x02\x02\x02\u08A3\u089B\x03\x02\x02\x02\u08A4" +
		"\u0133\x03\x02\x02\x02\u08A5\u08A6\x07\u016C\x02\x02\u08A6\u08A7\x07\u0158" +
		"\x02\x02\u08A7\u08A8\x07\u016C\x02\x02\u08A8\u0135\x03\x02\x02\x02\u08A9" +
		"\u08AA\x07\u016C\x02\x02\u08AA\u0137\x03\x02\x02\x02\u08AB\u08AC\x07p" +
		"\x02\x02\u08AC\u08AD\x07q\x02\x02\u08AD\u08AE\x07\x14\x02\x02\u08AE\u08B2" +
		"\x07\u016C\x02\x02\u08AF\u08B0\x07r\x02\x02\u08B0\u08B1\x07\x14\x02\x02" +
		"\u08B1\u08B3\x07\u016C\x02\x02\u08B2\u08AF\x03\x02\x02\x02\u08B2\u08B3" +
		"\x03\x02\x02\x02\u08B3\u0139\x03\x02\x02\x02\u08B4\u08B5\x07s\x02\x02" +
		"\u08B5\u08B6\x07t\x02\x02\u08B6\u08B7\x07q\x02\x02\u08B7\u08B8\x07\x14" +
		"\x02\x02\u08B8\u08B9\x07\u016C\x02\x02\u08B9\u013B\x03\x02\x02\x02\u08BA" +
		"\u08BB\x07d\x02\x02\u08BB\u08BC\x07u\x02\x02\u08BC\u08BD\x07q\x02\x02" +
		"\u08BD\u08BE\x07\x14\x02\x02\u08BE\u08BF\x07\u016C\x02\x02\u08BF\u013D" +
		"\x03\x02\x02\x02\u08C0\u08C1\x07x\x02\x02\u08C1\u08C2\x07q\x02\x02\u08C2" +
		"\u08C3\x07\x14\x02\x02\u08C3\u08C4\x07\u016C\x02\x02\u08C4\u013F\x03\x02" +
		"\x02\x02\u08C5\u08C6\x07B\x02\x02\u08C6\u08C7\x07\xA3\x02\x02\u08C7\u08C8" +
		"\x07\x18\x02\x02\u08C8\u08C9\x07\u016C\x02\x02\u08C9\u0141\x03\x02\x02" +
		"\x02\u08CA\u08CB\x07y\x02\x02\u08CB\u08CC\x07\x18\x02\x02\u08CC\u08CD" +
		"\x07{\x02\x02\u08CD\u08CE\x07\u016C\x02\x02\u08CE\u08CF\x07|\x02\x02\u08CF" +
		"\u08D4\x07\u016C\x02\x02\u08D0\u08D1\x07}\x02\x02\u08D1\u08D2\x07\u016C" +
		"\x02\x02\u08D2\u08D3\x07~\x02\x02\u08D3\u08D5\x07\u016C\x02\x02\u08D4" +
		"\u08D0\x03\x02\x02\x02\u08D4\u08D5\x03\x02\x02\x02\u08D5\u08E2\x03\x02" +
		"\x02\x02\u08D6\u08D7\x07y\x02\x02\u08D7\u08D8\x07\x14\x02\x02\u08D8\u08DC" +
		"\x07\u016C\x02\x02\u08D9\u08DA\x07\x97\x02\x02\u08DA\u08DB\x07\x99\x02" +
		"\x02\u08DB\u08DD\x05\u0130\x99\x02\u08DC\u08D9\x03\x02\x02\x02\u08DC\u08DD" +
		"\x03\x02\x02\x02\u08DD\u08E2\x03\x02\x02\x02\u08DE\u08DF\x07y\x02\x02" +
		"\u08DF\u08E0\x07\x18\x02\x02\u08E0\u08E2\x05\u02DA\u016E\x02\u08E1\u08CA" +
		"\x03\x02\x02\x02\u08E1\u08D6\x03\x02\x02\x02\u08E1\u08DE\x03\x02\x02\x02" +
		"\u08E2\u0143\x03\x02\x02\x02\u08E3\u08E4\x07\x81\x02\x02\u08E4\u08E5\x07" +
		"\u016C\x02\x02\u08E5\u0145\x03\x02\x02\x02\u08E6\u08EB\x05\u0182\xC2\x02" +
		"\u08E7\u08E8\x07\u0150\x02\x02\u08E8\u08EA\x05\u0182\xC2\x02\u08E9\u08E7" +
		"\x03\x02\x02\x02\u08EA\u08ED\x03\x02\x02\x02\u08EB\u08E9\x03\x02\x02\x02" +
		"\u08EB\u08EC\x03\x02\x02\x02\u08EC\u0147\x03\x02\x02\x02\u08ED\u08EB\x03" +
		"\x02\x02\x02\u08EE\u08F3\x05\u0184\xC3\x02\u08EF\u08F0\x07\u0150\x02\x02" +
		"\u08F0\u08F2\x05\u0184\xC3\x02\u08F1\u08EF\x03\x02\x02\x02\u08F2\u08F5" +
		"\x03\x02\x02\x02\u08F3\u08F1\x03\x02\x02\x02\u08F3\u08F4\x03\x02\x02\x02" +
		"\u08F4\u0149\x03\x02\x02\x02\u08F5\u08F3\x03\x02\x02\x02\u08F6\u08FB\x05" +
		"\u019C\xCF\x02\u08F7\u08F8\x07\u0150\x02\x02\u08F8\u08FA\x05\u019C\xCF" +
		"\x02\u08F9\u08F7\x03\x02\x02\x02\u08FA\u08FD\x03\x02\x02\x02\u08FB\u08F9" +
		"\x03\x02\x02\x02\u08FB\u08FC\x03\x02\x02\x02\u08FC\u014B\x03\x02\x02\x02" +
		"\u08FD\u08FB\x03\x02\x02\x02\u08FE\u0903\x05\u014E\xA8\x02\u08FF\u0900" +
		"\x07\u0150\x02\x02\u0900\u0902\x05\u014E\xA8\x02\u0901\u08FF\x03\x02\x02" +
		"\x02\u0902\u0905\x03\x02\x02\x02\u0903\u0901\x03\x02\x02\x02\u0903\u0904" +
		"\x03\x02\x02\x02\u0904\u014D\x03\x02\x02\x02\u0905\u0903\x03\x02\x02\x02" +
		"\u0906\u0907\x05\u02DA\u016E\x02\u0907\u014F\x03\x02\x02\x02\u0908\u0912" +
		"\x05\u02DA\u016E\x02\u0909\u090E\x07\u014E\x02\x02\u090A\u090F\x07\xA2" +
		"\x02\x02\u090B\u090F\x07v\x02\x02\u090C\u090F\x07\xA1\x02\x02\u090D\u090F" +
		"\x05\u02DA\u016E\x02\u090E\u090A\x03\x02\x02\x02\u090E\u090B\x03\x02\x02" +
		"\x02\u090E\u090C\x03\x02\x02\x02\u090E\u090D\x03\x02\x02\x02\u090F\u0911" +
		"\x03\x02\x02\x02\u0910\u0909\x03\x02\x02\x02\u0911\u0914\x03\x02\x02\x02" +
		"\u0912\u0910\x03\x02\x02\x02\u0912\u0913\x03\x02\x02\x02\u0913\u0151\x03" +
		"\x02\x02\x02\u0914\u0912\x03\x02\x02\x02\u0915\u091A\x05\u017A\xBE\x02" +
		"\u0916\u0917\x07\u0150\x02\x02\u0917\u0919\x05\u017A\xBE\x02\u0918\u0916" +
		"\x03\x02\x02\x02\u0919\u091C\x03\x02\x02\x02\u091A\u0918\x03\x02\x02\x02" +
		"\u091A\u091B\x03\x02\x02\x02\u091B\u0153\x03\x02\x02\x02\u091C\u091A\x03" +
		"\x02\x02\x02\u091D\u091E\x07\u0152\x02\x02\u091E\u091F\x05\u014C\xA7\x02" +
		"\u091F\u0920\x07\u0153\x02\x02\u0920\u0155\x03\x02\x02\x02\u0921\u0923" +
		"\x05\u0158\xAD\x02\u0922\u0924\x05\u015A\xAE\x02\u0923\u0922\x03\x02\x02" +
		"\x02\u0923\u0924\x03\x02\x02\x02\u0924\u0927\x03\x02\x02\x02\u0925\u0927" +
		"\x05\u015C\xAF\x02\u0926\u0921\x03\x02\x02\x02\u0926\u0925\x03\x02\x02" +
		"\x02\u0927\u0157\x03\x02\x02\x02\u0928\u0929\t\x0E\x02\x02\u0929\u0159" +
		"\x03\x02\x02\x02\u092A\u092B\t\x0F\x02\x02\u092B\u015B\x03\x02\x02\x02" +
		"\u092C\u0930\x07\u0125\x02\x02\u092D\u092E\x07\t\x02\x02\u092E\u0930\x07" +
		"\u0125\x02\x02\u092F\u092C\x03\x02\x02\x02\u092F\u092D\x03\x02\x02\x02" +
		"\u0930\u015D\x03\x02\x02\x02\u0931\u0936\x07\u0128\x02\x02\u0932\u0934" +
		"\x07\u0129\x02\x02\u0933\u0932\x03\x02\x02\x02\u0933\u0934\x03\x02\x02" +
		"\x02\u0934\u0936\x03\x02\x02\x02\u0935\u0931\x03\x02\x02\x02\u0935\u0933" +
		"\x03\x02\x02\x02\u0936\u015F\x03\x02\x02\x02\u0937\u0938\x07\u0124\x02" +
		"\x02\u0938\u093A\x05\u02DA\u016E\x02\u0939\u0937\x03\x02\x02\x02\u0939" +
		"\u093A\x03\x02\x02\x02\u093A\u093B\x03\x02\x02\x02\u093B\u093D\x05\u0164" +
		"\xB3\x02\u093C\u093E\x05\u0198\xCD\x02\u093D\u093C\x03\x02\x02\x02\u093D" +
		"\u093E\x03\x02\x02\x02\u093E\u0161\x03\x02\x02\x02\u093F\u0940\x07\u0124" +
		"\x02\x02\u0940\u0941\x05\u02DA\u016E\x02\u0941\u0943\x05\u0164\xB3\x02" +
		"\u0942\u0944\x05\u019A\xCE\x02\u0943\u0942\x03\x02\x02\x02\u0943\u0944" +
		"\x03\x02\x02\x02\u0944\u0163\x03\x02\x02\x02\u0945\u0946\x05\u0196\xCC" +
		"\x02\u0946\u0947\x05\u0154\xAB\x02\u0947\u0165\x03\x02\x02\x02\u0948\u0949" +
		"\x07\u0124\x02\x02\u0949\u094B\x05\u02DA\u016E\x02\u094A\u0948\x03\x02" +
		"\x02\x02\u094A\u094B\x03\x02\x02\x02\u094B\u094C\x03\x02\x02\x02\u094C" +
		"\u094D\x07\u0122\x02\x02\u094D\u094E\x07\u012B\x02\x02\u094E\u094F\x05" +
		"\u0154\xAB\x02\u094F\u0950\x07\u0123\x02\x02\u0950\u0951\x05\u023E\u0120" +
		"\x02\u0951\u0953\x05\u0154\xAB\x02\u0952\u0954\x05\u0198\xCD\x02\u0953" +
		"\u0952\x03\x02\x02\x02\u0953\u0954\x03\x02\x02\x02\u0954\u0167\x03\x02" +
		"\x02\x02\u0955\u0956\x07\u0124\x02\x02\u0956\u0957\x05\u02DA\u016E\x02" +
		"\u0957\u0958\x07\u0122\x02\x02\u0958\u0959\x07\u012B\x02\x02\u0959\u095A" +
		"\x05\u0154\xAB\x02\u095A\u095B\x07\u0123\x02\x02\u095B\u095C\x05\u023E" +
		"\u0120\x02\u095C\u095E\x05\u0154\xAB\x02\u095D\u095F\x05\u019A\xCE\x02" +
		"\u095E\u095D\x03\x02\x02\x02\u095E\u095F\x03\x02\x02\x02\u095F\u0169\x03" +
		"\x02\x02\x02\u0960\u0963\x05\u0170\xB9\x02\u0961\u0963\x05\u016C\xB7\x02" +
		"\u0962\u0960\x03\x02\x02\x02\u0962\u0961\x03\x02\x02\x02\u0963\u016B\x03" +
		"\x02\x02\x02\u0964\u0969\x05\u016E\xB8\x02\u0965\u0966\x07\u0150\x02\x02" +
		"\u0966\u0968\x05\u016E\xB8\x02\u0967\u0965\x03\x02\x02\x02\u0968\u096B" +
		"\x03\x02\x02\x02\u0969\u0967\x03\x02\x02\x02\u0969\u096A\x03\x02\x02\x02" +
		"\u096A\u016D\x03\x02\x02\x02\u096B\u0969\x03\x02\x02\x02\u096C\u096D\x07" +
		"\u0152\x02\x02\u096D\u096E\x05\u0170\xB9\x02\u096E\u096F\x07\u0153\x02" +
		"\x02\u096F\u016F\x03\x02\x02\x02\u0970\u0975\x05\u0172\xBA\x02\u0971\u0972" +
		"\x07\u0150\x02\x02\u0972\u0974\x05\u0172\xBA\x02\u0973\u0971\x03\x02\x02" +
		"\x02\u0974\u0977\x03\x02\x02\x02\u0975\u0973\x03\x02\x02\x02\u0975\u0976" +
		"\x03\x02\x02\x02\u0976\u0171\x03\x02\x02\x02\u0977\u0975\x03\x02\x02\x02" +
		"\u0978\u0979\x05\u0292\u014A\x02\u0979\u0173\x03\x02\x02\x02\u097A\u097D" +
		"\x05\u0172\xBA\x02\u097B\u097D\x05\u016E\xB8\x02\u097C\u097A\x03\x02\x02" +
		"\x02\u097C\u097B\x03\x02\x02\x02\u097D\u0175\x03\x02\x02\x02\u097E\u097F" +
		"\t\x10\x02\x02\u097F\u0177\x03\x02\x02\x02\u0980\u0981\x07\x10\x02\x02" +
		"\u0981\u0985\x07H\x02\x02\u0982\u0983\x07\x10\x02\x02\u0983\u0985\x07" +
		"\x11\x02\x02\u0984\u0980\x03\x02\x02\x02\u0984\u0982\x03\x02\x02\x02\u0985" +
		"\u0179\x03\x02\x02\x02\u0986\u0988\x05\u02DA\u016E\x02\u0987\u0989\x05" +
		"\u0176\xBC\x02\u0988\u0987\x03\x02\x02\x02\u0988\u0989\x03\x02\x02\x02" +
		"\u0989\u098B\x03\x02\x02\x02\u098A\u098C\x05\u0178\xBD\x02\u098B\u098A" +
		"\x03\x02\x02\x02\u098B\u098C\x03\x02\x02\x02\u098C\u017B\x03\x02\x02\x02" +
		"\u098D\u0992\x05\u017E\xC0\x02\u098E\u098F\x07\u0150\x02\x02\u098F\u0991" +
		"\x05\u017E\xC0\x02\u0990\u098E\x03\x02\x02\x02\u0991\u0994\x03\x02\x02" +
		"\x02\u0992\u0990\x03\x02\x02\x02\u0992\u0993\x03\x02\x02\x02\u0993\u017D" +
		"\x03\x02\x02\x02\u0994\u0992\x03\x02\x02\x02\u0995\u0998\x05\u02DA\u016E" +
		"\x02\u0996\u0997\x07N\x02\x02\u0997\u0999\x07\u016C\x02\x02\u0998\u0996" +
		"\x03\x02\x02\x02\u0998\u0999\x03\x02\x02\x02\u0999\u017F\x03\x02\x02\x02" +
		"\u099A\u099C\x05\u02C0\u0161\x02\u099B\u099D\x05\u0176\xBC\x02\u099C\u099B" +
		"\x03\x02\x02\x02\u099C\u099D\x03\x02\x02\x02\u099D\u099F\x03\x02\x02\x02" +
		"\u099E\u09A0\x05\u0178\xBD\x02\u099F\u099E\x03\x02\x02\x02\u099F\u09A0" +
		"\x03\x02\x02\x02\u09A0\u0181\x03\x02\x02\x02\u09A1\u09A2\x05\u02DA\u016E" +
		"\x02\u09A2\u09A5\x05\u019E\xD0\x02\u09A3\u09A4\x07N\x02\x02\u09A4\u09A6" +
		"\x07\u016C\x02\x02\u09A5\u09A3\x03\x02\x02\x02\u09A5\u09A6\x03\x02\x02" +
		"\x02\u09A6\u0183\x03\x02\x02\x02\u09A7\u09AA\x05\u0186\xC4\x02\u09A8\u09AA" +
		"\x05\u0188\xC5\x02\u09A9\u09A7\x03\x02\x02\x02\u09A9\u09A8\x03\x02\x02" +
		"\x02\u09AA\u0185\x03\x02\x02\x02\u09AB\u09AE\x05\u0166\xB4\x02\u09AC\u09AE" +
		"\x05\u0160\xB1\x02\u09AD\u09AB\x03\x02\x02\x02\u09AD\u09AC\x03\x02\x02" +
		"\x02\u09AE\u0187\x03\x02\x02\x02\u09AF\u09B0\x05\u02DA\u016E\x02\u09B0" +
		"\u09B2\x05\u019E\xD0\x02\u09B1\u09B3\x05\u018A\xC6\x02\u09B2\u09B1\x03" +
		"\x02\x02\x02\u09B2\u09B3\x03\x02\x02\x02\u09B3\u09B6\x03\x02\x02\x02\u09B4" +
		"\u09B5\x07N\x02\x02\u09B5\u09B7\x07\u016C\x02\x02\u09B6\u09B4\x03\x02" +
		"\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7\u0189\x03\x02\x02\x02\u09B8" +
		"\u09BB\x05\u018C\xC7\x02\u09B9\u09BB\x05\u018E\xC8\x02\u09BA\u09B8\x03" +
		"\x02\x02\x02\u09BA\u09B9\x03\x02\x02\x02\u09BB\u018B\x03\x02\x02\x02\u09BC" +
		"\u09BD\x07\u0124\x02\x02\u09BD\u09BF\x05\u02DA\u016E\x02\u09BE\u09BC\x03" +
		"\x02\x02\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09C0\x03\x02\x02\x02\u09C0" +
		"\u09C1\x07\u0123\x02\x02\u09C1\u09C2\x05\u023E\u0120\x02\u09C2\u09C3\x07" +
		"\u0152\x02\x02\u09C3\u09C4\x05\u014E\xA8\x02\u09C4\u09C6\x07\u0153\x02" +
		"\x02\u09C5\u09C7\x05\u0198\xCD\x02\u09C6\u09C5\x03\x02\x02\x02\u09C6\u09C7" +
		"\x03\x02\x02\x02\u09C7\u018D\x03\x02\x02\x02\u09C8\u09C9\x07\u0124\x02" +
		"\x02\u09C9\u09CB\x05\u02DA\u016E\x02\u09CA\u09C8\x03\x02\x02\x02\u09CA" +
		"\u09CB\x03\x02\x02\x02\u09CB\u09CC\x03\x02\x02\x02\u09CC\u09CE\x05\u0196" +
		"\xCC\x02\u09CD\u09CF\x05\u0198\xCD\x02\u09CE\u09CD\x03\x02\x02\x02\u09CE" +
		"\u09CF\x03\x02\x02\x02\u09CF\u018F\x03\x02\x02\x02\u09D0\u09D3\x05\u0192" +
		"\xCA\x02\u09D1\u09D3\x05\u0194\xCB\x02\u09D2\u09D0\x03\x02\x02\x02\u09D2" +
		"\u09D1\x03\x02\x02\x02\u09D3\u0191\x03\x02\x02\x02\u09D4\u09D5\x07\u0124" +
		"\x02\x02\u09D5\u09D7\x05\u02DA\u016E\x02\u09D6\u09D4\x03\x02\x02\x02\u09D6" +
		"\u09D7\x03\x02\x02\x02\u09D7\u09D8\x03\x02\x02\x02\u09D8\u09D9\x07\u0123" +
		"\x02\x02\u09D9\u09DA\x05\u023E\u0120\x02\u09DA\u09DB";
	private static readonly _serializedATNSegment5: string =
		"\x07\u0152\x02\x02\u09DB\u09DC\x05\u014E\xA8\x02\u09DC\u09DE\x07\u0153" +
		"\x02\x02\u09DD\u09DF\x05\u019A\xCE\x02\u09DE\u09DD\x03\x02\x02\x02\u09DE" +
		"\u09DF\x03\x02\x02\x02\u09DF\u0193\x03\x02\x02\x02\u09E0\u09E1\x07\u0124" +
		"\x02\x02\u09E1\u09E3\x05\u02DA\u016E\x02\u09E2\u09E0\x03\x02\x02\x02\u09E2" +
		"\u09E3\x03\x02\x02\x02\u09E3\u09E4\x03\x02\x02\x02\u09E4\u09E6\x05\u0196" +
		"\xCC\x02\u09E5\u09E7\x05\u019A\xCE\x02\u09E6\u09E5\x03\x02\x02\x02\u09E6" +
		"\u09E7\x03\x02\x02\x02\u09E7\u0195\x03\x02\x02\x02\u09E8\u09E9\x07\u0121" +
		"\x02\x02\u09E9\u09EA\x07\u012B\x02\x02\u09EA\u0197\x03\x02\x02\x02\u09EB" +
		"\u09EC\x05\u0156\xAC\x02\u09EC\u09ED\x05\u015E\xB0\x02\u09ED\u0199\x03" +
		"\x02\x02\x02\u09EE\u09EF\x05\u0156\xAC\x02\u09EF\u09F0\x05\u015E\xB0\x02" +
		"\u09F0\u019B\x03\x02\x02\x02\u09F1\u09F2\x05\u02DA\u016E\x02\u09F2\u09F3" +
		"\x07\u014F\x02\x02\u09F3\u09F6\x05\u019E\xD0\x02\u09F4\u09F5\x07N\x02" +
		"\x02\u09F5\u09F7\x07\u016C\x02\x02\u09F6\u09F4\x03\x02\x02\x02\u09F6\u09F7" +
		"\x03\x02\x02\x02\u09F7\u019D\x03\x02\x02\x02\u09F8\u09F9\x05\u01A2\xD2" +
		"\x02\u09F9\u019F\x03\x02\x02\x02\u09FA\u09FF\x05\u019E\xD0\x02\u09FB\u09FC" +
		"\x07\u0150\x02\x02\u09FC\u09FE\x05\u019E\xD0\x02\u09FD\u09FB\x03\x02\x02" +
		"\x02\u09FE\u0A01\x03\x02\x02\x02\u09FF\u09FD\x03\x02\x02\x02\u09FF\u0A00" +
		"\x03\x02\x02\x02\u0A00\u01A1\x03\x02\x02\x02\u0A01\u09FF\x03\x02\x02\x02" +
		"\u0A02\u0A08\x05\u01A4\xD3\x02\u0A03\u0A08\x05\u01A6\xD4\x02\u0A04\u0A08" +
		"\x05\u01A8\xD5\x02\u0A05\u0A08\x05\u01AA\xD6\x02\u0A06\u0A08\x05\u01AC" +
		"\xD7\x02\u0A07\u0A02\x03\x02\x02\x02\u0A07\u0A03\x03\x02\x02\x02\u0A07" +
		"\u0A04\x03\x02\x02\x02\u0A07\u0A05\x03\x02\x02\x02\u0A07\u0A06\x03\x02" +
		"\x02\x02\u0A08\u01A3\x03\x02\x02\x02\u0A09\u0A31\x07P\x02\x02\u0A0A\u0A31" +
		"\x07Q\x02\x02\u0A0B\u0A31\x07R\x02\x02\u0A0C\u0A31\x07S\x02\x02\u0A0D" +
		"\u0A31\x07O\x02\x02\u0A0E\u0A31\x07T\x02\x02\u0A0F\u0A11\x07U\x02\x02" +
		"\u0A10\u0A12\x07V\x02\x02\u0A11\u0A10\x03\x02\x02\x02\u0A11\u0A12\x03" +
		"\x02\x02\x02\u0A12\u0A31\x03\x02\x02\x02\u0A13\u0A31\x07W\x02\x02\u0A14" +
		"\u0A31\x07X\x02\x02\u0A15\u0A31\x07Y\x02\x02\u0A16\u0A31\x07Z\x02\x02" +
		"\u0A17\u0A18\x07Y\x02\x02\u0A18\u0A19\x07\x97\x02\x02\u0A19\u0A1A\x07" +
		"2\x02\x02\u0A1A\u0A1B\x07[\x02\x02\u0A1B\u0A31\x07\\\x02\x02\u0A1C\u0A31" +
		"\x07_\x02\x02\u0A1D\u0A31\x07\xD0\x02\x02\u0A1E\u0A26\x07^\x02\x02\u0A1F" +
		"\u0A20\x07\u0152\x02\x02\u0A20\u0A23\x07\u0171\x02\x02\u0A21\u0A22\x07" +
		"\u0150\x02\x02\u0A22\u0A24\x07\u0171\x02\x02\u0A23\u0A21\x03\x02\x02\x02" +
		"\u0A23\u0A24\x03\x02\x02\x02\u0A24\u0A25\x03\x02\x02\x02\u0A25\u0A27\x07" +
		"\u0153\x02\x02\u0A26\u0A1F\x03\x02\x02\x02\u0A26\u0A27\x03\x02\x02\x02" +
		"\u0A27\u0A31\x03\x02\x02\x02\u0A28\u0A29\x07a\x02\x02\u0A29\u0A2A\x07" +
		"\u0152\x02\x02\u0A2A\u0A2B\x07\u0171\x02\x02\u0A2B\u0A31\x07\u0153\x02" +
		"\x02\u0A2C\u0A2D\x07`\x02\x02\u0A2D\u0A2E\x07\u0152\x02\x02\u0A2E\u0A2F" +
		"\x07\u0171\x02\x02\u0A2F\u0A31\x07\u0153\x02\x02\u0A30\u0A09\x03\x02\x02" +
		"\x02\u0A30\u0A0A\x03\x02\x02\x02\u0A30\u0A0B\x03\x02\x02\x02\u0A30\u0A0C" +
		"\x03\x02\x02\x02\u0A30\u0A0D\x03\x02\x02\x02\u0A30\u0A0E\x03\x02\x02\x02" +
		"\u0A30\u0A0F\x03\x02\x02\x02\u0A30\u0A13\x03\x02\x02\x02\u0A30\u0A14\x03" +
		"\x02\x02\x02\u0A30\u0A15\x03\x02\x02\x02\u0A30\u0A16\x03\x02\x02\x02\u0A30" +
		"\u0A17\x03\x02\x02\x02\u0A30\u0A1C\x03\x02\x02\x02\u0A30\u0A1D\x03\x02" +
		"\x02\x02\u0A30\u0A1E\x03\x02\x02\x02\u0A30\u0A28\x03\x02\x02\x02\u0A30" +
		"\u0A2C\x03\x02\x02\x02\u0A31\u01A5\x03\x02\x02\x02\u0A32\u0A33\x07b\x02" +
		"\x02\u0A33\u0A34\x07\u015C\x02\x02\u0A34\u0A35\x05\u01A2\xD2\x02\u0A35" +
		"\u0A36\x07\u015E\x02\x02\u0A36\u01A7\x03\x02\x02\x02\u0A37\u0A38\x07c" +
		"\x02\x02\u0A38\u0A39\x07\u015C\x02\x02\u0A39\u0A3A\x05\u014A\xA6\x02\u0A3A" +
		"\u0A3B\x07\u015E\x02\x02\u0A3B\u01A9\x03\x02\x02\x02\u0A3C\u0A3D\x07d" +
		"\x02\x02\u0A3D\u0A3E\x07\u015C\x02\x02\u0A3E\u0A3F\x05\u01A4\xD3\x02\u0A3F" +
		"\u0A40\x07\u0150\x02\x02\u0A40\u0A41\x05\u01A2\xD2\x02\u0A41\u0A42\x07" +
		"\u015E\x02\x02\u0A42\u01AB\x03\x02\x02\x02\u0A43\u0A44\x07e\x02\x02\u0A44" +
		"\u0A45\x07\u015C\x02\x02\u0A45\u0A46\x05\u01A0\xD1\x02\u0A46\u0A47\x07" +
		"\u015E\x02\x02\u0A47\u01AD\x03\x02\x02\x02\u0A48\u0A49\x078\x02\x02\u0A49" +
		"\u0A61\x07\x05\x02\x02\u0A4A\u0A4C\x078\x02\x02\u0A4B\u0A4D\x07\x1A\x02" +
		"\x02\u0A4C\u0A4B\x03\x02\x02\x02\u0A4C\u0A4D\x03\x02\x02\x02\u0A4D\u0A61" +
		"\x03\x02\x02\x02\u0A4E\u0A4F\x07\xB3\x02\x02\u0A4F\u0A61\x07\x05\x02\x02" +
		"\u0A50\u0A52\x07\xB3\x02\x02\u0A51\u0A53\x07\x1A\x02\x02\u0A52\u0A51\x03" +
		"\x02\x02\x02\u0A52\u0A53\x03\x02\x02\x02\u0A53\u0A61\x03\x02\x02\x02\u0A54" +
		"\u0A55\x079\x02\x02\u0A55\u0A61\x07\x05\x02\x02\u0A56\u0A58\x079\x02\x02" +
		"\u0A57\u0A59\x07\x1A\x02\x02\u0A58\u0A57\x03\x02\x02\x02\u0A58\u0A59\x03" +
		"\x02\x02\x02\u0A59\u0A61\x03\x02\x02\x02\u0A5A\u0A5B\x07\xB1\x02\x02\u0A5B" +
		"\u0A61\x07\x05\x02\x02\u0A5C\u0A5E\x07\xB1\x02\x02\u0A5D\u0A5F\x07\x1A" +
		"\x02\x02\u0A5E\u0A5D\x03\x02\x02\x02\u0A5E\u0A5F\x03\x02\x02\x02\u0A5F" +
		"\u0A61\x03\x02\x02\x02\u0A60\u0A48\x03\x02\x02\x02\u0A60\u0A4A\x03\x02" +
		"\x02\x02\u0A60\u0A4E\x03\x02\x02\x02\u0A60\u0A50\x03\x02\x02\x02\u0A60" +
		"\u0A54\x03\x02\x02\x02\u0A60\u0A56\x03\x02\x02\x02\u0A60\u0A5A\x03\x02" +
		"\x02\x02\u0A60\u0A5C\x03\x02\x02\x02\u0A61\u01AF\x03\x02\x02\x02\u0A62" +
		"\u0A64\x05\u01B4\xDB\x02\u0A63\u0A62\x03\x02\x02\x02\u0A63\u0A64\x03\x02" +
		"\x02\x02\u0A64\u0A65\x03\x02\x02\x02\u0A65\u0A66\x05\u01B2\xDA\x02\u0A66" +
		"\u01B1\x03\x02\x02\x02\u0A67\u0A6A\x05\u01B8\xDD\x02\u0A68\u0A6A\x05\u01BC" +
		"\xDF\x02\u0A69\u0A67\x03\x02\x02\x02\u0A69\u0A68\x03\x02\x02\x02\u0A6A" +
		"\u01B3\x03\x02\x02\x02\u0A6B\u0A6C\x07\x97\x02\x02\u0A6C\u0A71\x05\u01B6" +
		"\xDC\x02\u0A6D\u0A6E\x07\u0150\x02\x02\u0A6E\u0A70\x05\u01B6\xDC\x02\u0A6F" +
		"\u0A6D\x03\x02\x02\x02\u0A70\u0A73\x03\x02\x02\x02\u0A71\u0A6F\x03\x02" +
		"\x02\x02\u0A71\u0A72\x03\x02\x02\x02\u0A72\u01B5\x03\x02\x02\x02\u0A73" +
		"\u0A71\x03\x02\x02\x02\u0A74\u0A75\x05\u02DA\u016E\x02\u0A75\u0A76\x07" +
		"\x18\x02\x02\u0A76\u0A77\x07\u0152\x02\x02\u0A77\u0A78\x05\u01B0\xD9\x02" +
		"\u0A78\u0A79\x07\u0153\x02\x02\u0A79\u01B7\x03\x02\x02\x02\u0A7A\u0A80" +
		"\x05\u01BA\xDE\x02\u0A7B\u0A7C\x05\u01AE\xD8\x02\u0A7C\u0A7D\x05\u01BA" +
		"\xDE\x02\u0A7D\u0A7F\x03\x02\x02\x02\u0A7E\u0A7B\x03\x02\x02\x02\u0A7F" +
		"\u0A82\x03\x02\x02\x02\u0A80\u0A7E\x03\x02\x02\x02\u0A80\u0A81\x03\x02" +
		"\x02\x02\u0A81\u01B9\x03\x02\x02\x02\u0A82\u0A80\x03\x02\x02\x02\u0A83" +
		"\u0A85\x05\u021E\u0110\x02\u0A84\u0A86\x05\u01C6\xE4\x02\u0A85\u0A84\x03" +
		"\x02\x02\x02\u0A86\u0A87\x03\x02\x02\x02\u0A87\u0A85\x03\x02\x02\x02\u0A87" +
		"\u0A88\x03\x02\x02\x02\u0A88\u01BB\x03\x02\x02\x02\u0A89\u0A8C\x05\u01C8" +
		"\xE5\x02\u0A8A\u0A8D\x05\u01C0\xE1\x02\u0A8B\u0A8D\x05\u024E\u0128\x02" +
		"\u0A8C\u0A8A\x03\x02\x02\x02\u0A8C\u0A8B\x03\x02\x02\x02\u0A8D\u0A90\x03" +
		"\x02\x02\x02\u0A8E\u0A90\x05\u01C0\xE1\x02\u0A8F\u0A89\x03\x02\x02\x02" +
		"\u0A8F\u0A8E\x03\x02\x02\x02\u0A90\u01BD\x03\x02\x02\x02\u0A91\u0A93\x05" +
		"\u01F8\xFD\x02\u0A92\u0A94\x05\u021E\u0110\x02\u0A93\u0A92\x03\x02\x02" +
		"\x02\u0A93\u0A94\x03\x02\x02\x02\u0A94\u0A96\x03\x02\x02\x02\u0A95\u0A97" +
		"\x05\u024A\u0126\x02\u0A96\u0A95\x03\x02\x02\x02\u0A96\u0A97\x03\x02\x02" +
		"\x02\u0A97\u0A99\x03\x02\x02\x02\u0A98\u0A9A\x05\u0256\u012C\x02\u0A99" +
		"\u0A98\x03\x02\x02\x02\u0A99\u0A9A\x03\x02\x02\x02\u0A9A\u0A9C\x03\x02" +
		"\x02\x02\u0A9B\u0A9D\x05\u0266\u0134\x02\u0A9C\u0A9B\x03\x02\x02\x02\u0A9C" +
		"\u0A9D\x03\x02\x02\x02\u0A9D\u0A9F\x03\x02\x02\x02\u0A9E\u0AA0\x05\u0206" +
		"\u0104\x02\u0A9F\u0A9E\x03\x02\x02\x02\u0A9F\u0AA0\x03\x02\x02\x02\u0AA0" +
		"\u0AA6\x03\x02\x02\x02\u0AA1\u0AA2\x07\u0152\x02\x02\u0AA2\u0AA3\x05\u01C0" +
		"\xE1\x02\u0AA3\u0AA4\x07\u0153\x02\x02\u0AA4\u0AA6\x03\x02\x02\x02\u0AA5" +
		"\u0A91\x03\x02\x02\x02\u0AA5\u0AA1\x03\x02\x02\x02\u0AA6\u01BF\x03\x02" +
		"\x02\x02\u0AA7\u0AA9\x05\u01BE\xE0\x02\u0AA8\u0AAA\x05\u01C2\xE2\x02\u0AA9" +
		"\u0AA8\x03\x02\x02\x02\u0AA9\u0AAA\x03\x02\x02\x02\u0AAA\u0AAC\x03\x02" +
		"\x02\x02\u0AAB\u0AAD\x05\u0276\u013C\x02\u0AAC\u0AAB\x03\x02\x02\x02\u0AAC" +
		"\u0AAD\x03\x02\x02\x02\u0AAD\u0AAF\x03\x02\x02\x02\u0AAE\u0AB0\x05\u0278" +
		"\u013D\x02\u0AAF\u0AAE\x03\x02\x02\x02\u0AAF\u0AB0\x03\x02\x02\x02\u0AB0" +
		"\u0AB2\x03\x02\x02\x02\u0AB1\u0AB3\x05\u027C\u013F\x02\u0AB2\u0AB1\x03" +
		"\x02\x02\x02\u0AB2\u0AB3\x03\x02\x02\x02\u0AB3\u0AB5\x03\x02\x02\x02\u0AB4" +
		"\u0AB6\x05\u027E\u0140\x02\u0AB5\u0AB4\x03\x02\x02\x02\u0AB5\u0AB6\x03" +
		"\x02\x02\x02\u0AB6\u0AB8\x03\x02\x02\x02\u0AB7\u0AB9\x05\u01CC\xE7\x02" +
		"\u0AB8\u0AB7\x03\x02\x02\x02\u0AB8\u0AB9\x03\x02\x02\x02\u0AB9\u01C1\x03" +
		"\x02\x02\x02\u0ABA\u0ABB\x05\u01AE\xD8\x02\u0ABB\u0ABC\x05\u01BE\xE0\x02" +
		"\u0ABC\u0ABE\x03\x02\x02\x02\u0ABD\u0ABA\x03\x02\x02\x02\u0ABE\u0ABF\x03" +
		"\x02\x02\x02\u0ABF\u0ABD\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0" +
		"\u01C3\x03\x02\x02\x02\u0AC1\u0AC3\x05\u01B4\xDB\x02\u0AC2\u0AC1\x03\x02" +
		"\x02\x02\u0AC2\u0AC3\x03\x02\x02\x02\u0AC3\u0AC4\x03\x02\x02\x02\u0AC4" +
		"\u0AC5\x05\u01C0\xE1\x02\u0AC5\u01C5\x03\x02\x02\x02\u0AC6\u0AC7\x05\u01C8" +
		"\xE5\x02\u0AC7\u0AC9\x05\u01F8\xFD\x02\u0AC8\u0ACA\x05\u0230\u0119\x02" +
		"\u0AC9\u0AC8\x03\x02\x02\x02\u0AC9\u0ACA\x03\x02\x02\x02\u0ACA\u0ACC\x03" +
		"\x02\x02\x02\u0ACB\u0ACD\x05\u024A\u0126\x02\u0ACC\u0ACB\x03\x02\x02\x02" +
		"\u0ACC\u0ACD\x03\x02\x02\x02\u0ACD\u0ACF\x03\x02\x02\x02\u0ACE\u0AD0\x05" +
		"\u0256\u012C\x02\u0ACF\u0ACE\x03\x02\x02\x02\u0ACF\u0AD0\x03\x02\x02\x02" +
		"\u0AD0\u0AD2\x03\x02\x02\x02\u0AD1\u0AD3\x05\u0266\u0134\x02\u0AD2\u0AD1" +
		"\x03\x02\x02\x02\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3\u0AD5\x03\x02\x02\x02" +
		"\u0AD4\u0AD6\x05\u0206\u0104\x02\u0AD5\u0AD4\x03\x02\x02\x02\u0AD5\u0AD6" +
		"\x03\x02\x02\x02\u0AD6\u0AD8\x03\x02\x02\x02\u0AD7\u0AD9\x05\u0276\u013C" +
		"\x02\u0AD8\u0AD7\x03\x02\x02\x02\u0AD8\u0AD9\x03\x02\x02\x02\u0AD9\u0ADB" +
		"\x03\x02\x02\x02\u0ADA\u0ADC\x05\u0278\u013D\x02\u0ADB\u0ADA\x03\x02\x02" +
		"\x02\u0ADB\u0ADC\x03\x02\x02\x02\u0ADC\u0ADE\x03\x02\x02\x02\u0ADD\u0ADF" +
		"\x05\u027C\u013F\x02\u0ADE\u0ADD\x03\x02\x02\x02\u0ADE\u0ADF\x03\x02\x02" +
		"\x02\u0ADF\u0AE1\x03\x02\x02\x02\u0AE0\u0AE2\x05\u027E\u0140\x02\u0AE1" +
		"\u0AE0\x03\x02\x02\x02\u0AE1\u0AE2\x03\x02\x02\x02\u0AE2\u0AE4\x03\x02" +
		"\x02\x02\u0AE3\u0AE5\x05\u01CC\xE7\x02\u0AE4\u0AE3\x03\x02\x02\x02\u0AE4" +
		"\u0AE5\x03\x02\x02\x02\u0AE5\u0B06\x03\x02\x02\x02\u0AE6\u0AE8\x05\u01F8" +
		"\xFD\x02\u0AE7\u0AE9\x05\u0230\u0119\x02\u0AE8\u0AE7\x03\x02\x02\x02\u0AE8" +
		"\u0AE9\x03\x02\x02\x02\u0AE9\u0AEB\x03\x02\x02\x02\u0AEA\u0AEC\x05\u024A" +
		"\u0126\x02\u0AEB\u0AEA\x03\x02\x02\x02\u0AEB\u0AEC\x03\x02\x02\x02\u0AEC" +
		"\u0AEE\x03\x02\x02\x02\u0AED\u0AEF\x05\u0256\u012C\x02\u0AEE\u0AED\x03" +
		"\x02\x02\x02\u0AEE\u0AEF\x03\x02\x02\x02\u0AEF\u0AF1\x03\x02\x02\x02\u0AF0" +
		"\u0AF2\x05\u0266\u0134\x02\u0AF1\u0AF0\x03\x02\x02\x02\u0AF1\u0AF2\x03" +
		"\x02\x02\x02\u0AF2\u0AF4\x03\x02\x02\x02\u0AF3\u0AF5\x05\u0206\u0104\x02" +
		"\u0AF4\u0AF3\x03\x02\x02\x02\u0AF4\u0AF5\x03\x02\x02\x02\u0AF5\u0AF7\x03" +
		"\x02\x02\x02\u0AF6\u0AF8\x05\u0276\u013C\x02\u0AF7\u0AF6\x03\x02\x02\x02" +
		"\u0AF7\u0AF8\x03\x02\x02\x02\u0AF8\u0AFA\x03\x02\x02\x02\u0AF9\u0AFB\x05" +
		"\u0278\u013D\x02\u0AFA\u0AF9\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02" +
		"\u0AFB\u0AFD\x03\x02\x02\x02\u0AFC\u0AFE\x05\u027C\u013F\x02\u0AFD\u0AFC" +
		"\x03\x02\x02\x02\u0AFD\u0AFE\x03\x02\x02\x02\u0AFE\u0B00\x03\x02\x02\x02" +
		"\u0AFF\u0B01\x05\u027E\u0140\x02\u0B00\u0AFF\x03\x02\x02\x02\u0B00\u0B01" +
		"\x03\x02\x02\x02\u0B01\u0B03\x03\x02\x02\x02\u0B02\u0B04\x05\u01CC\xE7" +
		"\x02\u0B03\u0B02\x03\x02\x02\x02\u0B03\u0B04\x03\x02\x02\x02\u0B04\u0B06" +
		"\x03\x02\x02\x02\u0B05\u0AC6\x03\x02\x02\x02\u0B05\u0AE6\x03\x02\x02\x02" +
		"\u0B06\u01C7\x03\x02\x02\x02\u0B07\u0B08\x07\x1B\x02\x02\u0B08\u0B09\x07" +
		"\x1C\x02\x02\u0B09\u0B0B\x05\u01CA\xE6\x02\u0B0A\u0B0C\x05*\x16\x02\u0B0B" +
		"\u0B0A\x03\x02\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C\u0B1A\x03\x02" +
		"\x02\x02\u0B0D\u0B0E\x07\x1B\x02\x02\u0B0E\u0B10\x07j\x02\x02\u0B0F\u0B11" +
		"\x07\'\x02\x02\u0B10\u0B0F\x03\x02\x02\x02\u0B10\u0B11\x03\x02\x02\x02" +
		"\u0B11\u0B12\x03\x02\x02\x02\u0B12\u0B17\x05\u02CA\u0166\x02\u0B13\u0B14" +
		"\x07\u0152\x02\x02\u0B14\u0B15\x05\u014C\xA7\x02\u0B15\u0B16\x07\u0153" +
		"\x02\x02\u0B16\u0B18\x03\x02\x02\x02\u0B17\u0B13\x03\x02\x02\x02\u0B17" +
		"\u0B18\x03\x02\x02\x02\u0B18\u0B1A\x03\x02\x02\x02\u0B19\u0B07\x03\x02" +
		"\x02\x02\u0B19\u0B0D\x03\x02\x02\x02\u0B1A\u01C9\x03\x02\x02\x02\u0B1B" +
		"\u0B1D\x072\x02\x02\u0B1C\u0B1B\x03\x02\x02\x02\u0B1C\u0B1D\x03\x02\x02" +
		"\x02\u0B1D\u0B1E\x03\x02\x02\x02\u0B1E\u0B1F\x071\x02\x02\u0B1F\u0B21" +
		"\x07\u016C\x02\x02\u0B20\u0B22\x05\u012C\x97\x02\u0B21\u0B20\x03\x02\x02" +
		"\x02\u0B21\u0B22\x03\x02\x02\x02\u0B22\u0B24\x03\x02\x02\x02\u0B23\u0B25" +
		"\x05\u0142\xA2\x02\u0B24\u0B23\x03\x02\x02\x02\u0B24\u0B25\x03\x02\x02" +
		"\x02\u0B25\u0B29\x03\x02\x02\x02\u0B26\u0B27\x07\'\x02\x02\u0B27\u0B29" +
		"\x05\u02CA\u0166\x02\u0B28\u0B1C\x03\x02\x02\x02\u0B28\u0B26\x03\x02\x02" +
		"\x02\u0B29\u01CB\x03\x02\x02\x02\u0B2A\u0B2D\x07\x9B\x02\x02\u0B2B\u0B2C" +
		"\x07\u0171\x02\x02\u0B2C\u0B2E\x07\u0150\x02\x02\u0B2D\u0B2B\x03\x02\x02" +
		"\x02\u0B2D\u0B2E\x03\x02\x02\x02\u0B2E\u0B2F\x03\x02\x02\x02\u0B2F\u0B35" +
		"\x07\u0171\x02\x02\u0B30\u0B31\x07\x9B\x02\x02\u0B31\u0B32\x07\u0171\x02" +
		"\x02\u0B32\u0B33\x07\x9C\x02\x02\u0B33\u0B35\x07\u0171\x02\x02\u0B34\u0B2A" +
		"\x03\x02\x02\x02\u0B34\u0B30\x03\x02\x02\x02\u0B35\u01CD\x03\x02\x02\x02" +
		"\u0B36\u0B37\x07\xAF\x02\x02\u0B37\u0B38\x07\x17\x02\x02\u0B38\u0B3A\x05" +
		"\u023E\u0120\x02\u0B39\u0B3B\x05\u024A\u0126\x02\u0B3A\u0B39\x03\x02\x02" +
		"\x02\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u01CF\x03\x02\x02\x02\u0B3C\u0B3D" +
		"\x05\u0218\u010D\x02\u0B3D\u0B3E\x07\u0158\x02\x02\u0B3E\u0B3F\x05\u02C0" +
		"\u0161\x02\u0B3F\u01D1\x03\x02\x02\x02\u0B40\u0B41\x07\x9D\x02\x02\u0B41" +
		"\u0B46\x05\u01D0\xE9\x02\u0B42\u0B43\x07\u0150\x02\x02\u0B43\u0B45\x05" +
		"\u01D0\xE9\x02\u0B44\u0B42\x03\x02\x02\x02\u0B45\u0B48\x03\x02\x02\x02" +
		"\u0B46\u0B44\x03\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47\u01D3\x03" +
		"\x02\x02\x02\u0B48\u0B46\x03\x02\x02\x02\u0B49\u0B4A\x07\xE2\x02\x02\u0B4A" +
		"\u0B4B\x05\u023E\u0120\x02\u0B4B\u0B4D\x05\u01D2\xEA\x02\u0B4C\u0B4E\x05" +
		"\u024A\u0126\x02\u0B4D\u0B4C\x03\x02\x02\x02\u0B4D\u0B4E\x03\x02\x02\x02" +
		"\u0B4E\u01D5\x03\x02\x02\x02\u0B4F\u0B54\x05\u01D8\xED\x02\u0B50\u0B54" +
		"\x05\u01E2\xF2\x02\u0B51\u0B54\x05\u01E4\xF3\x02\u0B52\u0B54\x05\u01E6" +
		"\xF4\x02\u0B53\u0B4F\x03\x02\x02\x02\u0B53\u0B50\x03\x02\x02\x02\u0B53" +
		"\u0B51\x03\x02\x02\x02\u0B53\u0B52\x03\x02\x02\x02\u0B54\u01D7\x03\x02" +
		"\x02\x02\u0B55\u0B56\x07\u0115\x02\x02\u0B56\u0B5F\x07\u0116\x02\x02\u0B57" +
		"\u0B5C\x05\u01DA\xEE\x02\u0B58\u0B59\x07\u0150\x02\x02\u0B59\u0B5B\x05" +
		"\u01DA\xEE\x02\u0B5A\u0B58\x03\x02\x02\x02\u0B5B\u0B5E\x03\x02\x02\x02" +
		"\u0B5C\u0B5A\x03\x02\x02\x02\u0B5C\u0B5D\x03\x02\x02\x02\u0B5D\u0B60\x03" +
		"\x02\x02\x02\u0B5E\u0B5C\x03\x02\x02\x02\u0B5F\u0B57\x03\x02\x02\x02\u0B5F" +
		"\u0B60\x03\x02\x02\x02\u0B60\u01D9\x03\x02\x02\x02\u0B61\u0B64\x05\u01DE" +
		"\xF0\x02\u0B62\u0B64\x05\u01DC\xEF\x02\u0B63\u0B61\x03\x02\x02\x02\u0B63" +
		"\u0B62\x03\x02\x02\x02\u0B64\u01DB\x03\x02\x02\x02\u0B65\u0B66\x07\xC8" +
		"\x02\x02\u0B66\u0B6A\x07\u011A\x02\x02\u0B67\u0B68\x07\xC8\x02\x02\u0B68" +
		"\u0B6A\x07\u011B\x02\x02\u0B69\u0B65\x03\x02\x02\x02\u0B69\u0B67\x03\x02" +
		"\x02\x02\u0B6A\u01DD\x03\x02\x02\x02\u0B6B\u0B6C\x07\u011C\x02\x02\u0B6C" +
		"\u0B6D\x07\u011D\x02\x02\u0B6D\u0B6E\x05\u01E0\xF1\x02\u0B6E\u01DF\x03" +
		"\x02\x02\x02\u0B6F\u0B70\x07\u011E\x02\x02\u0B70\u01E1\x03\x02\x02\x02" +
		"\u0B71\u0B73\x07\u0117\x02\x02\u0B72\u0B74\x07\u0119\x02\x02\u0B73\u0B72" +
		"\x03\x02\x02\x02\u0B73\u0B74\x03\x02\x02\x02\u0B74\u01E3\x03\x02\x02\x02" +
		"\u0B75\u0B77\x07\u0118\x02\x02\u0B76\u0B78\x07\u0119\x02\x02\u0B77\u0B76" +
		"\x03\x02\x02\x02\u0B77\u0B78\x03\x02\x02\x02\u0B78\u01E5\x03\x02\x02\x02" +
		"\u0B79\u0B7A\x07\x9D\x02\x02\u0B7A\u0B7B\x07\u011F\x02\x02\u0B7B\u0B7C" +
		"\x05\u02C8\u0165\x02\u0B7C\u01E7\x03\x02\x02\x02\u0B7D\u0B7E\x07\u012C" +
		"\x02\x02\u0B7E\u0B80\x07\u0104\x02\x02\u0B7F\u0B81\x07\u0171\x02\x02\u0B80" +
		"\u0B7F\x03\x02\x02\x02\u0B81\u0B82\x03\x02\x02\x02\u0B82\u0B80\x03\x02" +
		"\x02\x02\u0B82\u0B83\x03\x02\x02\x02\u0B83\u01E9\x03\x02\x02\x02\u0B84" +
		"\u0B85\x07\u012F\x02\x02\u0B85\u0B86\x07j\x02\x02\u0B86\u0B8B\x05\u023E" +
		"\u0120\x02\u0B87\u0B89\x07\x18\x02\x02\u0B88\u0B87\x03\x02\x02\x02\u0B88" +
		"\u0B89\x03\x02\x02\x02\u0B89\u0B8A\x03\x02\x02\x02\u0B8A\u0B8C\x05\u02DA" +
		"\u016E\x02\u0B8B\u0B88\x03\x02\x02\x02\u0B8B\u0B8C\x03\x02\x02\x02\u0B8C" +
		"\u0B8D\x03\x02\x02\x02\u0B8D\u0B8E\x074\x02\x02\u0B8E\u0B8F\x05\u0226" +
		"\u0114\x02\u0B8F\u0B90\x07$\x02\x02\u0B90\u0B91\x05\u02C0\u0161\x02\u0B91" +
		"\u0B92\x05\u01EC\xF7\x02\u0B92\u01EB\x03\x02\x02\x02\u0B93\u0B96\x05\u01F0" +
		"\xF9\x02\u0B94\u0B96\x05\u01F2\xFA\x02\u0B95\u0B93\x03\x02\x02\x02\u0B95" +
		"\u0B94\x03\x02\x02\x02\u0B96\u0B99\x03\x02\x02\x02\u0B97\u0B95\x03\x02" +
		"\x02\x02\u0B97\u0B98\x03\x02\x02\x02\u0B98\u0B9B\x03\x02\x02\x02\u0B99" +
		"\u0B97\x03\x02\x02\x02\u0B9A\u0B9C\x05\u01EE\xF8\x02\u0B9B\u0B9A\x03\x02" +
		"\x02\x02\u0B9B\u0B9C\x03\x02\x02\x02\u0B9C\u01ED\x03\x02\x02\x02\u0B9D" +
		"\u0B9E\x07\xA5\x02\x02\u0B9E\u0B9F\x07\t\x02\x02\u0B9F\u0BA2\x07\u0130" +
		"\x02\x02\u0BA0\u0BA1\x07\x07\x02\x02\u0BA1\u0BA3\x05\u02C0\u0161\x02\u0BA2" +
		"\u0BA0\x03\x02\x02\x02\u0BA2\u0BA3\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02" +
		"\x02\x02\u0BA4\u0BA5\x07\xA6\x02\x02\u0BA5\u0BA6\x07\x1B\x02\x02\u0BA6" +
		"\u0BA7\x07\u0109\x02\x02\u0BA7\u0BA8\x05\u0252\u012A\x02\u0BA8\u01EF\x03" +
		"\x02\x02\x02\u0BA9\u0BAA\x07\xA5\x02\x02\u0BAA\u0BAB\x07\u0130\x02\x02" +
		"\u0BAB\u0BAC\x07\x07\x02\x02\u0BAC\u0BAD\x05\u02C0\u0161\x02\u0BAD\u0BAE" +
		"\x07\xA6\x02\x02\u0BAE\u0BAF\x05\u01F4\xFB\x02\u0BAF\u01F1\x03\x02\x02" +
		"\x02\u0BB0\u0BB1\x07\xA5\x02\x02\u0BB1\u0BB2\x07\u0130\x02\x02\u0BB2\u0BB3" +
		"\x07\xA6\x02\x02\u0BB3\u0BB4\x05\u01F4\xFB\x02\u0BB4\u01F3\x03\x02\x02" +
		"\x02\u0BB5\u0BB6\x07\xE2\x02\x02\u0BB6\u0BB9\x05\u01D2\xEA\x02\u0BB7\u0BB9" +
		"\x07\xAF\x02\x02\u0BB8\u0BB5\x03\x02\x02\x02\u0BB8\u0BB7\x03\x02\x02\x02" +
		"\u0BB9\u01F5\x03\x02\x02\x02\u0BBA\u0BBB\x07w\x02\x02\u0BBB\u0BBD\x07" +
		"\u010C\x02\x02\u0BBC\u0BBE\x07\u016C\x02\x02\u0BBD\u0BBC\x03\x02\x02\x02" +
		"\u0BBE\u0BBF\x03\x02\x02\x02\u0BBF\u0BBD\x03\x02\x02\x02\u0BBF\u0BC0\x03" +
		"\x02\x02\x02\u0BC0\u01F7\x03\x02\x02\x02\u0BC1\u0BC3\x07\x19\x02\x02\u0BC2" +
		"\u0BC4\x07\u0177\x02\x02\u0BC3\u0BC2\x03\x02\x02\x02\u0BC3\u0BC4\x03\x02" +
		"\x02\x02\u0BC4\u0BCB\x03\x02\x02\x02\u0BC5\u0BC7\t\x11\x02\x02\u0BC6\u0BC5" +
		"\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7\u0BC8\x03\x02\x02\x02" +
		"\u0BC8\u0BCC\x05\u01FA\xFE\x02\u0BC9\u0BCA\x073\x02\x02\u0BCA\u0BCC\x05" +
		"\u01FC\xFF\x02\u0BCB\u0BC6\x03\x02\x02\x02\u0BCB\u0BC9\x03\x02\x02\x02" +
		"\u0BCC\u0BCF\x03\x02\x02\x02\u0BCD\u0BCF\x05\u0200\u0101\x02\u0BCE\u0BC1" +
		"\x03\x02\x02\x02\u0BCE\u0BCD\x03\x02\x02\x02\u0BCF\u01F9\x03\x02\x02\x02" +
		"\u0BD0\u0BD5\x05\u01FE\u0100\x02\u0BD1\u0BD2\x07\u0150\x02\x02\u0BD2\u0BD4" +
		"\x05\u01FE\u0100\x02\u0BD3\u0BD1\x03\x02\x02\x02\u0BD4\u0BD7\x03\x02\x02" +
		"\x02\u0BD5\u0BD3\x03\x02\x02\x02\u0BD5\u0BD6\x03\x02\x02\x02\u0BD6\u01FB" +
		"\x03\x02\x02\x02\u0BD7\u0BD5\x03\x02\x02\x02\u0BD8\u0BD9\x07\u0152\x02" +
		"\x02\u0BD9\u0BDA\x05\u0204\u0103\x02\u0BDA\u0BDC\x07\u0153\x02\x02\u0BDB" +
		"\u0BDD\x05\u0122\x92\x02\u0BDC\u0BDB\x03\x02\x02\x02\u0BDC\u0BDD\x03\x02" +
		"\x02\x02\u0BDD\u0BDF\x03\x02\x02\x02\u0BDE\u0BE0\x05\u0126\x94\x02\u0BDF" +
		"\u0BDE\x03\x02\x02\x02\u0BDF\u0BE0\x03\x02\x02\x02\u0BE0\u0BE1\x03\x02" +
		"\x02\x02\u0BE1\u0BE2\x074\x02\x02\u0BE2\u0BF1\x07\u016C\x02\x02\u0BE3" +
		"\u0BEF\x07\x18\x02\x02\u0BE4\u0BE7\x07\u0152\x02\x02\u0BE5\u0BE8\x05\u021C" +
		"\u010F\x02\u0BE6\u0BE8\x05\u0146\xA4\x02\u0BE7\u0BE5\x03\x02\x02\x02\u0BE7" +
		"\u0BE6\x03\x02\x02\x02\u0BE8\u0BE9\x03\x02\x02\x02\u0BE9\u0BEA\x07\u0153" +
		"\x02\x02\u0BEA\u0BF0\x03\x02\x02\x02\u0BEB\u0BEE\x05\u021C\u010F\x02\u0BEC" +
		"\u0BEE\x05\u0146\xA4\x02\u0BED\u0BEB\x03\x02\x02\x02\u0BED\u0BEC\x03\x02" +
		"\x02\x02\u0BEE\u0BF0\x03\x02\x02\x02\u0BEF\u0BE4\x03\x02\x02\x02\u0BEF" +
		"\u0BED\x03\x02\x02\x02\u0BF0\u0BF2\x03\x02\x02\x02\u0BF1\u0BE3\x03\x02" +
		"\x02\x02\u0BF1\u0BF2\x03\x02\x02\x02\u0BF2\u0BF4\x03\x02\x02\x02\u0BF3" +
		"\u0BF5\x05\u0122\x92\x02\u0BF4\u0BF3\x03\x02\x02\x02\u0BF4\u0BF5\x03\x02" +
		"\x02\x02\u0BF5\u0BF7\x03\x02\x02\x02\u0BF6\u0BF8\x05\u0124\x93\x02\u0BF7" +
		"\u0BF6\x03\x02\x02\x02\u0BF7\u0BF8\x03\x02\x02\x02\u0BF8\u01FD\x03\x02" +
		"\x02\x02\u0BF9\u0C0E\x05\u0216\u010C\x02\u0BFA\u0C0B\x05\u02C0\u0161\x02" +
		"\u0BFB\u0BFD\x07\x18\x02\x02\u0BFC\u0BFB\x03\x02\x02\x02\u0BFC\u0BFD\x03" +
		"\x02\x02\x02\u0BFD\u0BFE\x03\x02\x02\x02\u0BFE\u0C0C\x05\u02DA\u016E\x02" +
		"\u0BFF\u0C00\x07\x18\x02\x02\u0C00\u0C01\x07\u0152\x02\x02\u0C01\u0C06" +
		"\x05\u02DA\u016E\x02\u0C02\u0C03\x07\u0150\x02\x02\u0C03\u0C05\x05\u02DA" +
		"\u016E\x02\u0C04\u0C02\x03\x02\x02\x02\u0C05\u0C08\x03\x02\x02\x02\u0C06" +
		"\u0C04\x03\x02\x02\x02\u0C06\u0C07\x03\x02\x02\x02\u0C07\u0C09\x03\x02" +
		"\x02\x02\u0C08\u0C06\x03\x02\x02\x02\u0C09\u0C0A\x07\u0153\x02\x02\u0C0A" +
		"\u0C0C\x03\x02\x02\x02\u0C0B\u0BFC\x03\x02\x02\x02\u0C0B\u0BFF\x03\x02" +
		"\x02\x02\u0C0B\u0C0C\x03\x02\x02\x02\u0C0C\u0C0E\x03\x02\x02\x02\u0C0D" +
		"\u0BF9\x03\x02\x02\x02\u0C0D\u0BFA\x03\x02\x02\x02\u0C0E\u01FF\x03\x02" +
		"\x02\x02\u0C0F\u0C10\x07d\x02\x02\u0C10\u0C14\x05\u0204\u0103\x02\u0C11" +
		"\u0C12\x07f\x02\x02\u0C12\u0C14\x05\u0204\u0103\x02\u0C13\u0C0F\x03\x02" +
		"\x02\x02\u0C13\u0C11\x03\x02\x02\x02\u0C14\u0C16\x03\x02\x02\x02\u0C15" +
		"\u0C17\x05\u0122\x92\x02\u0C16\u0C15\x03\x02\x02\x02\u0C16\u0C17\x03\x02" +
		"\x02\x02\u0C17\u0C19\x03\x02\x02\x02\u0C18\u0C1A\x05\u0126\x94\x02\u0C19" +
		"\u0C18\x03\x02\x02\x02\u0C19\u0C1A\x03\x02\x02\x02\u0C1A\u0C1B\x03\x02" +
		"\x02\x02\u0C1B\u0C1C\x074\x02\x02\u0C1C\u0C2B\x07\u016C\x02\x02\u0C1D" +
		"\u0C29\x07\x18\x02\x02\u0C1E\u0C21\x07\u0152\x02\x02\u0C1F\u0C22\x05\u021C" +
		"\u010F\x02\u0C20\u0C22\x05\u0146\xA4\x02\u0C21\u0C1F\x03\x02\x02\x02\u0C21" +
		"\u0C20\x03\x02\x02\x02\u0C22\u0C23\x03\x02\x02\x02\u0C23\u0C24\x07\u0153" +
		"\x02\x02\u0C24\u0C2A\x03\x02\x02\x02\u0C25\u0C28\x05\u021C\u010F\x02\u0C26" +
		"\u0C28\x05\u0146\xA4\x02\u0C27\u0C25\x03\x02\x02\x02\u0C27\u0C26\x03\x02" +
		"\x02\x02\u0C28\u0C2A\x03\x02\x02\x02\u0C29\u0C1E\x03\x02\x02\x02\u0C29" +
		"\u0C27\x03\x02\x02\x02\u0C2A\u0C2C\x03\x02\x02\x02\u0C2B\u0C1D\x03\x02" +
		"\x02\x02\u0C2B\u0C2C\x03\x02\x02\x02\u0C2C\u0C2E\x03\x02\x02\x02\u0C2D" +
		"\u0C2F\x05\u0122\x92\x02\u0C2E\u0C2D\x03\x02\x02\x02\u0C2E\u0C2F\x03\x02" +
		"\x02\x02\u0C2F\u0C31\x03\x02\x02\x02\u0C30\u0C32\x05\u0124\x93\x02\u0C31" +
		"\u0C30\x03\x02\x02\x02\u0C31\u0C32\x03\x02\x02\x02\u0C32\u0201\x03\x02" +
		"\x02\x02\u0C33\u0C36\x05\u0216\u010C\x02\u0C34\u0C36\x05\u02C0\u0161\x02" +
		"\u0C35\u0C33\x03\x02\x02\x02\u0C35\u0C34\x03\x02\x02\x02\u0C36\u0203\x03" +
		"\x02\x02\x02\u0C37\u0C3C\x05\u0202\u0102\x02\u0C38\u0C39\x07\u0150\x02" +
		"\x02\u0C39\u0C3B\x05\u0202\u0102\x02\u0C3A\u0C38\x03\x02\x02\x02\u0C3B" +
		"\u0C3E\x03\x02\x02\x02\u0C3C\u0C3A\x03\x02\x02\x02\u0C3C\u0C3D\x03\x02" +
		"\x02\x02\u0C3D\u0205\x03\x02\x02\x02\u0C3E\u0C3C\x03\x02\x02\x02\u0C3F" +
		"\u0C40\x07\xEA\x02\x02\u0C40\u0C45\x05\u0208\u0105\x02\u0C41\u0C42\x07" +
		"\u0150\x02\x02\u0C42\u0C44\x05\u0208\u0105\x02\u0C43\u0C41\x03\x02\x02" +
		"\x02\u0C44\u0C47\x03\x02\x02\x02\u0C45\u0C43\x03\x02\x02\x02\u0C45\u0C46" +
		"\x03\x02\x02\x02\u0C46\u0207\x03\x02\x02\x02\u0C47\u0C45\x03\x02\x02\x02" +
		"\u0C48\u0C49\x05\u02DA\u016E\x02\u0C49\u0C4A\x07\x18\x02\x02\u0C4A\u0C4B" +
		"\x05\u020A\u0106\x02\u0C4B\u0209\x03\x02\x02\x02\u0C4C\u0C59\x05\u02DA" +
		"\u016E\x02\u0C4D\u0C4F\x07\u0152\x02\x02\u0C4E\u0C50\x05\u02DA\u016E\x02" +
		"\u0C4F\u0C4E\x03\x02\x02\x02\u0C4F\u0C50\x03\x02\x02\x02\u0C50\u0C52\x03" +
		"\x02\x02\x02\u0C51\u0C53\x05\u0244\u0123\x02\u0C52\u0C51\x03\x02\x02\x02" +
		"\u0C52\u0C53\x03\x02\x02\x02\u0C53\u0C55\x03\x02\x02\x02\u0C54\u0C56\x05" +
		"\u020C\u0107\x02\u0C55\u0C54\x03\x02\x02\x02\u0C55\u0C56\x03\x02\x02\x02" +
		"\u0C56\u0C57\x03\x02\x02\x02\u0C57\u0C59\x07\u0153\x02\x02\u0C58\u0C4C" +
		"\x03\x02\x02\x02\u0C58\u0C4D\x03\x02\x02\x02\u0C59\u020B\x03\x02\x02\x02" +
		"\u0C5A\u0C5D\x05\u020E\u0108\x02\u0C5B\u0C5D\x05\u0210\u0109\x02\u0C5C" +
		"\u0C5A\x03\x02\x02\x02\u0C5C\u0C5B\x03\x02\x02\x02\u0C5D\u020D\x03\x02" +
		"\x02\x02\u0C5E\u0C5F\x07m\x02\x02\u0C5F\u0C67\x05\u0212\u010A\x02\u0C60" +
		"\u0C61\x07m\x02\x02\u0C61\u0C62\x07\xCE\x02\x02\u0C62\u0C63\x05\u0214" +
		"\u010B\x02\u0C63\u0C64\x07\x07\x02\x02\u0C64\u0C65\x05\u0214\u010B\x02" +
		"\u0C65\u0C67\x03\x02\x02\x02\u0C66\u0C5E\x03\x02\x02\x02\u0C66\u0C60\x03" +
		"\x02\x02\x02\u0C67\u020F\x03\x02\x02\x02\u0C68\u0C69\x07\xCB\x02\x02\u0C69" +
		"\u0C71\x05\u0212\u010A\x02\u0C6A\u0C6B\x07\xCB\x02\x02\u0C6B\u0C6C\x07" +
		"\xCE\x02\x02\u0C6C\u0C6D\x05\u0214\u010B\x02\u0C6D\u0C6E\x07\x07\x02\x02" +
		"\u0C6E\u0C6F\x05\u0214\u010B\x02\u0C6F\u0C71\x03\x02\x02\x02\u0C70\u0C68" +
		"\x03\x02\x02\x02\u0C70\u0C6A\x03\x02\x02\x02\u0C71\u0211\x03\x02\x02\x02" +
		"\u0C72\u0C73\x07\xEB\x02\x02\u0C73\u0C79\x07\xEC\x02\x02\u0C74\u0C75\x07" +
		"\xEE\x02\x02\u0C75\u0C79\x07l\x02\x02\u0C76\u0C77\x07\u0171\x02\x02\u0C77" +
		"\u0C79\x07\xEC\x02\x02\u0C78\u0C72\x03\x02\x02\x02\u0C78\u0C74\x03\x02" +
		"\x02\x02\u0C78\u0C76\x03\x02\x02\x02\u0C79\u0213\x03\x02\x02\x02\u0C7A" +
		"\u0C7B\x07\xEB\x02\x02\u0C7B\u0C81\t\x12\x02\x02\u0C7C\u0C7D\x07\xEE\x02" +
		"\x02\u0C7D\u0C81\x07l\x02\x02\u0C7E\u0C7F\x07\u0171\x02\x02\u0C7F\u0C81" +
		"\t\x12\x02\x02\u0C80\u0C7A\x03\x02\x02\x02\u0C80\u0C7C\x03\x02\x02\x02" +
		"\u0C80\u0C7E\x03\x02\x02\x02\u0C81\u0215\x03\x02\x02\x02\u0C82\u0C88\x07" +
		"\u0162";
	private static readonly _serializedATNSegment6: string =
		"\x02\x02\u0C83\u0C84\x05\u023E\u0120\x02\u0C84\u0C85\x07\u014E\x02\x02" +
		"\u0C85\u0C86\x07\u0162\x02\x02\u0C86\u0C88\x03\x02\x02\x02\u0C87\u0C82" +
		"\x03\x02\x02\x02\u0C87\u0C83\x03\x02\x02\x02\u0C88\u0217\x03\x02\x02\x02" +
		"\u0C89\u0C8A\x05\u02DA\u016E\x02\u0C8A\u0219\x03\x02\x02\x02\u0C8B\u0C90" +
		"\x05\u02C0\u0161\x02\u0C8C\u0C8D\x07\u0150\x02\x02\u0C8D\u0C8F\x05\u02C0" +
		"\u0161\x02\u0C8E\u0C8C\x03\x02\x02\x02\u0C8F\u0C92\x03\x02\x02\x02\u0C90" +
		"\u0C8E\x03\x02\x02\x02\u0C90\u0C91\x03\x02\x02\x02\u0C91\u021B\x03\x02" +
		"\x02\x02\u0C92\u0C90\x03\x02\x02\x02\u0C93\u0C98\x05\u02DA\u016E\x02\u0C94" +
		"\u0C95\x07\u0150\x02\x02\u0C95\u0C97\x05\u02DA\u016E\x02\u0C96\u0C94\x03" +
		"\x02\x02\x02\u0C97\u0C9A\x03\x02\x02\x02\u0C98\u0C96\x03\x02\x02\x02\u0C98" +
		"\u0C99\x03\x02\x02\x02\u0C99\u021D\x03\x02\x02\x02\u0C9A\u0C98\x03\x02" +
		"\x02\x02\u0C9B\u0C9C\x07\x17\x02\x02\u0C9C\u0C9D\x05\u0220\u0111\x02\u0C9D" +
		"\u021F\x03\x02\x02\x02\u0C9E\u0C9F\x05\u022C\u0117\x02\u0C9F\u0CA2\x05" +
		"\u0228\u0115\x02\u0CA0\u0CA1\x07\u0150\x02\x02\u0CA1\u0CA3\x05\u0228\u0115" +
		"\x02\u0CA2\u0CA0\x03\x02\x02\x02\u0CA3\u0CA4\x03\x02\x02\x02\u0CA4\u0CA2" +
		"\x03\x02\x02\x02\u0CA4\u0CA5\x03\x02\x02\x02\u0CA5\u0CA8\x03\x02\x02\x02" +
		"\u0CA6\u0CA8\x05\u0224\u0113\x02\u0CA7\u0C9E\x03\x02\x02\x02\u0CA7\u0CA6" +
		"\x03\x02\x02\x02\u0CA8\u0221\x03\x02\x02\x02\u0CA9\u0CAD\x05\u023A\u011E" +
		"\x02\u0CAA\u0CAC\x05\u0230\u0119\x02\u0CAB\u0CAA\x03\x02\x02\x02\u0CAC" +
		"\u0CAF\x03\x02\x02\x02\u0CAD\u0CAB\x03\x02\x02\x02\u0CAD\u0CAE\x03\x02" +
		"\x02\x02\u0CAE\u0CCA\x03\x02\x02\x02\u0CAF\u0CAD\x03\x02\x02\x02\u0CB0" +
		"\u0CB4\x05\u0254\u012B\x02\u0CB1\u0CB3\x05\u0230\u0119\x02\u0CB2\u0CB1" +
		"\x03\x02\x02\x02\u0CB3\u0CB6\x03\x02\x02\x02\u0CB4\u0CB2\x03\x02\x02\x02" +
		"\u0CB4\u0CB5\x03\x02\x02\x02\u0CB5\u0CCA\x03\x02\x02\x02\u0CB6\u0CB4\x03" +
		"\x02\x02\x02\u0CB7\u0CBB\x05\u0242\u0122\x02\u0CB8\u0CBA\x05\u0230\u0119" +
		"\x02\u0CB9\u0CB8\x03\x02\x02\x02\u0CBA\u0CBD\x03\x02\x02\x02\u0CBB\u0CB9" +
		"\x03\x02\x02\x02\u0CBB\u0CBC\x03\x02\x02\x02\u0CBC\u0CCA\x03\x02\x02\x02" +
		"\u0CBD\u0CBB\x03\x02\x02\x02\u0CBE\u0CC2\x05\u0248\u0125\x02\u0CBF\u0CC1" +
		"\x05\u0230\u0119\x02\u0CC0\u0CBF\x03\x02\x02\x02\u0CC1\u0CC4\x03\x02\x02" +
		"\x02\u0CC2\u0CC0\x03\x02\x02\x02\u0CC2\u0CC3\x03\x02\x02\x02\u0CC3\u0CCA" +
		"\x03\x02\x02\x02\u0CC4\u0CC2\x03\x02\x02\x02\u0CC5\u0CC6\x07\u0152\x02" +
		"\x02\u0CC6\u0CC7\x05\u0224\u0113\x02\u0CC7\u0CC8\x07\u0153\x02\x02\u0CC8" +
		"\u0CCA\x03\x02\x02\x02\u0CC9\u0CA9\x03\x02\x02\x02\u0CC9\u0CB0\x03\x02" +
		"\x02\x02\u0CC9\u0CB7\x03\x02\x02\x02\u0CC9\u0CBE\x03\x02\x02\x02\u0CC9" +
		"\u0CC5\x03\x02\x02\x02\u0CCA\u0223\x03\x02\x02\x02\u0CCB\u0CD6\x05\u0222" +
		"\u0112\x02\u0CCC\u0CCD\x05\u022E\u0118\x02\u0CCD\u0CD2\x05\u0226\u0114" +
		"\x02\u0CCE\u0CCF\x07$\x02\x02\u0CCF\u0CD3\x05\u02C0\u0161\x02\u0CD0\u0CD1" +
		"\x074\x02\x02\u0CD1\u0CD3\x05\u0154\xAB\x02\u0CD2\u0CCE\x03\x02\x02\x02" +
		"\u0CD2\u0CD0\x03\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD5\x03" +
		"\x02\x02\x02\u0CD4\u0CCC\x03\x02\x02\x02\u0CD5\u0CD8\x03\x02\x02\x02\u0CD6" +
		"\u0CD4\x03\x02\x02\x02\u0CD6\u0CD7\x03\x02\x02\x02\u0CD7\u0225\x03\x02" +
		"\x02\x02\u0CD8\u0CD6\x03\x02\x02\x02\u0CD9\u0CDE\x05\u023A\u011E\x02\u0CDA" +
		"\u0CDE\x05\u0254\u012B\x02\u0CDB\u0CDE\x05\u0242\u0122\x02\u0CDC\u0CDE" +
		"\x05\u0248\u0125\x02\u0CDD\u0CD9\x03\x02\x02\x02\u0CDD\u0CDA\x03\x02\x02" +
		"\x02\u0CDD\u0CDB\x03\x02\x02\x02\u0CDD\u0CDC\x03\x02\x02\x02\u0CDE\u0CE2" +
		"\x03\x02\x02\x02\u0CDF\u0CE1\x05\u0230\u0119\x02\u0CE0\u0CDF\x03\x02\x02" +
		"\x02\u0CE1\u0CE4\x03\x02\x02\x02\u0CE2\u0CE0\x03\x02\x02\x02\u0CE2\u0CE3" +
		"\x03\x02\x02\x02\u0CE3\u0227\x03\x02\x02\x02\u0CE4\u0CE2\x03\x02\x02\x02" +
		"\u0CE5\u0CE7\x07\x1F\x02\x02\u0CE6\u0CE5\x03\x02\x02\x02\u0CE6\u0CE7\x03" +
		"\x02\x02\x02\u0CE7\u0CE8\x03\x02\x02\x02\u0CE8\u0CE9\x05\u023C\u011F\x02" +
		"\u0CE9\u0CEA\x05\u022A\u0116\x02\u0CEA\u0229\x03\x02\x02\x02\u0CEB\u0CEC" +
		"\x07\u0152\x02\x02\u0CEC\u0CED\x05\u021A\u010E\x02\u0CED\u0CEE\x07\u0153" +
		"\x02\x02\u0CEE\u022B\x03\x02\x02\x02\u0CEF\u0CF0\x07\x1E\x02\x02\u0CF0" +
		"\u022D\x03\x02\x02\x02\u0CF1\u0D0A\x07 \x02\x02\u0CF2\u0CF3\x07\xFB\x02" +
		"\x02\u0CF3\u0D0A\x07 \x02\x02\u0CF4\u0D0A\x07\u0150\x02\x02\u0CF5\u0CF6" +
		"\x07\xD1\x02\x02\u0CF6\u0D0A\x07 \x02\x02\u0CF7\u0CF9\x07!\x02\x02\u0CF8" +
		"\u0CFA\x07\x1D\x02\x02\u0CF9\u0CF8\x03\x02\x02\x02\u0CF9\u0CFA\x03\x02" +
		"\x02\x02\u0CFA\u0CFB\x03\x02\x02\x02\u0CFB\u0D0A\x07 \x02\x02\u0CFC\u0CFE" +
		"\x07\"\x02\x02\u0CFD\u0CFF\x07\x1D\x02\x02\u0CFE\u0CFD\x03\x02\x02\x02" +
		"\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D00\x03\x02\x02\x02\u0D00\u0D0A\x07" +
		" \x02\x02\u0D01\u0D03\x07#\x02\x02\u0D02\u0D04\x07\x1D\x02\x02\u0D03\u0D02" +
		"\x03\x02\x02\x02\u0D03\u0D04\x03\x02\x02\x02\u0D04\u0D05\x03\x02\x02\x02" +
		"\u0D05\u0D0A\x07 \x02\x02\u0D06\u0D07\x07!\x02\x02\u0D07\u0D08\x07\xD7" +
		"\x02\x02\u0D08\u0D0A\x07 \x02\x02\u0D09\u0CF1\x03\x02\x02\x02\u0D09\u0CF2" +
		"\x03\x02\x02\x02\u0D09\u0CF4\x03\x02\x02\x02\u0D09\u0CF5\x03\x02\x02\x02" +
		"\u0D09\u0CF7\x03\x02\x02\x02\u0D09\u0CFC\x03\x02\x02\x02\u0D09\u0D01\x03" +
		"\x02\x02\x02\u0D09\u0D06\x03\x02\x02\x02\u0D0A\u022F\x03\x02\x02\x02\u0D0B" +
		"\u0D0C\x07\xD8\x02\x02\u0D0C\u0D0D\x07\xB4\x02\x02\u0D0D\u0D0E\x07\x1D" +
		"\x02\x02\u0D0E\u0D0F\x05\u0280\u0141\x02\u0D0F\u0D19\x05\u0232\u011A\x02" +
		"\u0D10\u0D11\x07\x18\x02\x02\u0D11\u0D16\x05\u02DA\u016E\x02\u0D12\u0D13" +
		"\x07\u0150\x02\x02\u0D13\u0D15\x05\u02DA\u016E\x02\u0D14\u0D12\x03\x02" +
		"\x02\x02\u0D15\u0D18\x03\x02\x02\x02\u0D16\u0D14\x03\x02\x02\x02\u0D16" +
		"\u0D17\x03\x02\x02\x02\u0D17\u0D1A\x03\x02\x02\x02\u0D18\u0D16\x03\x02" +
		"\x02\x02\u0D19\u0D10\x03\x02\x02\x02\u0D19\u0D1A\x03\x02\x02\x02\u0D1A" +
		"\u0D47\x03\x02\x02\x02\u0D1B\u0D1D\x07\u0150\x02\x02\u0D1C\u0D1B\x03\x02" +
		"\x02\x02\u0D1C\u0D1D\x03\x02\x02\x02\u0D1D\u0D1E\x03\x02\x02\x02\u0D1E" +
		"\u0D1F\x07\xD8\x02\x02\u0D1F\u0D20\x07\xB4\x02\x02\u0D20\u0D21\x05\u0280" +
		"\u0141\x02\u0D21\u0D2B\x05\u0232\u011A\x02\u0D22\u0D23\x07\x18\x02\x02" +
		"\u0D23\u0D28\x05\u02DA\u016E\x02\u0D24\u0D25\x07\u0150\x02\x02\u0D25\u0D27" +
		"\x05\u02DA\u016E\x02\u0D26\u0D24\x03\x02\x02\x02\u0D27\u0D2A\x03\x02\x02" +
		"\x02\u0D28\u0D26\x03\x02\x02\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29\u0D2C" +
		"\x03\x02\x02\x02\u0D2A\u0D28\x03\x02\x02\x02\u0D2B\u0D22\x03\x02\x02\x02" +
		"\u0D2B\u0D2C\x03\x02\x02\x02\u0D2C\u0D47\x03\x02\x02\x02\u0D2D\u0D2F\x07" +
		"\u0150\x02\x02\u0D2E\u0D2D\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02" +
		"\u0D2F\u0D30\x03\x02\x02\x02\u0D30\u0D31\x07\xD8\x02\x02\u0D31\u0D32\x07" +
		"\'\x02\x02\u0D32\u0D33\x07\u0152\x02\x02\u0D33\u0D34\x05\u024E\u0128\x02" +
		"\u0D34\u0D36\x07\u0153\x02\x02\u0D35\u0D37\x07\x18\x02\x02\u0D36\u0D35" +
		"\x03\x02\x02\x02\u0D36\u0D37\x03\x02\x02\x02\u0D37\u0D38\x03\x02\x02\x02" +
		"\u0D38\u0D44\x05\u0232\u011A\x02\u0D39\u0D3A\x07\u0152\x02\x02\u0D3A\u0D3F" +
		"\x05\u02DA\u016E\x02\u0D3B\u0D3C\x07\u0150\x02\x02\u0D3C\u0D3E\x05\u02DA" +
		"\u016E\x02\u0D3D\u0D3B\x03\x02\x02\x02\u0D3E\u0D41\x03\x02\x02\x02\u0D3F" +
		"\u0D3D\x03\x02\x02\x02\u0D3F\u0D40\x03\x02\x02\x02\u0D40\u0D42\x03\x02" +
		"\x02\x02\u0D41\u0D3F\x03\x02\x02\x02\u0D42\u0D43\x07\u0153\x02\x02\u0D43" +
		"\u0D45\x03\x02\x02\x02\u0D44\u0D39\x03\x02\x02\x02\u0D44\u0D45\x03\x02" +
		"\x02\x02\u0D45\u0D47\x03\x02\x02\x02\u0D46\u0D0B\x03\x02\x02\x02\u0D46" +
		"\u0D1C\x03\x02\x02\x02\u0D46\u0D2E\x03\x02\x02\x02\u0D47\u0231\x03\x02" +
		"\x02\x02\u0D48\u0D49\x05\u02DA\u016E\x02\u0D49\u0233\x03\x02\x02\x02\u0D4A" +
		"\u0D4B\x07\x82\x02\x02\u0D4B\u0D4C\x07\u0152\x02\x02\u0D4C\u0D4D\x07\x83" +
		"\x02\x02\u0D4D\u0D4E\x07\u0171\x02\x02\u0D4E\u0D4F\x07\x84\x02\x02\u0D4F" +
		"\u0D50\x07\x85\x02\x02\u0D50\u0D5A\x07\u0171\x02\x02\u0D51\u0D52\x07$" +
		"\x02\x02\u0D52\u0D57\x05\u02C0\u0161\x02\u0D53\u0D54\x07\u0150\x02\x02" +
		"\u0D54\u0D56\x05\u02C0\u0161\x02\u0D55\u0D53\x03\x02\x02\x02\u0D56\u0D59" +
		"\x03\x02\x02\x02\u0D57\u0D55\x03\x02\x02\x02\u0D57\u0D58\x03\x02\x02\x02" +
		"\u0D58\u0D5B\x03\x02\x02\x02\u0D59\u0D57\x03\x02\x02\x02\u0D5A\u0D51\x03" +
		"\x02\x02\x02\u0D5A\u0D5B\x03\x02\x02\x02\u0D5B\u0D5C\x03\x02\x02\x02\u0D5C" +
		"\u0D5D\x07\u0153\x02\x02\u0D5D\u0235\x03\x02\x02\x02\u0D5E\u0D5F\x07\x82" +
		"\x02\x02\u0D5F\u0D60\x07\u0152\x02\x02\u0D60\u0D61\x07\u0171\x02\x02\u0D61" +
		"\u0D62\t\x13\x02\x02\u0D62\u0D68\x07\u0153\x02\x02\u0D63\u0D64\x07\x82" +
		"\x02\x02\u0D64\u0D65\x07\u0152\x02\x02\u0D65\u0D66\x07\u0170\x02\x02\u0D66" +
		"\u0D68\x07\u0153\x02\x02\u0D67\u0D5E\x03\x02\x02\x02\u0D67\u0D63\x03\x02" +
		"\x02\x02\u0D68\u0237\x03\x02\x02\x02\u0D69\u0D6C\x05\u0234\u011B\x02\u0D6A" +
		"\u0D6C\x05\u0236\u011C\x02\u0D6B\u0D69\x03\x02\x02\x02\u0D6B\u0D6A\x03" +
		"\x02\x02\x02\u0D6C\u0239\x03\x02\x02\x02\u0D6D\u0D6F\x05\u023E\u0120\x02" +
		"\u0D6E\u0D70\x05\u0130\x99\x02\u0D6F\u0D6E\x03\x02\x02\x02\u0D6F\u0D70" +
		"\x03\x02\x02\x02\u0D70\u0D72\x03\x02\x02\x02\u0D71\u0D73\x05\u0238\u011D" +
		"\x02\u0D72\u0D71\x03\x02\x02\x02\u0D72\u0D73\x03\x02\x02\x02\u0D73\u0D78" +
		"\x03\x02\x02\x02\u0D74\u0D76\x07\x18\x02\x02\u0D75\u0D74\x03\x02\x02\x02" +
		"\u0D75\u0D76\x03\x02\x02\x02\u0D76\u0D77\x03\x02\x02\x02\u0D77\u0D79\x05" +
		"\u02DA\u016E\x02\u0D78\u0D75\x03\x02\x02\x02\u0D78\u0D79\x03\x02\x02\x02" +
		"\u0D79\u023B\x03\x02\x02\x02\u0D7A\u0D7C\x05\u023E\u0120\x02\u0D7B\u0D7D" +
		"\x05\u0238\u011D\x02\u0D7C\u0D7B\x03\x02\x02\x02\u0D7C\u0D7D\x03\x02\x02" +
		"\x02\u0D7D\u0D82\x03\x02\x02\x02\u0D7E\u0D80\x07\x18\x02\x02\u0D7F\u0D7E" +
		"\x03\x02\x02\x02\u0D7F\u0D80\x03\x02\x02\x02\u0D80\u0D81\x03\x02\x02\x02" +
		"\u0D81\u0D83\x05\u02DA\u016E\x02\u0D82\u0D7F\x03\x02\x02\x02\u0D82\u0D83" +
		"\x03\x02\x02\x02\u0D83\u023D\x03\x02\x02\x02\u0D84\u0D85\x05\u02DA\u016E" +
		"\x02\u0D85\u0D86\x07\u014E\x02\x02\u0D86\u0D87\x05\u02DA\u016E\x02\u0D87" +
		"\u0D8A\x03\x02\x02\x02\u0D88\u0D8A\x05\u02DA\u016E\x02\u0D89\u0D84\x03" +
		"\x02\x02\x02\u0D89\u0D88\x03\x02\x02\x02\u0D8A\u023F\x03\x02\x02\x02\u0D8B" +
		"\u0D8C\x05\u02DA\u016E\x02\u0D8C\u0D8D\x07\u014E\x02\x02\u0D8D\u0D8F\x03" +
		"\x02\x02\x02\u0D8E\u0D8B\x03\x02\x02\x02\u0D8E\u0D8F\x03\x02\x02\x02\u0D8F" +
		"\u0D90\x03\x02\x02\x02\u0D90\u0D91\x05\u02DA\u016E\x02\u0D91\u0241\x03" +
		"\x02\x02\x02\u0D92\u0D93\x07\u0152\x02\x02\u0D93\u0D94\x05\u01B0\xD9\x02" +
		"\u0D94\u0D96\x07\u0153\x02\x02\u0D95\u0D97\x07\x18\x02\x02\u0D96\u0D95" +
		"\x03\x02\x02\x02\u0D96\u0D97\x03\x02\x02\x02\u0D97\u0D98\x03\x02\x02\x02" +
		"\u0D98\u0D99\x05\u02DA\u016E\x02\u0D99\u0243\x03\x02\x02\x02\u0D9A\u0D9C" +
		"\x05\u027A\u013E\x02\u0D9B\u0D9D\x05\u0276\u013C\x02\u0D9C\u0D9B\x03\x02" +
		"\x02\x02\u0D9C\u0D9D\x03\x02\x02\x02\u0D9D\u0DA6\x03\x02\x02\x02\u0D9E" +
		"\u0DA6\x05\u0276\u013C\x02\u0D9F\u0DA1\x05\u027C\u013F\x02\u0DA0\u0DA2" +
		"\x05\u027E\u0140\x02\u0DA1\u0DA0\x03\x02\x02\x02\u0DA1\u0DA2\x03\x02\x02" +
		"\x02\u0DA2\u0DA6\x03\x02\x02\x02\u0DA3\u0DA6\x05\u027E\u0140\x02\u0DA4" +
		"\u0DA6\x05\u0278\u013D\x02\u0DA5\u0D9A\x03\x02\x02\x02\u0DA5\u0D9E\x03" +
		"\x02\x02\x02\u0DA5\u0D9F\x03\x02\x02\x02\u0DA5\u0DA3\x03\x02\x02\x02\u0DA5" +
		"\u0DA4\x03\x02\x02\x02\u0DA6\u0245\x03\x02\x02\x02\u0DA7\u0DAB\x05\u0242" +
		"\u0122\x02\u0DA8\u0DAB\x05\u023A\u011E\x02\u0DA9\u0DAB\x05\u0248\u0125" +
		"\x02\u0DAA\u0DA7\x03\x02\x02\x02\u0DAA\u0DA8\x03\x02\x02\x02\u0DAA\u0DA9" +
		"\x03\x02\x02\x02\u0DAB\u0247\x03\x02\x02\x02\u0DAC\u0DAD\x05\u02DA\u016E" +
		"\x02\u0DAD\u0DAE\x07\u0152\x02\x02\u0DAE\u0DAF\x07$\x02\x02\u0DAF\u0DB1" +
		"\x05\u0246\u0124\x02\u0DB0\u0DB2\x05\u0244\u0123\x02\u0DB1\u0DB0\x03\x02" +
		"\x02\x02\u0DB1\u0DB2\x03\x02\x02\x02\u0DB2\u0DC2\x03\x02\x02\x02\u0DB3" +
		"\u0DB4\x07\u0172\x02\x02\u0DB4\u0DB5\x07\u0152\x02\x02\u0DB5\u0DB6\x05" +
		"\u02C0\u0161\x02\u0DB6\u0DBF\x07\u0153\x02\x02\u0DB7\u0DB8\x07\u0150\x02" +
		"\x02\u0DB8\u0DB9\x07\u0172\x02\x02\u0DB9\u0DBA\x07\u0152\x02\x02\u0DBA" +
		"\u0DBB\x05\u02C0\u0161\x02\u0DBB\u0DBC\x07\u0153\x02\x02\u0DBC\u0DBE\x03" +
		"\x02\x02\x02\u0DBD\u0DB7\x03\x02\x02\x02\u0DBE\u0DC1\x03\x02\x02\x02\u0DBF" +
		"\u0DBD\x03\x02\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02\u0DC0\u0DC3\x03\x02" +
		"\x02\x02\u0DC1\u0DBF\x03\x02\x02\x02\u0DC2\u0DB3\x03\x02\x02\x02\u0DC2" +
		"\u0DC3\x03\x02\x02\x02\u0DC3\u0DC4\x03\x02\x02\x02\u0DC4\u0DC6\x07\u0153" +
		"\x02\x02\u0DC5\u0DC7\x05\u02DA\u016E\x02\u0DC6\u0DC5\x03\x02\x02\x02\u0DC6" +
		"\u0DC7\x03\x02\x02\x02\u0DC7\u0249\x03\x02\x02\x02\u0DC8\u0DC9\x07\x16" +
		"\x02\x02\u0DC9\u0DCA\x05\u024C\u0127\x02\u0DCA\u024B\x03\x02\x02\x02\u0DCB" +
		"\u0DCC\x05\u02C0\u0161\x02\u0DCC\u024D\x03\x02\x02\x02\u0DCD\u0DCE\x07" +
		"\u0109\x02\x02\u0DCE\u0DCF\x05\u0250\u0129\x02\u0DCF\u024F\x03\x02\x02" +
		"\x02\u0DD0\u0DD5\x05\u0252\u012A\x02\u0DD1\u0DD2\x07\u0150\x02\x02\u0DD2" +
		"\u0DD4\x05\u0252\u012A\x02\u0DD3\u0DD1\x03\x02\x02\x02\u0DD4\u0DD7\x03" +
		"\x02\x02\x02\u0DD5\u0DD3\x03\x02\x02\x02\u0DD5\u0DD6\x03\x02\x02\x02\u0DD6" +
		"\u0251\x03\x02\x02\x02\u0DD7\u0DD5\x03\x02\x02\x02\u0DD8\u0DD9\x05\u026A" +
		"\u0136\x02\u0DD9\u0253\x03\x02\x02\x02\u0DDA\u0DDB\x07\'\x02\x02\u0DDB" +
		"\u0DDC\x07\u0152\x02\x02\u0DDC\u0DDD\x05\u024E\u0128\x02\u0DDD\u0DDF\x07" +
		"\u0153\x02\x02\u0DDE\u0DE0\x07\x18\x02\x02\u0DDF\u0DDE\x03\x02\x02\x02" +
		"\u0DDF\u0DE0\x03\x02\x02\x02\u0DE0\u0DE1\x03\x02\x02\x02\u0DE1\u0DEB\x05" +
		"\u0232\u011A\x02\u0DE2\u0DE3\x07\u0152\x02\x02\u0DE3\u0DE8\x05\u02DA\u016E" +
		"\x02\u0DE4\u0DE5\x07\u0150\x02\x02\u0DE5\u0DE7\x05\u02DA\u016E\x02\u0DE6" +
		"\u0DE4\x03\x02\x02\x02\u0DE7\u0DEA\x03\x02\x02\x02\u0DE8\u0DE6\x03\x02" +
		"\x02\x02\u0DE8\u0DE9\x03\x02\x02\x02\u0DE9\u0DEC\x03\x02\x02\x02\u0DEA" +
		"\u0DE8\x03\x02\x02\x02\u0DEB\u0DE2\x03\x02\x02\x02\u0DEB\u0DEC\x03\x02" +
		"\x02\x02\u0DEC\u0DED\x03\x02\x02\x02\u0DED\u0DEE\x07\u0153\x02\x02\u0DEE" +
		"\u0255\x03\x02\x02\x02\u0DEF\u0DF0\x07\x13\x02\x02\u0DF0\u0DF1\x07\x14" +
		"\x02\x02\u0DF1\u0DF2\x05\u0258\u012D\x02\u0DF2\u0257\x03\x02\x02\x02\u0DF3" +
		"\u0DF7\x05\u025C\u012F\x02\u0DF4\u0DF7\x05\u025E\u0130\x02\u0DF5\u0DF7" +
		"\x05\u025A\u012E\x02\u0DF6\u0DF3\x03\x02\x02\x02\u0DF6\u0DF4\x03\x02\x02" +
		"\x02\u0DF6\u0DF5\x03\x02\x02\x02\u0DF7\u0259\x03\x02\x02\x02\u0DF8\u0DF9" +
		"\x07\u0152\x02\x02\u0DF9\u0DFA\x07\u0153\x02\x02\u0DFA\u025B\x03\x02\x02" +
		"\x02\u0DFB\u0DFC\t\x14\x02\x02\u0DFC\u0DFD\x07\u0152\x02\x02\u0DFD\u0E02" +
		"\x05\u02C0\u0161\x02\u0DFE\u0DFF\x07\u0150\x02\x02\u0DFF\u0E01\x05\u02C0" +
		"\u0161\x02\u0E00\u0DFE\x03\x02\x02\x02\u0E01\u0E04\x03\x02\x02\x02\u0E02" +
		"\u0E00\x03\x02\x02\x02\u0E02\u0E03\x03\x02\x02\x02\u0E03\u0E05\x03\x02" +
		"\x02\x02\u0E04\u0E02\x03\x02\x02\x02\u0E05\u0E06\x07\u0153\x02\x02\u0E06" +
		"\u025D\x03\x02\x02\x02\u0E07\u0E0C\x05\u026C\u0137\x02\u0E08\u0E09\x07" +
		"\x97\x02\x02\u0E09\u0E0D\x07\xE6\x02\x02\u0E0A\u0E0B\x07\x97\x02\x02\u0E0B" +
		"\u0E0D\x07\xE7\x02\x02\u0E0C\u0E08\x03\x02\x02\x02\u0E0C\u0E0A\x03\x02" +
		"\x02\x02\u0E0C\u0E0D\x03\x02\x02\x02\u0E0D\u0E1B\x03\x02\x02\x02\u0E0E" +
		"\u0E0F\x07\xF4\x02\x02\u0E0F\u0E10\x07\xF5\x02\x02\u0E10\u0E11\x07\u0152" +
		"\x02\x02\u0E11\u0E16\x05\u0260\u0131\x02\u0E12\u0E13\x07\u0150\x02\x02" +
		"\u0E13\u0E15\x05\u0260\u0131\x02\u0E14\u0E12\x03\x02\x02\x02\u0E15\u0E18" +
		"\x03\x02\x02\x02\u0E16\u0E14\x03\x02\x02\x02\u0E16\u0E17\x03\x02\x02\x02" +
		"\u0E17\u0E19\x03\x02\x02\x02\u0E18\u0E16\x03\x02\x02\x02\u0E19\u0E1A\x07" +
		"\u0153\x02\x02\u0E1A\u0E1C\x03\x02\x02\x02\u0E1B\u0E0E\x03\x02\x02\x02" +
		"\u0E1B\u0E1C\x03\x02\x02\x02\u0E1C\u025F\x03\x02\x02\x02\u0E1D\u0E20\x05" +
		"\u0262\u0132\x02\u0E1E\u0E20\x05\u0264\u0133\x02\u0E1F\u0E1D\x03\x02\x02" +
		"\x02\u0E1F\u0E1E\x03\x02\x02\x02\u0E20\u0261\x03\x02\x02\x02\u0E21\u0E23" +
		"\x07\u0152\x02\x02\u0E22\u0E24\x05\u02C0\u0161\x02\u0E23\u0E22\x03\x02" +
		"\x02\x02\u0E23\u0E24\x03\x02\x02\x02\u0E24\u0E29\x03\x02\x02\x02\u0E25" +
		"\u0E26\x07\u0150\x02\x02\u0E26\u0E28\x05\u02C0\u0161\x02\u0E27\u0E25\x03" +
		"\x02\x02\x02\u0E28\u0E2B\x03\x02\x02\x02\u0E29\u0E27\x03\x02\x02\x02\u0E29" +
		"\u0E2A\x03\x02\x02\x02\u0E2A\u0E2C\x03\x02\x02\x02\u0E2B\u0E29\x03\x02" +
		"\x02\x02\u0E2C\u0E2D\x07\u0153\x02\x02\u0E2D\u0263\x03\x02\x02\x02\u0E2E" +
		"\u0E2F\x05\u02C0\u0161\x02\u0E2F\u0265\x03\x02\x02\x02\u0E30\u0E31\x07" +
		"\x15\x02\x02\u0E31\u0E32\x05\u0268\u0135\x02\u0E32\u0267\x03\x02\x02\x02" +
		"\u0E33\u0E34\x05\u02C0\u0161\x02\u0E34\u0269\x03\x02\x02\x02\u0E35\u0E36" +
		"\x07\u0152\x02\x02\u0E36\u0E37\x05\u026C\u0137\x02\u0E37\u0E38\x07\u0153" +
		"\x02\x02\u0E38\u026B\x03\x02\x02\x02\u0E39\u0E3B\x05\u02C0\u0161\x02\u0E3A" +
		"\u0E3C\x05\u026E\u0138\x02\u0E3B\u0E3A\x03\x02\x02\x02\u0E3B\u0E3C\x03" +
		"\x02\x02\x02\u0E3C\u026D\x03\x02\x02\x02\u0E3D\u0E3E\x07\u0150\x02\x02" +
		"\u0E3E\u0E40\x05\u02C0\u0161\x02\u0E3F\u0E3D\x03\x02\x02\x02\u0E40\u0E41" +
		"\x03\x02\x02\x02\u0E41\u0E3F\x03\x02\x02\x02\u0E41\u0E42\x03\x02\x02\x02" +
		"\u0E42\u026F\x03\x02\x02\x02\u0E43\u0E46\x05\u026A\u0136\x02\u0E44\u0E46" +
		"\x05\u026C\u0137\x02\u0E45\u0E43\x03\x02\x02\x02\u0E45\u0E44\x03\x02\x02" +
		"\x02\u0E46\u0271\x03\x02\x02\x02\u0E47\u0E48\x07\u0152\x02\x02\u0E48\u0E4D" +
		"\x05\u0180\xC1\x02\u0E49\u0E4A\x07\u0150\x02\x02\u0E4A\u0E4C\x05\u0180" +
		"\xC1\x02\u0E4B\u0E49\x03\x02\x02\x02\u0E4C\u0E4F\x03\x02\x02\x02\u0E4D" +
		"\u0E4B\x03\x02\x02\x02\u0E4D\u0E4E\x03\x02\x02\x02\u0E4E\u0E50\x03\x02" +
		"\x02\x02\u0E4F\u0E4D\x03\x02\x02\x02\u0E50\u0E51\x07\u0153\x02\x02\u0E51" +
		"\u0273\x03\x02\x02\x02\u0E52\u0E57\x05\u0180\xC1\x02\u0E53\u0E54\x07\u0150" +
		"\x02\x02\u0E54\u0E56\x05\u0180\xC1\x02\u0E55\u0E53\x03\x02\x02\x02\u0E56" +
		"\u0E59\x03\x02\x02\x02\u0E57\u0E55\x03\x02\x02\x02\u0E57\u0E58\x03\x02" +
		"\x02\x02\u0E58\u0275\x03\x02\x02\x02\u0E59\u0E57\x03\x02\x02\x02\u0E5A" +
		"\u0E5B\x07\x12\x02\x02\u0E5B\u0E5C\x07\x14\x02\x02\u0E5C\u0E61\x05\u0180" +
		"\xC1\x02\u0E5D\u0E5E\x07\u0150\x02\x02\u0E5E\u0E60\x05\u0180\xC1\x02\u0E5F" +
		"\u0E5D\x03\x02\x02\x02\u0E60\u0E63\x03\x02\x02\x02\u0E61\u0E5F\x03\x02" +
		"\x02\x02\u0E61\u0E62\x03\x02\x02\x02\u0E62\u0277\x03\x02\x02\x02\u0E63" +
		"\u0E61\x03\x02\x02\x02\u0E64\u0E65\x075\x02\x02\u0E65\u0E66\x07\x14\x02" +
		"\x02\u0E66\u0E67\x05\u0270\u0139\x02\u0E67\u0279\x03\x02\x02\x02\u0E68" +
		"\u0E69\x07%\x02\x02\u0E69\u0E6A\x07\x14\x02\x02\u0E6A\u0E6B\x05\u0270" +
		"\u0139\x02\u0E6B\u027B\x03\x02\x02\x02\u0E6C\u0E6D\x076\x02\x02\u0E6D" +
		"\u0E6E\x07\x14\x02\x02\u0E6E\u0E6F\x05\u0270\u0139\x02\u0E6F\u027D\x03" +
		"\x02\x02\x02\u0E70\u0E71\x077\x02\x02\u0E71\u0E74\x07\x14\x02\x02\u0E72" +
		"\u0E75\x05\u0272\u013A\x02\u0E73\u0E75\x05\u0274\u013B\x02\u0E74\u0E72" +
		"\x03\x02\x02\x02\u0E74\u0E73\x03\x02\x02\x02\u0E75\u027F\x03\x02\x02\x02" +
		"\u0E76\u0E77\x05\u0282\u0142\x02\u0E77\u0E86\x07\u0152\x02\x02\u0E78\u0E87" +
		"\x07\u0162\x02\x02\u0E79\u0E7B\t\x11\x02\x02\u0E7A\u0E79\x03\x02\x02\x02" +
		"\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0E84\x03\x02\x02\x02\u0E7C\u0E81\x05" +
		"\u0202\u0102\x02\u0E7D\u0E7E\x07\u0150\x02\x02\u0E7E\u0E80\x05\u0202\u0102" +
		"\x02\u0E7F\u0E7D\x03\x02\x02\x02\u0E80\u0E83\x03\x02\x02\x02\u0E81\u0E7F" +
		"\x03\x02\x02\x02\u0E81\u0E82\x03\x02\x02\x02\u0E82\u0E85\x03\x02\x02\x02" +
		"\u0E83\u0E81\x03\x02\x02\x02\u0E84\u0E7C\x03\x02\x02\x02\u0E84\u0E85\x03" +
		"\x02\x02\x02\u0E85\u0E87\x03\x02\x02\x02\u0E86\u0E78\x03\x02\x02\x02\u0E86" +
		"\u0E7A\x03\x02\x02\x02\u0E87\u0E88\x03\x02\x02\x02\u0E88\u0E8B\x07\u0153" +
		"\x02\x02\u0E89\u0E8A\x07\xF3\x02\x02\u0E8A\u0E8C\x05\u020A\u0106\x02\u0E8B" +
		"\u0E89\x03\x02\x02\x02\u0E8B\u0E8C\x03\x02\x02\x02\u0E8C\u0281\x03\x02" +
		"\x02\x02\u0E8D\u0E90\x05\u02DC\u016F\x02\u0E8E\u0E90\x05\u02E2\u0172\x02" +
		"\u0E8F\u0E8D\x03\x02\x02\x02\u0E8F\u0E8E\x03\x02\x02\x02\u0E90\u0283\x03" +
		"\x02\x02\x02\u0E91\u0E92\x07\x87\x02\x02\u0E92\u0E93\x07\u0152\x02\x02" +
		"\u0E93\u0E94\x05\u02C0\u0161\x02\u0E94\u0E95\x07\x18\x02\x02\u0E95\u0E96" +
		"\x05\u01A4\xD3\x02\u0E96\u0E97\x07\u0153\x02\x02\u0E97\u0285\x03\x02\x02" +
		"\x02\u0E98\u0E99\x07\xA4\x02\x02\u0E99\u0E9F\x05\u02C0\u0161\x02\u0E9A" +
		"\u0E9B\x07\xA5\x02\x02\u0E9B\u0E9C\x05\u02C0\u0161\x02\u0E9C\u0E9D\x07" +
		"\xA6\x02\x02\u0E9D\u0E9E\x05\u02C0\u0161\x02\u0E9E\u0EA0\x03\x02\x02\x02" +
		"\u0E9F\u0E9A\x03\x02\x02\x02\u0EA0\u0EA1\x03\x02\x02\x02\u0EA1\u0E9F\x03" +
		"\x02\x02\x02\u0EA1\u0EA2\x03\x02\x02\x02\u0EA2\u0EA5\x03\x02\x02\x02\u0EA3" +
		"\u0EA4\x07\xA7\x02\x02\u0EA4\u0EA6\x05\u02C0\u0161\x02\u0EA5\u0EA3\x03" +
		"\x02\x02\x02\u0EA5\u0EA6\x03\x02\x02\x02\u0EA6\u0EA7\x03\x02\x02\x02\u0EA7" +
		"\u0EA8\x07\xA8\x02\x02\u0EA8\u0287\x03\x02\x02\x02\u0EA9\u0EAF\x07\xA4" +
		"\x02\x02\u0EAA\u0EAB\x07\xA5\x02\x02\u0EAB\u0EAC\x05\u02C0\u0161\x02\u0EAC" +
		"\u0EAD\x07\xA6\x02\x02\u0EAD\u0EAE\x05\u02C0\u0161\x02\u0EAE\u0EB0\x03" +
		"\x02\x02\x02\u0EAF\u0EAA\x03\x02\x02\x02\u0EB0\u0EB1\x03\x02\x02\x02\u0EB1" +
		"\u0EAF\x03\x02\x02\x02\u0EB1\u0EB2\x03\x02\x02\x02\u0EB2\u0EB5\x03\x02" +
		"\x02\x02\u0EB3\u0EB4\x07\xA7\x02\x02\u0EB4\u0EB6\x05\u02C0\u0161\x02\u0EB5" +
		"\u0EB3\x03\x02\x02\x02\u0EB5\u0EB6\x03\x02\x02\x02\u0EB6\u0EB7\x03\x02" +
		"\x02\x02\u0EB7\u0EB8\x07\xA8\x02\x02\u0EB8\u0289\x03\x02\x02\x02\u0EB9" +
		"\u0EBA\x07\u012E\x02\x02\u0EBA\u0EBB\x07\u0152\x02\x02\u0EBB\u0EBE\x05" +
		"\u02C0\u0161\x02\u0EBC\u0EBD\x07M\x02\x02\u0EBD\u0EBF\x05\u028C\u0147" +
		"\x02\u0EBE\u0EBC\x03\x02\x02\x02\u0EBE\u0EBF\x03\x02\x02\x02\u0EBF\u0EC0" +
		"\x03\x02\x02\x02\u0EC0\u0EC1\x07\u0153\x02\x02\u0EC1\u028B\x03\x02\x02" +
		"\x02\u0EC2\u0EC3\t\x15\x02\x02\u0EC3\u028D\x03\x02\x02\x02\u0EC4\u0EC5" +
		"\x07\u012D\x02\x02\u0EC5\u0EC6\x07\u0152\x02\x02\u0EC6\u0EC7\x05\u0290" +
		"\u0149\x02\u0EC7\u0EC8\x07\x17\x02\x02\u0EC8\u0EC9\x05\u02C0\u0161\x02" +
		"\u0EC9\u0ECA\x07\u0153\x02\x02\u0ECA\u028F\x03\x02\x02\x02\u0ECB\u0ECC" +
		"\t\x16\x02\x02\u0ECC\u0291\x03\x02\x02\x02\u0ECD\u0EDA\x05\u02A0\u0151" +
		"\x02\u0ECE\u0EDA\x07\u0171\x02\x02\u0ECF\u0EDA\x05\u0298\u014D\x02\u0ED0" +
		"\u0EDA\x05\u029A\u014E\x02\u0ED1\u0EDA\x05\u029C\u014F\x02\u0ED2\u0EDA" +
		"\x07\u016C\x02\x02\u0ED3\u0EDA\x05\u0294\u014B\x02\u0ED4\u0EDA\x07\u016E" +
		"\x02\x02\u0ED5\u0EDA\x07\u016F\x02\x02\u0ED6\u0EDA\x05\u0296\u014C\x02" +
		"\u0ED7\u0EDA\x05\u02C6\u0164\x02\u0ED8\u0EDA\x07B\x02\x02\u0ED9\u0ECD" +
		"\x03\x02\x02\x02\u0ED9\u0ECE\x03\x02\x02\x02\u0ED9\u0ECF\x03\x02\x02\x02" +
		"\u0ED9\u0ED0\x03\x02\x02\x02\u0ED9\u0ED1\x03\x02\x02\x02\u0ED9\u0ED2\x03" +
		"\x02\x02\x02\u0ED9\u0ED3\x03\x02\x02\x02\u0ED9\u0ED4\x03\x02\x02\x02\u0ED9" +
		"\u0ED5\x03\x02\x02\x02\u0ED9\u0ED6\x03\x02\x02\x02\u0ED9\u0ED7\x03\x02" +
		"\x02\x02\u0ED9\u0ED8\x03\x02\x02\x02\u0EDA\u0293\x03\x02\x02\x02\u0EDB" +
		"\u0EDD\x07\u016C\x02\x02\u0EDC\u0EDE\x07\u016C\x02\x02\u0EDD\u0EDC\x03" +
		"\x02\x02\x02\u0EDE\u0EDF\x03\x02\x02\x02\u0EDF\u0EDD\x03\x02\x02\x02\u0EDF" +
		"\u0EE0\x03\x02\x02\x02\u0EE0\u0295\x03\x02\x02\x02\u0EE1\u0EE2\x07\u0174" +
		"\x02\x02\u0EE2\u0EE3\x07\u016D\x02\x02\u0EE3\u0297\x03\x02\x02\x02\u0EE4" +
		"\u0EE5\x07W\x02\x02\u0EE5\u0EE8\x07\u016C\x02\x02\u0EE6\u0EE8\x07\xEF" +
		"\x02\x02\u0EE7\u0EE4\x03\x02\x02\x02\u0EE7\u0EE6\x03\x02\x02\x02\u0EE8" +
		"\u0299\x03\x02\x02\x02\u0EE9\u0EEA\x07Y\x02\x02\u0EEA\u0EED\x07\u016C" +
		"\x02\x02\u0EEB\u0EED\x07\xF0\x02\x02\u0EEC\u0EE9\x03\x02\x02\x02\u0EEC" +
		"\u0EEB\x03\x02\x02\x02\u0EED\u029B\x03\x02\x02\x02\u0EEE\u0EEF\x07Z\x02" +
		"\x02\u0EEF\u0EF0\x07\u016C\x02\x02\u0EF0\u029D\x03\x02\x02\x02\u0EF1\u0EF2" +
		"\t\x17\x02\x02\u0EF2\u029F\x03\x02\x02\x02\u0EF3\u0EF4\x05\u029E\u0150" +
		"\x02\u0EF4\u0EF5\x05\u02A4\u0153\x02\u0EF5\u02A1\x03\x02\x02\x02\u0EF6" +
		"\u0EF7\x07\u0152\x02\x02\u0EF7\u0EF8\x05\u029E\u0150\x02\u0EF8\u0EF9\x07" +
		"\u0153\x02\x02\u0EF9\u0EFA\x05\u02A4\u0153\x02\u0EFA\u0F06\x03\x02\x02" +
		"\x02\u0EFB\u0EFC\x07]\x02\x02\u0EFC\u0EFD\x05\u029E\u0150\x02\u0EFD\u0EFE" +
		"\x05\u02A4\u0153\x02\u0EFE\u0F06\x03\x02\x02\x02\u0EFF\u0F00\x07]\x02" +
		"\x02\u0F00\u0F01\x07\u0152\x02\x02\u0F01\u0F02\x05\u02C0\u0161\x02\u0F02" +
		"\u0F03\x07\u0153\x02\x02\u0F03\u0F04\x05\u02A4\u0153\x02\u0F04\u0F06\x03" +
		"\x02\x02\x02\u0F05\u0EF6\x03\x02\x02\x02\u0F05\u0EFB\x03\x02\x02\x02\u0F05" +
		"\u0EFF\x03\x02\x02\x02\u0F06\u02A3\x03\x02\x02\x02\u0F07\u0F08\x07\u010B" +
		"\x02\x02\u0F08\u0F09\x07M\x02\x02\u0F09\u0F14\x07\u010E\x02\x02\u0F0A" +
		"\u0F0B\x07\u0110\x02\x02\u0F0B\u0F0C\x07M\x02\x02\u0F0C\u0F14\x07\u0114" +
		"\x02\x02\u0F0D\u0F14\x07\u010B\x02\x02\u0F0E\u0F14\x07\u010E\x02\x02\u0F0F" +
		"\u0F14\x07\u0110\x02\x02\u0F10\u0F14\x07\u0112\x02\x02\u0F11\u0F14\x07" +
		"\u0113\x02\x02\u0F12\u0F14\x07\u0114\x02\x02\u0F13\u0F07\x03\x02\x02\x02" +
		"\u0F13\u0F0A\x03\x02\x02\x02\u0F13\u0F0D\x03\x02\x02\x02\u0F13\u0F0E\x03" +
		"\x02\x02\x02\u0F13\u0F0F\x03\x02\x02\x02\u0F13\u0F10\x03\x02\x02\x02\u0F13" +
		"\u0F11\x03\x02\x02\x02\u0F13\u0F12\x03\x02\x02\x02\u0F14\u02A5\x03\x02" +
		"\x02\x02\u0F15\u0F21\x05\u0292\u014A\x02\u0F16\u0F21\x05\u02A2\u0152\x02" +
		"\u0F17\u0F21\x05\u0284\u0143\x02\u0F18\u0F21\x05\u028E\u0148\x02\u0F19" +
		"\u0F21\x05\u028A\u0146\x02\u0F1A\u0F21\x05\u0286\u0144\x02\u0F1B\u0F21" +
		"\x05\u0288\u0145\x02\u0F1C\u0F21\x05\u02C4\u0163\x02\u0F1D\u0F21\x05\u0280" +
		"\u0141\x02\u0F1E\u0F21\x05\u0218\u010D\x02\u0F1F\u0F21\x05\u026A\u0136" +
		"\x02\u0F20\u0F15\x03\x02\x02\x02\u0F20\u0F16\x03\x02\x02\x02\u0F20\u0F17" +
		"\x03\x02\x02\x02\u0F20\u0F18\x03\x02\x02\x02\u0F20\u0F19\x03\x02\x02\x02" +
		"\u0F20\u0F1A\x03\x02\x02\x02\u0F20\u0F1B\x03\x02\x02\x02\u0F20\u0F1C\x03" +
		"\x02\x02\x02\u0F20\u0F1D\x03\x02\x02\x02\u0F20\u0F1E\x03\x02\x02\x02\u0F20" +
		"\u0F1F\x03\x02\x02\x02\u0F21\u02A7\x03\x02\x02\x02\u0F22\u0F23\t\x18\x02" +
		"\x02\u0F23\u02A9\x03\x02\x02\x02\u0F24\u0F26\x07\t\x02\x02\u0F25\u0F24" +
		"\x03\x02\x02\x02\u0F25\u0F26\x03\x02\x02\x02\u0F26\u0F2C\x03\x02\x02\x02" +
		"\u0F27\u0F2D\x07B\x02\x02\u0F28\u0F2D\x07\x03\x02\x02\u0F29\u0F2D\x07" +
		"\x04\x02\x02\u0F2A\u0F2B\x07\x1A\x02\x02\u0F2B\u0F2D\x07\x17\x02\x02\u0F2C" +
		"\u0F27\x03\x02\x02\x02\u0F2C\u0F28\x03\x02\x02\x02\u0F2C\u0F29\x03\x02" +
		"\x02\x02\u0F2C\u0F2A\x03\x02\x02\x02\u0F2D\u02AB\x03\x02\x02\x02\u0F2E" +
		"\u0F2F\x07\u0169\x02\x02\u0F2F\u02AD\x03\x02\x02\x02\u0F30\u0F31\t\x19" +
		"\x02\x02\u0F31\u02AF\x03\x02\x02\x02\u0F32\u0F33\t\x1A\x02\x02\u0F33\u02B1" +
		"\x03\x02\x02\x02\u0F34\u0F35\x07\u0168\x02\x02\u0F35\u02B3\x03\x02\x02" +
		"\x02\u0F36\u0F37\x07\u0165\x02\x02\u0F37\u02B5\x03\x02\x02\x02\u0F38\u0F39" +
		"\x07\u0167\x02\x02\u0F39\u02B7\x03\x02\x02\x02\u0F3A\u0F3B\t\x1B\x02\x02";
	private static readonly _serializedATNSegment7: string =
		"\u0F3B\u02B9\x03\x02\x02\x02\u0F3C\u0F3D\t\x1C\x02\x02\u0F3D\u02BB\x03" +
		"\x02\x02\x02\u0F3E\u0F3F\x07\t\x02\x02\u0F3F\u02BD\x03\x02\x02\x02\u0F40" +
		"\u0F41\t\x1D\x02\x02\u0F41\u02BF\x03\x02\x02\x02\u0F42\u0F43\b\u0161\x01" +
		"\x02\u0F43\u0F4C\x05\u02A6\u0154\x02\u0F44\u0F45\x07\u0154\x02\x02\u0F45" +
		"\u0F46\x05\u02C0\u0161\x02\u0F46\u0F47\x07\u0155\x02\x02\u0F47\u0F4B\x03" +
		"\x02\x02\x02\u0F48\u0F49\x07\u014E\x02\x02\u0F49\u0F4B\x05\u02DA\u016E" +
		"\x02\u0F4A\u0F44\x03\x02\x02\x02\u0F4A\u0F48\x03\x02\x02\x02\u0F4B\u0F4E" +
		"\x03\x02\x02\x02\u0F4C\u0F4A\x03\x02\x02\x02\u0F4C\u0F4D\x03\x02\x02\x02" +
		"\u0F4D\u0F5C\x03\x02\x02\x02\u0F4E\u0F4C\x03\x02\x02\x02\u0F4F\u0F50\x05" +
		"\u02A8\u0155\x02\u0F50\u0F51\x05\u02C0\u0161\x13\u0F51\u0F5C\x03\x02\x02" +
		"\x02\u0F52\u0F53\x07\r\x02\x02\u0F53\u0F5C\x05\u02C4\u0163\x02\u0F54\u0F55" +
		"\x05\u02BC\u015F\x02\u0F55\u0F56\x05\u02C0\u0161\x05\u0F56\u0F5C\x03\x02" +
		"\x02\x02\u0F57\u0F58\x07\u0152\x02\x02\u0F58\u0F59\x05\u02C0\u0161\x02" +
		"\u0F59\u0F5A\x07\u0153\x02\x02\u0F5A\u0F5C\x03\x02\x02\x02\u0F5B\u0F42" +
		"\x03\x02\x02\x02\u0F5B\u0F4F\x03\x02\x02\x02\u0F5B\u0F52\x03\x02\x02\x02" +
		"\u0F5B\u0F54\x03\x02\x02\x02\u0F5B\u0F57\x03\x02\x02\x02\u0F5C\u0F9F\x03" +
		"\x02\x02\x02\u0F5D\u0F5E\f\x11\x02\x02\u0F5E\u0F5F\x05\u02AC\u0157\x02" +
		"\u0F5F\u0F60\x05\u02C0\u0161\x12\u0F60\u0F9E\x03\x02\x02\x02\u0F61\u0F62" +
		"\f\x10\x02\x02\u0F62\u0F63\x05\u02AE\u0158\x02\u0F63\u0F64\x05\u02C0\u0161" +
		"\x11\u0F64\u0F9E\x03\x02\x02\x02\u0F65\u0F66\f\x0F\x02\x02\u0F66\u0F67" +
		"\x05\u02B0\u0159\x02\u0F67\u0F68\x05\u02C0\u0161\x10\u0F68\u0F9E\x03\x02" +
		"\x02\x02\u0F69\u0F6A\f\x0E\x02\x02\u0F6A\u0F6B\x05\u02B2\u015A\x02\u0F6B" +
		"\u0F6C\x05\u02C0\u0161\x0F\u0F6C\u0F9E\x03\x02\x02\x02\u0F6D\u0F6E\f\r" +
		"\x02\x02\u0F6E\u0F6F\x05\u02B4\u015B\x02\u0F6F\u0F70\x05\u02C0\u0161\x0E" +
		"\u0F70\u0F9E\x03\x02\x02\x02\u0F71\u0F72\f\f\x02\x02\u0F72\u0F73\x05\u02B6" +
		"\u015C\x02\u0F73\u0F74\x05\u02C0\u0161\r\u0F74\u0F9E\x03\x02\x02\x02\u0F75" +
		"\u0F76\f\v\x02\x02\u0F76\u0F77\x05\u02BA\u015E\x02\u0F77\u0F78\x05\u02C0" +
		"\u0161\f\u0F78\u0F9E\x03\x02\x02\x02\u0F79\u0F7B\f\n\x02\x02\u0F7A\u0F7C" +
		"\x07\t\x02\x02\u0F7B\u0F7A\x03\x02\x02\x02\u0F7B\u0F7C\x03\x02\x02\x02" +
		"\u0F7C\u0F7D\x03\x02\x02\x02\u0F7D\u0F7E\x05\u02B8\u015D\x02\u0F7E\u0F7F" +
		"\x05\u02C0\u0161\v\u0F7F\u0F9E\x03\x02\x02\x02\u0F80\u0F82\f\x07\x02\x02" +
		"\u0F81\u0F83\x07\t\x02\x02\u0F82\u0F81\x03\x02\x02\x02\u0F82\u0F83\x03" +
		"\x02\x02\x02\u0F83\u0F84\x03\x02\x02\x02\u0F84\u0F85\x07\xCE\x02\x02\u0F85" +
		"\u0F86\x05\u02C0\u0161\x02\u0F86\u0F87\x07\x07\x02\x02\u0F87\u0F88\x05" +
		"\u02C0\u0161\b\u0F88\u0F9E\x03\x02\x02\x02\u0F89\u0F8A\f\x04\x02\x02\u0F8A" +
		"\u0F8B\x05\u02BE\u0160\x02\u0F8B\u0F8C\x05\u02C0\u0161\x05\u0F8C\u0F9E" +
		"\x03\x02\x02\x02\u0F8D\u0F8E\f\x12\x02\x02\u0F8E\u0F8F\x07A\x02\x02\u0F8F" +
		"\u0F9E\x05\u02AA\u0156\x02\u0F90\u0F92\f\t\x02\x02\u0F91\u0F93\x07\t\x02" +
		"\x02\u0F92\u0F91\x03\x02\x02\x02\u0F92\u0F93\x03\x02\x02\x02\u0F93\u0F94" +
		"\x03\x02\x02\x02\u0F94\u0F95\x07\n\x02\x02\u0F95\u0F96\t\x1E\x02\x02\u0F96" +
		"\u0F9E\x05\u026A\u0136\x02\u0F97\u0F99\f\b\x02\x02\u0F98\u0F9A\x07\t\x02" +
		"\x02\u0F99\u0F98\x03\x02\x02\x02\u0F99\u0F9A\x03\x02\x02\x02\u0F9A\u0F9B" +
		"\x03\x02\x02\x02\u0F9B\u0F9C\x07\xB6\x02\x02\u0F9C\u0F9E\x05\u02C2\u0162" +
		"\x02\u0F9D\u0F5D\x03\x02\x02\x02\u0F9D\u0F61\x03\x02\x02\x02\u0F9D\u0F65" +
		"\x03\x02\x02\x02\u0F9D\u0F69\x03\x02\x02\x02\u0F9D\u0F6D\x03\x02\x02\x02" +
		"\u0F9D\u0F71\x03\x02\x02\x02\u0F9D\u0F75\x03\x02\x02\x02\u0F9D\u0F79\x03" +
		"\x02\x02\x02\u0F9D\u0F80\x03\x02\x02\x02\u0F9D\u0F89\x03\x02\x02\x02\u0F9D" +
		"\u0F8D\x03\x02\x02\x02\u0F9D\u0F90\x03\x02\x02\x02\u0F9D\u0F97\x03\x02" +
		"\x02\x02\u0F9E\u0FA1\x03\x02\x02\x02\u0F9F\u0F9D\x03\x02\x02\x02\u0F9F" +
		"\u0FA0\x03\x02\x02\x02\u0FA0\u02C1\x03\x02\x02\x02\u0FA1\u0F9F\x03\x02" +
		"\x02\x02\u0FA2\u0FA5\x05\u02C4\u0163\x02\u0FA3\u0FA5\x05\u026A\u0136\x02" +
		"\u0FA4\u0FA2\x03\x02\x02\x02\u0FA4\u0FA3\x03\x02\x02\x02\u0FA5\u02C3\x03" +
		"\x02\x02\x02\u0FA6\u0FA7\x07\u0152\x02\x02\u0FA7\u0FA8\x05\u01C0\xE1\x02" +
		"\u0FA8\u0FA9\x07\u0153\x02\x02\u0FA9\u02C5\x03\x02\x02\x02\u0FAA\u0FAB" +
		"\t\x1F\x02\x02\u0FAB\u02C7\x03\x02\x02\x02\u0FAC\u0FAD\t\x1F\x02\x02\u0FAD" +
		"\u02C9\x03\x02\x02\x02\u0FAE\u0FB0\x05\u023E\u0120\x02\u0FAF\u0FB1\x05" +
		"\u02CC\u0167\x02\u0FB0\u0FAF\x03\x02\x02\x02\u0FB0\u0FB1\x03\x02\x02\x02" +
		"\u0FB1\u02CB\x03\x02\x02\x02\u0FB2\u0FB3\x07%\x02\x02\u0FB3\u0FB4\x07" +
		"\u0152\x02\x02\u0FB4\u0FB9\x05\u02CE\u0168\x02\u0FB5\u0FB6\x07\u0150\x02" +
		"\x02\u0FB6\u0FB8\x05\u02CE\u0168\x02\u0FB7\u0FB5\x03\x02\x02\x02\u0FB8" +
		"\u0FBB\x03\x02\x02\x02\u0FB9\u0FB7\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02" +
		"\x02\x02\u0FBA\u0FBC\x03\x02\x02\x02\u0FBB\u0FB9\x03\x02\x02\x02\u0FBC" +
		"\u0FBD\x07\u0153\x02\x02\u0FBD\u02CD\x03\x02\x02\x02\u0FBE\u0FC1\x05\u02DA" +
		"\u016E\x02\u0FBF\u0FC0\x07\u0158\x02\x02\u0FC0\u0FC2\x05\u0292\u014A\x02" +
		"\u0FC1\u0FBF\x03\x02\x02\x02\u0FC1\u0FC2\x03\x02\x02\x02\u0FC2\u02CF\x03" +
		"\x02\x02\x02\u0FC3\u0FC4\x07%\x02\x02\u0FC4\u0FC5\x07\u0152\x02\x02\u0FC5" +
		"\u0FCA\x05\u02D2\u016A\x02\u0FC6\u0FC7\x07\u0150\x02\x02\u0FC7\u0FC9\x05" +
		"\u02D2\u016A\x02\u0FC8\u0FC6\x03\x02\x02\x02\u0FC9\u0FCC\x03\x02\x02\x02" +
		"\u0FCA\u0FC8\x03\x02\x02\x02\u0FCA\u0FCB\x03\x02\x02\x02\u0FCB\u0FCD\x03" +
		"\x02\x02\x02\u0FCC\u0FCA\x03\x02\x02\x02\u0FCD\u0FCE\x07\u0153\x02\x02" +
		"\u0FCE\u02D1\x03\x02\x02\x02\u0FCF\u0FD0\x05\u02DA\u016E\x02\u0FD0\u0FD1" +
		"\x05\u02D4\u016B\x02\u0FD1\u0FD2\x05\u0292\u014A\x02\u0FD2\u02D3\x03\x02" +
		"\x02\x02\u0FD3\u0FD4\t \x02\x02\u0FD4\u02D5\x03\x02\x02\x02\u0FD5\u0FD6" +
		"\t!\x02\x02\u0FD6\u02D7\x03\x02\x02\x02\u0FD7\u0FDB\x05\u02D6\u016C\x02" +
		"\u0FD8\u0FDB\x07\u016C\x02\x02\u0FD9\u0FDB\x05\u02DC\u016F\x02\u0FDA\u0FD7" +
		"\x03\x02\x02\x02\u0FDA\u0FD8\x03\x02\x02\x02\u0FDA\u0FD9\x03\x02\x02\x02" +
		"\u0FDB\u02D9\x03\x02\x02\x02\u0FDC\u0FDF\x07\u0172\x02\x02\u0FDD\u0FDF" +
		"\x05\u02E0\u0171\x02\u0FDE\u0FDC\x03\x02\x02\x02\u0FDE\u0FDD\x03\x02\x02" +
		"\x02\u0FDF\u02DB\x03\x02\x02\x02\u0FE0\u0FE1\x05\u02DA\u016E\x02\u0FE1" +
		"\u0FE2\x07\u014E\x02\x02\u0FE2\u0FE3\x05\u02DA\u016E\x02\u0FE3\u0FE6\x03" +
		"\x02\x02\x02\u0FE4\u0FE6\x05\u02DA\u016E\x02\u0FE5\u0FE0\x03\x02\x02\x02" +
		"\u0FE5\u0FE4\x03\x02\x02\x02\u0FE6\u02DD\x03\x02\x02\x02\u0FE7\u0FEA\x05" +
		"\u02DA\u016E\x02\u0FE8\u0FEA\x07\u0173\x02\x02\u0FE9\u0FE7\x03\x02\x02" +
		"\x02\u0FE9\u0FE8\x03\x02\x02\x02\u0FEA\u02DF\x03\x02\x02\x02\u0FEB\u0FEC" +
		"\t\"\x02\x02\u0FEC\u02E1\x03\x02\x02\x02\u0FED\u0FEE\t#\x02\x02\u0FEE" +
		"\u02E3\x03\x02\x02\x02\u01F0\u02E9\u02F0\u02F4\u02FA\u0300\u030B\u030E" +
		"\u0310\u0322\u0327\u032C\u0332\u0336\u0343\u0347\u034B\u0350\u0357\u035D" +
		"\u0361\u0363\u0367\u036E\u0370\u0376\u0381\u0389\u038D\u03B7\u03D2\u03D6" +
		"\u03D9\u03DE\u03EC\u03F5\u03F9\u0400\u0403\u0407\u040D\u0410\u0413\u0416" +
		"\u041C\u041F\u0422\u0425\u0428\u042B\u042E\u0431\u0434\u0438\u043A\u0444" +
		"\u0449\u044D\u0450\u045B\u046B\u047A\u047E\u048D\u049A\u049E\u04A3\u04BE" +
		"\u04C3\u04CB\u04D1\u04D5\u04D8\u04DB\u04E1\u04E8\u04F2\u04F6\u04FB\u04FF" +
		"\u0505\u050C\u0513\u051B\u0522\u0526\u0529\u0531\u0534\u053C\u053F\u0543" +
		"\u054D\u0552\u0558\u0565\u0575\u0585\u0595\u059C\u05B0\u05B4\u05B9\u05BE" +
		"\u05C1\u05C4\u05C8\u05CB\u05CE\u05D5\u05E0\u05E8\u05EE\u05FE\u0601\u060B" +
		"\u0613\u0617\u061A\u061E\u0622\u0625\u062A\u062F\u0635\u0640\u0642\u0646" +
		"\u064C\u0652\u0657\u065D\u0662\u0669\u066E\u0676\u067B\u0682\u0688\u0690" +
		"\u0697\u069C\u06A4\u06AB\u06AE\u06B1\u06B3\u06C1\u06C3\u06C9\u06D8\u06E9" +
		"\u06EE\u06F2\u06F6\u06FD\u0704\u070A\u070E\u0711\u0718\u072F\u0734\u0738" +
		"\u0740\u0748\u074C\u0752\u0757\u075E\u0761\u0767\u076E\u0776\u077F\u0788" +
		"\u079C\u07A2\u07A5\u07A7\u07AE\u07B8\u07C0\u07C4\u07C8\u07D5\u07DE\u07E4" +
		"\u07E8\u07EF\u07F2\u07F5\u07F8\u0801\u0805\u0808\u080B\u080E\u0811\u0814" +
		"\u0822\u082A\u0830\u0834\u0841\u0851\u0861\u0865\u0874\u087A\u087D\u0880" +
		"\u0883\u0886\u088A\u0898\u08A0\u08A3\u08B2\u08D4\u08DC\u08E1\u08EB\u08F3" +
		"\u08FB\u0903\u090E\u0912\u091A\u0923\u0926\u092F\u0933\u0935\u0939\u093D" +
		"\u0943\u094A\u0953\u095E\u0962\u0969\u0975\u097C\u0984\u0988\u098B\u0992" +
		"\u0998\u099C\u099F\u09A5\u09A9\u09AD\u09B2\u09B6\u09BA\u09BE\u09C6\u09CA" +
		"\u09CE\u09D2\u09D6\u09DE\u09E2\u09E6\u09F6\u09FF\u0A07\u0A11\u0A23\u0A26" +
		"\u0A30\u0A4C\u0A52\u0A58\u0A5E\u0A60\u0A63\u0A69\u0A71\u0A80\u0A87\u0A8C" +
		"\u0A8F\u0A93\u0A96\u0A99\u0A9C\u0A9F\u0AA5\u0AA9\u0AAC\u0AAF\u0AB2\u0AB5" +
		"\u0AB8\u0ABF\u0AC2\u0AC9\u0ACC\u0ACF\u0AD2\u0AD5\u0AD8\u0ADB\u0ADE\u0AE1" +
		"\u0AE4\u0AE8\u0AEB\u0AEE\u0AF1\u0AF4\u0AF7\u0AFA\u0AFD\u0B00\u0B03\u0B05" +
		"\u0B0B\u0B10\u0B17\u0B19\u0B1C\u0B21\u0B24\u0B28\u0B2D\u0B34\u0B3A\u0B46" +
		"\u0B4D\u0B53\u0B5C\u0B5F\u0B63\u0B69\u0B73\u0B77\u0B82\u0B88\u0B8B\u0B95" +
		"\u0B97\u0B9B\u0BA2\u0BB8\u0BBF\u0BC3\u0BC6\u0BCB\u0BCE\u0BD5\u0BDC\u0BDF" +
		"\u0BE7\u0BED\u0BEF\u0BF1\u0BF4\u0BF7\u0BFC\u0C06\u0C0B\u0C0D\u0C13\u0C16" +
		"\u0C19\u0C21\u0C27\u0C29\u0C2B\u0C2E\u0C31\u0C35\u0C3C\u0C45\u0C4F\u0C52" +
		"\u0C55\u0C58\u0C5C\u0C66\u0C70\u0C78\u0C80\u0C87\u0C90\u0C98\u0CA4\u0CA7" +
		"\u0CAD\u0CB4\u0CBB\u0CC2\u0CC9\u0CD2\u0CD6\u0CDD\u0CE2\u0CE6\u0CF9\u0CFE" +
		"\u0D03\u0D09\u0D16\u0D19\u0D1C\u0D28\u0D2B\u0D2E\u0D36\u0D3F\u0D44\u0D46" +
		"\u0D57\u0D5A\u0D67\u0D6B\u0D6F\u0D72\u0D75\u0D78\u0D7C\u0D7F\u0D82\u0D89" +
		"\u0D8E\u0D96\u0D9C\u0DA1\u0DA5\u0DAA\u0DB1\u0DBF\u0DC2\u0DC6\u0DD5\u0DDF" +
		"\u0DE8\u0DEB\u0DF6\u0E02\u0E0C\u0E16\u0E1B\u0E1F\u0E23\u0E29\u0E3B\u0E41" +
		"\u0E45\u0E4D\u0E57\u0E61\u0E74\u0E7A\u0E81\u0E84\u0E86\u0E8B\u0E8F\u0EA1" +
		"\u0EA5\u0EB1\u0EB5\u0EBE\u0ED9\u0EDF\u0EE7\u0EEC\u0F05\u0F13\u0F20\u0F25" +
		"\u0F2C\u0F4A\u0F4C\u0F5B\u0F7B\u0F82\u0F92\u0F99\u0F9D\u0F9F\u0FA4\u0FB0" +
		"\u0FB9\u0FC1\u0FCA\u0FDA\u0FDE\u0FE5\u0FE9";
	public static readonly _serializedATN: string = Utils.join(
		[
			HiveParser._serializedATNSegment0,
			HiveParser._serializedATNSegment1,
			HiveParser._serializedATNSegment2,
			HiveParser._serializedATNSegment3,
			HiveParser._serializedATNSegment4,
			HiveParser._serializedATNSegment5,
			HiveParser._serializedATNSegment6,
			HiveParser._serializedATNSegment7,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!HiveParser.__ATN) {
			HiveParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(HiveParser._serializedATN));
		}

		return HiveParser.__ATN;
	}

}

export class StatementsContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(HiveParser.EOF, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public statementSeparator(): StatementSeparatorContext[];
	public statementSeparator(i: number): StatementSeparatorContext;
	public statementSeparator(i?: number): StatementSeparatorContext | StatementSeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementSeparatorContext);
		} else {
			return this.getRuleContext(i, StatementSeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_statements; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterStatements) {
			listener.enterStatements(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitStatements) {
			listener.exitStatements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStatements) {
			return visitor.visitStatements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementSeparatorContext extends ParserRuleContext {
	public SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(HiveParser.SEMICOLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_statementSeparator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterStatementSeparator) {
			listener.enterStatementSeparator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitStatementSeparator) {
			listener.exitStatementSeparator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStatementSeparator) {
			return visitor.visitStatementSeparator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public explainStatement(): ExplainStatementContext | undefined {
		return this.tryGetRuleContext(0, ExplainStatementContext);
	}
	public execStatement(): ExecStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_statement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainStatementContext extends ParserRuleContext {
	public KW_EXPLAIN(): TerminalNode { return this.getToken(HiveParser.KW_EXPLAIN, 0); }
	public execStatement(): ExecStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecStatementContext);
	}
	public KW_REWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REWRITE, 0); }
	public queryStatementExpression(): QueryStatementExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryStatementExpressionContext);
	}
	public explainOption(): ExplainOptionContext[];
	public explainOption(i: number): ExplainOptionContext;
	public explainOption(i?: number): ExplainOptionContext | ExplainOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExplainOptionContext);
		} else {
			return this.getRuleContext(i, ExplainOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_explainStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExplainStatement) {
			listener.enterExplainStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExplainStatement) {
			listener.exitExplainStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExplainStatement) {
			return visitor.visitExplainStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainOptionContext extends ParserRuleContext {
	public KW_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXTENDED, 0); }
	public KW_FORMATTED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FORMATTED, 0); }
	public KW_DEPENDENCY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DEPENDENCY, 0); }
	public KW_LOGICAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOGICAL, 0); }
	public KW_AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AUTHORIZATION, 0); }
	public KW_ANALYZE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ANALYZE, 0); }
	public KW_REOPTIMIZATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REOPTIMIZATION, 0); }
	public KW_VECTORIZATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VECTORIZATION, 0); }
	public vectorizationOnly(): VectorizationOnlyContext | undefined {
		return this.tryGetRuleContext(0, VectorizationOnlyContext);
	}
	public vectorizatonDetail(): VectorizatonDetailContext | undefined {
		return this.tryGetRuleContext(0, VectorizatonDetailContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_explainOption; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExplainOption) {
			listener.enterExplainOption(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExplainOption) {
			listener.exitExplainOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExplainOption) {
			return visitor.visitExplainOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VectorizationOnlyContext extends ParserRuleContext {
	public KW_ONLY(): TerminalNode { return this.getToken(HiveParser.KW_ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_vectorizationOnly; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterVectorizationOnly) {
			listener.enterVectorizationOnly(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitVectorizationOnly) {
			listener.exitVectorizationOnly(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitVectorizationOnly) {
			return visitor.visitVectorizationOnly(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VectorizatonDetailContext extends ParserRuleContext {
	public KW_SUMMARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SUMMARY, 0); }
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OPERATOR, 0); }
	public KW_EXPRESSION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXPRESSION, 0); }
	public KW_DETAIL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DETAIL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_vectorizatonDetail; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterVectorizatonDetail) {
			listener.enterVectorizatonDetail(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitVectorizatonDetail) {
			listener.exitVectorizatonDetail(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitVectorizatonDetail) {
			return visitor.visitVectorizatonDetail(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecStatementContext extends ParserRuleContext {
	public queryStatementExpression(): QueryStatementExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryStatementExpressionContext);
	}
	public loadStatement(): LoadStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadStatementContext);
	}
	public exportStatement(): ExportStatementContext | undefined {
		return this.tryGetRuleContext(0, ExportStatementContext);
	}
	public importStatement(): ImportStatementContext | undefined {
		return this.tryGetRuleContext(0, ImportStatementContext);
	}
	public replDumpStatement(): ReplDumpStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplDumpStatementContext);
	}
	public replLoadStatement(): ReplLoadStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplLoadStatementContext);
	}
	public replStatusStatement(): ReplStatusStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplStatusStatementContext);
	}
	public ddlStatement(): DdlStatementContext | undefined {
		return this.tryGetRuleContext(0, DdlStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	public sqlTransactionStatement(): SqlTransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, SqlTransactionStatementContext);
	}
	public mergeStatement(): MergeStatementContext | undefined {
		return this.tryGetRuleContext(0, MergeStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_execStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExecStatement) {
			listener.enterExecStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExecStatement) {
			listener.exitExecStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExecStatement) {
			return visitor.visitExecStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadStatementContext extends ParserRuleContext {
	public KW_LOAD(): TerminalNode { return this.getToken(HiveParser.KW_LOAD, 0); }
	public KW_DATA(): TerminalNode { return this.getToken(HiveParser.KW_DATA, 0); }
	public KW_INPATH(): TerminalNode { return this.getToken(HiveParser.KW_INPATH, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public KW_INTO(): TerminalNode { return this.getToken(HiveParser.KW_INTO, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableOrPartition(): TableOrPartitionContext {
		return this.getRuleContext(0, TableOrPartitionContext);
	}
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCAL, 0); }
	public KW_OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OVERWRITE, 0); }
	public inputFileFormat(): InputFileFormatContext | undefined {
		return this.tryGetRuleContext(0, InputFileFormatContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_loadStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLoadStatement) {
			listener.enterLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLoadStatement) {
			listener.exitLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLoadStatement) {
			return visitor.visitLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplicationClauseContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(HiveParser.KW_FOR, 0); }
	public KW_REPLICATION(): TerminalNode { return this.getToken(HiveParser.KW_REPLICATION, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_METADATA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_METADATA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_replicationClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterReplicationClause) {
			listener.enterReplicationClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitReplicationClause) {
			listener.exitReplicationClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplicationClause) {
			return visitor.visitReplicationClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExportStatementContext extends ParserRuleContext {
	public KW_EXPORT(): TerminalNode { return this.getToken(HiveParser.KW_EXPORT, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableOrPartition(): TableOrPartitionContext {
		return this.getRuleContext(0, TableOrPartitionContext);
	}
	public KW_TO(): TerminalNode { return this.getToken(HiveParser.KW_TO, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public replicationClause(): ReplicationClauseContext | undefined {
		return this.tryGetRuleContext(0, ReplicationClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_exportStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExportStatement) {
			listener.enterExportStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExportStatement) {
			listener.exitExportStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExportStatement) {
			return visitor.visitExportStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ImportStatementContext extends ParserRuleContext {
	public _path!: Token;
	public KW_IMPORT(): TerminalNode { return this.getToken(HiveParser.KW_IMPORT, 0); }
	public KW_FROM(): TerminalNode { return this.getToken(HiveParser.KW_FROM, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public tableOrPartition(): TableOrPartitionContext | undefined {
		return this.tryGetRuleContext(0, TableOrPartitionContext);
	}
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public tableLocation(): TableLocationContext | undefined {
		return this.tryGetRuleContext(0, TableLocationContext);
	}
	public KW_EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXTERNAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_importStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterImportStatement) {
			listener.enterImportStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitImportStatement) {
			listener.exitImportStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitImportStatement) {
			return visitor.visitImportStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplDumpStatementContext extends ParserRuleContext {
	public KW_REPL(): TerminalNode { return this.getToken(HiveParser.KW_REPL, 0); }
	public KW_DUMP(): TerminalNode { return this.getToken(HiveParser.KW_DUMP, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DOT, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FROM, 0); }
	public Number(): TerminalNode[];
	public Number(i: number): TerminalNode;
	public Number(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.Number);
		} else {
			return this.getToken(HiveParser.Number, i);
		}
	}
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public replConfigs(): ReplConfigsContext | undefined {
		return this.tryGetRuleContext(0, ReplConfigsContext);
	}
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TO, 0); }
	public KW_LIMIT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LIMIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_replDumpStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterReplDumpStatement) {
			listener.enterReplDumpStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitReplDumpStatement) {
			listener.exitReplDumpStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplDumpStatement) {
			return visitor.visitReplDumpStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplLoadStatementContext extends ParserRuleContext {
	public KW_REPL(): TerminalNode { return this.getToken(HiveParser.KW_REPL, 0); }
	public KW_LOAD(): TerminalNode { return this.getToken(HiveParser.KW_LOAD, 0); }
	public KW_FROM(): TerminalNode { return this.getToken(HiveParser.KW_FROM, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public replConfigs(): ReplConfigsContext | undefined {
		return this.tryGetRuleContext(0, ReplConfigsContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_replLoadStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterReplLoadStatement) {
			listener.enterReplLoadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitReplLoadStatement) {
			listener.exitReplLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplLoadStatement) {
			return visitor.visitReplLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplConfigsContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public replConfigsList(): ReplConfigsListContext {
		return this.getRuleContext(0, ReplConfigsListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_replConfigs; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterReplConfigs) {
			listener.enterReplConfigs(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitReplConfigs) {
			listener.exitReplConfigs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplConfigs) {
			return visitor.visitReplConfigs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplConfigsListContext extends ParserRuleContext {
	public keyValueProperty(): KeyValuePropertyContext[];
	public keyValueProperty(i: number): KeyValuePropertyContext;
	public keyValueProperty(i?: number): KeyValuePropertyContext | KeyValuePropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyValuePropertyContext);
		} else {
			return this.getRuleContext(i, KeyValuePropertyContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_replConfigsList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterReplConfigsList) {
			listener.enterReplConfigsList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitReplConfigsList) {
			listener.exitReplConfigsList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplConfigsList) {
			return visitor.visitReplConfigsList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplStatusStatementContext extends ParserRuleContext {
	public KW_REPL(): TerminalNode { return this.getToken(HiveParser.KW_REPL, 0); }
	public KW_STATUS(): TerminalNode { return this.getToken(HiveParser.KW_STATUS, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DOT, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public replConfigs(): ReplConfigsContext | undefined {
		return this.tryGetRuleContext(0, ReplConfigsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_replStatusStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterReplStatusStatement) {
			listener.enterReplStatusStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitReplStatusStatement) {
			listener.exitReplStatusStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplStatusStatement) {
			return visitor.visitReplStatusStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DdlStatementContext extends ParserRuleContext {
	public createDatabaseStatement(): CreateDatabaseStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateDatabaseStatementContext);
	}
	public switchDatabaseStatement(): SwitchDatabaseStatementContext | undefined {
		return this.tryGetRuleContext(0, SwitchDatabaseStatementContext);
	}
	public dropDatabaseStatement(): DropDatabaseStatementContext | undefined {
		return this.tryGetRuleContext(0, DropDatabaseStatementContext);
	}
	public createTableStatement(): CreateTableStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateTableStatementContext);
	}
	public dropTableStatement(): DropTableStatementContext | undefined {
		return this.tryGetRuleContext(0, DropTableStatementContext);
	}
	public truncateTableStatement(): TruncateTableStatementContext | undefined {
		return this.tryGetRuleContext(0, TruncateTableStatementContext);
	}
	public alterStatement(): AlterStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementContext);
	}
	public descStatement(): DescStatementContext | undefined {
		return this.tryGetRuleContext(0, DescStatementContext);
	}
	public showStatement(): ShowStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStatementContext);
	}
	public metastoreCheck(): MetastoreCheckContext | undefined {
		return this.tryGetRuleContext(0, MetastoreCheckContext);
	}
	public createViewStatement(): CreateViewStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateViewStatementContext);
	}
	public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateMaterializedViewStatementContext);
	}
	public dropViewStatement(): DropViewStatementContext | undefined {
		return this.tryGetRuleContext(0, DropViewStatementContext);
	}
	public dropMaterializedViewStatement(): DropMaterializedViewStatementContext | undefined {
		return this.tryGetRuleContext(0, DropMaterializedViewStatementContext);
	}
	public createFunctionStatement(): CreateFunctionStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateFunctionStatementContext);
	}
	public createMacroStatement(): CreateMacroStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateMacroStatementContext);
	}
	public dropFunctionStatement(): DropFunctionStatementContext | undefined {
		return this.tryGetRuleContext(0, DropFunctionStatementContext);
	}
	public reloadFunctionStatement(): ReloadFunctionStatementContext | undefined {
		return this.tryGetRuleContext(0, ReloadFunctionStatementContext);
	}
	public dropMacroStatement(): DropMacroStatementContext | undefined {
		return this.tryGetRuleContext(0, DropMacroStatementContext);
	}
	public analyzeStatement(): AnalyzeStatementContext | undefined {
		return this.tryGetRuleContext(0, AnalyzeStatementContext);
	}
	public lockStatement(): LockStatementContext | undefined {
		return this.tryGetRuleContext(0, LockStatementContext);
	}
	public unlockStatement(): UnlockStatementContext | undefined {
		return this.tryGetRuleContext(0, UnlockStatementContext);
	}
	public lockDatabase(): LockDatabaseContext | undefined {
		return this.tryGetRuleContext(0, LockDatabaseContext);
	}
	public unlockDatabase(): UnlockDatabaseContext | undefined {
		return this.tryGetRuleContext(0, UnlockDatabaseContext);
	}
	public createRoleStatement(): CreateRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateRoleStatementContext);
	}
	public dropRoleStatement(): DropRoleStatementContext | undefined {
		return this.tryGetRuleContext(0, DropRoleStatementContext);
	}
	public grantPrivileges(): GrantPrivilegesContext | undefined {
		return this.tryGetRuleContext(0, GrantPrivilegesContext);
	}
	public revokePrivileges(): RevokePrivilegesContext | undefined {
		return this.tryGetRuleContext(0, RevokePrivilegesContext);
	}
	public showGrants(): ShowGrantsContext | undefined {
		return this.tryGetRuleContext(0, ShowGrantsContext);
	}
	public showRoleGrants(): ShowRoleGrantsContext | undefined {
		return this.tryGetRuleContext(0, ShowRoleGrantsContext);
	}
	public showRolePrincipals(): ShowRolePrincipalsContext | undefined {
		return this.tryGetRuleContext(0, ShowRolePrincipalsContext);
	}
	public showRoles(): ShowRolesContext | undefined {
		return this.tryGetRuleContext(0, ShowRolesContext);
	}
	public grantRole(): GrantRoleContext | undefined {
		return this.tryGetRuleContext(0, GrantRoleContext);
	}
	public revokeRole(): RevokeRoleContext | undefined {
		return this.tryGetRuleContext(0, RevokeRoleContext);
	}
	public setRole(): SetRoleContext | undefined {
		return this.tryGetRuleContext(0, SetRoleContext);
	}
	public showCurrentRole(): ShowCurrentRoleContext | undefined {
		return this.tryGetRuleContext(0, ShowCurrentRoleContext);
	}
	public abortTransactionStatement(): AbortTransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, AbortTransactionStatementContext);
	}
	public killQueryStatement(): KillQueryStatementContext | undefined {
		return this.tryGetRuleContext(0, KillQueryStatementContext);
	}
	public createIndexStatement(): CreateIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexStatementContext);
	}
	public dropIndexStatement(): DropIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, DropIndexStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_ddlStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDdlStatement) {
			listener.enterDdlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDdlStatement) {
			listener.exitDdlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDdlStatement) {
			return visitor.visitDdlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	public KW_IF(): TerminalNode { return this.getToken(HiveParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode { return this.getToken(HiveParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_ifExists; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIfExists) {
			listener.enterIfExists(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIfExists) {
			listener.exitIfExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIfExists) {
			return visitor.visitIfExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RestrictOrCascadeContext extends ParserRuleContext {
	public KW_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RESTRICT, 0); }
	public KW_CASCADE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_restrictOrCascade; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRestrictOrCascade) {
			listener.enterRestrictOrCascade(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRestrictOrCascade) {
			listener.exitRestrictOrCascade(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRestrictOrCascade) {
			return visitor.visitRestrictOrCascade(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	public KW_IF(): TerminalNode { return this.getToken(HiveParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode { return this.getToken(HiveParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode { return this.getToken(HiveParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_ifNotExists; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIfNotExists) {
			listener.enterIfNotExists(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIfNotExists) {
			listener.exitIfNotExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIfNotExists) {
			return visitor.visitIfNotExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RewriteEnabledContext extends ParserRuleContext {
	public KW_ENABLE(): TerminalNode { return this.getToken(HiveParser.KW_ENABLE, 0); }
	public KW_REWRITE(): TerminalNode { return this.getToken(HiveParser.KW_REWRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rewriteEnabled; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRewriteEnabled) {
			listener.enterRewriteEnabled(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRewriteEnabled) {
			listener.exitRewriteEnabled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRewriteEnabled) {
			return visitor.visitRewriteEnabled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RewriteDisabledContext extends ParserRuleContext {
	public KW_DISABLE(): TerminalNode { return this.getToken(HiveParser.KW_DISABLE, 0); }
	public KW_REWRITE(): TerminalNode { return this.getToken(HiveParser.KW_REWRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rewriteDisabled; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRewriteDisabled) {
			listener.enterRewriteDisabled(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRewriteDisabled) {
			listener.exitRewriteDisabled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRewriteDisabled) {
			return visitor.visitRewriteDisabled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StoredAsDirsContext extends ParserRuleContext {
	public KW_STORED(): TerminalNode { return this.getToken(HiveParser.KW_STORED, 0); }
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public KW_DIRECTORIES(): TerminalNode { return this.getToken(HiveParser.KW_DIRECTORIES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_storedAsDirs; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterStoredAsDirs) {
			listener.enterStoredAsDirs(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitStoredAsDirs) {
			listener.exitStoredAsDirs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStoredAsDirs) {
			return visitor.visitStoredAsDirs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrReplaceContext extends ParserRuleContext {
	public KW_OR(): TerminalNode { return this.getToken(HiveParser.KW_OR, 0); }
	public KW_REPLACE(): TerminalNode { return this.getToken(HiveParser.KW_REPLACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_orReplace; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterOrReplace) {
			listener.enterOrReplace(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitOrReplace) {
			listener.exitOrReplace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitOrReplace) {
			return visitor.visitOrReplace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDatabaseStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public databaseComment(): DatabaseCommentContext | undefined {
		return this.tryGetRuleContext(0, DatabaseCommentContext);
	}
	public dbLocation(): DbLocationContext | undefined {
		return this.tryGetRuleContext(0, DbLocationContext);
	}
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_DBPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DBPROPERTIES, 0); }
	public dbProperties(): DbPropertiesContext | undefined {
		return this.tryGetRuleContext(0, DbPropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createDatabaseStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateDatabaseStatement) {
			listener.enterCreateDatabaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateDatabaseStatement) {
			listener.exitCreateDatabaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateDatabaseStatement) {
			return visitor.visitCreateDatabaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbLocationContext extends ParserRuleContext {
	public KW_LOCATION(): TerminalNode { return this.getToken(HiveParser.KW_LOCATION, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dbLocation; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDbLocation) {
			listener.enterDbLocation(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDbLocation) {
			listener.exitDbLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbLocation) {
			return visitor.visitDbLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbPropertiesContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public dbPropertiesList(): DbPropertiesListContext {
		return this.getRuleContext(0, DbPropertiesListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dbProperties; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDbProperties) {
			listener.enterDbProperties(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDbProperties) {
			listener.exitDbProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbProperties) {
			return visitor.visitDbProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbPropertiesListContext extends ParserRuleContext {
	public keyValueProperty(): KeyValuePropertyContext[];
	public keyValueProperty(i: number): KeyValuePropertyContext;
	public keyValueProperty(i?: number): KeyValuePropertyContext | KeyValuePropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyValuePropertyContext);
		} else {
			return this.getRuleContext(i, KeyValuePropertyContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dbPropertiesList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDbPropertiesList) {
			listener.enterDbPropertiesList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDbPropertiesList) {
			listener.exitDbPropertiesList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbPropertiesList) {
			return visitor.visitDbPropertiesList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SwitchDatabaseStatementContext extends ParserRuleContext {
	public KW_USE(): TerminalNode { return this.getToken(HiveParser.KW_USE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_switchDatabaseStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSwitchDatabaseStatement) {
			listener.enterSwitchDatabaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSwitchDatabaseStatement) {
			listener.exitSwitchDatabaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSwitchDatabaseStatement) {
			return visitor.visitSwitchDatabaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropDatabaseStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public restrictOrCascade(): RestrictOrCascadeContext | undefined {
		return this.tryGetRuleContext(0, RestrictOrCascadeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropDatabaseStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropDatabaseStatement) {
			listener.enterDropDatabaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropDatabaseStatement) {
			listener.exitDropDatabaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropDatabaseStatement) {
			return visitor.visitDropDatabaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DatabaseCommentContext extends ParserRuleContext {
	public KW_COMMENT(): TerminalNode { return this.getToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_databaseComment; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDatabaseComment) {
			listener.enterDatabaseComment(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDatabaseComment) {
			listener.exitDatabaseComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDatabaseComment) {
			return visitor.visitDatabaseComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTableStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LIKE, 0); }
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TEMPORARY, 0); }
	public KW_EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXTERNAL, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public tableRowFormat(): TableRowFormatContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatContext);
	}
	public tableFileFormat(): TableFileFormatContext | undefined {
		return this.tryGetRuleContext(0, TableFileFormatContext);
	}
	public tableLocation(): TableLocationContext | undefined {
		return this.tryGetRuleContext(0, TableLocationContext);
	}
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesPrefixedContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameTypeOrConstraintListContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public tableComment(): TableCommentContext | undefined {
		return this.tryGetRuleContext(0, TableCommentContext);
	}
	public tablePartition(): TablePartitionContext | undefined {
		return this.tryGetRuleContext(0, TablePartitionContext);
	}
	public tableBuckets(): TableBucketsContext | undefined {
		return this.tryGetRuleContext(0, TableBucketsContext);
	}
	public tableSkewed(): TableSkewedContext | undefined {
		return this.tryGetRuleContext(0, TableSkewedContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public selectStatementWithCTE(): SelectStatementWithCTEContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementWithCTEContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createTableStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateTableStatement) {
			listener.enterCreateTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateTableStatement) {
			listener.exitCreateTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateTableStatement) {
			return visitor.visitCreateTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TruncateTableStatementContext extends ParserRuleContext {
	public KW_TRUNCATE(): TerminalNode { return this.getToken(HiveParser.KW_TRUNCATE, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tablePartitionPrefix(): TablePartitionPrefixContext {
		return this.getRuleContext(0, TablePartitionPrefixContext);
	}
	public KW_COLUMNS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLUMNS, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public columnNameList(): ColumnNameListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_truncateTableStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTruncateTableStatement) {
			listener.enterTruncateTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTruncateTableStatement) {
			listener.exitTruncateTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTruncateTableStatement) {
			return visitor.visitTruncateTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTableStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public KW_PURGE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PURGE, 0); }
	public replicationClause(): ReplicationClauseContext | undefined {
		return this.tryGetRuleContext(0, ReplicationClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropTableStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropTableStatement) {
			listener.enterDropTableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropTableStatement) {
			listener.exitDropTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropTableStatement) {
			return visitor.visitDropTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(HiveParser.KW_ALTER, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public tableName(): TableNameContext | undefined {
		return this.tryGetRuleContext(0, TableNameContext);
	}
	public alterTableStatementSuffix(): AlterTableStatementSuffixContext | undefined {
		return this.tryGetRuleContext(0, AlterTableStatementSuffixContext);
	}
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VIEW, 0); }
	public alterViewStatementSuffix(): AlterViewStatementSuffixContext | undefined {
		return this.tryGetRuleContext(0, AlterViewStatementSuffixContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MATERIALIZED, 0); }
	public alterMaterializedViewStatementSuffix(): AlterMaterializedViewStatementSuffixContext | undefined {
		return this.tryGetRuleContext(0, AlterMaterializedViewStatementSuffixContext);
	}
	public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseStatementSuffixContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INDEX, 0); }
	public alterIndexStatementSuffix(): AlterIndexStatementSuffixContext | undefined {
		return this.tryGetRuleContext(0, AlterIndexStatementSuffixContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatement) {
			listener.enterAlterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatement) {
			listener.exitAlterStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatement) {
			return visitor.visitAlterStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTableStatementSuffixContext extends ParserRuleContext {
	public alterStatementSuffixRename(): AlterStatementSuffixRenameContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixRenameContext);
	}
	public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixDropPartitionsContext);
	}
	public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixAddPartitionsContext);
	}
	public alterStatementSuffixTouch(): AlterStatementSuffixTouchContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixTouchContext);
	}
	public alterStatementSuffixArchive(): AlterStatementSuffixArchiveContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixArchiveContext);
	}
	public alterStatementSuffixUnArchive(): AlterStatementSuffixUnArchiveContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixUnArchiveContext);
	}
	public alterStatementSuffixProperties(): AlterStatementSuffixPropertiesContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixPropertiesContext);
	}
	public alterStatementSuffixSkewedby(): AlterStatementSuffixSkewedbyContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixSkewedbyContext);
	}
	public alterStatementSuffixExchangePartition(): AlterStatementSuffixExchangePartitionContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixExchangePartitionContext);
	}
	public alterStatementPartitionKeyType(): AlterStatementPartitionKeyTypeContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementPartitionKeyTypeContext);
	}
	public alterStatementSuffixDropConstraint(): AlterStatementSuffixDropConstraintContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixDropConstraintContext);
	}
	public alterStatementSuffixAddConstraint(): AlterStatementSuffixAddConstraintContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixAddConstraintContext);
	}
	public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext | undefined {
		return this.tryGetRuleContext(0, AlterTblPartitionStatementSuffixContext);
	}
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	public alterStatementSuffixSetOwner(): AlterStatementSuffixSetOwnerContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixSetOwnerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterTableStatementSuffix; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterTableStatementSuffix) {
			listener.enterAlterTableStatementSuffix(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterTableStatementSuffix) {
			listener.exitAlterTableStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterTableStatementSuffix) {
			return visitor.visitAlterTableStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTblPartitionStatementSuffixContext extends ParserRuleContext {
	public alterStatementSuffixFileFormat(): AlterStatementSuffixFileFormatContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixFileFormatContext);
	}
	public alterStatementSuffixLocation(): AlterStatementSuffixLocationContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixLocationContext);
	}
	public alterStatementSuffixMergeFiles(): AlterStatementSuffixMergeFilesContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixMergeFilesContext);
	}
	public alterStatementSuffixSerdeProperties(): AlterStatementSuffixSerdePropertiesContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixSerdePropertiesContext);
	}
	public alterStatementSuffixRenamePart(): AlterStatementSuffixRenamePartContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixRenamePartContext);
	}
	public alterStatementSuffixBucketNum(): AlterStatementSuffixBucketNumContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixBucketNumContext);
	}
	public alterTblPartitionStatementSuffixSkewedLocation(): AlterTblPartitionStatementSuffixSkewedLocationContext | undefined {
		return this.tryGetRuleContext(0, AlterTblPartitionStatementSuffixSkewedLocationContext);
	}
	public alterStatementSuffixClusterbySortby(): AlterStatementSuffixClusterbySortbyContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixClusterbySortbyContext);
	}
	public alterStatementSuffixCompact(): AlterStatementSuffixCompactContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixCompactContext);
	}
	public alterStatementSuffixUpdateStatsCol(): AlterStatementSuffixUpdateStatsColContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixUpdateStatsColContext);
	}
	public alterStatementSuffixUpdateStats(): AlterStatementSuffixUpdateStatsContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixUpdateStatsContext);
	}
	public alterStatementSuffixRenameCol(): AlterStatementSuffixRenameColContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixRenameColContext);
	}
	public alterStatementSuffixAddCol(): AlterStatementSuffixAddColContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixAddColContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterTblPartitionStatementSuffix; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterTblPartitionStatementSuffix) {
			listener.enterAlterTblPartitionStatementSuffix(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterTblPartitionStatementSuffix) {
			listener.exitAlterTblPartitionStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterTblPartitionStatementSuffix) {
			return visitor.visitAlterTblPartitionStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementPartitionKeyTypeContext extends ParserRuleContext {
	public KW_PARTITION(): TerminalNode { return this.getToken(HiveParser.KW_PARTITION, 0); }
	public KW_COLUMN(): TerminalNode { return this.getToken(HiveParser.KW_COLUMN, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnNameType(): ColumnNameTypeContext {
		return this.getRuleContext(0, ColumnNameTypeContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementPartitionKeyType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementPartitionKeyType) {
			listener.enterAlterStatementPartitionKeyType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementPartitionKeyType) {
			listener.exitAlterStatementPartitionKeyType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementPartitionKeyType) {
			return visitor.visitAlterStatementPartitionKeyType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterViewStatementSuffixContext extends ParserRuleContext {
	public alterViewSuffixProperties(): AlterViewSuffixPropertiesContext | undefined {
		return this.tryGetRuleContext(0, AlterViewSuffixPropertiesContext);
	}
	public alterStatementSuffixRename(): AlterStatementSuffixRenameContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixRenameContext);
	}
	public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixAddPartitionsContext);
	}
	public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementSuffixDropPartitionsContext);
	}
	public selectStatementWithCTE(): SelectStatementWithCTEContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementWithCTEContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterViewStatementSuffix; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterViewStatementSuffix) {
			listener.enterAlterViewStatementSuffix(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterViewStatementSuffix) {
			listener.exitAlterViewStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterViewStatementSuffix) {
			return visitor.visitAlterViewStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaterializedViewStatementSuffixContext extends ParserRuleContext {
	public alterMaterializedViewSuffixRewrite(): AlterMaterializedViewSuffixRewriteContext | undefined {
		return this.tryGetRuleContext(0, AlterMaterializedViewSuffixRewriteContext);
	}
	public alterMaterializedViewSuffixRebuild(): AlterMaterializedViewSuffixRebuildContext | undefined {
		return this.tryGetRuleContext(0, AlterMaterializedViewSuffixRebuildContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterMaterializedViewStatementSuffix; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterMaterializedViewStatementSuffix) {
			listener.enterAlterMaterializedViewStatementSuffix(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterMaterializedViewStatementSuffix) {
			listener.exitAlterMaterializedViewStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterMaterializedViewStatementSuffix) {
			return visitor.visitAlterMaterializedViewStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseStatementSuffixContext extends ParserRuleContext {
	public alterDatabaseSuffixProperties(): AlterDatabaseSuffixPropertiesContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseSuffixPropertiesContext);
	}
	public alterDatabaseSuffixSetOwner(): AlterDatabaseSuffixSetOwnerContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseSuffixSetOwnerContext);
	}
	public alterDatabaseSuffixSetLocation(): AlterDatabaseSuffixSetLocationContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseSuffixSetLocationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterDatabaseStatementSuffix; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterDatabaseStatementSuffix) {
			listener.enterAlterDatabaseStatementSuffix(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterDatabaseStatementSuffix) {
			listener.exitAlterDatabaseStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseStatementSuffix) {
			return visitor.visitAlterDatabaseStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseSuffixPropertiesContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_DBPROPERTIES(): TerminalNode { return this.getToken(HiveParser.KW_DBPROPERTIES, 0); }
	public dbProperties(): DbPropertiesContext {
		return this.getRuleContext(0, DbPropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterDatabaseSuffixProperties; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterDatabaseSuffixProperties) {
			listener.enterAlterDatabaseSuffixProperties(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterDatabaseSuffixProperties) {
			listener.exitAlterDatabaseSuffixProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseSuffixProperties) {
			return visitor.visitAlterDatabaseSuffixProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseSuffixSetOwnerContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_OWNER(): TerminalNode { return this.getToken(HiveParser.KW_OWNER, 0); }
	public principalName(): PrincipalNameContext {
		return this.getRuleContext(0, PrincipalNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterDatabaseSuffixSetOwner; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterDatabaseSuffixSetOwner) {
			listener.enterAlterDatabaseSuffixSetOwner(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterDatabaseSuffixSetOwner) {
			listener.exitAlterDatabaseSuffixSetOwner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseSuffixSetOwner) {
			return visitor.visitAlterDatabaseSuffixSetOwner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseSuffixSetLocationContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_LOCATION(): TerminalNode { return this.getToken(HiveParser.KW_LOCATION, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterDatabaseSuffixSetLocation; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterDatabaseSuffixSetLocation) {
			listener.enterAlterDatabaseSuffixSetLocation(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterDatabaseSuffixSetLocation) {
			listener.exitAlterDatabaseSuffixSetLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseSuffixSetLocation) {
			return visitor.visitAlterDatabaseSuffixSetLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixRenameContext extends ParserRuleContext {
	public KW_RENAME(): TerminalNode { return this.getToken(HiveParser.KW_RENAME, 0); }
	public KW_TO(): TerminalNode { return this.getToken(HiveParser.KW_TO, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixRename; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixRename) {
			listener.enterAlterStatementSuffixRename(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixRename) {
			listener.exitAlterStatementSuffixRename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixRename) {
			return visitor.visitAlterStatementSuffixRename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddColContext extends ParserRuleContext {
	public KW_COLUMNS(): TerminalNode { return this.getToken(HiveParser.KW_COLUMNS, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnNameTypeList(): ColumnNameTypeListContext {
		return this.getRuleContext(0, ColumnNameTypeListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ADD, 0); }
	public KW_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REPLACE, 0); }
	public restrictOrCascade(): RestrictOrCascadeContext | undefined {
		return this.tryGetRuleContext(0, RestrictOrCascadeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixAddCol; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixAddCol) {
			listener.enterAlterStatementSuffixAddCol(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixAddCol) {
			listener.exitAlterStatementSuffixAddCol(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddCol) {
			return visitor.visitAlterStatementSuffixAddCol(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddConstraintContext extends ParserRuleContext {
	public KW_ADD(): TerminalNode { return this.getToken(HiveParser.KW_ADD, 0); }
	public alterForeignKeyWithName(): AlterForeignKeyWithNameContext | undefined {
		return this.tryGetRuleContext(0, AlterForeignKeyWithNameContext);
	}
	public alterConstraintWithName(): AlterConstraintWithNameContext | undefined {
		return this.tryGetRuleContext(0, AlterConstraintWithNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixAddConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixAddConstraint) {
			listener.enterAlterStatementSuffixAddConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixAddConstraint) {
			listener.exitAlterStatementSuffixAddConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddConstraint) {
			return visitor.visitAlterStatementSuffixAddConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixDropConstraintContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_CONSTRAINT(): TerminalNode { return this.getToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixDropConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixDropConstraint) {
			listener.enterAlterStatementSuffixDropConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixDropConstraint) {
			listener.exitAlterStatementSuffixDropConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixDropConstraint) {
			return visitor.visitAlterStatementSuffixDropConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixRenameColContext extends ParserRuleContext {
	public KW_CHANGE(): TerminalNode { return this.getToken(HiveParser.KW_CHANGE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public colType(): ColTypeContext {
		return this.getRuleContext(0, ColTypeContext);
	}
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLUMN, 0); }
	public alterColumnConstraint(): AlterColumnConstraintContext | undefined {
		return this.tryGetRuleContext(0, AlterColumnConstraintContext);
	}
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public alterStatementChangeColPosition(): AlterStatementChangeColPositionContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementChangeColPositionContext);
	}
	public restrictOrCascade(): RestrictOrCascadeContext | undefined {
		return this.tryGetRuleContext(0, RestrictOrCascadeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixRenameCol; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixRenameCol) {
			listener.enterAlterStatementSuffixRenameCol(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixRenameCol) {
			listener.exitAlterStatementSuffixRenameCol(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixRenameCol) {
			return visitor.visitAlterStatementSuffixRenameCol(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixUpdateStatsColContext extends ParserRuleContext {
	public KW_UPDATE(): TerminalNode { return this.getToken(HiveParser.KW_UPDATE, 0); }
	public KW_STATISTICS(): TerminalNode { return this.getToken(HiveParser.KW_STATISTICS, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(HiveParser.KW_FOR, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public tableProperties(): TablePropertiesContext {
		return this.getRuleContext(0, TablePropertiesContext);
	}
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLUMN, 0); }
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixUpdateStatsCol; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixUpdateStatsCol) {
			listener.enterAlterStatementSuffixUpdateStatsCol(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixUpdateStatsCol) {
			listener.exitAlterStatementSuffixUpdateStatsCol(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixUpdateStatsCol) {
			return visitor.visitAlterStatementSuffixUpdateStatsCol(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixUpdateStatsContext extends ParserRuleContext {
	public KW_UPDATE(): TerminalNode { return this.getToken(HiveParser.KW_UPDATE, 0); }
	public KW_STATISTICS(): TerminalNode { return this.getToken(HiveParser.KW_STATISTICS, 0); }
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public tableProperties(): TablePropertiesContext {
		return this.getRuleContext(0, TablePropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixUpdateStats; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixUpdateStats) {
			listener.enterAlterStatementSuffixUpdateStats(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixUpdateStats) {
			listener.exitAlterStatementSuffixUpdateStats(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixUpdateStats) {
			return visitor.visitAlterStatementSuffixUpdateStats(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementChangeColPositionContext extends ParserRuleContext {
	public _first!: Token;
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FIRST, 0); }
	public KW_AFTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AFTER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementChangeColPosition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementChangeColPosition) {
			listener.enterAlterStatementChangeColPosition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementChangeColPosition) {
			listener.exitAlterStatementChangeColPosition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementChangeColPosition) {
			return visitor.visitAlterStatementChangeColPosition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddPartitionsContext extends ParserRuleContext {
	public KW_ADD(): TerminalNode { return this.getToken(HiveParser.KW_ADD, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public alterStatementSuffixAddPartitionsElement(): AlterStatementSuffixAddPartitionsElementContext[];
	public alterStatementSuffixAddPartitionsElement(i: number): AlterStatementSuffixAddPartitionsElementContext;
	public alterStatementSuffixAddPartitionsElement(i?: number): AlterStatementSuffixAddPartitionsElementContext | AlterStatementSuffixAddPartitionsElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterStatementSuffixAddPartitionsElementContext);
		} else {
			return this.getRuleContext(i, AlterStatementSuffixAddPartitionsElementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixAddPartitions; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixAddPartitions) {
			listener.enterAlterStatementSuffixAddPartitions(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixAddPartitions) {
			listener.exitAlterStatementSuffixAddPartitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddPartitions) {
			return visitor.visitAlterStatementSuffixAddPartitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddPartitionsElementContext extends ParserRuleContext {
	public partitionSpec(): PartitionSpecContext {
		return this.getRuleContext(0, PartitionSpecContext);
	}
	public partitionLocation(): PartitionLocationContext | undefined {
		return this.tryGetRuleContext(0, PartitionLocationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixAddPartitionsElement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixAddPartitionsElement) {
			listener.enterAlterStatementSuffixAddPartitionsElement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixAddPartitionsElement) {
			listener.exitAlterStatementSuffixAddPartitionsElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddPartitionsElement) {
			return visitor.visitAlterStatementSuffixAddPartitionsElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixTouchContext extends ParserRuleContext {
	public KW_TOUCH(): TerminalNode { return this.getToken(HiveParser.KW_TOUCH, 0); }
	public partitionSpec(): PartitionSpecContext[];
	public partitionSpec(i: number): PartitionSpecContext;
	public partitionSpec(i?: number): PartitionSpecContext | PartitionSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionSpecContext);
		} else {
			return this.getRuleContext(i, PartitionSpecContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixTouch; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixTouch) {
			listener.enterAlterStatementSuffixTouch(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixTouch) {
			listener.exitAlterStatementSuffixTouch(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixTouch) {
			return visitor.visitAlterStatementSuffixTouch(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixArchiveContext extends ParserRuleContext {
	public KW_ARCHIVE(): TerminalNode { return this.getToken(HiveParser.KW_ARCHIVE, 0); }
	public partitionSpec(): PartitionSpecContext[];
	public partitionSpec(i: number): PartitionSpecContext;
	public partitionSpec(i?: number): PartitionSpecContext | PartitionSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionSpecContext);
		} else {
			return this.getRuleContext(i, PartitionSpecContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixArchive; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixArchive) {
			listener.enterAlterStatementSuffixArchive(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixArchive) {
			listener.exitAlterStatementSuffixArchive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixArchive) {
			return visitor.visitAlterStatementSuffixArchive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixUnArchiveContext extends ParserRuleContext {
	public KW_UNARCHIVE(): TerminalNode { return this.getToken(HiveParser.KW_UNARCHIVE, 0); }
	public partitionSpec(): PartitionSpecContext[];
	public partitionSpec(i: number): PartitionSpecContext;
	public partitionSpec(i?: number): PartitionSpecContext | PartitionSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionSpecContext);
		} else {
			return this.getRuleContext(i, PartitionSpecContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixUnArchive; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixUnArchive) {
			listener.enterAlterStatementSuffixUnArchive(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixUnArchive) {
			listener.exitAlterStatementSuffixUnArchive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixUnArchive) {
			return visitor.visitAlterStatementSuffixUnArchive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionLocationContext extends ParserRuleContext {
	public KW_LOCATION(): TerminalNode { return this.getToken(HiveParser.KW_LOCATION, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partitionLocation; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartitionLocation) {
			listener.enterPartitionLocation(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartitionLocation) {
			listener.exitPartitionLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionLocation) {
			return visitor.visitPartitionLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixDropPartitionsContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public dropPartitionSpec(): DropPartitionSpecContext[];
	public dropPartitionSpec(i: number): DropPartitionSpecContext;
	public dropPartitionSpec(i?: number): DropPartitionSpecContext | DropPartitionSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DropPartitionSpecContext);
		} else {
			return this.getRuleContext(i, DropPartitionSpecContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	public KW_PURGE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PURGE, 0); }
	public replicationClause(): ReplicationClauseContext | undefined {
		return this.tryGetRuleContext(0, ReplicationClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixDropPartitions; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixDropPartitions) {
			listener.enterAlterStatementSuffixDropPartitions(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixDropPartitions) {
			listener.exitAlterStatementSuffixDropPartitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixDropPartitions) {
			return visitor.visitAlterStatementSuffixDropPartitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixPropertiesContext extends ParserRuleContext {
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SET, 0); }
	public KW_TBLPROPERTIES(): TerminalNode { return this.getToken(HiveParser.KW_TBLPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext {
		return this.getRuleContext(0, TablePropertiesContext);
	}
	public KW_UNSET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNSET, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixProperties; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixProperties) {
			listener.enterAlterStatementSuffixProperties(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixProperties) {
			listener.exitAlterStatementSuffixProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixProperties) {
			return visitor.visitAlterStatementSuffixProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterViewSuffixPropertiesContext extends ParserRuleContext {
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SET, 0); }
	public KW_TBLPROPERTIES(): TerminalNode { return this.getToken(HiveParser.KW_TBLPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext {
		return this.getRuleContext(0, TablePropertiesContext);
	}
	public KW_UNSET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNSET, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterViewSuffixProperties; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterViewSuffixProperties) {
			listener.enterAlterViewSuffixProperties(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterViewSuffixProperties) {
			listener.exitAlterViewSuffixProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterViewSuffixProperties) {
			return visitor.visitAlterViewSuffixProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaterializedViewSuffixRewriteContext extends ParserRuleContext {
	public rewriteEnabled(): RewriteEnabledContext | undefined {
		return this.tryGetRuleContext(0, RewriteEnabledContext);
	}
	public rewriteDisabled(): RewriteDisabledContext | undefined {
		return this.tryGetRuleContext(0, RewriteDisabledContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterMaterializedViewSuffixRewrite; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterMaterializedViewSuffixRewrite) {
			listener.enterAlterMaterializedViewSuffixRewrite(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterMaterializedViewSuffixRewrite) {
			listener.exitAlterMaterializedViewSuffixRewrite(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterMaterializedViewSuffixRewrite) {
			return visitor.visitAlterMaterializedViewSuffixRewrite(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaterializedViewSuffixRebuildContext extends ParserRuleContext {
	public KW_REBUILD(): TerminalNode { return this.getToken(HiveParser.KW_REBUILD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterMaterializedViewSuffixRebuild; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterMaterializedViewSuffixRebuild) {
			listener.enterAlterMaterializedViewSuffixRebuild(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterMaterializedViewSuffixRebuild) {
			listener.exitAlterMaterializedViewSuffixRebuild(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterMaterializedViewSuffixRebuild) {
			return visitor.visitAlterMaterializedViewSuffixRebuild(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixSerdePropertiesContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_SERDE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERDE, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_SERDEPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixSerdeProperties; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixSerdeProperties) {
			listener.enterAlterStatementSuffixSerdeProperties(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixSerdeProperties) {
			listener.exitAlterStatementSuffixSerdeProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixSerdeProperties) {
			return visitor.visitAlterStatementSuffixSerdeProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterIndexStatementSuffixContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public KW_REBUILD(): TerminalNode { return this.getToken(HiveParser.KW_REBUILD, 0); }
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterIndexStatementSuffix; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterIndexStatementSuffix) {
			listener.enterAlterIndexStatementSuffix(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterIndexStatementSuffix) {
			listener.exitAlterIndexStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterIndexStatementSuffix) {
			return visitor.visitAlterIndexStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixFileFormatContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_FILEFORMAT(): TerminalNode { return this.getToken(HiveParser.KW_FILEFORMAT, 0); }
	public fileFormat(): FileFormatContext {
		return this.getRuleContext(0, FileFormatContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixFileFormat; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixFileFormat) {
			listener.enterAlterStatementSuffixFileFormat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixFileFormat) {
			listener.exitAlterStatementSuffixFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixFileFormat) {
			return visitor.visitAlterStatementSuffixFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixClusterbySortbyContext extends ParserRuleContext {
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOT, 0); }
	public KW_CLUSTERED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CLUSTERED, 0); }
	public KW_SORTED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SORTED, 0); }
	public tableBuckets(): TableBucketsContext | undefined {
		return this.tryGetRuleContext(0, TableBucketsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixClusterbySortby; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixClusterbySortby) {
			listener.enterAlterStatementSuffixClusterbySortby(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixClusterbySortby) {
			listener.exitAlterStatementSuffixClusterbySortby(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixClusterbySortby) {
			return visitor.visitAlterStatementSuffixClusterbySortby(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTblPartitionStatementSuffixSkewedLocationContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_SKEWED(): TerminalNode { return this.getToken(HiveParser.KW_SKEWED, 0); }
	public KW_LOCATION(): TerminalNode { return this.getToken(HiveParser.KW_LOCATION, 0); }
	public skewedLocations(): SkewedLocationsContext {
		return this.getRuleContext(0, SkewedLocationsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterTblPartitionStatementSuffixSkewedLocation) {
			listener.enterAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterTblPartitionStatementSuffixSkewedLocation) {
			listener.exitAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterTblPartitionStatementSuffixSkewedLocation) {
			return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedLocationsContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public skewedLocationsList(): SkewedLocationsListContext {
		return this.getRuleContext(0, SkewedLocationsListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedLocations; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedLocations) {
			listener.enterSkewedLocations(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedLocations) {
			listener.exitSkewedLocations(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedLocations) {
			return visitor.visitSkewedLocations(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedLocationsListContext extends ParserRuleContext {
	public skewedLocationMap(): SkewedLocationMapContext[];
	public skewedLocationMap(i: number): SkewedLocationMapContext;
	public skewedLocationMap(i?: number): SkewedLocationMapContext | SkewedLocationMapContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SkewedLocationMapContext);
		} else {
			return this.getRuleContext(i, SkewedLocationMapContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedLocationsList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedLocationsList) {
			listener.enterSkewedLocationsList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedLocationsList) {
			listener.exitSkewedLocationsList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedLocationsList) {
			return visitor.visitSkewedLocationsList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedLocationMapContext extends ParserRuleContext {
	public skewedValueLocationElement(): SkewedValueLocationElementContext {
		return this.getRuleContext(0, SkewedValueLocationElementContext);
	}
	public EQUAL(): TerminalNode { return this.getToken(HiveParser.EQUAL, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedLocationMap; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedLocationMap) {
			listener.enterSkewedLocationMap(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedLocationMap) {
			listener.exitSkewedLocationMap(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedLocationMap) {
			return visitor.visitSkewedLocationMap(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixLocationContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_LOCATION(): TerminalNode { return this.getToken(HiveParser.KW_LOCATION, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixLocation; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixLocation) {
			listener.enterAlterStatementSuffixLocation(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixLocation) {
			listener.exitAlterStatementSuffixLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixLocation) {
			return visitor.visitAlterStatementSuffixLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixSkewedbyContext extends ParserRuleContext {
	public tableSkewed(): TableSkewedContext | undefined {
		return this.tryGetRuleContext(0, TableSkewedContext);
	}
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOT, 0); }
	public KW_SKEWED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SKEWED, 0); }
	public storedAsDirs(): StoredAsDirsContext | undefined {
		return this.tryGetRuleContext(0, StoredAsDirsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixSkewedby; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixSkewedby) {
			listener.enterAlterStatementSuffixSkewedby(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixSkewedby) {
			listener.exitAlterStatementSuffixSkewedby(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixSkewedby) {
			return visitor.visitAlterStatementSuffixSkewedby(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixExchangePartitionContext extends ParserRuleContext {
	public KW_EXCHANGE(): TerminalNode { return this.getToken(HiveParser.KW_EXCHANGE, 0); }
	public partitionSpec(): PartitionSpecContext {
		return this.getRuleContext(0, PartitionSpecContext);
	}
	public KW_WITH(): TerminalNode { return this.getToken(HiveParser.KW_WITH, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixExchangePartition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixExchangePartition) {
			listener.enterAlterStatementSuffixExchangePartition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixExchangePartition) {
			listener.exitAlterStatementSuffixExchangePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixExchangePartition) {
			return visitor.visitAlterStatementSuffixExchangePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixRenamePartContext extends ParserRuleContext {
	public KW_RENAME(): TerminalNode { return this.getToken(HiveParser.KW_RENAME, 0); }
	public KW_TO(): TerminalNode { return this.getToken(HiveParser.KW_TO, 0); }
	public partitionSpec(): PartitionSpecContext {
		return this.getRuleContext(0, PartitionSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixRenamePart; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixRenamePart) {
			listener.enterAlterStatementSuffixRenamePart(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixRenamePart) {
			listener.exitAlterStatementSuffixRenamePart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixRenamePart) {
			return visitor.visitAlterStatementSuffixRenamePart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixStatsPartContext extends ParserRuleContext {
	public KW_UPDATE(): TerminalNode { return this.getToken(HiveParser.KW_UPDATE, 0); }
	public KW_STATISTICS(): TerminalNode { return this.getToken(HiveParser.KW_STATISTICS, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(HiveParser.KW_FOR, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public tableProperties(): TablePropertiesContext {
		return this.getRuleContext(0, TablePropertiesContext);
	}
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLUMN, 0); }
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixStatsPart; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixStatsPart) {
			listener.enterAlterStatementSuffixStatsPart(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixStatsPart) {
			listener.exitAlterStatementSuffixStatsPart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixStatsPart) {
			return visitor.visitAlterStatementSuffixStatsPart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixMergeFilesContext extends ParserRuleContext {
	public KW_CONCATENATE(): TerminalNode { return this.getToken(HiveParser.KW_CONCATENATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixMergeFiles; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixMergeFiles) {
			listener.enterAlterStatementSuffixMergeFiles(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixMergeFiles) {
			listener.exitAlterStatementSuffixMergeFiles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixMergeFiles) {
			return visitor.visitAlterStatementSuffixMergeFiles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixBucketNumContext extends ParserRuleContext {
	public KW_INTO(): TerminalNode { return this.getToken(HiveParser.KW_INTO, 0); }
	public Number(): TerminalNode { return this.getToken(HiveParser.Number, 0); }
	public KW_BUCKETS(): TerminalNode { return this.getToken(HiveParser.KW_BUCKETS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixBucketNum; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixBucketNum) {
			listener.enterAlterStatementSuffixBucketNum(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixBucketNum) {
			listener.exitAlterStatementSuffixBucketNum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixBucketNum) {
			return visitor.visitAlterStatementSuffixBucketNum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateIndexStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public KW_INDEX(): TerminalNode { return this.getToken(HiveParser.KW_INDEX, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public KW_TABLE(): TerminalNode[];
	public KW_TABLE(i: number): TerminalNode;
	public KW_TABLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_TABLE);
		} else {
			return this.getToken(HiveParser.KW_TABLE, i);
		}
	}
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public columnParenthesesList(): ColumnParenthesesListContext[];
	public columnParenthesesList(i: number): ColumnParenthesesListContext;
	public columnParenthesesList(i?: number): ColumnParenthesesListContext | ColumnParenthesesListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnParenthesesListContext);
		} else {
			return this.getRuleContext(i, ColumnParenthesesListContext);
		}
	}
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DEFERRED, 0); }
	public KW_REBUILD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REBUILD, 0); }
	public KW_IDXPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IDXPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesContext);
	}
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IN, 0); }
	public KW_PARTITIONED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PARTITIONED, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BY, 0); }
	public tableFileFormat(): TableFileFormatContext | undefined {
		return this.tryGetRuleContext(0, TableFileFormatContext);
	}
	public KW_LOCATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCATION, 0); }
	public locationPath(): LocationPathContext | undefined {
		return this.tryGetRuleContext(0, LocationPathContext);
	}
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesPrefixedContext);
	}
	public tableComment(): TableCommentContext | undefined {
		return this.tryGetRuleContext(0, TableCommentContext);
	}
	public tableRowFormat(): TableRowFormatContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createIndexStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateIndexStatement) {
			listener.enterCreateIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateIndexStatement) {
			listener.exitCreateIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateIndexStatement) {
			return visitor.visitCreateIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LocationPathContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.DOT);
		} else {
			return this.getToken(HiveParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_locationPath; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLocationPath) {
			listener.enterLocationPath(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLocationPath) {
			listener.exitLocationPath(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLocationPath) {
			return visitor.visitLocationPath(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropIndexStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_INDEX(): TerminalNode { return this.getToken(HiveParser.KW_INDEX, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropIndexStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropIndexStatement) {
			listener.enterDropIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropIndexStatement) {
			listener.exitDropIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropIndexStatement) {
			return visitor.visitDropIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePartitionPrefixContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tablePartitionPrefix; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTablePartitionPrefix) {
			listener.enterTablePartitionPrefix(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTablePartitionPrefix) {
			listener.exitTablePartitionPrefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTablePartitionPrefix) {
			return visitor.visitTablePartitionPrefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockingContext extends ParserRuleContext {
	public KW_AND(): TerminalNode { return this.getToken(HiveParser.KW_AND, 0); }
	public KW_WAIT(): TerminalNode { return this.getToken(HiveParser.KW_WAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_blocking; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterBlocking) {
			listener.enterBlocking(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitBlocking) {
			listener.exitBlocking(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBlocking) {
			return visitor.visitBlocking(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixCompactContext extends ParserRuleContext {
	public KW_COMPACT(): TerminalNode { return this.getToken(HiveParser.KW_COMPACT, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public blocking(): BlockingContext | undefined {
		return this.tryGetRuleContext(0, BlockingContext);
	}
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OVERWRITE, 0); }
	public KW_TBLPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TBLPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixCompact; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixCompact) {
			listener.enterAlterStatementSuffixCompact(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixCompact) {
			listener.exitAlterStatementSuffixCompact(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixCompact) {
			return visitor.visitAlterStatementSuffixCompact(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixSetOwnerContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_OWNER(): TerminalNode { return this.getToken(HiveParser.KW_OWNER, 0); }
	public principalName(): PrincipalNameContext {
		return this.getRuleContext(0, PrincipalNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterStatementSuffixSetOwner; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterStatementSuffixSetOwner) {
			listener.enterAlterStatementSuffixSetOwner(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterStatementSuffixSetOwner) {
			listener.exitAlterStatementSuffixSetOwner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixSetOwner) {
			return visitor.visitAlterStatementSuffixSetOwner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileFormatContext extends ParserRuleContext {
	public KW_INPUTFORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INPUTFORMAT, 0); }
	public StringLiteral(): TerminalNode[];
	public StringLiteral(i: number): TerminalNode;
	public StringLiteral(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.StringLiteral);
		} else {
			return this.getToken(HiveParser.StringLiteral, i);
		}
	}
	public KW_OUTPUTFORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTPUTFORMAT, 0); }
	public KW_SERDE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERDE, 0); }
	public KW_INPUTDRIVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INPUTDRIVER, 0); }
	public KW_OUTPUTDRIVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTPUTDRIVER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_fileFormat; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFileFormat) {
			listener.enterFileFormat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFileFormat) {
			listener.exitFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFileFormat) {
			return visitor.visitFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InputFileFormatContext extends ParserRuleContext {
	public KW_INPUTFORMAT(): TerminalNode { return this.getToken(HiveParser.KW_INPUTFORMAT, 0); }
	public StringLiteral(): TerminalNode[];
	public StringLiteral(i: number): TerminalNode;
	public StringLiteral(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.StringLiteral);
		} else {
			return this.getToken(HiveParser.StringLiteral, i);
		}
	}
	public KW_SERDE(): TerminalNode { return this.getToken(HiveParser.KW_SERDE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_inputFileFormat; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterInputFileFormat) {
			listener.enterInputFileFormat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitInputFileFormat) {
			listener.exitInputFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitInputFileFormat) {
			return visitor.visitInputFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TabTypeExprContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.DOT);
		} else {
			return this.getToken(HiveParser.DOT, i);
		}
	}
	public KW_ELEM_TYPE(): TerminalNode[];
	public KW_ELEM_TYPE(i: number): TerminalNode;
	public KW_ELEM_TYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_ELEM_TYPE);
		} else {
			return this.getToken(HiveParser.KW_ELEM_TYPE, i);
		}
	}
	public KW_KEY_TYPE(): TerminalNode[];
	public KW_KEY_TYPE(i: number): TerminalNode;
	public KW_KEY_TYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_KEY_TYPE);
		} else {
			return this.getToken(HiveParser.KW_KEY_TYPE, i);
		}
	}
	public KW_VALUE_TYPE(): TerminalNode[];
	public KW_VALUE_TYPE(i: number): TerminalNode;
	public KW_VALUE_TYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_VALUE_TYPE);
		} else {
			return this.getToken(HiveParser.KW_VALUE_TYPE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tabTypeExpr; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTabTypeExpr) {
			listener.enterTabTypeExpr(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTabTypeExpr) {
			listener.exitTabTypeExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTabTypeExpr) {
			return visitor.visitTabTypeExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartTypeExprContext extends ParserRuleContext {
	public tabTypeExpr(): TabTypeExprContext {
		return this.getRuleContext(0, TabTypeExprContext);
	}
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partTypeExpr; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartTypeExpr) {
			listener.enterPartTypeExpr(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartTypeExpr) {
			listener.exitPartTypeExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartTypeExpr) {
			return visitor.visitPartTypeExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TabPartColTypeExprContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	public extColumnName(): ExtColumnNameContext | undefined {
		return this.tryGetRuleContext(0, ExtColumnNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tabPartColTypeExpr; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTabPartColTypeExpr) {
			listener.enterTabPartColTypeExpr(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTabPartColTypeExpr) {
			listener.exitTabPartColTypeExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTabPartColTypeExpr) {
			return visitor.visitTabPartColTypeExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescStatementContext extends ParserRuleContext {
	public KW_DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DESCRIBE, 0); }
	public KW_DESC(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DESC, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FUNCTION, 0); }
	public descFuncNames(): DescFuncNamesContext | undefined {
		return this.tryGetRuleContext(0, DescFuncNamesContext);
	}
	public tabPartColTypeExpr(): TabPartColTypeExprContext | undefined {
		return this.tryGetRuleContext(0, TabPartColTypeExprContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public KW_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXTENDED, 0); }
	public KW_FORMATTED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FORMATTED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_descStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDescStatement) {
			listener.enterDescStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDescStatement) {
			listener.exitDescStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDescStatement) {
			return visitor.visitDescStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzeStatementContext extends ParserRuleContext {
	public KW_ANALYZE(): TerminalNode { return this.getToken(HiveParser.KW_ANALYZE, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableOrPartition(): TableOrPartitionContext | undefined {
		return this.tryGetRuleContext(0, TableOrPartitionContext);
	}
	public KW_COMPUTE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMPUTE, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STATISTICS, 0); }
	public KW_CACHE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CACHE, 0); }
	public KW_METADATA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_METADATA, 0); }
	public KW_NOSCAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOSCAN, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FOR, 0); }
	public KW_COLUMNS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLUMNS, 0); }
	public columnNameList(): ColumnNameListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_analyzeStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAnalyzeStatement) {
			listener.enterAnalyzeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAnalyzeStatement) {
			listener.exitAnalyzeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAnalyzeStatement) {
			return visitor.visitAnalyzeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	public KW_SHOW(): TerminalNode { return this.getToken(HiveParser.KW_SHOW, 0); }
	public KW_DATABASES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASES, 0); }
	public KW_SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMAS, 0); }
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LIKE, 0); }
	public showStmtIdentifier(): ShowStmtIdentifierContext | undefined {
		return this.tryGetRuleContext(0, ShowStmtIdentifierContext);
	}
	public KW_TABLES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLES, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_FROM(): TerminalNode[];
	public KW_FROM(i: number): TerminalNode;
	public KW_FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_FROM);
		} else {
			return this.getToken(HiveParser.KW_FROM, i);
		}
	}
	public KW_IN(): TerminalNode[];
	public KW_IN(i: number): TerminalNode;
	public KW_IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_IN);
		} else {
			return this.getToken(HiveParser.KW_IN, i);
		}
	}
	public KW_VIEWS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VIEWS, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MATERIALIZED, 0); }
	public KW_COLUMNS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLUMNS, 0); }
	public tableName(): TableNameContext | undefined {
		return this.tryGetRuleContext(0, TableNameContext);
	}
	public KW_FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FUNCTIONS, 0); }
	public showFunctionIdentifier(): ShowFunctionIdentifierContext | undefined {
		return this.tryGetRuleContext(0, ShowFunctionIdentifierContext);
	}
	public KW_PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PARTITIONS, 0); }
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	public KW_CREATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CREATE, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public KW_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXTENDED, 0); }
	public KW_TBLPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TBLPROPERTIES, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public KW_LOCKS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCKS, 0); }
	public partTypeExpr(): PartTypeExprContext | undefined {
		return this.tryGetRuleContext(0, PartTypeExprContext);
	}
	public KW_COMPACTIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMPACTIONS, 0); }
	public KW_TRANSACTIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TRANSACTIONS, 0); }
	public KW_CONF(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONF, 0); }
	public KW_RESOURCE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RESOURCE, 0); }
	public KW_PLANS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PLANS, 0); }
	public KW_PLAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PLAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowStatement) {
			listener.enterShowStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowStatement) {
			listener.exitShowStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowStatement) {
			return visitor.visitShowStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockStatementContext extends ParserRuleContext {
	public KW_LOCK(): TerminalNode { return this.getToken(HiveParser.KW_LOCK, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public lockMode(): LockModeContext {
		return this.getRuleContext(0, LockModeContext);
	}
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_lockStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLockStatement) {
			listener.enterLockStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLockStatement) {
			listener.exitLockStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLockStatement) {
			return visitor.visitLockStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockDatabaseContext extends ParserRuleContext {
	public KW_LOCK(): TerminalNode { return this.getToken(HiveParser.KW_LOCK, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public lockMode(): LockModeContext {
		return this.getRuleContext(0, LockModeContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_lockDatabase; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLockDatabase) {
			listener.enterLockDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLockDatabase) {
			listener.exitLockDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLockDatabase) {
			return visitor.visitLockDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockModeContext extends ParserRuleContext {
	public KW_SHARED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SHARED, 0); }
	public KW_EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_lockMode; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLockMode) {
			listener.enterLockMode(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLockMode) {
			listener.exitLockMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLockMode) {
			return visitor.visitLockMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnlockStatementContext extends ParserRuleContext {
	public KW_UNLOCK(): TerminalNode { return this.getToken(HiveParser.KW_UNLOCK, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_unlockStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUnlockStatement) {
			listener.enterUnlockStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUnlockStatement) {
			listener.exitUnlockStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUnlockStatement) {
			return visitor.visitUnlockStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnlockDatabaseContext extends ParserRuleContext {
	public KW_UNLOCK(): TerminalNode { return this.getToken(HiveParser.KW_UNLOCK, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_unlockDatabase; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUnlockDatabase) {
			listener.enterUnlockDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUnlockDatabase) {
			listener.exitUnlockDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUnlockDatabase) {
			return visitor.visitUnlockDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRoleStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public KW_ROLE(): TerminalNode { return this.getToken(HiveParser.KW_ROLE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createRoleStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateRoleStatement) {
			listener.enterCreateRoleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateRoleStatement) {
			listener.exitCreateRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateRoleStatement) {
			return visitor.visitCreateRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRoleStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_ROLE(): TerminalNode { return this.getToken(HiveParser.KW_ROLE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropRoleStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropRoleStatement) {
			listener.enterDropRoleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropRoleStatement) {
			listener.exitDropRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropRoleStatement) {
			return visitor.visitDropRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantPrivilegesContext extends ParserRuleContext {
	public KW_GRANT(): TerminalNode { return this.getToken(HiveParser.KW_GRANT, 0); }
	public privilegeList(): PrivilegeListContext {
		return this.getRuleContext(0, PrivilegeListContext);
	}
	public KW_TO(): TerminalNode { return this.getToken(HiveParser.KW_TO, 0); }
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getRuleContext(0, PrincipalSpecificationContext);
	}
	public privilegeObject(): PrivilegeObjectContext | undefined {
		return this.tryGetRuleContext(0, PrivilegeObjectContext);
	}
	public withGrantOption(): WithGrantOptionContext | undefined {
		return this.tryGetRuleContext(0, WithGrantOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_grantPrivileges; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGrantPrivileges) {
			listener.enterGrantPrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGrantPrivileges) {
			listener.exitGrantPrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGrantPrivileges) {
			return visitor.visitGrantPrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokePrivilegesContext extends ParserRuleContext {
	public KW_REVOKE(): TerminalNode { return this.getToken(HiveParser.KW_REVOKE, 0); }
	public privilegeList(): PrivilegeListContext {
		return this.getRuleContext(0, PrivilegeListContext);
	}
	public KW_FROM(): TerminalNode { return this.getToken(HiveParser.KW_FROM, 0); }
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getRuleContext(0, PrincipalSpecificationContext);
	}
	public grantOptionFor(): GrantOptionForContext | undefined {
		return this.tryGetRuleContext(0, GrantOptionForContext);
	}
	public privilegeObject(): PrivilegeObjectContext | undefined {
		return this.tryGetRuleContext(0, PrivilegeObjectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_revokePrivileges; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRevokePrivileges) {
			listener.enterRevokePrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRevokePrivileges) {
			listener.exitRevokePrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRevokePrivileges) {
			return visitor.visitRevokePrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantRoleContext extends ParserRuleContext {
	public KW_GRANT(): TerminalNode { return this.getToken(HiveParser.KW_GRANT, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public KW_TO(): TerminalNode { return this.getToken(HiveParser.KW_TO, 0); }
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getRuleContext(0, PrincipalSpecificationContext);
	}
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROLE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	public withAdminOption(): WithAdminOptionContext | undefined {
		return this.tryGetRuleContext(0, WithAdminOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_grantRole; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGrantRole) {
			listener.enterGrantRole(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGrantRole) {
			listener.exitGrantRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGrantRole) {
			return visitor.visitGrantRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeRoleContext extends ParserRuleContext {
	public KW_REVOKE(): TerminalNode { return this.getToken(HiveParser.KW_REVOKE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public KW_FROM(): TerminalNode { return this.getToken(HiveParser.KW_FROM, 0); }
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getRuleContext(0, PrincipalSpecificationContext);
	}
	public adminOptionFor(): AdminOptionForContext | undefined {
		return this.tryGetRuleContext(0, AdminOptionForContext);
	}
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROLE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_revokeRole; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRevokeRole) {
			listener.enterRevokeRole(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRevokeRole) {
			listener.exitRevokeRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRevokeRole) {
			return visitor.visitRevokeRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRoleGrantsContext extends ParserRuleContext {
	public KW_SHOW(): TerminalNode { return this.getToken(HiveParser.KW_SHOW, 0); }
	public KW_ROLE(): TerminalNode { return this.getToken(HiveParser.KW_ROLE, 0); }
	public KW_GRANT(): TerminalNode { return this.getToken(HiveParser.KW_GRANT, 0); }
	public principalName(): PrincipalNameContext {
		return this.getRuleContext(0, PrincipalNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showRoleGrants; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowRoleGrants) {
			listener.enterShowRoleGrants(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowRoleGrants) {
			listener.exitShowRoleGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowRoleGrants) {
			return visitor.visitShowRoleGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRolesContext extends ParserRuleContext {
	public KW_SHOW(): TerminalNode { return this.getToken(HiveParser.KW_SHOW, 0); }
	public KW_ROLES(): TerminalNode { return this.getToken(HiveParser.KW_ROLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showRoles; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowRoles) {
			listener.enterShowRoles(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowRoles) {
			listener.exitShowRoles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowRoles) {
			return visitor.visitShowRoles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCurrentRoleContext extends ParserRuleContext {
	public KW_SHOW(): TerminalNode { return this.getToken(HiveParser.KW_SHOW, 0); }
	public KW_CURRENT(): TerminalNode { return this.getToken(HiveParser.KW_CURRENT, 0); }
	public KW_ROLES(): TerminalNode { return this.getToken(HiveParser.KW_ROLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showCurrentRole; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowCurrentRole) {
			listener.enterShowCurrentRole(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowCurrentRole) {
			listener.exitShowCurrentRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowCurrentRole) {
			return visitor.visitShowCurrentRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetRoleContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_ROLE(): TerminalNode { return this.getToken(HiveParser.KW_ROLE, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALL, 0); }
	public KW_NONE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NONE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_setRole; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSetRole) {
			listener.enterSetRole(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSetRole) {
			listener.exitSetRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetRole) {
			return visitor.visitSetRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowGrantsContext extends ParserRuleContext {
	public KW_SHOW(): TerminalNode { return this.getToken(HiveParser.KW_SHOW, 0); }
	public KW_GRANT(): TerminalNode { return this.getToken(HiveParser.KW_GRANT, 0); }
	public principalName(): PrincipalNameContext | undefined {
		return this.tryGetRuleContext(0, PrincipalNameContext);
	}
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ON, 0); }
	public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext | undefined {
		return this.tryGetRuleContext(0, PrivilegeIncludeColObjectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showGrants; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowGrants) {
			listener.enterShowGrants(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowGrants) {
			listener.exitShowGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowGrants) {
			return visitor.visitShowGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRolePrincipalsContext extends ParserRuleContext {
	public KW_SHOW(): TerminalNode { return this.getToken(HiveParser.KW_SHOW, 0); }
	public KW_PRINCIPALS(): TerminalNode { return this.getToken(HiveParser.KW_PRINCIPALS, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showRolePrincipals; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowRolePrincipals) {
			listener.enterShowRolePrincipals(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowRolePrincipals) {
			listener.exitShowRolePrincipals(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowRolePrincipals) {
			return visitor.visitShowRolePrincipals(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeIncludeColObjectContext extends ParserRuleContext {
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALL, 0); }
	public privObjectCols(): PrivObjectColsContext | undefined {
		return this.tryGetRuleContext(0, PrivObjectColsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_privilegeIncludeColObject; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrivilegeIncludeColObject) {
			listener.enterPrivilegeIncludeColObject(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrivilegeIncludeColObject) {
			listener.exitPrivilegeIncludeColObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeIncludeColObject) {
			return visitor.visitPrivilegeIncludeColObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeObjectContext extends ParserRuleContext {
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public privObject(): PrivObjectContext {
		return this.getRuleContext(0, PrivObjectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_privilegeObject; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrivilegeObject) {
			listener.enterPrivilegeObject(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrivilegeObject) {
			listener.exitPrivilegeObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeObject) {
			return visitor.visitPrivilegeObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public tableName(): TableNameContext | undefined {
		return this.tryGetRuleContext(0, TableNameContext);
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	public KW_URI(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_URI, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERVER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_privObject; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrivObject) {
			listener.enterPrivObject(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrivObject) {
			listener.exitPrivObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivObject) {
			return visitor.visitPrivObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectColsContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public tableName(): TableNameContext | undefined {
		return this.tryGetRuleContext(0, TableNameContext);
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public columnNameList(): ColumnNameListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	public KW_URI(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_URI, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERVER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_privObjectCols; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrivObjectCols) {
			listener.enterPrivObjectCols(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrivObjectCols) {
			listener.exitPrivObjectCols(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivObjectCols) {
			return visitor.visitPrivObjectCols(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeListContext extends ParserRuleContext {
	public privlegeDef(): PrivlegeDefContext[];
	public privlegeDef(i: number): PrivlegeDefContext;
	public privlegeDef(i?: number): PrivlegeDefContext | PrivlegeDefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivlegeDefContext);
		} else {
			return this.getRuleContext(i, PrivlegeDefContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_privilegeList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrivilegeList) {
			listener.enterPrivilegeList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrivilegeList) {
			listener.exitPrivilegeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeList) {
			return visitor.visitPrivilegeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivlegeDefContext extends ParserRuleContext {
	public privilegeType(): PrivilegeTypeContext {
		return this.getRuleContext(0, PrivilegeTypeContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public columnNameList(): ColumnNameListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_privlegeDef; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrivlegeDef) {
			listener.enterPrivlegeDef(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrivlegeDef) {
			listener.exitPrivlegeDef(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivlegeDef) {
			return visitor.visitPrivlegeDef(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeTypeContext extends ParserRuleContext {
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALL, 0); }
	public KW_ALTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALTER, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UPDATE, 0); }
	public KW_CREATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CREATE, 0); }
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DROP, 0); }
	public KW_LOCK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCK, 0); }
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SELECT, 0); }
	public KW_SHOW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SHOW_DATABASE, 0); }
	public KW_INSERT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INSERT, 0); }
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_privilegeType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrivilegeType) {
			listener.enterPrivilegeType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrivilegeType) {
			listener.exitPrivilegeType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeType) {
			return visitor.visitPrivilegeType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrincipalSpecificationContext extends ParserRuleContext {
	public principalName(): PrincipalNameContext[];
	public principalName(i: number): PrincipalNameContext;
	public principalName(i?: number): PrincipalNameContext | PrincipalNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrincipalNameContext);
		} else {
			return this.getRuleContext(i, PrincipalNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_principalSpecification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrincipalSpecification) {
			listener.enterPrincipalSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrincipalSpecification) {
			listener.exitPrincipalSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrincipalSpecification) {
			return visitor.visitPrincipalSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrincipalNameContext extends ParserRuleContext {
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_USER, 0); }
	public principalIdentifier(): PrincipalIdentifierContext | undefined {
		return this.tryGetRuleContext(0, PrincipalIdentifierContext);
	}
	public KW_GROUP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_GROUP, 0); }
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROLE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_principalName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrincipalName) {
			listener.enterPrincipalName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrincipalName) {
			listener.exitPrincipalName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrincipalName) {
			return visitor.visitPrincipalName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithGrantOptionContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(HiveParser.KW_WITH, 0); }
	public KW_GRANT(): TerminalNode { return this.getToken(HiveParser.KW_GRANT, 0); }
	public KW_OPTION(): TerminalNode { return this.getToken(HiveParser.KW_OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_withGrantOption; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWithGrantOption) {
			listener.enterWithGrantOption(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWithGrantOption) {
			listener.exitWithGrantOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWithGrantOption) {
			return visitor.visitWithGrantOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantOptionForContext extends ParserRuleContext {
	public KW_GRANT(): TerminalNode { return this.getToken(HiveParser.KW_GRANT, 0); }
	public KW_OPTION(): TerminalNode { return this.getToken(HiveParser.KW_OPTION, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(HiveParser.KW_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_grantOptionFor; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGrantOptionFor) {
			listener.enterGrantOptionFor(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGrantOptionFor) {
			listener.exitGrantOptionFor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGrantOptionFor) {
			return visitor.visitGrantOptionFor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminOptionForContext extends ParserRuleContext {
	public KW_ADMIN(): TerminalNode { return this.getToken(HiveParser.KW_ADMIN, 0); }
	public KW_OPTION(): TerminalNode { return this.getToken(HiveParser.KW_OPTION, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(HiveParser.KW_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_adminOptionFor; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAdminOptionFor) {
			listener.enterAdminOptionFor(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAdminOptionFor) {
			listener.exitAdminOptionFor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAdminOptionFor) {
			return visitor.visitAdminOptionFor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithAdminOptionContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(HiveParser.KW_WITH, 0); }
	public KW_ADMIN(): TerminalNode { return this.getToken(HiveParser.KW_ADMIN, 0); }
	public KW_OPTION(): TerminalNode { return this.getToken(HiveParser.KW_OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_withAdminOption; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWithAdminOption) {
			listener.enterWithAdminOption(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWithAdminOption) {
			listener.exitWithAdminOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWithAdminOption) {
			return visitor.visitWithAdminOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MetastoreCheckContext extends ParserRuleContext {
	public KW_MSCK(): TerminalNode { return this.getToken(HiveParser.KW_MSCK, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public tableName(): TableNameContext | undefined {
		return this.tryGetRuleContext(0, TableNameContext);
	}
	public KW_REPAIR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REPAIR, 0); }
	public KW_PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PARTITIONS, 0); }
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ADD, 0); }
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DROP, 0); }
	public KW_SYNC(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SYNC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_metastoreCheck; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterMetastoreCheck) {
			listener.enterMetastoreCheck(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitMetastoreCheck) {
			listener.exitMetastoreCheck(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitMetastoreCheck) {
			return visitor.visitMetastoreCheck(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceListContext extends ParserRuleContext {
	public resource(): ResourceContext[];
	public resource(i: number): ResourceContext;
	public resource(i?: number): ResourceContext | ResourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ResourceContext);
		} else {
			return this.getRuleContext(i, ResourceContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_resourceList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterResourceList) {
			listener.enterResourceList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitResourceList) {
			listener.exitResourceList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitResourceList) {
			return visitor.visitResourceList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceContext extends ParserRuleContext {
	public resourceType(): ResourceTypeContext {
		return this.getRuleContext(0, ResourceTypeContext);
	}
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_resource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterResource) {
			listener.enterResource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitResource) {
			listener.exitResource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitResource) {
			return visitor.visitResource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceTypeContext extends ParserRuleContext {
	public KW_JAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_JAR, 0); }
	public KW_FILE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FILE, 0); }
	public KW_ARCHIVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ARCHIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_resourceType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterResourceType) {
			listener.enterResourceType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitResourceType) {
			listener.exitResourceType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitResourceType) {
			return visitor.visitResourceType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateFunctionStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public KW_FUNCTION(): TerminalNode { return this.getToken(HiveParser.KW_FUNCTION, 0); }
	public functionIdentifier(): FunctionIdentifierContext {
		return this.getRuleContext(0, FunctionIdentifierContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TEMPORARY, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_USING, 0); }
	public resourceList(): ResourceListContext | undefined {
		return this.tryGetRuleContext(0, ResourceListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createFunctionStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateFunctionStatement) {
			listener.enterCreateFunctionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateFunctionStatement) {
			listener.exitCreateFunctionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateFunctionStatement) {
			return visitor.visitCreateFunctionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropFunctionStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_FUNCTION(): TerminalNode { return this.getToken(HiveParser.KW_FUNCTION, 0); }
	public functionIdentifier(): FunctionIdentifierContext {
		return this.getRuleContext(0, FunctionIdentifierContext);
	}
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TEMPORARY, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropFunctionStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropFunctionStatement) {
			listener.enterDropFunctionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropFunctionStatement) {
			listener.exitDropFunctionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropFunctionStatement) {
			return visitor.visitDropFunctionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReloadFunctionStatementContext extends ParserRuleContext {
	public KW_RELOAD(): TerminalNode { return this.getToken(HiveParser.KW_RELOAD, 0); }
	public KW_FUNCTION(): TerminalNode { return this.getToken(HiveParser.KW_FUNCTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_reloadFunctionStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterReloadFunctionStatement) {
			listener.enterReloadFunctionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitReloadFunctionStatement) {
			listener.exitReloadFunctionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReloadFunctionStatement) {
			return visitor.visitReloadFunctionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateMacroStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public KW_TEMPORARY(): TerminalNode { return this.getToken(HiveParser.KW_TEMPORARY, 0); }
	public KW_MACRO(): TerminalNode { return this.getToken(HiveParser.KW_MACRO, 0); }
	public Identifier(): TerminalNode { return this.getToken(HiveParser.Identifier, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public columnNameTypeList(): ColumnNameTypeListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameTypeListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createMacroStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateMacroStatement) {
			listener.enterCreateMacroStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateMacroStatement) {
			listener.exitCreateMacroStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateMacroStatement) {
			return visitor.visitCreateMacroStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropMacroStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_TEMPORARY(): TerminalNode { return this.getToken(HiveParser.KW_TEMPORARY, 0); }
	public KW_MACRO(): TerminalNode { return this.getToken(HiveParser.KW_MACRO, 0); }
	public Identifier(): TerminalNode { return this.getToken(HiveParser.Identifier, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropMacroStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropMacroStatement) {
			listener.enterDropMacroStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropMacroStatement) {
			listener.exitDropMacroStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropMacroStatement) {
			return visitor.visitDropMacroStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateViewStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public KW_VIEW(): TerminalNode { return this.getToken(HiveParser.KW_VIEW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		return this.getRuleContext(0, SelectStatementWithCTEContext);
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public columnNameCommentList(): ColumnNameCommentListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameCommentListContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public tableComment(): TableCommentContext | undefined {
		return this.tryGetRuleContext(0, TableCommentContext);
	}
	public viewPartition(): ViewPartitionContext | undefined {
		return this.tryGetRuleContext(0, ViewPartitionContext);
	}
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesPrefixedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createViewStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateViewStatement) {
			listener.enterCreateViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateViewStatement) {
			listener.exitCreateViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateViewStatement) {
			return visitor.visitCreateViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateMaterializedViewStatementContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(HiveParser.KW_CREATE, 0); }
	public KW_MATERIALIZED(): TerminalNode { return this.getToken(HiveParser.KW_MATERIALIZED, 0); }
	public KW_VIEW(): TerminalNode { return this.getToken(HiveParser.KW_VIEW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		return this.getRuleContext(0, SelectStatementWithCTEContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public rewriteDisabled(): RewriteDisabledContext | undefined {
		return this.tryGetRuleContext(0, RewriteDisabledContext);
	}
	public tableComment(): TableCommentContext | undefined {
		return this.tryGetRuleContext(0, TableCommentContext);
	}
	public tableRowFormat(): TableRowFormatContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatContext);
	}
	public tableFileFormat(): TableFileFormatContext | undefined {
		return this.tryGetRuleContext(0, TableFileFormatContext);
	}
	public tableLocation(): TableLocationContext | undefined {
		return this.tryGetRuleContext(0, TableLocationContext);
	}
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesPrefixedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createMaterializedViewStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateMaterializedViewStatement) {
			listener.enterCreateMaterializedViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateMaterializedViewStatement) {
			listener.exitCreateMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateMaterializedViewStatement) {
			return visitor.visitCreateMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewPartitionContext extends ParserRuleContext {
	public KW_PARTITIONED(): TerminalNode { return this.getToken(HiveParser.KW_PARTITIONED, 0); }
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnNameList(): ColumnNameListContext {
		return this.getRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_viewPartition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterViewPartition) {
			listener.enterViewPartition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitViewPartition) {
			listener.exitViewPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewPartition) {
			return visitor.visitViewPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropViewStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_VIEW(): TerminalNode { return this.getToken(HiveParser.KW_VIEW, 0); }
	public viewName(): ViewNameContext {
		return this.getRuleContext(0, ViewNameContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropViewStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropViewStatement) {
			listener.enterDropViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropViewStatement) {
			listener.exitDropViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropViewStatement) {
			return visitor.visitDropViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropMaterializedViewStatementContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(HiveParser.KW_DROP, 0); }
	public KW_MATERIALIZED(): TerminalNode { return this.getToken(HiveParser.KW_MATERIALIZED, 0); }
	public KW_VIEW(): TerminalNode { return this.getToken(HiveParser.KW_VIEW, 0); }
	public viewName(): ViewNameContext {
		return this.getRuleContext(0, ViewNameContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropMaterializedViewStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropMaterializedViewStatement) {
			listener.enterDropMaterializedViewStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropMaterializedViewStatement) {
			listener.exitDropMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropMaterializedViewStatement) {
			return visitor.visitDropMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowFunctionIdentifierContext extends ParserRuleContext {
	public functionIdentifier(): FunctionIdentifierContext | undefined {
		return this.tryGetRuleContext(0, FunctionIdentifierContext);
	}
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showFunctionIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowFunctionIdentifier) {
			listener.enterShowFunctionIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowFunctionIdentifier) {
			listener.exitShowFunctionIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowFunctionIdentifier) {
			return visitor.visitShowFunctionIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStmtIdentifierContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_showStmtIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterShowStmtIdentifier) {
			listener.enterShowStmtIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitShowStmtIdentifier) {
			listener.exitShowStmtIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowStmtIdentifier) {
			return visitor.visitShowStmtIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableCommentContext extends ParserRuleContext {
	public KW_COMMENT(): TerminalNode { return this.getToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableComment; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableComment) {
			listener.enterTableComment(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableComment) {
			listener.exitTableComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableComment) {
			return visitor.visitTableComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePartitionContext extends ParserRuleContext {
	public KW_PARTITIONED(): TerminalNode { return this.getToken(HiveParser.KW_PARTITIONED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnNameTypeConstraint(): ColumnNameTypeConstraintContext[];
	public columnNameTypeConstraint(i: number): ColumnNameTypeConstraintContext;
	public columnNameTypeConstraint(i?: number): ColumnNameTypeConstraintContext | ColumnNameTypeConstraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameTypeConstraintContext);
		} else {
			return this.getRuleContext(i, ColumnNameTypeConstraintContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tablePartition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTablePartition) {
			listener.enterTablePartition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTablePartition) {
			listener.exitTablePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTablePartition) {
			return visitor.visitTablePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableBucketsContext extends ParserRuleContext {
	public KW_CLUSTERED(): TerminalNode { return this.getToken(HiveParser.KW_CLUSTERED, 0); }
	public KW_BY(): TerminalNode[];
	public KW_BY(i: number): TerminalNode;
	public KW_BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_BY);
		} else {
			return this.getToken(HiveParser.KW_BY, i);
		}
	}
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.LPAREN);
		} else {
			return this.getToken(HiveParser.LPAREN, i);
		}
	}
	public columnNameList(): ColumnNameListContext {
		return this.getRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.RPAREN);
		} else {
			return this.getToken(HiveParser.RPAREN, i);
		}
	}
	public KW_INTO(): TerminalNode { return this.getToken(HiveParser.KW_INTO, 0); }
	public Number(): TerminalNode { return this.getToken(HiveParser.Number, 0); }
	public KW_BUCKETS(): TerminalNode { return this.getToken(HiveParser.KW_BUCKETS, 0); }
	public KW_SORTED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SORTED, 0); }
	public columnNameOrderList(): ColumnNameOrderListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameOrderListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableBuckets; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableBuckets) {
			listener.enterTableBuckets(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableBuckets) {
			listener.exitTableBuckets(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableBuckets) {
			return visitor.visitTableBuckets(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSkewedContext extends ParserRuleContext {
	public KW_SKEWED(): TerminalNode { return this.getToken(HiveParser.KW_SKEWED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.LPAREN);
		} else {
			return this.getToken(HiveParser.LPAREN, i);
		}
	}
	public columnNameList(): ColumnNameListContext {
		return this.getRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.RPAREN);
		} else {
			return this.getToken(HiveParser.RPAREN, i);
		}
	}
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public skewedValueElement(): SkewedValueElementContext {
		return this.getRuleContext(0, SkewedValueElementContext);
	}
	public storedAsDirs(): StoredAsDirsContext | undefined {
		return this.tryGetRuleContext(0, StoredAsDirsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableSkewed; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableSkewed) {
			listener.enterTableSkewed(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableSkewed) {
			listener.exitTableSkewed(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableSkewed) {
			return visitor.visitTableSkewed(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowFormatContext extends ParserRuleContext {
	public rowFormatSerde(): RowFormatSerdeContext | undefined {
		return this.tryGetRuleContext(0, RowFormatSerdeContext);
	}
	public rowFormatDelimited(): RowFormatDelimitedContext | undefined {
		return this.tryGetRuleContext(0, RowFormatDelimitedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rowFormat; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRowFormat) {
			listener.enterRowFormat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRowFormat) {
			listener.exitRowFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRowFormat) {
			return visitor.visitRowFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordReaderContext extends ParserRuleContext {
	public KW_RECORDREADER(): TerminalNode { return this.getToken(HiveParser.KW_RECORDREADER, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_recordReader; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRecordReader) {
			listener.enterRecordReader(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRecordReader) {
			listener.exitRecordReader(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRecordReader) {
			return visitor.visitRecordReader(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordWriterContext extends ParserRuleContext {
	public KW_RECORDWRITER(): TerminalNode { return this.getToken(HiveParser.KW_RECORDWRITER, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_recordWriter; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRecordWriter) {
			listener.enterRecordWriter(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRecordWriter) {
			listener.exitRecordWriter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRecordWriter) {
			return visitor.visitRecordWriter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowFormatSerdeContext extends ParserRuleContext {
	public KW_ROW(): TerminalNode { return this.getToken(HiveParser.KW_ROW, 0); }
	public KW_FORMAT(): TerminalNode { return this.getToken(HiveParser.KW_FORMAT, 0); }
	public KW_SERDE(): TerminalNode { return this.getToken(HiveParser.KW_SERDE, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_SERDEPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rowFormatSerde; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRowFormatSerde) {
			listener.enterRowFormatSerde(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRowFormatSerde) {
			listener.exitRowFormatSerde(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRowFormatSerde) {
			return visitor.visitRowFormatSerde(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowFormatDelimitedContext extends ParserRuleContext {
	public KW_ROW(): TerminalNode { return this.getToken(HiveParser.KW_ROW, 0); }
	public KW_FORMAT(): TerminalNode { return this.getToken(HiveParser.KW_FORMAT, 0); }
	public KW_DELIMITED(): TerminalNode { return this.getToken(HiveParser.KW_DELIMITED, 0); }
	public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatFieldIdentifierContext);
	}
	public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatCollItemsIdentifierContext);
	}
	public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatMapKeysIdentifierContext);
	}
	public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatLinesIdentifierContext);
	}
	public tableRowNullFormat(): TableRowNullFormatContext | undefined {
		return this.tryGetRuleContext(0, TableRowNullFormatContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rowFormatDelimited; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRowFormatDelimited) {
			listener.enterRowFormatDelimited(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRowFormatDelimited) {
			listener.exitRowFormatDelimited(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRowFormatDelimited) {
			return visitor.visitRowFormatDelimited(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatContext extends ParserRuleContext {
	public rowFormatDelimited(): RowFormatDelimitedContext | undefined {
		return this.tryGetRuleContext(0, RowFormatDelimitedContext);
	}
	public rowFormatSerde(): RowFormatSerdeContext | undefined {
		return this.tryGetRuleContext(0, RowFormatSerdeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableRowFormat; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableRowFormat) {
			listener.enterTableRowFormat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableRowFormat) {
			listener.exitTableRowFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormat) {
			return visitor.visitTableRowFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePropertiesPrefixedContext extends ParserRuleContext {
	public KW_TBLPROPERTIES(): TerminalNode { return this.getToken(HiveParser.KW_TBLPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext {
		return this.getRuleContext(0, TablePropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tablePropertiesPrefixed; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTablePropertiesPrefixed) {
			listener.enterTablePropertiesPrefixed(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTablePropertiesPrefixed) {
			listener.exitTablePropertiesPrefixed(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTablePropertiesPrefixed) {
			return visitor.visitTablePropertiesPrefixed(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePropertiesContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public tablePropertiesList(): TablePropertiesListContext {
		return this.getRuleContext(0, TablePropertiesListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableProperties; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableProperties) {
			listener.enterTableProperties(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableProperties) {
			listener.exitTableProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableProperties) {
			return visitor.visitTableProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePropertiesListContext extends ParserRuleContext {
	public keyValueProperty(): KeyValuePropertyContext[];
	public keyValueProperty(i: number): KeyValuePropertyContext;
	public keyValueProperty(i?: number): KeyValuePropertyContext | KeyValuePropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyValuePropertyContext);
		} else {
			return this.getRuleContext(i, KeyValuePropertyContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	public keyProperty(): KeyPropertyContext[];
	public keyProperty(i: number): KeyPropertyContext;
	public keyProperty(i?: number): KeyPropertyContext | KeyPropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(KeyPropertyContext);
		} else {
			return this.getRuleContext(i, KeyPropertyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tablePropertiesList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTablePropertiesList) {
			listener.enterTablePropertiesList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTablePropertiesList) {
			listener.exitTablePropertiesList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTablePropertiesList) {
			return visitor.visitTablePropertiesList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyValuePropertyContext extends ParserRuleContext {
	public StringLiteral(): TerminalNode[];
	public StringLiteral(i: number): TerminalNode;
	public StringLiteral(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.StringLiteral);
		} else {
			return this.getToken(HiveParser.StringLiteral, i);
		}
	}
	public EQUAL(): TerminalNode { return this.getToken(HiveParser.EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_keyValueProperty; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterKeyValueProperty) {
			listener.enterKeyValueProperty(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitKeyValueProperty) {
			listener.exitKeyValueProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitKeyValueProperty) {
			return visitor.visitKeyValueProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyPropertyContext extends ParserRuleContext {
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_keyProperty; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterKeyProperty) {
			listener.enterKeyProperty(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitKeyProperty) {
			listener.exitKeyProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitKeyProperty) {
			return visitor.visitKeyProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatFieldIdentifierContext extends ParserRuleContext {
	public KW_FIELDS(): TerminalNode { return this.getToken(HiveParser.KW_FIELDS, 0); }
	public KW_TERMINATED(): TerminalNode { return this.getToken(HiveParser.KW_TERMINATED, 0); }
	public KW_BY(): TerminalNode[];
	public KW_BY(i: number): TerminalNode;
	public KW_BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_BY);
		} else {
			return this.getToken(HiveParser.KW_BY, i);
		}
	}
	public StringLiteral(): TerminalNode[];
	public StringLiteral(i: number): TerminalNode;
	public StringLiteral(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.StringLiteral);
		} else {
			return this.getToken(HiveParser.StringLiteral, i);
		}
	}
	public KW_ESCAPED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ESCAPED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableRowFormatFieldIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableRowFormatFieldIdentifier) {
			listener.enterTableRowFormatFieldIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableRowFormatFieldIdentifier) {
			listener.exitTableRowFormatFieldIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatFieldIdentifier) {
			return visitor.visitTableRowFormatFieldIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatCollItemsIdentifierContext extends ParserRuleContext {
	public KW_COLLECTION(): TerminalNode { return this.getToken(HiveParser.KW_COLLECTION, 0); }
	public KW_ITEMS(): TerminalNode { return this.getToken(HiveParser.KW_ITEMS, 0); }
	public KW_TERMINATED(): TerminalNode { return this.getToken(HiveParser.KW_TERMINATED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableRowFormatCollItemsIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableRowFormatCollItemsIdentifier) {
			listener.enterTableRowFormatCollItemsIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableRowFormatCollItemsIdentifier) {
			listener.exitTableRowFormatCollItemsIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatCollItemsIdentifier) {
			return visitor.visitTableRowFormatCollItemsIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatMapKeysIdentifierContext extends ParserRuleContext {
	public KW_MAP(): TerminalNode { return this.getToken(HiveParser.KW_MAP, 0); }
	public KW_KEYS(): TerminalNode { return this.getToken(HiveParser.KW_KEYS, 0); }
	public KW_TERMINATED(): TerminalNode { return this.getToken(HiveParser.KW_TERMINATED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableRowFormatMapKeysIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableRowFormatMapKeysIdentifier) {
			listener.enterTableRowFormatMapKeysIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableRowFormatMapKeysIdentifier) {
			listener.exitTableRowFormatMapKeysIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatMapKeysIdentifier) {
			return visitor.visitTableRowFormatMapKeysIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatLinesIdentifierContext extends ParserRuleContext {
	public KW_LINES(): TerminalNode { return this.getToken(HiveParser.KW_LINES, 0); }
	public KW_TERMINATED(): TerminalNode { return this.getToken(HiveParser.KW_TERMINATED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableRowFormatLinesIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableRowFormatLinesIdentifier) {
			listener.enterTableRowFormatLinesIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableRowFormatLinesIdentifier) {
			listener.exitTableRowFormatLinesIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatLinesIdentifier) {
			return visitor.visitTableRowFormatLinesIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowNullFormatContext extends ParserRuleContext {
	public KW_NULL(): TerminalNode { return this.getToken(HiveParser.KW_NULL, 0); }
	public KW_DEFINED(): TerminalNode { return this.getToken(HiveParser.KW_DEFINED, 0); }
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableRowNullFormat; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableRowNullFormat) {
			listener.enterTableRowNullFormat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableRowNullFormat) {
			listener.exitTableRowNullFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowNullFormat) {
			return visitor.visitTableRowNullFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableFileFormatContext extends ParserRuleContext {
	public KW_STORED(): TerminalNode { return this.getToken(HiveParser.KW_STORED, 0); }
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public KW_INPUTFORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INPUTFORMAT, 0); }
	public StringLiteral(): TerminalNode[];
	public StringLiteral(i: number): TerminalNode;
	public StringLiteral(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.StringLiteral);
		} else {
			return this.getToken(HiveParser.StringLiteral, i);
		}
	}
	public KW_OUTPUTFORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTPUTFORMAT, 0); }
	public KW_INPUTDRIVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INPUTDRIVER, 0); }
	public KW_OUTPUTDRIVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTPUTDRIVER, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BY, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_SERDEPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
	public tableProperties(): TablePropertiesContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableFileFormat; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableFileFormat) {
			listener.enterTableFileFormat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableFileFormat) {
			listener.exitTableFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableFileFormat) {
			return visitor.visitTableFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableLocationContext extends ParserRuleContext {
	public KW_LOCATION(): TerminalNode { return this.getToken(HiveParser.KW_LOCATION, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableLocation; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableLocation) {
			listener.enterTableLocation(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableLocation) {
			listener.exitTableLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableLocation) {
			return visitor.visitTableLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeListContext extends ParserRuleContext {
	public columnNameType(): ColumnNameTypeContext[];
	public columnNameType(i: number): ColumnNameTypeContext;
	public columnNameType(i?: number): ColumnNameTypeContext | ColumnNameTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameTypeContext);
		} else {
			return this.getRuleContext(i, ColumnNameTypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameTypeList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameTypeList) {
			listener.enterColumnNameTypeList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameTypeList) {
			listener.exitColumnNameTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeList) {
			return visitor.visitColumnNameTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeOrConstraintListContext extends ParserRuleContext {
	public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext[];
	public columnNameTypeOrConstraint(i: number): ColumnNameTypeOrConstraintContext;
	public columnNameTypeOrConstraint(i?: number): ColumnNameTypeOrConstraintContext | ColumnNameTypeOrConstraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameTypeOrConstraintContext);
		} else {
			return this.getRuleContext(i, ColumnNameTypeOrConstraintContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameTypeOrConstraintList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameTypeOrConstraintList) {
			listener.enterColumnNameTypeOrConstraintList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameTypeOrConstraintList) {
			listener.exitColumnNameTypeOrConstraintList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeOrConstraintList) {
			return visitor.visitColumnNameTypeOrConstraintList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameColonTypeListContext extends ParserRuleContext {
	public columnNameColonType(): ColumnNameColonTypeContext[];
	public columnNameColonType(i: number): ColumnNameColonTypeContext;
	public columnNameColonType(i?: number): ColumnNameColonTypeContext | ColumnNameColonTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameColonTypeContext);
		} else {
			return this.getRuleContext(i, ColumnNameColonTypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameColonTypeList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameColonTypeList) {
			listener.enterColumnNameColonTypeList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameColonTypeList) {
			listener.exitColumnNameColonTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameColonTypeList) {
			return visitor.visitColumnNameColonTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameListContext extends ParserRuleContext {
	public columnName(): ColumnNameContext[];
	public columnName(i: number): ColumnNameContext;
	public columnName(i?: number): ColumnNameContext | ColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameContext);
		} else {
			return this.getRuleContext(i, ColumnNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameList) {
			listener.enterColumnNameList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameList) {
			listener.exitColumnNameList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameList) {
			return visitor.visitColumnNameList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnName) {
			listener.enterColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnName) {
			listener.exitColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnName) {
			return visitor.visitColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExtColumnNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.DOT);
		} else {
			return this.getToken(HiveParser.DOT, i);
		}
	}
	public KW_ELEM_TYPE(): TerminalNode[];
	public KW_ELEM_TYPE(i: number): TerminalNode;
	public KW_ELEM_TYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_ELEM_TYPE);
		} else {
			return this.getToken(HiveParser.KW_ELEM_TYPE, i);
		}
	}
	public KW_KEY_TYPE(): TerminalNode[];
	public KW_KEY_TYPE(i: number): TerminalNode;
	public KW_KEY_TYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_KEY_TYPE);
		} else {
			return this.getToken(HiveParser.KW_KEY_TYPE, i);
		}
	}
	public KW_VALUE_TYPE(): TerminalNode[];
	public KW_VALUE_TYPE(i: number): TerminalNode;
	public KW_VALUE_TYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_VALUE_TYPE);
		} else {
			return this.getToken(HiveParser.KW_VALUE_TYPE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_extColumnName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExtColumnName) {
			listener.enterExtColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExtColumnName) {
			listener.exitExtColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExtColumnName) {
			return visitor.visitExtColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameOrderListContext extends ParserRuleContext {
	public columnNameOrder(): ColumnNameOrderContext[];
	public columnNameOrder(i: number): ColumnNameOrderContext;
	public columnNameOrder(i?: number): ColumnNameOrderContext | ColumnNameOrderContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameOrderContext);
		} else {
			return this.getRuleContext(i, ColumnNameOrderContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameOrderList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameOrderList) {
			listener.enterColumnNameOrderList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameOrderList) {
			listener.exitColumnNameOrderList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameOrderList) {
			return visitor.visitColumnNameOrderList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnParenthesesListContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnNameList(): ColumnNameListContext {
		return this.getRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnParenthesesList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnParenthesesList) {
			listener.enterColumnParenthesesList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnParenthesesList) {
			listener.exitColumnParenthesesList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnParenthesesList) {
			return visitor.visitColumnParenthesesList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableValidateSpecificationContext extends ParserRuleContext {
	public enableSpecification(): EnableSpecificationContext | undefined {
		return this.tryGetRuleContext(0, EnableSpecificationContext);
	}
	public validateSpecification(): ValidateSpecificationContext | undefined {
		return this.tryGetRuleContext(0, ValidateSpecificationContext);
	}
	public enforcedSpecification(): EnforcedSpecificationContext | undefined {
		return this.tryGetRuleContext(0, EnforcedSpecificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_enableValidateSpecification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterEnableValidateSpecification) {
			listener.enterEnableValidateSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitEnableValidateSpecification) {
			listener.exitEnableValidateSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitEnableValidateSpecification) {
			return visitor.visitEnableValidateSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableSpecificationContext extends ParserRuleContext {
	public KW_ENABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ENABLE, 0); }
	public KW_DISABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DISABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_enableSpecification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterEnableSpecification) {
			listener.enterEnableSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitEnableSpecification) {
			listener.exitEnableSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitEnableSpecification) {
			return visitor.visitEnableSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValidateSpecificationContext extends ParserRuleContext {
	public KW_VALIDATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VALIDATE, 0); }
	public KW_NOVALIDATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOVALIDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_validateSpecification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterValidateSpecification) {
			listener.enterValidateSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitValidateSpecification) {
			listener.exitValidateSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValidateSpecification) {
			return visitor.visitValidateSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnforcedSpecificationContext extends ParserRuleContext {
	public KW_ENFORCED(): TerminalNode { return this.getToken(HiveParser.KW_ENFORCED, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_enforcedSpecification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterEnforcedSpecification) {
			listener.enterEnforcedSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitEnforcedSpecification) {
			listener.exitEnforcedSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitEnforcedSpecification) {
			return visitor.visitEnforcedSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelySpecificationContext extends ParserRuleContext {
	public KW_RELY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RELY, 0); }
	public KW_NORELY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NORELY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_relySpecification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRelySpecification) {
			listener.enterRelySpecification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRelySpecification) {
			listener.exitRelySpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRelySpecification) {
			return visitor.visitRelySpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateConstraintContext extends ParserRuleContext {
	public pkConstraint(): PkConstraintContext {
		return this.getRuleContext(0, PkConstraintContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsCreateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateConstraint) {
			listener.enterCreateConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateConstraint) {
			listener.exitCreateConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateConstraint) {
			return visitor.visitCreateConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterConstraintWithNameContext extends ParserRuleContext {
	public KW_CONSTRAINT(): TerminalNode { return this.getToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public pkConstraint(): PkConstraintContext {
		return this.getRuleContext(0, PkConstraintContext);
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsAlterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterConstraintWithName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterConstraintWithName) {
			listener.enterAlterConstraintWithName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterConstraintWithName) {
			listener.exitAlterConstraintWithName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterConstraintWithName) {
			return visitor.visitAlterConstraintWithName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PkConstraintContext extends ParserRuleContext {
	public _pkCols!: ColumnParenthesesListContext;
	public tableConstraintPrimaryKey(): TableConstraintPrimaryKeyContext {
		return this.getRuleContext(0, TableConstraintPrimaryKeyContext);
	}
	public columnParenthesesList(): ColumnParenthesesListContext {
		return this.getRuleContext(0, ColumnParenthesesListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_pkConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPkConstraint) {
			listener.enterPkConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPkConstraint) {
			listener.exitPkConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPkConstraint) {
			return visitor.visitPkConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateForeignKeyContext extends ParserRuleContext {
	public KW_FOREIGN(): TerminalNode { return this.getToken(HiveParser.KW_FOREIGN, 0); }
	public KW_KEY(): TerminalNode { return this.getToken(HiveParser.KW_KEY, 0); }
	public columnParenthesesList(): ColumnParenthesesListContext[];
	public columnParenthesesList(i: number): ColumnParenthesesListContext;
	public columnParenthesesList(i?: number): ColumnParenthesesListContext | ColumnParenthesesListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnParenthesesListContext);
		} else {
			return this.getRuleContext(i, ColumnParenthesesListContext);
		}
	}
	public KW_REFERENCES(): TerminalNode { return this.getToken(HiveParser.KW_REFERENCES, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsCreateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_createForeignKey; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCreateForeignKey) {
			listener.enterCreateForeignKey(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCreateForeignKey) {
			listener.exitCreateForeignKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateForeignKey) {
			return visitor.visitCreateForeignKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterForeignKeyWithNameContext extends ParserRuleContext {
	public KW_CONSTRAINT(): TerminalNode { return this.getToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_FOREIGN(): TerminalNode { return this.getToken(HiveParser.KW_FOREIGN, 0); }
	public KW_KEY(): TerminalNode { return this.getToken(HiveParser.KW_KEY, 0); }
	public columnParenthesesList(): ColumnParenthesesListContext[];
	public columnParenthesesList(i: number): ColumnParenthesesListContext;
	public columnParenthesesList(i?: number): ColumnParenthesesListContext | ColumnParenthesesListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnParenthesesListContext);
		} else {
			return this.getRuleContext(i, ColumnParenthesesListContext);
		}
	}
	public KW_REFERENCES(): TerminalNode { return this.getToken(HiveParser.KW_REFERENCES, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsAlterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterForeignKeyWithName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterForeignKeyWithName) {
			listener.enterAlterForeignKeyWithName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterForeignKeyWithName) {
			listener.exitAlterForeignKeyWithName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterForeignKeyWithName) {
			return visitor.visitAlterForeignKeyWithName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedValueElementContext extends ParserRuleContext {
	public skewedColumnValues(): SkewedColumnValuesContext | undefined {
		return this.tryGetRuleContext(0, SkewedColumnValuesContext);
	}
	public skewedColumnValuePairList(): SkewedColumnValuePairListContext | undefined {
		return this.tryGetRuleContext(0, SkewedColumnValuePairListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedValueElement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedValueElement) {
			listener.enterSkewedValueElement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedValueElement) {
			listener.exitSkewedValueElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedValueElement) {
			return visitor.visitSkewedValueElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValuePairListContext extends ParserRuleContext {
	public skewedColumnValuePair(): SkewedColumnValuePairContext[];
	public skewedColumnValuePair(i: number): SkewedColumnValuePairContext;
	public skewedColumnValuePair(i?: number): SkewedColumnValuePairContext | SkewedColumnValuePairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SkewedColumnValuePairContext);
		} else {
			return this.getRuleContext(i, SkewedColumnValuePairContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedColumnValuePairList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedColumnValuePairList) {
			listener.enterSkewedColumnValuePairList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedColumnValuePairList) {
			listener.exitSkewedColumnValuePairList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValuePairList) {
			return visitor.visitSkewedColumnValuePairList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValuePairContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public skewedColumnValues(): SkewedColumnValuesContext {
		return this.getRuleContext(0, SkewedColumnValuesContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedColumnValuePair; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedColumnValuePair) {
			listener.enterSkewedColumnValuePair(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedColumnValuePair) {
			listener.exitSkewedColumnValuePair(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValuePair) {
			return visitor.visitSkewedColumnValuePair(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValuesContext extends ParserRuleContext {
	public skewedColumnValue(): SkewedColumnValueContext[];
	public skewedColumnValue(i: number): SkewedColumnValueContext;
	public skewedColumnValue(i?: number): SkewedColumnValueContext | SkewedColumnValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SkewedColumnValueContext);
		} else {
			return this.getRuleContext(i, SkewedColumnValueContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedColumnValues; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedColumnValues) {
			listener.enterSkewedColumnValues(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedColumnValues) {
			listener.exitSkewedColumnValues(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValues) {
			return visitor.visitSkewedColumnValues(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValueContext extends ParserRuleContext {
	public constant(): ConstantContext {
		return this.getRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedColumnValue; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedColumnValue) {
			listener.enterSkewedColumnValue(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedColumnValue) {
			listener.exitSkewedColumnValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValue) {
			return visitor.visitSkewedColumnValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedValueLocationElementContext extends ParserRuleContext {
	public skewedColumnValue(): SkewedColumnValueContext | undefined {
		return this.tryGetRuleContext(0, SkewedColumnValueContext);
	}
	public skewedColumnValuePair(): SkewedColumnValuePairContext | undefined {
		return this.tryGetRuleContext(0, SkewedColumnValuePairContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_skewedValueLocationElement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSkewedValueLocationElement) {
			listener.enterSkewedValueLocationElement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSkewedValueLocationElement) {
			listener.exitSkewedValueLocationElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedValueLocationElement) {
			return visitor.visitSkewedValueLocationElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderSpecificationContext extends ParserRuleContext {
	public KW_ASC(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ASC, 0); }
	public KW_DESC(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_orderSpecification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterOrderSpecification) {
			listener.enterOrderSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitOrderSpecification) {
			listener.exitOrderSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitOrderSpecification) {
			return visitor.visitOrderSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NullOrderingContext extends ParserRuleContext {
	public KW_NULLS(): TerminalNode { return this.getToken(HiveParser.KW_NULLS, 0); }
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FIRST, 0); }
	public KW_LAST(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_nullOrdering; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterNullOrdering) {
			listener.enterNullOrdering(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitNullOrdering) {
			listener.exitNullOrdering(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitNullOrdering) {
			return visitor.visitNullOrdering(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameOrderContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public orderSpecification(): OrderSpecificationContext | undefined {
		return this.tryGetRuleContext(0, OrderSpecificationContext);
	}
	public nullOrdering(): NullOrderingContext | undefined {
		return this.tryGetRuleContext(0, NullOrderingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameOrder; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameOrder) {
			listener.enterColumnNameOrder(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameOrder) {
			listener.exitColumnNameOrder(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameOrder) {
			return visitor.visitColumnNameOrder(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameCommentListContext extends ParserRuleContext {
	public columnNameComment(): ColumnNameCommentContext[];
	public columnNameComment(i: number): ColumnNameCommentContext;
	public columnNameComment(i?: number): ColumnNameCommentContext | ColumnNameCommentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnNameCommentContext);
		} else {
			return this.getRuleContext(i, ColumnNameCommentContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameCommentList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameCommentList) {
			listener.enterColumnNameCommentList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameCommentList) {
			listener.exitColumnNameCommentList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameCommentList) {
			return visitor.visitColumnNameCommentList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameCommentContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameComment; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameComment) {
			listener.enterColumnNameComment(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameComment) {
			listener.exitColumnNameComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameComment) {
			return visitor.visitColumnNameComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnRefOrderContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public orderSpecification(): OrderSpecificationContext | undefined {
		return this.tryGetRuleContext(0, OrderSpecificationContext);
	}
	public nullOrdering(): NullOrderingContext | undefined {
		return this.tryGetRuleContext(0, NullOrderingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnRefOrder; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnRefOrder) {
			listener.enterColumnRefOrder(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnRefOrder) {
			listener.exitColumnRefOrder(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnRefOrder) {
			return visitor.visitColumnRefOrder(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public colType(): ColTypeContext {
		return this.getRuleContext(0, ColTypeContext);
	}
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameType) {
			listener.enterColumnNameType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameType) {
			listener.exitColumnNameType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameType) {
			return visitor.visitColumnNameType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeOrConstraintContext extends ParserRuleContext {
	public tableConstraint(): TableConstraintContext | undefined {
		return this.tryGetRuleContext(0, TableConstraintContext);
	}
	public columnNameTypeConstraint(): ColumnNameTypeConstraintContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameTypeConstraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameTypeOrConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameTypeOrConstraint) {
			listener.enterColumnNameTypeOrConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameTypeOrConstraint) {
			listener.exitColumnNameTypeOrConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeOrConstraint) {
			return visitor.visitColumnNameTypeOrConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableConstraintContext extends ParserRuleContext {
	public createForeignKey(): CreateForeignKeyContext | undefined {
		return this.tryGetRuleContext(0, CreateForeignKeyContext);
	}
	public createConstraint(): CreateConstraintContext | undefined {
		return this.tryGetRuleContext(0, CreateConstraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableConstraint) {
			listener.enterTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableConstraint) {
			listener.exitTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableConstraint) {
			return visitor.visitTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeConstraintContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public colType(): ColTypeContext {
		return this.getRuleContext(0, ColTypeContext);
	}
	public columnConstraint(): ColumnConstraintContext | undefined {
		return this.tryGetRuleContext(0, ColumnConstraintContext);
	}
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameTypeConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameTypeConstraint) {
			listener.enterColumnNameTypeConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameTypeConstraint) {
			listener.exitColumnNameTypeConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeConstraint) {
			return visitor.visitColumnNameTypeConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnConstraintContext extends ParserRuleContext {
	public foreignKeyConstraint(): ForeignKeyConstraintContext | undefined {
		return this.tryGetRuleContext(0, ForeignKeyConstraintContext);
	}
	public colConstraint(): ColConstraintContext | undefined {
		return this.tryGetRuleContext(0, ColConstraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnConstraint) {
			listener.enterColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnConstraint) {
			listener.exitColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnConstraint) {
			return visitor.visitColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ForeignKeyConstraintContext extends ParserRuleContext {
	public KW_REFERENCES(): TerminalNode { return this.getToken(HiveParser.KW_REFERENCES, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnName(): ColumnNameContext {
		return this.getRuleContext(0, ColumnNameContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsCreateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_foreignKeyConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterForeignKeyConstraint) {
			listener.enterForeignKeyConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitForeignKeyConstraint) {
			listener.exitForeignKeyConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitForeignKeyConstraint) {
			return visitor.visitForeignKeyConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColConstraintContext extends ParserRuleContext {
	public tableConstraintPrimaryKey(): TableConstraintPrimaryKeyContext {
		return this.getRuleContext(0, TableConstraintPrimaryKeyContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsCreateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_colConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColConstraint) {
			listener.enterColConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColConstraint) {
			listener.exitColConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColConstraint) {
			return visitor.visitColConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterColumnConstraintContext extends ParserRuleContext {
	public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext | undefined {
		return this.tryGetRuleContext(0, AlterForeignKeyConstraintContext);
	}
	public alterColConstraint(): AlterColConstraintContext | undefined {
		return this.tryGetRuleContext(0, AlterColConstraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterColumnConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterColumnConstraint) {
			listener.enterAlterColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterColumnConstraint) {
			listener.exitAlterColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterColumnConstraint) {
			return visitor.visitAlterColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterForeignKeyConstraintContext extends ParserRuleContext {
	public KW_REFERENCES(): TerminalNode { return this.getToken(HiveParser.KW_REFERENCES, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnName(): ColumnNameContext {
		return this.getRuleContext(0, ColumnNameContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsAlterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterForeignKeyConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterForeignKeyConstraint) {
			listener.enterAlterForeignKeyConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterForeignKeyConstraint) {
			listener.exitAlterForeignKeyConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterForeignKeyConstraint) {
			return visitor.visitAlterForeignKeyConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterColConstraintContext extends ParserRuleContext {
	public tableConstraintPrimaryKey(): TableConstraintPrimaryKeyContext {
		return this.getRuleContext(0, TableConstraintPrimaryKeyContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONSTRAINT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext | undefined {
		return this.tryGetRuleContext(0, ConstraintOptsAlterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_alterColConstraint; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAlterColConstraint) {
			listener.enterAlterColConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAlterColConstraint) {
			listener.exitAlterColConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterColConstraint) {
			return visitor.visitAlterColConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableConstraintPrimaryKeyContext extends ParserRuleContext {
	public KW_PRIMARY(): TerminalNode { return this.getToken(HiveParser.KW_PRIMARY, 0); }
	public KW_KEY(): TerminalNode { return this.getToken(HiveParser.KW_KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableConstraintPrimaryKey; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableConstraintPrimaryKey) {
			listener.enterTableConstraintPrimaryKey(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableConstraintPrimaryKey) {
			listener.exitTableConstraintPrimaryKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableConstraintPrimaryKey) {
			return visitor.visitTableConstraintPrimaryKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintOptsCreateContext extends ParserRuleContext {
	public enableValidateSpecification(): EnableValidateSpecificationContext {
		return this.getRuleContext(0, EnableValidateSpecificationContext);
	}
	public relySpecification(): RelySpecificationContext {
		return this.getRuleContext(0, RelySpecificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_constraintOptsCreate; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterConstraintOptsCreate) {
			listener.enterConstraintOptsCreate(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitConstraintOptsCreate) {
			listener.exitConstraintOptsCreate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitConstraintOptsCreate) {
			return visitor.visitConstraintOptsCreate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintOptsAlterContext extends ParserRuleContext {
	public enableValidateSpecification(): EnableValidateSpecificationContext {
		return this.getRuleContext(0, EnableValidateSpecificationContext);
	}
	public relySpecification(): RelySpecificationContext {
		return this.getRuleContext(0, RelySpecificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_constraintOptsAlter; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterConstraintOptsAlter) {
			listener.enterConstraintOptsAlter(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitConstraintOptsAlter) {
			listener.exitConstraintOptsAlter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitConstraintOptsAlter) {
			return visitor.visitConstraintOptsAlter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameColonTypeContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public COLON(): TerminalNode { return this.getToken(HiveParser.COLON, 0); }
	public colType(): ColTypeContext {
		return this.getRuleContext(0, ColTypeContext);
	}
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnNameColonType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnNameColonType) {
			listener.enterColumnNameColonType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnNameColonType) {
			listener.exitColumnNameColonType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameColonType) {
			return visitor.visitColumnNameColonType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColTypeContext extends ParserRuleContext {
	public type_db_col(): Type_db_colContext {
		return this.getRuleContext(0, Type_db_colContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_colType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColType) {
			listener.enterColType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColType) {
			listener.exitColType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColType) {
			return visitor.visitColType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColTypeListContext extends ParserRuleContext {
	public colType(): ColTypeContext[];
	public colType(i: number): ColTypeContext;
	public colType(i?: number): ColTypeContext | ColTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColTypeContext);
		} else {
			return this.getRuleContext(i, ColTypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_colTypeList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColTypeList) {
			listener.enterColTypeList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColTypeList) {
			listener.exitColTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColTypeList) {
			return visitor.visitColTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_db_colContext extends ParserRuleContext {
	public primitiveType(): PrimitiveTypeContext | undefined {
		return this.tryGetRuleContext(0, PrimitiveTypeContext);
	}
	public listType(): ListTypeContext | undefined {
		return this.tryGetRuleContext(0, ListTypeContext);
	}
	public structType(): StructTypeContext | undefined {
		return this.tryGetRuleContext(0, StructTypeContext);
	}
	public mapType(): MapTypeContext | undefined {
		return this.tryGetRuleContext(0, MapTypeContext);
	}
	public unionType(): UnionTypeContext | undefined {
		return this.tryGetRuleContext(0, UnionTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_type_db_col; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterType_db_col) {
			listener.enterType_db_col(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitType_db_col) {
			listener.exitType_db_col(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitType_db_col) {
			return visitor.visitType_db_col(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrimitiveTypeContext extends ParserRuleContext {
	public KW_TINYINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TINYINT, 0); }
	public KW_SMALLINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SMALLINT, 0); }
	public KW_INT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INT, 0); }
	public KW_BIGINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BIGINT, 0); }
	public KW_BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BOOLEAN, 0); }
	public KW_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FLOAT, 0); }
	public KW_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DOUBLE, 0); }
	public KW_PRECISION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PRECISION, 0); }
	public KW_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATE, 0); }
	public KW_DATETIME(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATETIME, 0); }
	public KW_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TIMESTAMP, 0); }
	public KW_TIMESTAMPLOCALTZ(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCAL, 0); }
	public KW_TIME(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TIME, 0); }
	public KW_ZONE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ZONE, 0); }
	public KW_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STRING, 0); }
	public KW_BINARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BINARY, 0); }
	public KW_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DECIMAL, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public Number(): TerminalNode[];
	public Number(i: number): TerminalNode;
	public Number(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.Number);
		} else {
			return this.getToken(HiveParser.Number, i);
		}
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.COMMA, 0); }
	public KW_VARCHAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VARCHAR, 0); }
	public KW_CHAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CHAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_primitiveType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrimitiveType) {
			listener.enterPrimitiveType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrimitiveType) {
			listener.exitPrimitiveType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrimitiveType) {
			return visitor.visitPrimitiveType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListTypeContext extends ParserRuleContext {
	public KW_ARRAY(): TerminalNode { return this.getToken(HiveParser.KW_ARRAY, 0); }
	public LESSTHAN(): TerminalNode { return this.getToken(HiveParser.LESSTHAN, 0); }
	public type_db_col(): Type_db_colContext {
		return this.getRuleContext(0, Type_db_colContext);
	}
	public GREATERTHAN(): TerminalNode { return this.getToken(HiveParser.GREATERTHAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_listType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterListType) {
			listener.enterListType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitListType) {
			listener.exitListType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitListType) {
			return visitor.visitListType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StructTypeContext extends ParserRuleContext {
	public KW_STRUCT(): TerminalNode { return this.getToken(HiveParser.KW_STRUCT, 0); }
	public LESSTHAN(): TerminalNode { return this.getToken(HiveParser.LESSTHAN, 0); }
	public columnNameColonTypeList(): ColumnNameColonTypeListContext {
		return this.getRuleContext(0, ColumnNameColonTypeListContext);
	}
	public GREATERTHAN(): TerminalNode { return this.getToken(HiveParser.GREATERTHAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_structType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterStructType) {
			listener.enterStructType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitStructType) {
			listener.exitStructType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStructType) {
			return visitor.visitStructType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapTypeContext extends ParserRuleContext {
	public KW_MAP(): TerminalNode { return this.getToken(HiveParser.KW_MAP, 0); }
	public LESSTHAN(): TerminalNode { return this.getToken(HiveParser.LESSTHAN, 0); }
	public primitiveType(): PrimitiveTypeContext {
		return this.getRuleContext(0, PrimitiveTypeContext);
	}
	public COMMA(): TerminalNode { return this.getToken(HiveParser.COMMA, 0); }
	public type_db_col(): Type_db_colContext {
		return this.getRuleContext(0, Type_db_colContext);
	}
	public GREATERTHAN(): TerminalNode { return this.getToken(HiveParser.GREATERTHAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_mapType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterMapType) {
			listener.enterMapType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitMapType) {
			listener.exitMapType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitMapType) {
			return visitor.visitMapType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnionTypeContext extends ParserRuleContext {
	public KW_UNIONTYPE(): TerminalNode { return this.getToken(HiveParser.KW_UNIONTYPE, 0); }
	public LESSTHAN(): TerminalNode { return this.getToken(HiveParser.LESSTHAN, 0); }
	public colTypeList(): ColTypeListContext {
		return this.getRuleContext(0, ColTypeListContext);
	}
	public GREATERTHAN(): TerminalNode { return this.getToken(HiveParser.GREATERTHAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_unionType; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUnionType) {
			listener.enterUnionType(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUnionType) {
			listener.exitUnionType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUnionType) {
			return visitor.visitUnionType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetOperatorContext extends ParserRuleContext {
	public KW_UNION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNION, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALL, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DISTINCT, 0); }
	public KW_INTERSECT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INTERSECT, 0); }
	public KW_EXCEPT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXCEPT, 0); }
	public KW_MINUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_setOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSetOperator) {
			listener.enterSetOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSetOperator) {
			listener.exitSetOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetOperator) {
			return visitor.visitSetOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryStatementExpressionContext extends ParserRuleContext {
	public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
		return this.getRuleContext(0, QueryStatementExpressionBodyContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_queryStatementExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterQueryStatementExpression) {
			listener.enterQueryStatementExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitQueryStatementExpression) {
			listener.exitQueryStatementExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitQueryStatementExpression) {
			return visitor.visitQueryStatementExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryStatementExpressionBodyContext extends ParserRuleContext {
	public fromStatement(): FromStatementContext | undefined {
		return this.tryGetRuleContext(0, FromStatementContext);
	}
	public regularBody(): RegularBodyContext | undefined {
		return this.tryGetRuleContext(0, RegularBodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_queryStatementExpressionBody; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterQueryStatementExpressionBody) {
			listener.enterQueryStatementExpressionBody(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitQueryStatementExpressionBody) {
			listener.exitQueryStatementExpressionBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitQueryStatementExpressionBody) {
			return visitor.visitQueryStatementExpressionBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(HiveParser.KW_WITH, 0); }
	public cteStatement(): CteStatementContext[];
	public cteStatement(i: number): CteStatementContext;
	public cteStatement(i?: number): CteStatementContext | CteStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CteStatementContext);
		} else {
			return this.getRuleContext(i, CteStatementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_withClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWithClause) {
			listener.enterWithClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWithClause) {
			listener.exitWithClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWithClause) {
			return visitor.visitWithClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CteStatementContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public queryStatementExpression(): QueryStatementExpressionContext {
		return this.getRuleContext(0, QueryStatementExpressionContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_cteStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCteStatement) {
			listener.enterCteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCteStatement) {
			listener.exitCteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCteStatement) {
			return visitor.visitCteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromStatementContext extends ParserRuleContext {
	public singleFromStatement(): SingleFromStatementContext[];
	public singleFromStatement(i: number): SingleFromStatementContext;
	public singleFromStatement(i?: number): SingleFromStatementContext | SingleFromStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SingleFromStatementContext);
		} else {
			return this.getRuleContext(i, SingleFromStatementContext);
		}
	}
	public setOperator(): SetOperatorContext[];
	public setOperator(i: number): SetOperatorContext;
	public setOperator(i?: number): SetOperatorContext | SetOperatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetOperatorContext);
		} else {
			return this.getRuleContext(i, SetOperatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_fromStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFromStatement) {
			listener.enterFromStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFromStatement) {
			listener.exitFromStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFromStatement) {
			return visitor.visitFromStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleFromStatementContext extends ParserRuleContext {
	public fromClause(): FromClauseContext {
		return this.getRuleContext(0, FromClauseContext);
	}
	public body(): BodyContext[];
	public body(i: number): BodyContext;
	public body(i?: number): BodyContext | BodyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BodyContext);
		} else {
			return this.getRuleContext(i, BodyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_singleFromStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSingleFromStatement) {
			listener.enterSingleFromStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSingleFromStatement) {
			listener.exitSingleFromStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSingleFromStatement) {
			return visitor.visitSingleFromStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RegularBodyContext extends ParserRuleContext {
	public insertClause(): InsertClauseContext | undefined {
		return this.tryGetRuleContext(0, InsertClauseContext);
	}
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public valuesClause(): ValuesClauseContext | undefined {
		return this.tryGetRuleContext(0, ValuesClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_regularBody; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRegularBody) {
			listener.enterRegularBody(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRegularBody) {
			listener.exitRegularBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRegularBody) {
			return visitor.visitRegularBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AtomSelectStatementContext extends ParserRuleContext {
	public selectClause(): SelectClauseContext | undefined {
		return this.tryGetRuleContext(0, SelectClauseContext);
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public groupByClause(): GroupByClauseContext | undefined {
		return this.tryGetRuleContext(0, GroupByClauseContext);
	}
	public havingClause(): HavingClauseContext | undefined {
		return this.tryGetRuleContext(0, HavingClauseContext);
	}
	public window_clause(): Window_clauseContext | undefined {
		return this.tryGetRuleContext(0, Window_clauseContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_atomSelectStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAtomSelectStatement) {
			listener.enterAtomSelectStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAtomSelectStatement) {
			listener.exitAtomSelectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAtomSelectStatement) {
			return visitor.visitAtomSelectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	public atomSelectStatement(): AtomSelectStatementContext {
		return this.getRuleContext(0, AtomSelectStatementContext);
	}
	public setOpSelectStatement(): SetOpSelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SetOpSelectStatementContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public clusterByClause(): ClusterByClauseContext | undefined {
		return this.tryGetRuleContext(0, ClusterByClauseContext);
	}
	public distributeByClause(): DistributeByClauseContext | undefined {
		return this.tryGetRuleContext(0, DistributeByClauseContext);
	}
	public sortByClause(): SortByClauseContext | undefined {
		return this.tryGetRuleContext(0, SortByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectStatement) {
			listener.enterSelectStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectStatement) {
			listener.exitSelectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectStatement) {
			return visitor.visitSelectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetOpSelectStatementContext extends ParserRuleContext {
	public setOperator(): SetOperatorContext[];
	public setOperator(i: number): SetOperatorContext;
	public setOperator(i?: number): SetOperatorContext | SetOperatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetOperatorContext);
		} else {
			return this.getRuleContext(i, SetOperatorContext);
		}
	}
	public atomSelectStatement(): AtomSelectStatementContext[];
	public atomSelectStatement(i: number): AtomSelectStatementContext;
	public atomSelectStatement(i?: number): AtomSelectStatementContext | AtomSelectStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AtomSelectStatementContext);
		} else {
			return this.getRuleContext(i, AtomSelectStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_setOpSelectStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSetOpSelectStatement) {
			listener.enterSetOpSelectStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSetOpSelectStatement) {
			listener.exitSetOpSelectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetOpSelectStatement) {
			return visitor.visitSetOpSelectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectStatementWithCTEContext extends ParserRuleContext {
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectStatementWithCTE; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectStatementWithCTE) {
			listener.enterSelectStatementWithCTE(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectStatementWithCTE) {
			listener.exitSelectStatementWithCTE(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectStatementWithCTE) {
			return visitor.visitSelectStatementWithCTE(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BodyContext extends ParserRuleContext {
	public insertClause(): InsertClauseContext | undefined {
		return this.tryGetRuleContext(0, InsertClauseContext);
	}
	public selectClause(): SelectClauseContext {
		return this.getRuleContext(0, SelectClauseContext);
	}
	public lateralView(): LateralViewContext | undefined {
		return this.tryGetRuleContext(0, LateralViewContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public groupByClause(): GroupByClauseContext | undefined {
		return this.tryGetRuleContext(0, GroupByClauseContext);
	}
	public havingClause(): HavingClauseContext | undefined {
		return this.tryGetRuleContext(0, HavingClauseContext);
	}
	public window_clause(): Window_clauseContext | undefined {
		return this.tryGetRuleContext(0, Window_clauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public clusterByClause(): ClusterByClauseContext | undefined {
		return this.tryGetRuleContext(0, ClusterByClauseContext);
	}
	public distributeByClause(): DistributeByClauseContext | undefined {
		return this.tryGetRuleContext(0, DistributeByClauseContext);
	}
	public sortByClause(): SortByClauseContext | undefined {
		return this.tryGetRuleContext(0, SortByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_body; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterBody) {
			listener.enterBody(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitBody) {
			listener.exitBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBody) {
			return visitor.visitBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertClauseContext extends ParserRuleContext {
	public KW_INSERT(): TerminalNode { return this.getToken(HiveParser.KW_INSERT, 0); }
	public KW_OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OVERWRITE, 0); }
	public destination(): DestinationContext | undefined {
		return this.tryGetRuleContext(0, DestinationContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public KW_INTO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INTO, 0); }
	public tableOrPartition(): TableOrPartitionContext | undefined {
		return this.tryGetRuleContext(0, TableOrPartitionContext);
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public columnNameList(): ColumnNameListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameListContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_insertClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterInsertClause) {
			listener.enterInsertClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitInsertClause) {
			listener.exitInsertClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitInsertClause) {
			return visitor.visitInsertClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DestinationContext extends ParserRuleContext {
	public KW_DIRECTORY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DIRECTORY, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCAL, 0); }
	public tableRowFormat(): TableRowFormatContext | undefined {
		return this.tryGetRuleContext(0, TableRowFormatContext);
	}
	public tableFileFormat(): TableFileFormatContext | undefined {
		return this.tryGetRuleContext(0, TableFileFormatContext);
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public tableOrPartition(): TableOrPartitionContext | undefined {
		return this.tryGetRuleContext(0, TableOrPartitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_destination; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDestination) {
			listener.enterDestination(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDestination) {
			listener.exitDestination(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDestination) {
			return visitor.visitDestination(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	public KW_LIMIT(): TerminalNode { return this.getToken(HiveParser.KW_LIMIT, 0); }
	public Number(): TerminalNode[];
	public Number(i: number): TerminalNode;
	public Number(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.Number);
		} else {
			return this.getToken(HiveParser.Number, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.COMMA, 0); }
	public KW_OFFSET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OFFSET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_limitClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLimitClause) {
			listener.enterLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLimitClause) {
			listener.exitLimitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLimitClause) {
			return visitor.visitLimitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	public KW_DELETE(): TerminalNode { return this.getToken(HiveParser.KW_DELETE, 0); }
	public KW_FROM(): TerminalNode { return this.getToken(HiveParser.KW_FROM, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_deleteStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDeleteStatement) {
			listener.enterDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDeleteStatement) {
			listener.exitDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDeleteStatement) {
			return visitor.visitDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnAssignmentClauseContext extends ParserRuleContext {
	public tableOrColumn(): TableOrColumnContext {
		return this.getRuleContext(0, TableOrColumnContext);
	}
	public EQUAL(): TerminalNode { return this.getToken(HiveParser.EQUAL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnAssignmentClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnAssignmentClause) {
			listener.enterColumnAssignmentClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnAssignmentClause) {
			listener.exitColumnAssignmentClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnAssignmentClause) {
			return visitor.visitColumnAssignmentClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetColumnsClauseContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public columnAssignmentClause(): ColumnAssignmentClauseContext[];
	public columnAssignmentClause(i: number): ColumnAssignmentClauseContext;
	public columnAssignmentClause(i?: number): ColumnAssignmentClauseContext | ColumnAssignmentClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnAssignmentClauseContext);
		} else {
			return this.getRuleContext(i, ColumnAssignmentClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_setColumnsClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSetColumnsClause) {
			listener.enterSetColumnsClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSetColumnsClause) {
			listener.exitSetColumnsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetColumnsClause) {
			return visitor.visitSetColumnsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	public KW_UPDATE(): TerminalNode { return this.getToken(HiveParser.KW_UPDATE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public setColumnsClause(): SetColumnsClauseContext {
		return this.getRuleContext(0, SetColumnsClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_updateStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUpdateStatement) {
			listener.enterUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUpdateStatement) {
			listener.exitUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUpdateStatement) {
			return visitor.visitUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SqlTransactionStatementContext extends ParserRuleContext {
	public startTransactionStatement(): StartTransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, StartTransactionStatementContext);
	}
	public commitStatement(): CommitStatementContext | undefined {
		return this.tryGetRuleContext(0, CommitStatementContext);
	}
	public rollbackStatement(): RollbackStatementContext | undefined {
		return this.tryGetRuleContext(0, RollbackStatementContext);
	}
	public setAutoCommitStatement(): SetAutoCommitStatementContext | undefined {
		return this.tryGetRuleContext(0, SetAutoCommitStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_sqlTransactionStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSqlTransactionStatement) {
			listener.enterSqlTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSqlTransactionStatement) {
			listener.exitSqlTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSqlTransactionStatement) {
			return visitor.visitSqlTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartTransactionStatementContext extends ParserRuleContext {
	public KW_START(): TerminalNode { return this.getToken(HiveParser.KW_START, 0); }
	public KW_TRANSACTION(): TerminalNode { return this.getToken(HiveParser.KW_TRANSACTION, 0); }
	public transactionMode(): TransactionModeContext[];
	public transactionMode(i: number): TransactionModeContext;
	public transactionMode(i?: number): TransactionModeContext | TransactionModeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionModeContext);
		} else {
			return this.getRuleContext(i, TransactionModeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_startTransactionStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterStartTransactionStatement) {
			listener.enterStartTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitStartTransactionStatement) {
			listener.exitStartTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStartTransactionStatement) {
			return visitor.visitStartTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	public isolationLevel(): IsolationLevelContext | undefined {
		return this.tryGetRuleContext(0, IsolationLevelContext);
	}
	public transactionAccessMode(): TransactionAccessModeContext | undefined {
		return this.tryGetRuleContext(0, TransactionAccessModeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_transactionMode; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTransactionMode) {
			listener.enterTransactionMode(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTransactionMode) {
			listener.exitTransactionMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTransactionMode) {
			return visitor.visitTransactionMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionAccessModeContext extends ParserRuleContext {
	public KW_READ(): TerminalNode { return this.getToken(HiveParser.KW_READ, 0); }
	public KW_ONLY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ONLY, 0); }
	public KW_WRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_transactionAccessMode; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTransactionAccessMode) {
			listener.enterTransactionAccessMode(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTransactionAccessMode) {
			listener.exitTransactionAccessMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTransactionAccessMode) {
			return visitor.visitTransactionAccessMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IsolationLevelContext extends ParserRuleContext {
	public KW_ISOLATION(): TerminalNode { return this.getToken(HiveParser.KW_ISOLATION, 0); }
	public KW_LEVEL(): TerminalNode { return this.getToken(HiveParser.KW_LEVEL, 0); }
	public levelOfIsolation(): LevelOfIsolationContext {
		return this.getRuleContext(0, LevelOfIsolationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_isolationLevel; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIsolationLevel) {
			listener.enterIsolationLevel(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIsolationLevel) {
			listener.exitIsolationLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIsolationLevel) {
			return visitor.visitIsolationLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LevelOfIsolationContext extends ParserRuleContext {
	public KW_SNAPSHOT(): TerminalNode { return this.getToken(HiveParser.KW_SNAPSHOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_levelOfIsolation; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLevelOfIsolation) {
			listener.enterLevelOfIsolation(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLevelOfIsolation) {
			listener.exitLevelOfIsolation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLevelOfIsolation) {
			return visitor.visitLevelOfIsolation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommitStatementContext extends ParserRuleContext {
	public KW_COMMIT(): TerminalNode { return this.getToken(HiveParser.KW_COMMIT, 0); }
	public KW_WORK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_commitStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCommitStatement) {
			listener.enterCommitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCommitStatement) {
			listener.exitCommitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCommitStatement) {
			return visitor.visitCommitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollbackStatementContext extends ParserRuleContext {
	public KW_ROLLBACK(): TerminalNode { return this.getToken(HiveParser.KW_ROLLBACK, 0); }
	public KW_WORK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rollbackStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRollbackStatement) {
			listener.enterRollbackStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRollbackStatement) {
			listener.exitRollbackStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRollbackStatement) {
			return visitor.visitRollbackStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetAutoCommitStatementContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(HiveParser.KW_SET, 0); }
	public KW_AUTOCOMMIT(): TerminalNode { return this.getToken(HiveParser.KW_AUTOCOMMIT, 0); }
	public booleanValueTok(): BooleanValueTokContext {
		return this.getRuleContext(0, BooleanValueTokContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_setAutoCommitStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSetAutoCommitStatement) {
			listener.enterSetAutoCommitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSetAutoCommitStatement) {
			listener.exitSetAutoCommitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetAutoCommitStatement) {
			return visitor.visitSetAutoCommitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AbortTransactionStatementContext extends ParserRuleContext {
	public KW_ABORT(): TerminalNode { return this.getToken(HiveParser.KW_ABORT, 0); }
	public KW_TRANSACTIONS(): TerminalNode { return this.getToken(HiveParser.KW_TRANSACTIONS, 0); }
	public Number(): TerminalNode[];
	public Number(i: number): TerminalNode;
	public Number(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.Number);
		} else {
			return this.getToken(HiveParser.Number, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_abortTransactionStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAbortTransactionStatement) {
			listener.enterAbortTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAbortTransactionStatement) {
			listener.exitAbortTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAbortTransactionStatement) {
			return visitor.visitAbortTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeStatementContext extends ParserRuleContext {
	public KW_MERGE(): TerminalNode { return this.getToken(HiveParser.KW_MERGE, 0); }
	public KW_INTO(): TerminalNode { return this.getToken(HiveParser.KW_INTO, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public KW_USING(): TerminalNode { return this.getToken(HiveParser.KW_USING, 0); }
	public joinSourcePart(): JoinSourcePartContext {
		return this.getRuleContext(0, JoinSourcePartContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public whenClauses(): WhenClausesContext {
		return this.getRuleContext(0, WhenClausesContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_mergeStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterMergeStatement) {
			listener.enterMergeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitMergeStatement) {
			listener.exitMergeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitMergeStatement) {
			return visitor.visitMergeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenClausesContext extends ParserRuleContext {
	public whenMatchedAndClause(): WhenMatchedAndClauseContext[];
	public whenMatchedAndClause(i: number): WhenMatchedAndClauseContext;
	public whenMatchedAndClause(i?: number): WhenMatchedAndClauseContext | WhenMatchedAndClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenMatchedAndClauseContext);
		} else {
			return this.getRuleContext(i, WhenMatchedAndClauseContext);
		}
	}
	public whenMatchedThenClause(): WhenMatchedThenClauseContext[];
	public whenMatchedThenClause(i: number): WhenMatchedThenClauseContext;
	public whenMatchedThenClause(i?: number): WhenMatchedThenClauseContext | WhenMatchedThenClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenMatchedThenClauseContext);
		} else {
			return this.getRuleContext(i, WhenMatchedThenClauseContext);
		}
	}
	public whenNotMatchedClause(): WhenNotMatchedClauseContext | undefined {
		return this.tryGetRuleContext(0, WhenNotMatchedClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_whenClauses; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWhenClauses) {
			listener.enterWhenClauses(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWhenClauses) {
			listener.exitWhenClauses(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenClauses) {
			return visitor.visitWhenClauses(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenNotMatchedClauseContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(HiveParser.KW_WHEN, 0); }
	public KW_NOT(): TerminalNode { return this.getToken(HiveParser.KW_NOT, 0); }
	public KW_MATCHED(): TerminalNode { return this.getToken(HiveParser.KW_MATCHED, 0); }
	public KW_THEN(): TerminalNode { return this.getToken(HiveParser.KW_THEN, 0); }
	public KW_INSERT(): TerminalNode { return this.getToken(HiveParser.KW_INSERT, 0); }
	public KW_VALUES(): TerminalNode { return this.getToken(HiveParser.KW_VALUES, 0); }
	public valueRowConstructor(): ValueRowConstructorContext {
		return this.getRuleContext(0, ValueRowConstructorContext);
	}
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AND, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_whenNotMatchedClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWhenNotMatchedClause) {
			listener.enterWhenNotMatchedClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWhenNotMatchedClause) {
			listener.exitWhenNotMatchedClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenNotMatchedClause) {
			return visitor.visitWhenNotMatchedClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenMatchedAndClauseContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(HiveParser.KW_WHEN, 0); }
	public KW_MATCHED(): TerminalNode { return this.getToken(HiveParser.KW_MATCHED, 0); }
	public KW_AND(): TerminalNode { return this.getToken(HiveParser.KW_AND, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public KW_THEN(): TerminalNode { return this.getToken(HiveParser.KW_THEN, 0); }
	public updateOrDelete(): UpdateOrDeleteContext {
		return this.getRuleContext(0, UpdateOrDeleteContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_whenMatchedAndClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWhenMatchedAndClause) {
			listener.enterWhenMatchedAndClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWhenMatchedAndClause) {
			listener.exitWhenMatchedAndClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenMatchedAndClause) {
			return visitor.visitWhenMatchedAndClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenMatchedThenClauseContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(HiveParser.KW_WHEN, 0); }
	public KW_MATCHED(): TerminalNode { return this.getToken(HiveParser.KW_MATCHED, 0); }
	public KW_THEN(): TerminalNode { return this.getToken(HiveParser.KW_THEN, 0); }
	public updateOrDelete(): UpdateOrDeleteContext {
		return this.getRuleContext(0, UpdateOrDeleteContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_whenMatchedThenClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWhenMatchedThenClause) {
			listener.enterWhenMatchedThenClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWhenMatchedThenClause) {
			listener.exitWhenMatchedThenClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenMatchedThenClause) {
			return visitor.visitWhenMatchedThenClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateOrDeleteContext extends ParserRuleContext {
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UPDATE, 0); }
	public setColumnsClause(): SetColumnsClauseContext | undefined {
		return this.tryGetRuleContext(0, SetColumnsClauseContext);
	}
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_updateOrDelete; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUpdateOrDelete) {
			listener.enterUpdateOrDelete(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUpdateOrDelete) {
			listener.exitUpdateOrDelete(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUpdateOrDelete) {
			return visitor.visitUpdateOrDelete(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KillQueryStatementContext extends ParserRuleContext {
	public KW_KILL(): TerminalNode { return this.getToken(HiveParser.KW_KILL, 0); }
	public KW_QUERY(): TerminalNode { return this.getToken(HiveParser.KW_QUERY, 0); }
	public StringLiteral(): TerminalNode[];
	public StringLiteral(i: number): TerminalNode;
	public StringLiteral(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.StringLiteral);
		} else {
			return this.getToken(HiveParser.StringLiteral, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_killQueryStatement; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterKillQueryStatement) {
			listener.enterKillQueryStatement(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitKillQueryStatement) {
			listener.exitKillQueryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitKillQueryStatement) {
			return visitor.visitKillQueryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectClauseContext extends ParserRuleContext {
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SELECT, 0); }
	public QUERY_HINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.QUERY_HINT, 0); }
	public selectList(): SelectListContext | undefined {
		return this.tryGetRuleContext(0, SelectListContext);
	}
	public KW_TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TRANSFORM, 0); }
	public selectTrfmClause(): SelectTrfmClauseContext | undefined {
		return this.tryGetRuleContext(0, SelectTrfmClauseContext);
	}
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALL, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DISTINCT, 0); }
	public trfmClause(): TrfmClauseContext | undefined {
		return this.tryGetRuleContext(0, TrfmClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectClause) {
			listener.enterSelectClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectClause) {
			listener.exitSelectClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectClause) {
			return visitor.visitSelectClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectListContext extends ParserRuleContext {
	public selectItem(): SelectItemContext[];
	public selectItem(i: number): SelectItemContext;
	public selectItem(i?: number): SelectItemContext | SelectItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectItemContext);
		} else {
			return this.getRuleContext(i, SelectItemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectList) {
			listener.enterSelectList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectList) {
			listener.exitSelectList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectList) {
			return visitor.visitSelectList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectTrfmClauseContext extends ParserRuleContext {
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.LPAREN);
		} else {
			return this.getToken(HiveParser.LPAREN, i);
		}
	}
	public selectExpressionList(): SelectExpressionListContext {
		return this.getRuleContext(0, SelectExpressionListContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.RPAREN);
		} else {
			return this.getToken(HiveParser.RPAREN, i);
		}
	}
	public KW_USING(): TerminalNode { return this.getToken(HiveParser.KW_USING, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public rowFormat(): RowFormatContext[];
	public rowFormat(i: number): RowFormatContext;
	public rowFormat(i?: number): RowFormatContext | RowFormatContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowFormatContext);
		} else {
			return this.getRuleContext(i, RowFormatContext);
		}
	}
	public recordWriter(): RecordWriterContext | undefined {
		return this.tryGetRuleContext(0, RecordWriterContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public recordReader(): RecordReaderContext | undefined {
		return this.tryGetRuleContext(0, RecordReaderContext);
	}
	public aliasList(): AliasListContext | undefined {
		return this.tryGetRuleContext(0, AliasListContext);
	}
	public columnNameTypeList(): ColumnNameTypeListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameTypeListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectTrfmClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectTrfmClause) {
			listener.enterSelectTrfmClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectTrfmClause) {
			listener.exitSelectTrfmClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectTrfmClause) {
			return visitor.visitSelectTrfmClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	public tableAllColumns(): TableAllColumnsContext | undefined {
		return this.tryGetRuleContext(0, TableAllColumnsContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectItem; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectItem) {
			listener.enterSelectItem(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectItem) {
			listener.exitSelectItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectItem) {
			return visitor.visitSelectItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TrfmClauseContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(HiveParser.KW_USING, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	public KW_MAP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MAP, 0); }
	public selectExpressionList(): SelectExpressionListContext | undefined {
		return this.tryGetRuleContext(0, SelectExpressionListContext);
	}
	public KW_REDUCE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REDUCE, 0); }
	public rowFormat(): RowFormatContext[];
	public rowFormat(i: number): RowFormatContext;
	public rowFormat(i?: number): RowFormatContext | RowFormatContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowFormatContext);
		} else {
			return this.getRuleContext(i, RowFormatContext);
		}
	}
	public recordWriter(): RecordWriterContext | undefined {
		return this.tryGetRuleContext(0, RecordWriterContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public recordReader(): RecordReaderContext | undefined {
		return this.tryGetRuleContext(0, RecordReaderContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public aliasList(): AliasListContext | undefined {
		return this.tryGetRuleContext(0, AliasListContext);
	}
	public columnNameTypeList(): ColumnNameTypeListContext | undefined {
		return this.tryGetRuleContext(0, ColumnNameTypeListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_trfmClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTrfmClause) {
			listener.enterTrfmClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTrfmClause) {
			listener.exitTrfmClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTrfmClause) {
			return visitor.visitTrfmClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectExpressionContext extends ParserRuleContext {
	public tableAllColumns(): TableAllColumnsContext | undefined {
		return this.tryGetRuleContext(0, TableAllColumnsContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectExpression) {
			listener.enterSelectExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectExpression) {
			listener.exitSelectExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectExpression) {
			return visitor.visitSelectExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectExpressionListContext extends ParserRuleContext {
	public selectExpression(): SelectExpressionContext[];
	public selectExpression(i: number): SelectExpressionContext;
	public selectExpression(i?: number): SelectExpressionContext | SelectExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectExpressionContext);
		} else {
			return this.getRuleContext(i, SelectExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_selectExpressionList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSelectExpressionList) {
			listener.enterSelectExpressionList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSelectExpressionList) {
			listener.exitSelectExpressionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectExpressionList) {
			return visitor.visitSelectExpressionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_clauseContext extends ParserRuleContext {
	public KW_WINDOW(): TerminalNode { return this.getToken(HiveParser.KW_WINDOW, 0); }
	public window_defn(): Window_defnContext[];
	public window_defn(i: number): Window_defnContext;
	public window_defn(i?: number): Window_defnContext | Window_defnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Window_defnContext);
		} else {
			return this.getRuleContext(i, Window_defnContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_clause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_clause) {
			listener.enterWindow_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_clause) {
			listener.exitWindow_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_clause) {
			return visitor.visitWindow_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_defnContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public window_specification(): Window_specificationContext {
		return this.getRuleContext(0, Window_specificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_defn; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_defn) {
			listener.enterWindow_defn(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_defn) {
			listener.exitWindow_defn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_defn) {
			return visitor.visitWindow_defn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_specificationContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public partitioningSpec(): PartitioningSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitioningSpecContext);
	}
	public window_frame(): Window_frameContext | undefined {
		return this.tryGetRuleContext(0, Window_frameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_specification; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_specification) {
			listener.enterWindow_specification(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_specification) {
			listener.exitWindow_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_specification) {
			return visitor.visitWindow_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frameContext extends ParserRuleContext {
	public window_range_expression(): Window_range_expressionContext | undefined {
		return this.tryGetRuleContext(0, Window_range_expressionContext);
	}
	public window_value_expression(): Window_value_expressionContext | undefined {
		return this.tryGetRuleContext(0, Window_value_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_frame; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_frame) {
			listener.enterWindow_frame(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_frame) {
			listener.exitWindow_frame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame) {
			return visitor.visitWindow_frame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_range_expressionContext extends ParserRuleContext {
	public KW_ROWS(): TerminalNode { return this.getToken(HiveParser.KW_ROWS, 0); }
	public window_frame_start_boundary(): Window_frame_start_boundaryContext | undefined {
		return this.tryGetRuleContext(0, Window_frame_start_boundaryContext);
	}
	public KW_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BETWEEN, 0); }
	public window_frame_boundary(): Window_frame_boundaryContext[];
	public window_frame_boundary(i: number): Window_frame_boundaryContext;
	public window_frame_boundary(i?: number): Window_frame_boundaryContext | Window_frame_boundaryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Window_frame_boundaryContext);
		} else {
			return this.getRuleContext(i, Window_frame_boundaryContext);
		}
	}
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_range_expression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_range_expression) {
			listener.enterWindow_range_expression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_range_expression) {
			listener.exitWindow_range_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_range_expression) {
			return visitor.visitWindow_range_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_value_expressionContext extends ParserRuleContext {
	public KW_RANGE(): TerminalNode { return this.getToken(HiveParser.KW_RANGE, 0); }
	public window_frame_start_boundary(): Window_frame_start_boundaryContext | undefined {
		return this.tryGetRuleContext(0, Window_frame_start_boundaryContext);
	}
	public KW_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BETWEEN, 0); }
	public window_frame_boundary(): Window_frame_boundaryContext[];
	public window_frame_boundary(i: number): Window_frame_boundaryContext;
	public window_frame_boundary(i?: number): Window_frame_boundaryContext | Window_frame_boundaryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Window_frame_boundaryContext);
		} else {
			return this.getRuleContext(i, Window_frame_boundaryContext);
		}
	}
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_value_expression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_value_expression) {
			listener.enterWindow_value_expression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_value_expression) {
			listener.exitWindow_value_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_value_expression) {
			return visitor.visitWindow_value_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_start_boundaryContext extends ParserRuleContext {
	public KW_UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNBOUNDED, 0); }
	public KW_PRECEDING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PRECEDING, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CURRENT, 0); }
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROW, 0); }
	public Number(): TerminalNode | undefined { return this.tryGetToken(HiveParser.Number, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_frame_start_boundary; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_frame_start_boundary) {
			listener.enterWindow_frame_start_boundary(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_frame_start_boundary) {
			listener.exitWindow_frame_start_boundary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_start_boundary) {
			return visitor.visitWindow_frame_start_boundary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_boundaryContext extends ParserRuleContext {
	public KW_UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNBOUNDED, 0); }
	public KW_PRECEDING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PRECEDING, 0); }
	public KW_FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FOLLOWING, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CURRENT, 0); }
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROW, 0); }
	public Number(): TerminalNode | undefined { return this.tryGetToken(HiveParser.Number, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_window_frame_boundary; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWindow_frame_boundary) {
			listener.enterWindow_frame_boundary(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWindow_frame_boundary) {
			listener.exitWindow_frame_boundary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_boundary) {
			return visitor.visitWindow_frame_boundary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableAllColumnsContext extends ParserRuleContext {
	public STAR(): TerminalNode { return this.getToken(HiveParser.STAR, 0); }
	public tableName(): TableNameContext | undefined {
		return this.tryGetRuleContext(0, TableNameContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableAllColumns; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableAllColumns) {
			listener.enterTableAllColumns(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableAllColumns) {
			listener.exitTableAllColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableAllColumns) {
			return visitor.visitTableAllColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableOrColumnContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableOrColumn; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableOrColumn) {
			listener.enterTableOrColumn(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableOrColumn) {
			listener.exitTableOrColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableOrColumn) {
			return visitor.visitTableOrColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionListContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_expressionList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExpressionList) {
			listener.enterExpressionList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExpressionList) {
			listener.exitExpressionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionList) {
			return visitor.visitExpressionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AliasListContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_aliasList; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAliasList) {
			listener.enterAliasList(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAliasList) {
			listener.exitAliasList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAliasList) {
			return visitor.visitAliasList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	public KW_FROM(): TerminalNode { return this.getToken(HiveParser.KW_FROM, 0); }
	public fromSource(): FromSourceContext {
		return this.getRuleContext(0, FromSourceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_fromClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFromClause) {
			listener.enterFromClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFromClause) {
			listener.exitFromClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFromClause) {
			return visitor.visitFromClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromSourceContext extends ParserRuleContext {
	public uniqueJoinToken(): UniqueJoinTokenContext | undefined {
		return this.tryGetRuleContext(0, UniqueJoinTokenContext);
	}
	public uniqueJoinSource(): UniqueJoinSourceContext[];
	public uniqueJoinSource(i: number): UniqueJoinSourceContext;
	public uniqueJoinSource(i?: number): UniqueJoinSourceContext | UniqueJoinSourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UniqueJoinSourceContext);
		} else {
			return this.getRuleContext(i, UniqueJoinSourceContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	public joinSource(): JoinSourceContext | undefined {
		return this.tryGetRuleContext(0, JoinSourceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_fromSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFromSource) {
			listener.enterFromSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFromSource) {
			listener.exitFromSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFromSource) {
			return visitor.visitFromSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AtomjoinSourceContext extends ParserRuleContext {
	public tableSource(): TableSourceContext | undefined {
		return this.tryGetRuleContext(0, TableSourceContext);
	}
	public lateralView(): LateralViewContext[];
	public lateralView(i: number): LateralViewContext;
	public lateralView(i?: number): LateralViewContext | LateralViewContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LateralViewContext);
		} else {
			return this.getRuleContext(i, LateralViewContext);
		}
	}
	public virtualTableSource(): VirtualTableSourceContext | undefined {
		return this.tryGetRuleContext(0, VirtualTableSourceContext);
	}
	public subQuerySource(): SubQuerySourceContext | undefined {
		return this.tryGetRuleContext(0, SubQuerySourceContext);
	}
	public partitionedTableFunction(): PartitionedTableFunctionContext | undefined {
		return this.tryGetRuleContext(0, PartitionedTableFunctionContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public joinSource(): JoinSourceContext | undefined {
		return this.tryGetRuleContext(0, JoinSourceContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_atomjoinSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAtomjoinSource) {
			listener.enterAtomjoinSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAtomjoinSource) {
			listener.exitAtomjoinSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAtomjoinSource) {
			return visitor.visitAtomjoinSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinSourceContext extends ParserRuleContext {
	public atomjoinSource(): AtomjoinSourceContext {
		return this.getRuleContext(0, AtomjoinSourceContext);
	}
	public joinToken(): JoinTokenContext[];
	public joinToken(i: number): JoinTokenContext;
	public joinToken(i?: number): JoinTokenContext | JoinTokenContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinTokenContext);
		} else {
			return this.getRuleContext(i, JoinTokenContext);
		}
	}
	public joinSourcePart(): JoinSourcePartContext[];
	public joinSourcePart(i: number): JoinSourcePartContext;
	public joinSourcePart(i?: number): JoinSourcePartContext | JoinSourcePartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinSourcePartContext);
		} else {
			return this.getRuleContext(i, JoinSourcePartContext);
		}
	}
	public KW_ON(): TerminalNode[];
	public KW_ON(i: number): TerminalNode;
	public KW_ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_ON);
		} else {
			return this.getToken(HiveParser.KW_ON, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public KW_USING(): TerminalNode[];
	public KW_USING(i: number): TerminalNode;
	public KW_USING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_USING);
		} else {
			return this.getToken(HiveParser.KW_USING, i);
		}
	}
	public columnParenthesesList(): ColumnParenthesesListContext[];
	public columnParenthesesList(i: number): ColumnParenthesesListContext;
	public columnParenthesesList(i?: number): ColumnParenthesesListContext | ColumnParenthesesListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnParenthesesListContext);
		} else {
			return this.getRuleContext(i, ColumnParenthesesListContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_joinSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterJoinSource) {
			listener.enterJoinSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitJoinSource) {
			listener.exitJoinSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitJoinSource) {
			return visitor.visitJoinSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinSourcePartContext extends ParserRuleContext {
	public tableSource(): TableSourceContext | undefined {
		return this.tryGetRuleContext(0, TableSourceContext);
	}
	public virtualTableSource(): VirtualTableSourceContext | undefined {
		return this.tryGetRuleContext(0, VirtualTableSourceContext);
	}
	public subQuerySource(): SubQuerySourceContext | undefined {
		return this.tryGetRuleContext(0, SubQuerySourceContext);
	}
	public partitionedTableFunction(): PartitionedTableFunctionContext | undefined {
		return this.tryGetRuleContext(0, PartitionedTableFunctionContext);
	}
	public lateralView(): LateralViewContext[];
	public lateralView(i: number): LateralViewContext;
	public lateralView(i?: number): LateralViewContext | LateralViewContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LateralViewContext);
		} else {
			return this.getRuleContext(i, LateralViewContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_joinSourcePart; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterJoinSourcePart) {
			listener.enterJoinSourcePart(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitJoinSourcePart) {
			listener.exitJoinSourcePart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitJoinSourcePart) {
			return visitor.visitJoinSourcePart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinSourceContext extends ParserRuleContext {
	public uniqueJoinTableSource(): UniqueJoinTableSourceContext {
		return this.getRuleContext(0, UniqueJoinTableSourceContext);
	}
	public uniqueJoinExpr(): UniqueJoinExprContext {
		return this.getRuleContext(0, UniqueJoinExprContext);
	}
	public KW_PRESERVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PRESERVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_uniqueJoinSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUniqueJoinSource) {
			listener.enterUniqueJoinSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUniqueJoinSource) {
			listener.exitUniqueJoinSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinSource) {
			return visitor.visitUniqueJoinSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinExprContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public expressionList(): ExpressionListContext {
		return this.getRuleContext(0, ExpressionListContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_uniqueJoinExpr; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUniqueJoinExpr) {
			listener.enterUniqueJoinExpr(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUniqueJoinExpr) {
			listener.exitUniqueJoinExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinExpr) {
			return visitor.visitUniqueJoinExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinTokenContext extends ParserRuleContext {
	public KW_UNIQUEJOIN(): TerminalNode { return this.getToken(HiveParser.KW_UNIQUEJOIN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_uniqueJoinToken; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUniqueJoinToken) {
			listener.enterUniqueJoinToken(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUniqueJoinToken) {
			listener.exitUniqueJoinToken(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinToken) {
			return visitor.visitUniqueJoinToken(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinTokenContext extends ParserRuleContext {
	public KW_JOIN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_JOIN, 0); }
	public KW_INNER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INNER, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.COMMA, 0); }
	public KW_CROSS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CROSS, 0); }
	public KW_LEFT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LEFT, 0); }
	public KW_OUTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTER, 0); }
	public KW_RIGHT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RIGHT, 0); }
	public KW_FULL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FULL, 0); }
	public KW_SEMI(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_joinToken; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterJoinToken) {
			listener.enterJoinToken(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitJoinToken) {
			listener.exitJoinToken(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitJoinToken) {
			return visitor.visitJoinToken(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LateralViewContext extends ParserRuleContext {
	public KW_LATERAL(): TerminalNode { return this.getToken(HiveParser.KW_LATERAL, 0); }
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VIEW, 0); }
	public KW_OUTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTER, 0); }
	public function_(): Function_Context | undefined {
		return this.tryGetRuleContext(0, Function_Context);
	}
	public tableAlias(): TableAliasContext {
		return this.getRuleContext(0, TableAliasContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLE, 0); }
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.LPAREN);
		} else {
			return this.getToken(HiveParser.LPAREN, i);
		}
	}
	public valuesClause(): ValuesClauseContext | undefined {
		return this.tryGetRuleContext(0, ValuesClauseContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.RPAREN);
		} else {
			return this.getToken(HiveParser.RPAREN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_lateralView; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterLateralView) {
			listener.enterLateralView(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitLateralView) {
			listener.exitLateralView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLateralView) {
			return visitor.visitLateralView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableAliasContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableAlias; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableAlias) {
			listener.enterTableAlias(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableAlias) {
			listener.exitTableAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableAlias) {
			return visitor.visitTableAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableBucketSampleContext extends ParserRuleContext {
	public KW_TABLESAMPLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLESAMPLE, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public KW_BUCKET(): TerminalNode { return this.getToken(HiveParser.KW_BUCKET, 0); }
	public Number(): TerminalNode[];
	public Number(i: number): TerminalNode;
	public Number(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.Number);
		} else {
			return this.getToken(HiveParser.Number, i);
		}
	}
	public KW_OUT(): TerminalNode { return this.getToken(HiveParser.KW_OUT, 0); }
	public KW_OF(): TerminalNode { return this.getToken(HiveParser.KW_OF, 0); }
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ON, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableBucketSample; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableBucketSample) {
			listener.enterTableBucketSample(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableBucketSample) {
			listener.exitTableBucketSample(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableBucketSample) {
			return visitor.visitTableBucketSample(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SplitSampleContext extends ParserRuleContext {
	public KW_TABLESAMPLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLESAMPLE, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public Number(): TerminalNode | undefined { return this.tryGetToken(HiveParser.Number, 0); }
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_PERCENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PERCENT, 0); }
	public KW_ROWS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROWS, 0); }
	public ByteLengthLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.ByteLengthLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_splitSample; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSplitSample) {
			listener.enterSplitSample(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSplitSample) {
			listener.exitSplitSample(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSplitSample) {
			return visitor.visitSplitSample(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSampleContext extends ParserRuleContext {
	public tableBucketSample(): TableBucketSampleContext | undefined {
		return this.tryGetRuleContext(0, TableBucketSampleContext);
	}
	public splitSample(): SplitSampleContext | undefined {
		return this.tryGetRuleContext(0, SplitSampleContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableSample; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableSample) {
			listener.enterTableSample(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableSample) {
			listener.exitTableSample(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableSample) {
			return visitor.visitTableSample(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourceContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public tableProperties(): TablePropertiesContext | undefined {
		return this.tryGetRuleContext(0, TablePropertiesContext);
	}
	public tableSample(): TableSampleContext | undefined {
		return this.tryGetRuleContext(0, TableSampleContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableSource) {
			listener.enterTableSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableSource) {
			listener.exitTableSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableSource) {
			return visitor.visitTableSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinTableSourceContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public tableSample(): TableSampleContext | undefined {
		return this.tryGetRuleContext(0, TableSampleContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_uniqueJoinTableSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterUniqueJoinTableSource) {
			listener.enterUniqueJoinTableSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitUniqueJoinTableSource) {
			listener.exitUniqueJoinTableSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinTableSource) {
			return visitor.visitUniqueJoinTableSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableName) {
			listener.enterTableName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableName) {
			listener.exitTableName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableName) {
			return visitor.visitTableName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_viewName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterViewName) {
			listener.enterViewName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitViewName) {
			listener.exitViewName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewName) {
			return visitor.visitViewName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubQuerySourceContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public queryStatementExpression(): QueryStatementExpressionContext {
		return this.getRuleContext(0, QueryStatementExpressionContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_subQuerySource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSubQuerySource) {
			listener.enterSubQuerySource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSubQuerySource) {
			listener.exitSubQuerySource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSubQuerySource) {
			return visitor.visitSubQuerySource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitioningSpecContext extends ParserRuleContext {
	public partitionByClause(): PartitionByClauseContext | undefined {
		return this.tryGetRuleContext(0, PartitionByClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public distributeByClause(): DistributeByClauseContext | undefined {
		return this.tryGetRuleContext(0, DistributeByClauseContext);
	}
	public sortByClause(): SortByClauseContext | undefined {
		return this.tryGetRuleContext(0, SortByClauseContext);
	}
	public clusterByClause(): ClusterByClauseContext | undefined {
		return this.tryGetRuleContext(0, ClusterByClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partitioningSpec; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartitioningSpec) {
			listener.enterPartitioningSpec(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartitioningSpec) {
			listener.exitPartitioningSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitioningSpec) {
			return visitor.visitPartitioningSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionTableFunctionSourceContext extends ParserRuleContext {
	public subQuerySource(): SubQuerySourceContext | undefined {
		return this.tryGetRuleContext(0, SubQuerySourceContext);
	}
	public tableSource(): TableSourceContext | undefined {
		return this.tryGetRuleContext(0, TableSourceContext);
	}
	public partitionedTableFunction(): PartitionedTableFunctionContext | undefined {
		return this.tryGetRuleContext(0, PartitionedTableFunctionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partitionTableFunctionSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartitionTableFunctionSource) {
			listener.enterPartitionTableFunctionSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartitionTableFunctionSource) {
			listener.exitPartitionTableFunctionSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionTableFunctionSource) {
			return visitor.visitPartitionTableFunctionSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionedTableFunctionContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.LPAREN);
		} else {
			return this.getToken(HiveParser.LPAREN, i);
		}
	}
	public KW_ON(): TerminalNode { return this.getToken(HiveParser.KW_ON, 0); }
	public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
		return this.getRuleContext(0, PartitionTableFunctionSourceContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.RPAREN);
		} else {
			return this.getToken(HiveParser.RPAREN, i);
		}
	}
	public partitioningSpec(): PartitioningSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitioningSpecContext);
	}
	public Identifier(): TerminalNode[];
	public Identifier(i: number): TerminalNode;
	public Identifier(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.Identifier);
		} else {
			return this.getToken(HiveParser.Identifier, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partitionedTableFunction; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartitionedTableFunction) {
			listener.enterPartitionedTableFunction(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartitionedTableFunction) {
			listener.exitPartitionedTableFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionedTableFunction) {
			return visitor.visitPartitionedTableFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhereClauseContext extends ParserRuleContext {
	public KW_WHERE(): TerminalNode { return this.getToken(HiveParser.KW_WHERE, 0); }
	public searchCondition(): SearchConditionContext {
		return this.getRuleContext(0, SearchConditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_whereClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWhereClause) {
			listener.enterWhereClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWhereClause) {
			listener.exitWhereClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhereClause) {
			return visitor.visitWhereClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SearchConditionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_searchCondition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSearchCondition) {
			listener.enterSearchCondition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSearchCondition) {
			listener.exitSearchCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSearchCondition) {
			return visitor.visitSearchCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValuesClauseContext extends ParserRuleContext {
	public KW_VALUES(): TerminalNode { return this.getToken(HiveParser.KW_VALUES, 0); }
	public valuesTableConstructor(): ValuesTableConstructorContext {
		return this.getRuleContext(0, ValuesTableConstructorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_valuesClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterValuesClause) {
			listener.enterValuesClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitValuesClause) {
			listener.exitValuesClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValuesClause) {
			return visitor.visitValuesClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValuesTableConstructorContext extends ParserRuleContext {
	public valueRowConstructor(): ValueRowConstructorContext[];
	public valueRowConstructor(i: number): ValueRowConstructorContext;
	public valueRowConstructor(i?: number): ValueRowConstructorContext | ValueRowConstructorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueRowConstructorContext);
		} else {
			return this.getRuleContext(i, ValueRowConstructorContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_valuesTableConstructor; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterValuesTableConstructor) {
			listener.enterValuesTableConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitValuesTableConstructor) {
			listener.exitValuesTableConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValuesTableConstructor) {
			return visitor.visitValuesTableConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValueRowConstructorContext extends ParserRuleContext {
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		return this.getRuleContext(0, ExpressionsInParenthesisContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_valueRowConstructor; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterValueRowConstructor) {
			listener.enterValueRowConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitValueRowConstructor) {
			listener.exitValueRowConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValueRowConstructor) {
			return visitor.visitValueRowConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VirtualTableSourceContext extends ParserRuleContext {
	public KW_TABLE(): TerminalNode { return this.getToken(HiveParser.KW_TABLE, 0); }
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.LPAREN);
		} else {
			return this.getToken(HiveParser.LPAREN, i);
		}
	}
	public valuesClause(): ValuesClauseContext {
		return this.getRuleContext(0, ValuesClauseContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.RPAREN);
		} else {
			return this.getToken(HiveParser.RPAREN, i);
		}
	}
	public tableAlias(): TableAliasContext {
		return this.getRuleContext(0, TableAliasContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AS, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_virtualTableSource; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterVirtualTableSource) {
			listener.enterVirtualTableSource(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitVirtualTableSource) {
			listener.exitVirtualTableSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitVirtualTableSource) {
			return visitor.visitVirtualTableSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	public KW_GROUP(): TerminalNode { return this.getToken(HiveParser.KW_GROUP, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public groupby_expression(): Groupby_expressionContext {
		return this.getRuleContext(0, Groupby_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_groupByClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGroupByClause) {
			listener.enterGroupByClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGroupByClause) {
			listener.exitGroupByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupByClause) {
			return visitor.visitGroupByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Groupby_expressionContext extends ParserRuleContext {
	public rollupStandard(): RollupStandardContext | undefined {
		return this.tryGetRuleContext(0, RollupStandardContext);
	}
	public rollupOldSyntax(): RollupOldSyntaxContext | undefined {
		return this.tryGetRuleContext(0, RollupOldSyntaxContext);
	}
	public groupByEmpty(): GroupByEmptyContext | undefined {
		return this.tryGetRuleContext(0, GroupByEmptyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_groupby_expression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGroupby_expression) {
			listener.enterGroupby_expression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGroupby_expression) {
			listener.exitGroupby_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupby_expression) {
			return visitor.visitGroupby_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByEmptyContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_groupByEmpty; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGroupByEmpty) {
			listener.enterGroupByEmpty(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGroupByEmpty) {
			listener.exitGroupByEmpty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupByEmpty) {
			return visitor.visitGroupByEmpty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollupStandardContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_ROLLUP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROLLUP, 0); }
	public KW_CUBE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CUBE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rollupStandard; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRollupStandard) {
			listener.enterRollupStandard(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRollupStandard) {
			listener.exitRollupStandard(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRollupStandard) {
			return visitor.visitRollupStandard(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollupOldSyntaxContext extends ParserRuleContext {
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
		return this.getRuleContext(0, ExpressionsNotInParenthesisContext);
	}
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WITH, 0); }
	public KW_ROLLUP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROLLUP, 0); }
	public KW_CUBE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CUBE, 0); }
	public KW_GROUPING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_GROUPING, 0); }
	public KW_SETS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SETS, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public groupingSetExpression(): GroupingSetExpressionContext[];
	public groupingSetExpression(i: number): GroupingSetExpressionContext;
	public groupingSetExpression(i?: number): GroupingSetExpressionContext | GroupingSetExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupingSetExpressionContext);
		} else {
			return this.getRuleContext(i, GroupingSetExpressionContext);
		}
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_rollupOldSyntax; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterRollupOldSyntax) {
			listener.enterRollupOldSyntax(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitRollupOldSyntax) {
			listener.exitRollupOldSyntax(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRollupOldSyntax) {
			return visitor.visitRollupOldSyntax(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingSetExpressionContext extends ParserRuleContext {
	public groupingSetExpressionMultiple(): GroupingSetExpressionMultipleContext | undefined {
		return this.tryGetRuleContext(0, GroupingSetExpressionMultipleContext);
	}
	public groupingExpressionSingle(): GroupingExpressionSingleContext | undefined {
		return this.tryGetRuleContext(0, GroupingExpressionSingleContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_groupingSetExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGroupingSetExpression) {
			listener.enterGroupingSetExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGroupingSetExpression) {
			listener.exitGroupingSetExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupingSetExpression) {
			return visitor.visitGroupingSetExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingSetExpressionMultipleContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_groupingSetExpressionMultiple; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGroupingSetExpressionMultiple) {
			listener.enterGroupingSetExpressionMultiple(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGroupingSetExpressionMultiple) {
			listener.exitGroupingSetExpressionMultiple(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupingSetExpressionMultiple) {
			return visitor.visitGroupingSetExpressionMultiple(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingExpressionSingleContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_groupingExpressionSingle; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterGroupingExpressionSingle) {
			listener.enterGroupingExpressionSingle(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitGroupingExpressionSingle) {
			listener.exitGroupingExpressionSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupingExpressionSingle) {
			return visitor.visitGroupingExpressionSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	public KW_HAVING(): TerminalNode { return this.getToken(HiveParser.KW_HAVING, 0); }
	public havingCondition(): HavingConditionContext {
		return this.getRuleContext(0, HavingConditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_havingClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterHavingClause) {
			listener.enterHavingClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitHavingClause) {
			listener.exitHavingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHavingClause) {
			return visitor.visitHavingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HavingConditionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_havingCondition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterHavingCondition) {
			listener.enterHavingCondition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitHavingCondition) {
			listener.exitHavingCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHavingCondition) {
			return visitor.visitHavingCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsInParenthesisContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
		return this.getRuleContext(0, ExpressionsNotInParenthesisContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_expressionsInParenthesis; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExpressionsInParenthesis) {
			listener.enterExpressionsInParenthesis(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExpressionsInParenthesis) {
			listener.exitExpressionsInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionsInParenthesis) {
			return visitor.visitExpressionsInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsNotInParenthesisContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public expressionPart(): ExpressionPartContext | undefined {
		return this.tryGetRuleContext(0, ExpressionPartContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_expressionsNotInParenthesis; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExpressionsNotInParenthesis) {
			listener.enterExpressionsNotInParenthesis(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExpressionsNotInParenthesis) {
			listener.exitExpressionsNotInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionsNotInParenthesis) {
			return visitor.visitExpressionsNotInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionPartContext extends ParserRuleContext {
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_expressionPart; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExpressionPart) {
			listener.enterExpressionPart(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExpressionPart) {
			listener.exitExpressionPart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionPart) {
			return visitor.visitExpressionPart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsContext extends ParserRuleContext {
	public expressionsInParenthesis(): ExpressionsInParenthesisContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsInParenthesisContext);
	}
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsNotInParenthesisContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_expressions; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExpressions) {
			listener.enterExpressions(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExpressions) {
			listener.exitExpressions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressions) {
			return visitor.visitExpressions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnRefOrderInParenthesisContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public columnRefOrder(): ColumnRefOrderContext[];
	public columnRefOrder(i: number): ColumnRefOrderContext;
	public columnRefOrder(i?: number): ColumnRefOrderContext | ColumnRefOrderContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnRefOrderContext);
		} else {
			return this.getRuleContext(i, ColumnRefOrderContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnRefOrderInParenthesis; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnRefOrderInParenthesis) {
			listener.enterColumnRefOrderInParenthesis(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnRefOrderInParenthesis) {
			listener.exitColumnRefOrderInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnRefOrderInParenthesis) {
			return visitor.visitColumnRefOrderInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnRefOrderNotInParenthesisContext extends ParserRuleContext {
	public columnRefOrder(): ColumnRefOrderContext[];
	public columnRefOrder(i: number): ColumnRefOrderContext;
	public columnRefOrder(i?: number): ColumnRefOrderContext | ColumnRefOrderContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnRefOrderContext);
		} else {
			return this.getRuleContext(i, ColumnRefOrderContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_columnRefOrderNotInParenthesis; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterColumnRefOrderNotInParenthesis) {
			listener.enterColumnRefOrderNotInParenthesis(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitColumnRefOrderNotInParenthesis) {
			listener.exitColumnRefOrderNotInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnRefOrderNotInParenthesis) {
			return visitor.visitColumnRefOrderNotInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	public KW_ORDER(): TerminalNode { return this.getToken(HiveParser.KW_ORDER, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public columnRefOrder(): ColumnRefOrderContext[];
	public columnRefOrder(i: number): ColumnRefOrderContext;
	public columnRefOrder(i?: number): ColumnRefOrderContext | ColumnRefOrderContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnRefOrderContext);
		} else {
			return this.getRuleContext(i, ColumnRefOrderContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_orderByClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterOrderByClause) {
			listener.enterOrderByClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitOrderByClause) {
			listener.exitOrderByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitOrderByClause) {
			return visitor.visitOrderByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClusterByClauseContext extends ParserRuleContext {
	public KW_CLUSTER(): TerminalNode { return this.getToken(HiveParser.KW_CLUSTER, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public expressions(): ExpressionsContext {
		return this.getRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_clusterByClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterClusterByClause) {
			listener.enterClusterByClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitClusterByClause) {
			listener.exitClusterByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitClusterByClause) {
			return visitor.visitClusterByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionByClauseContext extends ParserRuleContext {
	public KW_PARTITION(): TerminalNode { return this.getToken(HiveParser.KW_PARTITION, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public expressions(): ExpressionsContext {
		return this.getRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partitionByClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartitionByClause) {
			listener.enterPartitionByClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartitionByClause) {
			listener.exitPartitionByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionByClause) {
			return visitor.visitPartitionByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DistributeByClauseContext extends ParserRuleContext {
	public KW_DISTRIBUTE(): TerminalNode { return this.getToken(HiveParser.KW_DISTRIBUTE, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public expressions(): ExpressionsContext {
		return this.getRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_distributeByClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDistributeByClause) {
			listener.enterDistributeByClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDistributeByClause) {
			listener.exitDistributeByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDistributeByClause) {
			return visitor.visitDistributeByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortByClauseContext extends ParserRuleContext {
	public KW_SORT(): TerminalNode { return this.getToken(HiveParser.KW_SORT, 0); }
	public KW_BY(): TerminalNode { return this.getToken(HiveParser.KW_BY, 0); }
	public columnRefOrderInParenthesis(): ColumnRefOrderInParenthesisContext | undefined {
		return this.tryGetRuleContext(0, ColumnRefOrderInParenthesisContext);
	}
	public columnRefOrderNotInParenthesis(): ColumnRefOrderNotInParenthesisContext | undefined {
		return this.tryGetRuleContext(0, ColumnRefOrderNotInParenthesisContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_sortByClause; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSortByClause) {
			listener.enterSortByClause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSortByClause) {
			listener.exitSortByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSortByClause) {
			return visitor.visitSortByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_Context extends ParserRuleContext {
	public functionName(): FunctionNameContext {
		return this.getRuleContext(0, FunctionNameContext);
	}
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.STAR, 0); }
	public KW_OVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OVER, 0); }
	public window_specification(): Window_specificationContext | undefined {
		return this.tryGetRuleContext(0, Window_specificationContext);
	}
	public selectExpression(): SelectExpressionContext[];
	public selectExpression(i: number): SelectExpressionContext;
	public selectExpression(i?: number): SelectExpressionContext | SelectExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectExpressionContext);
		} else {
			return this.getRuleContext(i, SelectExpressionContext);
		}
	}
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DISTINCT, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_function_; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFunction_) {
			listener.enterFunction_(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFunction_) {
			listener.exitFunction_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFunction_) {
			return visitor.visitFunction_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionNameContext extends ParserRuleContext {
	public functionIdentifier(): FunctionIdentifierContext | undefined {
		return this.tryGetRuleContext(0, FunctionIdentifierContext);
	}
	public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext | undefined {
		return this.tryGetRuleContext(0, Sql11ReservedKeywordsUsedAsFunctionNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_functionName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFunctionName) {
			listener.enterFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFunctionName) {
			listener.exitFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFunctionName) {
			return visitor.visitFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CastExpressionContext extends ParserRuleContext {
	public KW_CAST(): TerminalNode { return this.getToken(HiveParser.KW_CAST, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(HiveParser.KW_AS, 0); }
	public primitiveType(): PrimitiveTypeContext {
		return this.getRuleContext(0, PrimitiveTypeContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_castExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCastExpression) {
			listener.enterCastExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCastExpression) {
			listener.exitCastExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCastExpression) {
			return visitor.visitCastExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseExpressionContext extends ParserRuleContext {
	public KW_CASE(): TerminalNode { return this.getToken(HiveParser.KW_CASE, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public KW_END(): TerminalNode { return this.getToken(HiveParser.KW_END, 0); }
	public KW_WHEN(): TerminalNode[];
	public KW_WHEN(i: number): TerminalNode;
	public KW_WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_WHEN);
		} else {
			return this.getToken(HiveParser.KW_WHEN, i);
		}
	}
	public KW_THEN(): TerminalNode[];
	public KW_THEN(i: number): TerminalNode;
	public KW_THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_THEN);
		} else {
			return this.getToken(HiveParser.KW_THEN, i);
		}
	}
	public KW_ELSE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_caseExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCaseExpression) {
			listener.enterCaseExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCaseExpression) {
			listener.exitCaseExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCaseExpression) {
			return visitor.visitCaseExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenExpressionContext extends ParserRuleContext {
	public KW_CASE(): TerminalNode { return this.getToken(HiveParser.KW_CASE, 0); }
	public KW_END(): TerminalNode { return this.getToken(HiveParser.KW_END, 0); }
	public KW_WHEN(): TerminalNode[];
	public KW_WHEN(i: number): TerminalNode;
	public KW_WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_WHEN);
		} else {
			return this.getToken(HiveParser.KW_WHEN, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public KW_THEN(): TerminalNode[];
	public KW_THEN(i: number): TerminalNode;
	public KW_THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.KW_THEN);
		} else {
			return this.getToken(HiveParser.KW_THEN, i);
		}
	}
	public KW_ELSE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_whenExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterWhenExpression) {
			listener.enterWhenExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitWhenExpression) {
			listener.exitWhenExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenExpression) {
			return visitor.visitWhenExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FloorExpressionContext extends ParserRuleContext {
	public KW_FLOOR(): TerminalNode { return this.getToken(HiveParser.KW_FLOOR, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TO, 0); }
	public floorDateQualifiers(): FloorDateQualifiersContext | undefined {
		return this.tryGetRuleContext(0, FloorDateQualifiersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_floorExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFloorExpression) {
			listener.enterFloorExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFloorExpression) {
			listener.exitFloorExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFloorExpression) {
			return visitor.visitFloorExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FloorDateQualifiersContext extends ParserRuleContext {
	public KW_YEAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_YEAR, 0); }
	public KW_QUARTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_QUARTER, 0); }
	public KW_MONTH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MONTH, 0); }
	public KW_WEEK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WEEK, 0); }
	public KW_DAY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DAY, 0); }
	public KW_HOUR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_HOUR, 0); }
	public KW_MINUTE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MINUTE, 0); }
	public KW_SECOND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_floorDateQualifiers; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFloorDateQualifiers) {
			listener.enterFloorDateQualifiers(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFloorDateQualifiers) {
			listener.exitFloorDateQualifiers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFloorDateQualifiers) {
			return visitor.visitFloorDateQualifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExtractExpressionContext extends ParserRuleContext {
	public KW_EXTRACT(): TerminalNode { return this.getToken(HiveParser.KW_EXTRACT, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public timeQualifiers(): TimeQualifiersContext {
		return this.getRuleContext(0, TimeQualifiersContext);
	}
	public KW_FROM(): TerminalNode { return this.getToken(HiveParser.KW_FROM, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_extractExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExtractExpression) {
			listener.enterExtractExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExtractExpression) {
			listener.exitExtractExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExtractExpression) {
			return visitor.visitExtractExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimeQualifiersContext extends ParserRuleContext {
	public KW_YEAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_YEAR, 0); }
	public KW_QUARTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_QUARTER, 0); }
	public KW_MONTH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MONTH, 0); }
	public KW_WEEK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WEEK, 0); }
	public KW_DAY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DAY, 0); }
	public KW_DOW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DOW, 0); }
	public KW_HOUR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_HOUR, 0); }
	public KW_MINUTE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MINUTE, 0); }
	public KW_SECOND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_timeQualifiers; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTimeQualifiers) {
			listener.enterTimeQualifiers(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTimeQualifiers) {
			listener.exitTimeQualifiers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTimeQualifiers) {
			return visitor.visitTimeQualifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public intervalLiteral(): IntervalLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntervalLiteralContext);
	}
	public Number(): TerminalNode | undefined { return this.tryGetToken(HiveParser.Number, 0); }
	public dateLiteral(): DateLiteralContext | undefined {
		return this.tryGetRuleContext(0, DateLiteralContext);
	}
	public timestampLiteral(): TimestampLiteralContext | undefined {
		return this.tryGetRuleContext(0, TimestampLiteralContext);
	}
	public timestampLocalTZLiteral(): TimestampLocalTZLiteralContext | undefined {
		return this.tryGetRuleContext(0, TimestampLocalTZLiteralContext);
	}
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public stringLiteralSequence(): StringLiteralSequenceContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralSequenceContext);
	}
	public IntegralLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.IntegralLiteral, 0); }
	public NumberLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.NumberLiteral, 0); }
	public charSetStringLiteral(): CharSetStringLiteralContext | undefined {
		return this.tryGetRuleContext(0, CharSetStringLiteralContext);
	}
	public booleanValue(): BooleanValueContext | undefined {
		return this.tryGetRuleContext(0, BooleanValueContext);
	}
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_constant; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringLiteralSequenceContext extends ParserRuleContext {
	public StringLiteral(): TerminalNode[];
	public StringLiteral(i: number): TerminalNode;
	public StringLiteral(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.StringLiteral);
		} else {
			return this.getToken(HiveParser.StringLiteral, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_stringLiteralSequence; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterStringLiteralSequence) {
			listener.enterStringLiteralSequence(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitStringLiteralSequence) {
			listener.exitStringLiteralSequence(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStringLiteralSequence) {
			return visitor.visitStringLiteralSequence(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharSetStringLiteralContext extends ParserRuleContext {
	public CharSetName(): TerminalNode { return this.getToken(HiveParser.CharSetName, 0); }
	public CharSetLiteral(): TerminalNode { return this.getToken(HiveParser.CharSetLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_charSetStringLiteral; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterCharSetStringLiteral) {
			listener.enterCharSetStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitCharSetStringLiteral) {
			listener.exitCharSetStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCharSetStringLiteral) {
			return visitor.visitCharSetStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DateLiteralContext extends ParserRuleContext {
	public KW_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATE, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public KW_CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CURRENT_DATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dateLiteral; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDateLiteral) {
			listener.enterDateLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDateLiteral) {
			listener.exitDateLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDateLiteral) {
			return visitor.visitDateLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimestampLiteralContext extends ParserRuleContext {
	public KW_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TIMESTAMP, 0); }
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public KW_CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CURRENT_TIMESTAMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_timestampLiteral; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTimestampLiteral) {
			listener.enterTimestampLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTimestampLiteral) {
			listener.exitTimestampLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTimestampLiteral) {
			return visitor.visitTimestampLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimestampLocalTZLiteralContext extends ParserRuleContext {
	public KW_TIMESTAMPLOCALTZ(): TerminalNode { return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0); }
	public StringLiteral(): TerminalNode { return this.getToken(HiveParser.StringLiteral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_timestampLocalTZLiteral; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTimestampLocalTZLiteral) {
			listener.enterTimestampLocalTZLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTimestampLocalTZLiteral) {
			listener.exitTimestampLocalTZLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTimestampLocalTZLiteral) {
			return visitor.visitTimestampLocalTZLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalValueContext extends ParserRuleContext {
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public Number(): TerminalNode | undefined { return this.tryGetToken(HiveParser.Number, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_intervalValue; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIntervalValue) {
			listener.enterIntervalValue(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIntervalValue) {
			listener.exitIntervalValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalValue) {
			return visitor.visitIntervalValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalLiteralContext extends ParserRuleContext {
	public intervalValue(): IntervalValueContext {
		return this.getRuleContext(0, IntervalValueContext);
	}
	public intervalQualifiers(): IntervalQualifiersContext {
		return this.getRuleContext(0, IntervalQualifiersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_intervalLiteral; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIntervalLiteral) {
			listener.enterIntervalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIntervalLiteral) {
			listener.exitIntervalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalLiteral) {
			return visitor.visitIntervalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalExpressionContext extends ParserRuleContext {
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public intervalValue(): IntervalValueContext | undefined {
		return this.tryGetRuleContext(0, IntervalValueContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	public intervalQualifiers(): IntervalQualifiersContext {
		return this.getRuleContext(0, IntervalQualifiersContext);
	}
	public KW_INTERVAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INTERVAL, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_intervalExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIntervalExpression) {
			listener.enterIntervalExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIntervalExpression) {
			listener.exitIntervalExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalExpression) {
			return visitor.visitIntervalExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalQualifiersContext extends ParserRuleContext {
	public KW_YEAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_YEAR, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TO, 0); }
	public KW_MONTH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MONTH, 0); }
	public KW_DAY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DAY, 0); }
	public KW_SECOND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SECOND, 0); }
	public KW_HOUR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_HOUR, 0); }
	public KW_MINUTE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MINUTE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_intervalQualifiers; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIntervalQualifiers) {
			listener.enterIntervalQualifiers(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIntervalQualifiers) {
			listener.exitIntervalQualifiers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalQualifiers) {
			return visitor.visitIntervalQualifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AtomExpressionContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public intervalExpression(): IntervalExpressionContext | undefined {
		return this.tryGetRuleContext(0, IntervalExpressionContext);
	}
	public castExpression(): CastExpressionContext | undefined {
		return this.tryGetRuleContext(0, CastExpressionContext);
	}
	public extractExpression(): ExtractExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExtractExpressionContext);
	}
	public floorExpression(): FloorExpressionContext | undefined {
		return this.tryGetRuleContext(0, FloorExpressionContext);
	}
	public caseExpression(): CaseExpressionContext | undefined {
		return this.tryGetRuleContext(0, CaseExpressionContext);
	}
	public whenExpression(): WhenExpressionContext | undefined {
		return this.tryGetRuleContext(0, WhenExpressionContext);
	}
	public subQueryExpression(): SubQueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, SubQueryExpressionContext);
	}
	public function_(): Function_Context | undefined {
		return this.tryGetRuleContext(0, Function_Context);
	}
	public tableOrColumn(): TableOrColumnContext | undefined {
		return this.tryGetRuleContext(0, TableOrColumnContext);
	}
	public expressionsInParenthesis(): ExpressionsInParenthesisContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsInParenthesisContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_atomExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterAtomExpression) {
			listener.enterAtomExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitAtomExpression) {
			listener.exitAtomExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAtomExpression) {
			return visitor.visitAtomExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceUnaryOperatorContext extends ParserRuleContext {
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.MINUS, 0); }
	public TILDE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.TILDE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceUnaryOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceUnaryOperator) {
			listener.enterPrecedenceUnaryOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceUnaryOperator) {
			listener.exitPrecedenceUnaryOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceUnaryOperator) {
			return visitor.visitPrecedenceUnaryOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IsConditionContext extends ParserRuleContext {
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NULL, 0); }
	public KW_TRUE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TRUE, 0); }
	public KW_FALSE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FALSE, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DISTINCT, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FROM, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_isCondition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIsCondition) {
			listener.enterIsCondition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIsCondition) {
			listener.exitIsCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIsCondition) {
			return visitor.visitIsCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceBitwiseXorOperatorContext extends ParserRuleContext {
	public BITWISEXOR(): TerminalNode { return this.getToken(HiveParser.BITWISEXOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceBitwiseXorOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceBitwiseXorOperator) {
			listener.enterPrecedenceBitwiseXorOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceBitwiseXorOperator) {
			listener.exitPrecedenceBitwiseXorOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceBitwiseXorOperator) {
			return visitor.visitPrecedenceBitwiseXorOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceStarOperatorContext extends ParserRuleContext {
	public STAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.STAR, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DIVIDE, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.MOD, 0); }
	public DIV(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DIV, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceStarOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceStarOperator) {
			listener.enterPrecedenceStarOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceStarOperator) {
			listener.exitPrecedenceStarOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceStarOperator) {
			return visitor.visitPrecedenceStarOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedencePlusOperatorContext extends ParserRuleContext {
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedencePlusOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedencePlusOperator) {
			listener.enterPrecedencePlusOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedencePlusOperator) {
			listener.exitPrecedencePlusOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedencePlusOperator) {
			return visitor.visitPrecedencePlusOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceConcatenateOperatorContext extends ParserRuleContext {
	public CONCATENATE(): TerminalNode { return this.getToken(HiveParser.CONCATENATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceConcatenateOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceConcatenateOperator) {
			listener.enterPrecedenceConcatenateOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceConcatenateOperator) {
			listener.exitPrecedenceConcatenateOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceConcatenateOperator) {
			return visitor.visitPrecedenceConcatenateOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceAmpersandOperatorContext extends ParserRuleContext {
	public AMPERSAND(): TerminalNode { return this.getToken(HiveParser.AMPERSAND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceAmpersandOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceAmpersandOperator) {
			listener.enterPrecedenceAmpersandOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceAmpersandOperator) {
			listener.exitPrecedenceAmpersandOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceAmpersandOperator) {
			return visitor.visitPrecedenceAmpersandOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceBitwiseOrOperatorContext extends ParserRuleContext {
	public BITWISEOR(): TerminalNode { return this.getToken(HiveParser.BITWISEOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceBitwiseOrOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceBitwiseOrOperator) {
			listener.enterPrecedenceBitwiseOrOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceBitwiseOrOperator) {
			listener.exitPrecedenceBitwiseOrOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceBitwiseOrOperator) {
			return visitor.visitPrecedenceBitwiseOrOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceRegexpOperatorContext extends ParserRuleContext {
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LIKE, 0); }
	public KW_RLIKE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RLIKE, 0); }
	public KW_REGEXP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REGEXP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceRegexpOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceRegexpOperator) {
			listener.enterPrecedenceRegexpOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceRegexpOperator) {
			listener.exitPrecedenceRegexpOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceRegexpOperator) {
			return visitor.visitPrecedenceRegexpOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceComparisonOperatorContext extends ParserRuleContext {
	public LESSTHANOREQUALTO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LESSTHANOREQUALTO, 0); }
	public LESSTHAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LESSTHAN, 0); }
	public GREATERTHANOREQUALTO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.GREATERTHANOREQUALTO, 0); }
	public GREATERTHAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.GREATERTHAN, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.EQUAL, 0); }
	public EQUAL_NS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.EQUAL_NS, 0); }
	public NOTEQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.NOTEQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceComparisonOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceComparisonOperator) {
			listener.enterPrecedenceComparisonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceComparisonOperator) {
			listener.exitPrecedenceComparisonOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceComparisonOperator) {
			return visitor.visitPrecedenceComparisonOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceNotOperatorContext extends ParserRuleContext {
	public KW_NOT(): TerminalNode { return this.getToken(HiveParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceNotOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceNotOperator) {
			listener.enterPrecedenceNotOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceNotOperator) {
			listener.exitPrecedenceNotOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceNotOperator) {
			return visitor.visitPrecedenceNotOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceLogicOperatorContext extends ParserRuleContext {
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AND, 0); }
	public KW_OR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceLogicOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceLogicOperator) {
			listener.enterPrecedenceLogicOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceLogicOperator) {
			listener.exitPrecedenceLogicOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceLogicOperator) {
			return visitor.visitPrecedenceLogicOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	public atomExpression(): AtomExpressionContext | undefined {
		return this.tryGetRuleContext(0, AtomExpressionContext);
	}
	public LSQUARE(): TerminalNode[];
	public LSQUARE(i: number): TerminalNode;
	public LSQUARE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.LSQUARE);
		} else {
			return this.getToken(HiveParser.LSQUARE, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RSQUARE(): TerminalNode[];
	public RSQUARE(i: number): TerminalNode;
	public RSQUARE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.RSQUARE);
		} else {
			return this.getToken(HiveParser.RSQUARE, i);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.DOT);
		} else {
			return this.getToken(HiveParser.DOT, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public precedenceUnaryOperator(): PrecedenceUnaryOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceUnaryOperatorContext);
	}
	public KW_IS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IS, 0); }
	public isCondition(): IsConditionContext | undefined {
		return this.tryGetRuleContext(0, IsConditionContext);
	}
	public precedenceBitwiseXorOperator(): PrecedenceBitwiseXorOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceBitwiseXorOperatorContext);
	}
	public precedenceStarOperator(): PrecedenceStarOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceStarOperatorContext);
	}
	public precedencePlusOperator(): PrecedencePlusOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedencePlusOperatorContext);
	}
	public precedenceConcatenateOperator(): PrecedenceConcatenateOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceConcatenateOperatorContext);
	}
	public precedenceAmpersandOperator(): PrecedenceAmpersandOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceAmpersandOperatorContext);
	}
	public precedenceBitwiseOrOperator(): PrecedenceBitwiseOrOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceBitwiseOrOperatorContext);
	}
	public precedenceComparisonOperator(): PrecedenceComparisonOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceComparisonOperatorContext);
	}
	public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceRegexpOperatorContext);
	}
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOT, 0); }
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LIKE, 0); }
	public expressionsInParenthesis(): ExpressionsInParenthesisContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsInParenthesisContext);
	}
	public KW_ANY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ANY, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALL, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IN, 0); }
	public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceSimilarExpressionInContext);
	}
	public KW_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BETWEEN, 0); }
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AND, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXISTS, 0); }
	public subQueryExpression(): SubQueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, SubQueryExpressionContext);
	}
	public precedenceNotOperator(): PrecedenceNotOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceNotOperatorContext);
	}
	public precedenceLogicOperator(): PrecedenceLogicOperatorContext | undefined {
		return this.tryGetRuleContext(0, PrecedenceLogicOperatorContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_expression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterExpression) {
			listener.enterExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitExpression) {
			listener.exitExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpression) {
			return visitor.visitExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionInContext extends ParserRuleContext {
	public subQueryExpression(): SubQueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, SubQueryExpressionContext);
	}
	public expressionsInParenthesis(): ExpressionsInParenthesisContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsInParenthesisContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_precedenceSimilarExpressionIn; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrecedenceSimilarExpressionIn) {
			listener.enterPrecedenceSimilarExpressionIn(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrecedenceSimilarExpressionIn) {
			listener.exitPrecedenceSimilarExpressionIn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpressionIn) {
			return visitor.visitPrecedenceSimilarExpressionIn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubQueryExpressionContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_subQueryExpression; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSubQueryExpression) {
			listener.enterSubQueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSubQueryExpression) {
			listener.exitSubQueryExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSubQueryExpression) {
			return visitor.visitSubQueryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanValueContext extends ParserRuleContext {
	public KW_TRUE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TRUE, 0); }
	public KW_FALSE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_booleanValue; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterBooleanValue) {
			listener.enterBooleanValue(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitBooleanValue) {
			listener.exitBooleanValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBooleanValue) {
			return visitor.visitBooleanValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanValueTokContext extends ParserRuleContext {
	public KW_TRUE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TRUE, 0); }
	public KW_FALSE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_booleanValueTok; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterBooleanValueTok) {
			listener.enterBooleanValueTok(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitBooleanValueTok) {
			listener.exitBooleanValueTok(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBooleanValueTok) {
			return visitor.visitBooleanValueTok(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableOrPartitionContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public partitionSpec(): PartitionSpecContext | undefined {
		return this.tryGetRuleContext(0, PartitionSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_tableOrPartition; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterTableOrPartition) {
			listener.enterTableOrPartition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitTableOrPartition) {
			listener.exitTableOrPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableOrPartition) {
			return visitor.visitTableOrPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionSpecContext extends ParserRuleContext {
	public KW_PARTITION(): TerminalNode { return this.getToken(HiveParser.KW_PARTITION, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public partitionVal(): PartitionValContext[];
	public partitionVal(i: number): PartitionValContext;
	public partitionVal(i?: number): PartitionValContext | PartitionValContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionValContext);
		} else {
			return this.getRuleContext(i, PartitionValContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partitionSpec; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartitionSpec) {
			listener.enterPartitionSpec(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartitionSpec) {
			listener.exitPartitionSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionSpec) {
			return visitor.visitPartitionSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionValContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.EQUAL, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_partitionVal; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPartitionVal) {
			listener.enterPartitionVal(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPartitionVal) {
			listener.exitPartitionVal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionVal) {
			return visitor.visitPartitionVal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropPartitionSpecContext extends ParserRuleContext {
	public KW_PARTITION(): TerminalNode { return this.getToken(HiveParser.KW_PARTITION, 0); }
	public LPAREN(): TerminalNode { return this.getToken(HiveParser.LPAREN, 0); }
	public dropPartitionVal(): DropPartitionValContext[];
	public dropPartitionVal(i: number): DropPartitionValContext;
	public dropPartitionVal(i?: number): DropPartitionValContext | DropPartitionValContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DropPartitionValContext);
		} else {
			return this.getRuleContext(i, DropPartitionValContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(HiveParser.RPAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveParser.COMMA);
		} else {
			return this.getToken(HiveParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropPartitionSpec; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropPartitionSpec) {
			listener.enterDropPartitionSpec(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropPartitionSpec) {
			listener.exitDropPartitionSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropPartitionSpec) {
			return visitor.visitDropPartitionSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropPartitionValContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public dropPartitionOperator(): DropPartitionOperatorContext {
		return this.getRuleContext(0, DropPartitionOperatorContext);
	}
	public constant(): ConstantContext {
		return this.getRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropPartitionVal; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropPartitionVal) {
			listener.enterDropPartitionVal(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropPartitionVal) {
			listener.exitDropPartitionVal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropPartitionVal) {
			return visitor.visitDropPartitionVal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropPartitionOperatorContext extends ParserRuleContext {
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.EQUAL, 0); }
	public NOTEQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.NOTEQUAL, 0); }
	public LESSTHANOREQUALTO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LESSTHANOREQUALTO, 0); }
	public LESSTHAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LESSTHAN, 0); }
	public GREATERTHANOREQUALTO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.GREATERTHANOREQUALTO, 0); }
	public GREATERTHAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.GREATERTHAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_dropPartitionOperator; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDropPartitionOperator) {
			listener.enterDropPartitionOperator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDropPartitionOperator) {
			listener.exitDropPartitionOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropPartitionOperator) {
			return visitor.visitDropPartitionOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SysFuncNamesContext extends ParserRuleContext {
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AND, 0); }
	public KW_OR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OR, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOT, 0); }
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LIKE, 0); }
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IF, 0); }
	public KW_CASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CASE, 0); }
	public KW_WHEN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WHEN, 0); }
	public KW_FLOOR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FLOOR, 0); }
	public KW_TINYINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TINYINT, 0); }
	public KW_SMALLINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SMALLINT, 0); }
	public KW_INT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INT, 0); }
	public KW_BIGINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BIGINT, 0); }
	public KW_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FLOAT, 0); }
	public KW_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DOUBLE, 0); }
	public KW_BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BOOLEAN, 0); }
	public KW_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STRING, 0); }
	public KW_BINARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BINARY, 0); }
	public KW_ARRAY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ARRAY, 0); }
	public KW_MAP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MAP, 0); }
	public KW_STRUCT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STRUCT, 0); }
	public KW_UNIONTYPE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNIONTYPE, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.EQUAL, 0); }
	public EQUAL_NS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.EQUAL_NS, 0); }
	public NOTEQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.NOTEQUAL, 0); }
	public LESSTHANOREQUALTO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LESSTHANOREQUALTO, 0); }
	public LESSTHAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.LESSTHAN, 0); }
	public GREATERTHANOREQUALTO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.GREATERTHANOREQUALTO, 0); }
	public GREATERTHAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.GREATERTHAN, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DIVIDE, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.MINUS, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.STAR, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.MOD, 0); }
	public DIV(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DIV, 0); }
	public AMPERSAND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.AMPERSAND, 0); }
	public TILDE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.TILDE, 0); }
	public BITWISEOR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.BITWISEOR, 0); }
	public BITWISEXOR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.BITWISEXOR, 0); }
	public KW_RLIKE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RLIKE, 0); }
	public KW_REGEXP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REGEXP, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IN, 0); }
	public KW_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BETWEEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_sysFuncNames; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSysFuncNames) {
			listener.enterSysFuncNames(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSysFuncNames) {
			listener.exitSysFuncNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSysFuncNames) {
			return visitor.visitSysFuncNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescFuncNamesContext extends ParserRuleContext {
	public sysFuncNames(): SysFuncNamesContext | undefined {
		return this.tryGetRuleContext(0, SysFuncNamesContext);
	}
	public StringLiteral(): TerminalNode | undefined { return this.tryGetToken(HiveParser.StringLiteral, 0); }
	public functionIdentifier(): FunctionIdentifierContext | undefined {
		return this.tryGetRuleContext(0, FunctionIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_descFuncNames; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterDescFuncNames) {
			listener.enterDescFuncNames(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitDescFuncNames) {
			listener.exitDescFuncNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDescFuncNames) {
			return visitor.visitDescFuncNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public Identifier(): TerminalNode | undefined { return this.tryGetToken(HiveParser.Identifier, 0); }
	public nonReserved(): NonReservedContext | undefined {
		return this.tryGetRuleContext(0, NonReservedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_identifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionIdentifierContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_functionIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterFunctionIdentifier) {
			listener.enterFunctionIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitFunctionIdentifier) {
			listener.exitFunctionIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFunctionIdentifier) {
			return visitor.visitFunctionIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrincipalIdentifierContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public QuotedIdentifier(): TerminalNode | undefined { return this.tryGetToken(HiveParser.QuotedIdentifier, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_principalIdentifier; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterPrincipalIdentifier) {
			listener.enterPrincipalIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitPrincipalIdentifier) {
			listener.exitPrincipalIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrincipalIdentifier) {
			return visitor.visitPrincipalIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NonReservedContext extends ParserRuleContext {
	public KW_ABORT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ABORT, 0); }
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ADD, 0); }
	public KW_ADMIN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ADMIN, 0); }
	public KW_AFTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AFTER, 0); }
	public KW_ANALYZE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ANALYZE, 0); }
	public KW_ARCHIVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ARCHIVE, 0); }
	public KW_ASC(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ASC, 0); }
	public KW_BEFORE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BEFORE, 0); }
	public KW_BUCKET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BUCKET, 0); }
	public KW_BUCKETS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BUCKETS, 0); }
	public KW_CASCADE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CASCADE, 0); }
	public KW_CHANGE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CHANGE, 0); }
	public KW_CHECK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CHECK, 0); }
	public KW_CLUSTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CLUSTER, 0); }
	public KW_CLUSTERED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CLUSTERED, 0); }
	public KW_CLUSTERSTATUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CLUSTERSTATUS, 0); }
	public KW_COLLECTION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLLECTION, 0); }
	public KW_COLUMNS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COLUMNS, 0); }
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMMENT, 0); }
	public KW_COMPACT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMPACT, 0); }
	public KW_COMPACTIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMPACTIONS, 0); }
	public KW_COMPUTE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_COMPUTE, 0); }
	public KW_CONCATENATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONCATENATE, 0); }
	public KW_CONTINUE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CONTINUE, 0); }
	public KW_DATA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATA, 0); }
	public KW_DAY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DAY, 0); }
	public KW_DATABASES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATABASES, 0); }
	public KW_DATETIME(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATETIME, 0); }
	public KW_DBPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DBPROPERTIES, 0); }
	public KW_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DEFERRED, 0); }
	public KW_DEFINED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DEFINED, 0); }
	public KW_DELIMITED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DELIMITED, 0); }
	public KW_DEPENDENCY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DEPENDENCY, 0); }
	public KW_DESC(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DESC, 0); }
	public KW_DIRECTORIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DIRECTORIES, 0); }
	public KW_DIRECTORY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DIRECTORY, 0); }
	public KW_DISABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DISABLE, 0); }
	public KW_DISTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DISTRIBUTE, 0); }
	public KW_DOW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DOW, 0); }
	public KW_ELEM_TYPE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ELEM_TYPE, 0); }
	public KW_ENABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ENABLE, 0); }
	public KW_ENFORCED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ENFORCED, 0); }
	public KW_ESCAPED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ESCAPED, 0); }
	public KW_EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXCLUSIVE, 0); }
	public KW_EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXPLAIN, 0); }
	public KW_EXPORT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXPORT, 0); }
	public KW_FIELDS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FIELDS, 0); }
	public KW_FILE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FILE, 0); }
	public KW_FILEFORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FILEFORMAT, 0); }
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FIRST, 0); }
	public KW_FORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FORMAT, 0); }
	public KW_FORMATTED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FORMATTED, 0); }
	public KW_FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FUNCTIONS, 0); }
	public KW_HOUR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_HOUR, 0); }
	public KW_IDXPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IDXPROPERTIES, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INDEX, 0); }
	public KW_INDEXES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INDEXES, 0); }
	public KW_INPATH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INPATH, 0); }
	public KW_INPUTDRIVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INPUTDRIVER, 0); }
	public KW_INPUTFORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INPUTFORMAT, 0); }
	public KW_ITEMS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ITEMS, 0); }
	public KW_JAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_JAR, 0); }
	public KW_KILL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_KILL, 0); }
	public KW_KEYS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_KEYS, 0); }
	public KW_KEY_TYPE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_KEY_TYPE, 0); }
	public KW_LAST(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LAST, 0); }
	public KW_LIMIT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LIMIT, 0); }
	public KW_OFFSET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OFFSET, 0); }
	public KW_LINES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LINES, 0); }
	public KW_LOAD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOAD, 0); }
	public KW_LOCATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCATION, 0); }
	public KW_LOCK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCK, 0); }
	public KW_LOCKS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOCKS, 0); }
	public KW_LOGICAL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LOGICAL, 0); }
	public KW_LONG(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LONG, 0); }
	public KW_MAPJOIN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MAPJOIN, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MATERIALIZED, 0); }
	public KW_METADATA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_METADATA, 0); }
	public KW_MINUTE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MINUTE, 0); }
	public KW_MONTH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MONTH, 0); }
	public KW_MSCK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MSCK, 0); }
	public KW_NOSCAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOSCAN, 0); }
	public KW_NULLS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NULLS, 0); }
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OPTION, 0); }
	public KW_OUTPUTDRIVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTPUTDRIVER, 0); }
	public KW_OUTPUTFORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OUTPUTFORMAT, 0); }
	public KW_OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OVERWRITE, 0); }
	public KW_OWNER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OWNER, 0); }
	public KW_PARTITIONED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PARTITIONED, 0); }
	public KW_PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PARTITIONS, 0); }
	public KW_PLUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PLUS, 0); }
	public KW_PRINCIPALS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PRINCIPALS, 0); }
	public KW_PURGE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PURGE, 0); }
	public KW_QUERY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_QUERY, 0); }
	public KW_QUARTER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_QUARTER, 0); }
	public KW_READ(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_READ, 0); }
	public KW_REBUILD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REBUILD, 0); }
	public KW_RECORDREADER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RECORDREADER, 0); }
	public KW_RECORDWRITER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RECORDWRITER, 0); }
	public KW_RELOAD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RELOAD, 0); }
	public KW_RENAME(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RENAME, 0); }
	public KW_REPAIR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REPAIR, 0); }
	public KW_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REPLACE, 0); }
	public KW_REPLICATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REPLICATION, 0); }
	public KW_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RESTRICT, 0); }
	public KW_REWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REWRITE, 0); }
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROLE, 0); }
	public KW_ROLES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ROLES, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMA, 0); }
	public KW_SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEMAS, 0); }
	public KW_SECOND(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SECOND, 0); }
	public KW_SEMI(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SEMI, 0); }
	public KW_SERDE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERDE, 0); }
	public KW_SERDEPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SERVER, 0); }
	public KW_SETS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SETS, 0); }
	public KW_SHARED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SHARED, 0); }
	public KW_SHOW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SHOW, 0); }
	public KW_SHOW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SHOW_DATABASE, 0); }
	public KW_SKEWED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SKEWED, 0); }
	public KW_SORT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SORT, 0); }
	public KW_SORTED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SORTED, 0); }
	public KW_SSL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SSL, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STATISTICS, 0); }
	public KW_STORED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STORED, 0); }
	public KW_STREAMTABLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STREAMTABLE, 0); }
	public KW_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STRING, 0); }
	public KW_STRUCT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STRUCT, 0); }
	public KW_TABLES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TABLES, 0); }
	public KW_TBLPROPERTIES(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TBLPROPERTIES, 0); }
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TEMPORARY, 0); }
	public KW_TERMINATED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TERMINATED, 0); }
	public KW_TINYINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TINYINT, 0); }
	public KW_TOUCH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TOUCH, 0); }
	public KW_TRANSACTIONS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TRANSACTIONS, 0); }
	public KW_UNARCHIVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNARCHIVE, 0); }
	public KW_UNDO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNDO, 0); }
	public KW_UNIONTYPE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNIONTYPE, 0); }
	public KW_UNLOCK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNLOCK, 0); }
	public KW_UNSET(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNSET, 0); }
	public KW_UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNSIGNED, 0); }
	public KW_URI(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_URI, 0); }
	public KW_USE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_USE, 0); }
	public KW_UTC(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UTC, 0); }
	public KW_UTCTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UTCTIMESTAMP, 0); }
	public KW_VALUE_TYPE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VALUE_TYPE, 0); }
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VIEW, 0); }
	public KW_WEEK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WEEK, 0); }
	public KW_WHILE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WHILE, 0); }
	public KW_YEAR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_YEAR, 0); }
	public KW_WORK(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WORK, 0); }
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TRANSACTION, 0); }
	public KW_WRITE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WRITE, 0); }
	public KW_ISOLATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ISOLATION, 0); }
	public KW_LEVEL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_LEVEL, 0); }
	public KW_SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SNAPSHOT, 0); }
	public KW_AUTOCOMMIT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_AUTOCOMMIT, 0); }
	public KW_RELY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RELY, 0); }
	public KW_NORELY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NORELY, 0); }
	public KW_VALIDATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VALIDATE, 0); }
	public KW_NOVALIDATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_NOVALIDATE, 0); }
	public KW_KEY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_KEY, 0); }
	public KW_MATCHED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MATCHED, 0); }
	public KW_REPL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REPL, 0); }
	public KW_DUMP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DUMP, 0); }
	public KW_STATUS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_STATUS, 0); }
	public KW_CACHE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CACHE, 0); }
	public KW_VIEWS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VIEWS, 0); }
	public KW_VECTORIZATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_VECTORIZATION, 0); }
	public KW_SUMMARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SUMMARY, 0); }
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_OPERATOR, 0); }
	public KW_EXPRESSION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_EXPRESSION, 0); }
	public KW_DETAIL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DETAIL, 0); }
	public KW_WAIT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WAIT, 0); }
	public KW_ZONE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ZONE, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DEFAULT, 0); }
	public KW_REOPTIMIZATION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_REOPTIMIZATION, 0); }
	public KW_RESOURCE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_RESOURCE, 0); }
	public KW_PLAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PLAN, 0); }
	public KW_PLANS(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PLANS, 0); }
	public KW_QUERY_PARALLELISM(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_QUERY_PARALLELISM, 0); }
	public KW_ACTIVATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ACTIVATE, 0); }
	public KW_MOVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MOVE, 0); }
	public KW_DO(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DO, 0); }
	public KW_POOL(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_POOL, 0); }
	public KW_ALLOC_FRACTION(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ALLOC_FRACTION, 0); }
	public KW_SCHEDULING_POLICY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SCHEDULING_POLICY, 0); }
	public KW_PATH(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_PATH, 0); }
	public KW_MAPPING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MAPPING, 0); }
	public KW_WORKLOAD(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_WORKLOAD, 0); }
	public KW_MANAGEMENT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MANAGEMENT, 0); }
	public KW_ACTIVE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ACTIVE, 0); }
	public KW_UNMANAGED(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_UNMANAGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_nonReserved; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterNonReserved) {
			listener.enterNonReserved(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitNonReserved) {
			listener.exitNonReserved(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitNonReserved) {
			return visitor.visitNonReserved(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sql11ReservedKeywordsUsedAsFunctionNameContext extends ParserRuleContext {
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_IF, 0); }
	public KW_ARRAY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_ARRAY, 0); }
	public KW_MAP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_MAP, 0); }
	public KW_BIGINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BIGINT, 0); }
	public KW_BINARY(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BINARY, 0); }
	public KW_BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_BOOLEAN, 0); }
	public KW_CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CURRENT_DATE, 0); }
	public KW_CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_CURRENT_TIMESTAMP, 0); }
	public KW_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DATE, 0); }
	public KW_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_DOUBLE, 0); }
	public KW_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_FLOAT, 0); }
	public KW_GROUPING(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_GROUPING, 0); }
	public KW_INT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_INT, 0); }
	public KW_SMALLINT(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_SMALLINT, 0); }
	public KW_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveParser.KW_TIMESTAMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName; }
	// @Override
	public enterRule(listener: HiveParserListener): void {
		if (listener.enterSql11ReservedKeywordsUsedAsFunctionName) {
			listener.enterSql11ReservedKeywordsUsedAsFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: HiveParserListener): void {
		if (listener.exitSql11ReservedKeywordsUsedAsFunctionName) {
			listener.exitSql11ReservedKeywordsUsedAsFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSql11ReservedKeywordsUsedAsFunctionName) {
			return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


